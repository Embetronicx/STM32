
USB_DEVICE_FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a38  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009c30  08009c30  00019c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca8  08009ca8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08009ca8  08009ca8  00019ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cb0  08009cb0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb0  08009cb0  00019cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cb4  08009cb4  00019cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b70  20000184  08009e3c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cf4  08009e3c  00020cf4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011604  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000395b  00000000  00000000  000317f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00035158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aec  00000000  00000000  00036030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3c4  00000000  00000000  00036b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001540c  00000000  00000000  00060ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0bd3  00000000  00000000  000762ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d7c  00000000  00000000  00166ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0016ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000184 	.word	0x20000184
 8000214:	00000000 	.word	0x00000000
 8000218:	08009c18 	.word	0x08009c18

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000188 	.word	0x20000188
 8000234:	08009c18 	.word	0x08009c18

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000538:	f000 f89c 	bl	8000674 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 f995 	bl	800086a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f806 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f872 	bl	800062c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000548:	f008 fbfc 	bl	8008d44 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x18>
	...

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f009 fabc 	bl	8009adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <SystemClock_Config+0xd4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a2a      	ldr	r2, [pc, #168]	; (8000624 <SystemClock_Config+0xd4>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <SystemClock_Config+0xd4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a25      	ldr	r2, [pc, #148]	; (8000628 <SystemClock_Config+0xd8>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005bc:	23d8      	movs	r3, #216	; 0xd8
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005c4:	2309      	movs	r3, #9
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 faf7 	bl	8002bc4 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005dc:	f000 f876 	bl	80006cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e0:	f002 faa0 	bl	8002b24 <HAL_PWREx_EnableOverDrive>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ea:	f000 f86f 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2107      	movs	r1, #7
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fd87 	bl	8003120 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000618:	f000 f858 	bl	80006cc <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_GPIO_Init+0x44>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <MX_GPIO_Init+0x44>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_GPIO_Init+0x44>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_GPIO_Init+0x44>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <MX_GPIO_Init+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_GPIO_Init+0x44>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000686:	f000 fa83 	bl	8000b90 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800068a:	2301      	movs	r3, #1
 800068c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800068e:	2300      	movs	r3, #0
 8000690:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000696:	231f      	movs	r3, #31
 8000698:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800069a:	2387      	movs	r3, #135	; 0x87
 800069c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800069e:	2300      	movs	r3, #0
 80006a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006a2:	2300      	movs	r3, #0
 80006a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006aa:	2301      	movs	r3, #1
 80006ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006b6:	463b      	mov	r3, r7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 faa1 	bl	8000c00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006be:	2004      	movs	r0, #4
 80006c0:	f000 fa7e 	bl	8000bc0 <HAL_MPU_Enable>

}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x44>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x44>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_MspInit+0x44>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_MspInit+0x44>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6453      	str	r3, [r2, #68]	; 0x44
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_MspInit+0x44>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f8ba 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <OTG_FS_IRQHandler+0x10>)
 800077a:	f001 f833 	bl	80017e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200006a4 	.word	0x200006a4

08000788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <_sbrk+0x5c>)
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <_sbrk+0x60>)
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <_sbrk+0x64>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <_sbrk+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d207      	bcs.n	80007c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b8:	f009 f9a8 	bl	8009b0c <__errno>
 80007bc:	4603      	mov	r3, r0
 80007be:	220c      	movs	r2, #12
 80007c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	e009      	b.n	80007dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <_sbrk+0x64>)
 80007d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20080000 	.word	0x20080000
 80007e8:	00000400 	.word	0x00000400
 80007ec:	200001a0 	.word	0x200001a0
 80007f0:	20000cf8 	.word	0x20000cf8

080007f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800081e:	490e      	ldr	r1, [pc, #56]	; (8000858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000834:	4c0b      	ldr	r4, [pc, #44]	; (8000864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000842:	f7ff ffd7 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f009 f967 	bl	8009b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fe73 	bl	8000534 <main>
  bx  lr    
 800084e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800085c:	08009cb8 	.word	0x08009cb8
  ldr r2, =_sbss
 8000860:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000864:	20000cf4 	.word	0x20000cf4

08000868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>

0800086a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086e:	2003      	movs	r0, #3
 8000870:	f000 f94c 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000874:	200f      	movs	r0, #15
 8000876:	f000 f805 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087a:	f7ff ff2d 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f967 	bl	8000b76 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f92f 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000008 	.word	0x20000008
 8000908:	200001a4 	.word	0x200001a4

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	200001a4 	.word	0x200001a4

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff ffee 	bl	800090c <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffde 	bl	800090c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <__NVIC_SetPriorityGrouping+0x40>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	4313      	orrs	r3, r2
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x40>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00
 80009b0:	05fa0000 	.word	0x05fa0000

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff29 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff3e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff8e 	bl	8000a60 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff31 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b94:	f3bf 8f5f 	dmb	sy
}
 8000b98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_MPU_Disable+0x28>)
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_MPU_Disable+0x28>)
 8000ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_MPU_Disable+0x2c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	e000ed90 	.word	0xe000ed90

08000bc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <HAL_MPU_Enable+0x38>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_MPU_Enable+0x3c>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_MPU_Enable+0x3c>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bde:	f3bf 8f4f 	dsb	sy
}
 8000be2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000be4:	f3bf 8f6f 	isb	sy
}
 8000be8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed90 	.word	0xe000ed90
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	785a      	ldrb	r2, [r3, #1]
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
 8000c0e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d029      	beq.n	8000c6c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000c18:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7b1b      	ldrb	r3, [r3, #12]
 8000c24:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7adb      	ldrb	r3, [r3, #11]
 8000c2a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7a9b      	ldrb	r3, [r3, #10]
 8000c32:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7b5b      	ldrb	r3, [r3, #13]
 8000c3a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7b9b      	ldrb	r3, [r3, #14]
 8000c42:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7bdb      	ldrb	r3, [r3, #15]
 8000c4a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7a5b      	ldrb	r3, [r3, #9]
 8000c52:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7a1b      	ldrb	r3, [r3, #8]
 8000c5a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c5c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c66:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c68:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000c6a:	e005      	b.n	8000c78 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed90 	.word	0xe000ed90

08000c88 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_FLASH_Program+0xb0>)
 8000c9c:	7d1b      	ldrb	r3, [r3, #20]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <HAL_FLASH_Program+0x1e>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e043      	b.n	8000d2e <HAL_FLASH_Program+0xa6>
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_FLASH_Program+0xb0>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cb0:	f000 f878 	bl	8000da4 <FLASH_WaitForLastOperation>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d133      	bne.n	8000d26 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d823      	bhi.n	8000d0c <HAL_FLASH_Program+0x84>
 8000cc4:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <HAL_FLASH_Program+0x44>)
 8000cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cca:	bf00      	nop
 8000ccc:	08000cdd 	.word	0x08000cdd
 8000cd0:	08000ce9 	.word	0x08000ce9
 8000cd4:	08000cf5 	.word	0x08000cf5
 8000cd8:	08000d01 	.word	0x08000d01
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8000cdc:	783b      	ldrb	r3, [r7, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	68b8      	ldr	r0, [r7, #8]
 8000ce2:	f000 f921 	bl	8000f28 <FLASH_Program_Byte>
        break;
 8000ce6:	e012      	b.n	8000d0e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000ce8:	883b      	ldrh	r3, [r7, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	68b8      	ldr	r0, [r7, #8]
 8000cee:	f000 f8f5 	bl	8000edc <FLASH_Program_HalfWord>
        break;
 8000cf2:	e00c      	b.n	8000d0e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f000 f8c9 	bl	8000e90 <FLASH_Program_Word>
        break;
 8000cfe:	e006      	b.n	8000d0e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8000d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d04:	68b8      	ldr	r0, [r7, #8]
 8000d06:	f000 f88d 	bl	8000e24 <FLASH_Program_DoubleWord>
        break;
 8000d0a:	e000      	b.n	8000d0e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8000d0c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d12:	f000 f847 	bl	8000da4 <FLASH_WaitForLastOperation>
 8000d16:	4603      	mov	r3, r0
 8000d18:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_FLASH_Program+0xb4>)
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_FLASH_Program+0xb4>)
 8000d20:	f023 0301 	bic.w	r3, r3, #1
 8000d24:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_FLASH_Program+0xb0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	751a      	strb	r2, [r3, #20]

  return status;
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001a8 	.word	0x200001a8
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_FLASH_Unlock+0x38>)
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da0b      	bge.n	8000d6a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_FLASH_Unlock+0x38>)
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <HAL_FLASH_Unlock+0x3c>)
 8000d56:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <HAL_FLASH_Unlock+0x38>)
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <HAL_FLASH_Unlock+0x40>)
 8000d5c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_FLASH_Unlock+0x38>)
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da01      	bge.n	8000d6a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40023c00 	.word	0x40023c00
 8000d7c:	45670123 	.word	0x45670123
 8000d80:	cdef89ab 	.word	0xcdef89ab

08000d84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_FLASH_Lock+0x1c>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_FLASH_Lock+0x1c>)
 8000d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d92:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <FLASH_WaitForLastOperation+0x78>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000db6:	f7ff fda9 	bl	800090c <HAL_GetTick>
 8000dba:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000dbc:	e010      	b.n	8000de0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d00c      	beq.n	8000de0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <FLASH_WaitForLastOperation+0x38>
 8000dcc:	f7ff fd9e 	bl	800090c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d201      	bcs.n	8000de0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e019      	b.n	8000e14 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <FLASH_WaitForLastOperation+0x7c>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1e8      	bne.n	8000dbe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <FLASH_WaitForLastOperation+0x7c>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000df8:	f000 f8ba 	bl	8000f70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e009      	b.n	8000e14 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <FLASH_WaitForLastOperation+0x7c>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <FLASH_WaitForLastOperation+0x7c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
  
}  
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200001a8 	.word	0x200001a8
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <FLASH_Program_DoubleWord+0x68>)
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <FLASH_Program_DoubleWord+0x68>)
 8000e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <FLASH_Program_DoubleWord+0x68>)
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <FLASH_Program_DoubleWord+0x68>)
 8000e42:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <FLASH_Program_DoubleWord+0x68>)
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <FLASH_Program_DoubleWord+0x68>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000e5a:	f3bf 8f6f 	isb	sy
}
 8000e5e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	000a      	movs	r2, r1
 8000e6e:	2300      	movs	r3, #0
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	3104      	adds	r1, #4
 8000e74:	4613      	mov	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e78:	f3bf 8f4f 	dsb	sy
}
 8000e7c:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <FLASH_Program_Word+0x48>)
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <FLASH_Program_Word+0x48>)
 8000ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ea4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <FLASH_Program_Word+0x48>)
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <FLASH_Program_Word+0x48>)
 8000eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <FLASH_Program_Word+0x48>)
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <FLASH_Program_Word+0x48>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec4:	f3bf 8f4f 	dsb	sy
}
 8000ec8:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <FLASH_Program_HalfWord+0x48>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <FLASH_Program_HalfWord+0x48>)
 8000eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <FLASH_Program_HalfWord+0x48>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <FLASH_Program_HalfWord+0x48>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <FLASH_Program_HalfWord+0x48>)
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <FLASH_Program_HalfWord+0x48>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
}
 8000f16:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <FLASH_Program_Byte+0x44>)
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <FLASH_Program_Byte+0x44>)
 8000f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <FLASH_Program_Byte+0x44>)
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <FLASH_Program_Byte+0x44>)
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <FLASH_Program_Byte+0x44>)
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <FLASH_Program_Byte+0x44>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5a:	f3bf 8f4f 	dsb	sy
}
 8000f5e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <FLASH_SetErrorCode+0x8c>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000f8a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <FLASH_SetErrorCode+0x8c>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000fa2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <FLASH_SetErrorCode+0x8c>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f003 0320 	and.w	r3, r3, #32
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	4a11      	ldr	r2, [pc, #68]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000fba:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <FLASH_SetErrorCode+0x8c>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000fd2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <FLASH_SetErrorCode+0x8c>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	4a05      	ldr	r2, [pc, #20]	; (8001000 <FLASH_SetErrorCode+0x90>)
 8000fea:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <FLASH_SetErrorCode+0x8c>)
 8000fee:	22f2      	movs	r2, #242	; 0xf2
 8000ff0:	60da      	str	r2, [r3, #12]
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023c00 	.word	0x40023c00
 8001000:	200001a8 	.word	0x200001a8

08001004 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001016:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_FLASHEx_Erase+0xd4>)
 8001018:	7d1b      	ldrb	r3, [r3, #20]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_FLASHEx_Erase+0x1e>
 800101e:	2302      	movs	r3, #2
 8001020:	e056      	b.n	80010d0 <HAL_FLASHEx_Erase+0xcc>
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_FLASHEx_Erase+0xd4>)
 8001024:	2201      	movs	r2, #1
 8001026:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800102c:	f7ff feba 	bl	8000da4 <FLASH_WaitForLastOperation>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d146      	bne.n	80010c8 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d115      	bne.n	8001076 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4619      	mov	r1, r3
 8001056:	4610      	mov	r0, r2
 8001058:	f000 f844 	bl	80010e4 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800105c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001060:	f7ff fea0 	bl	8000da4 <FLASH_WaitForLastOperation>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_FLASHEx_Erase+0xd8>)
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	491b      	ldr	r1, [pc, #108]	; (80010dc <HAL_FLASHEx_Erase+0xd8>)
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_FLASHEx_Erase+0xdc>)
 8001070:	4013      	ands	r3, r2
 8001072:	610b      	str	r3, [r1, #16]
 8001074:	e028      	b.n	80010c8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	e01c      	b.n	80010b8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f000 f868 	bl	800115c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800108c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001090:	f7ff fe88 	bl	8000da4 <FLASH_WaitForLastOperation>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_FLASHEx_Erase+0xd8>)
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <HAL_FLASHEx_Erase+0xd8>)
 800109e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80010a2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	601a      	str	r2, [r3, #0]
          break;
 80010b0:	e00a      	b.n	80010c8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3da      	bcc.n	800107e <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_FLASHEx_Erase+0xd4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	751a      	strb	r2, [r3, #20]

  return status;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001a8 	.word	0x200001a8
 80010dc:	40023c00 	.word	0x40023c00
 80010e0:	ffff7ffb 	.word	0xffff7ffb

080010e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <FLASH_MassErase+0x74>)
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4a18      	ldr	r2, [pc, #96]	; (8001158 <FLASH_MassErase+0x74>)
 80010f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010fa:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d107      	bne.n	8001112 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <FLASH_MassErase+0x74>)
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	4914      	ldr	r1, [pc, #80]	; (8001158 <FLASH_MassErase+0x74>)
 8001108:	f248 0304 	movw	r3, #32772	; 0x8004
 800110c:	4313      	orrs	r3, r2
 800110e:	610b      	str	r3, [r1, #16]
 8001110:	e00f      	b.n	8001132 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d106      	bne.n	8001126 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <FLASH_MassErase+0x74>)
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <FLASH_MassErase+0x74>)
 800111e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001122:	6113      	str	r3, [r2, #16]
 8001124:	e005      	b.n	8001132 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <FLASH_MassErase+0x74>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <FLASH_MassErase+0x74>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <FLASH_MassErase+0x74>)
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	4313      	orrs	r3, r2
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <FLASH_MassErase+0x74>)
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8001144:	f3bf 8f4f 	dsb	sy
}
 8001148:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00

0800115c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e010      	b.n	800119a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d103      	bne.n	8001186 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800117e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e009      	b.n	800119a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d103      	bne.n	8001194 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800118c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e002      	b.n	800119a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001194:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001198:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0b      	cmp	r3, #11
 800119e:	d902      	bls.n	80011a6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3304      	adds	r3, #4
 80011a4:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	4911      	ldr	r1, [pc, #68]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <FLASH_Erase_Sector+0xa0>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80011e8:	f3bf 8f4f 	dsb	sy
}
 80011ec:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e175      	b.n	800150c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 8164 	bne.w	8001506 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x56>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80be 	beq.w	8001506 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b66      	ldr	r3, [pc, #408]	; (8001524 <HAL_GPIO_Init+0x324>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a65      	ldr	r2, [pc, #404]	; (8001524 <HAL_GPIO_Init+0x324>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_GPIO_Init+0x324>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013a2:	4a61      	ldr	r2, [pc, #388]	; (8001528 <HAL_GPIO_Init+0x328>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_GPIO_Init+0x32c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d037      	beq.n	800143e <HAL_GPIO_Init+0x23e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a57      	ldr	r2, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x330>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d031      	beq.n	800143a <HAL_GPIO_Init+0x23a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a56      	ldr	r2, [pc, #344]	; (8001534 <HAL_GPIO_Init+0x334>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02b      	beq.n	8001436 <HAL_GPIO_Init+0x236>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a55      	ldr	r2, [pc, #340]	; (8001538 <HAL_GPIO_Init+0x338>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_Init+0x232>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a54      	ldr	r2, [pc, #336]	; (800153c <HAL_GPIO_Init+0x33c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_Init+0x22e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a53      	ldr	r2, [pc, #332]	; (8001540 <HAL_GPIO_Init+0x340>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x22a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_GPIO_Init+0x344>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x226>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a51      	ldr	r2, [pc, #324]	; (8001548 <HAL_GPIO_Init+0x348>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x222>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a50      	ldr	r2, [pc, #320]	; (800154c <HAL_GPIO_Init+0x34c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x21e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <HAL_GPIO_Init+0x350>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x21a>
 8001416:	2309      	movs	r3, #9
 8001418:	e012      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800141a:	230a      	movs	r3, #10
 800141c:	e010      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800141e:	2308      	movs	r3, #8
 8001420:	e00e      	b.n	8001440 <HAL_GPIO_Init+0x240>
 8001422:	2307      	movs	r3, #7
 8001424:	e00c      	b.n	8001440 <HAL_GPIO_Init+0x240>
 8001426:	2306      	movs	r3, #6
 8001428:	e00a      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800142a:	2305      	movs	r3, #5
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800142e:	2304      	movs	r3, #4
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x240>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x240>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x240>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x328>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_GPIO_Init+0x354>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a34      	ldr	r2, [pc, #208]	; (8001554 <HAL_GPIO_Init+0x354>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b32      	ldr	r3, [pc, #200]	; (8001554 <HAL_GPIO_Init+0x354>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <HAL_GPIO_Init+0x354>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_GPIO_Init+0x354>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <HAL_GPIO_Init+0x354>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_GPIO_Init+0x354>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_GPIO_Init+0x354>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f ae86 	bls.w	8001220 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40021400 	.word	0x40021400
 8001544:	40021800 	.word	0x40021800
 8001548:	40021c00 	.word	0x40021c00
 800154c:	40022000 	.word	0x40022000
 8001550:	40022400 	.word	0x40022400
 8001554:	40013c00 	.word	0x40013c00

08001558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b08f      	sub	sp, #60	; 0x3c
 800155c:	af0a      	add	r7, sp, #40	; 0x28
 800155e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e116      	b.n	8001798 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d106      	bne.n	800158a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f007 fe5f 	bl	8009248 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fcea 	bl	8003f82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	687e      	ldr	r6, [r7, #4]
 80015b6:	466d      	mov	r5, sp
 80015b8:	f106 0410 	add.w	r4, r6, #16
 80015bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80015cc:	1d33      	adds	r3, r6, #4
 80015ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d0:	6838      	ldr	r0, [r7, #0]
 80015d2:	f002 fbcb 	bl	8003d6c <USB_CoreInit>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0d7      	b.n	8001798 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fcd8 	bl	8003fa4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e04a      	b.n	8001690 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	333d      	adds	r3, #61	; 0x3d
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	333c      	adds	r3, #60	; 0x3c
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	b298      	uxth	r0, r3
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3344      	adds	r3, #68	; 0x44
 8001636:	4602      	mov	r2, r0
 8001638:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3340      	adds	r3, #64	; 0x40
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	3348      	adds	r3, #72	; 0x48
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	334c      	adds	r3, #76	; 0x4c
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	3354      	adds	r3, #84	; 0x54
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	3301      	adds	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3af      	bcc.n	80015fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e044      	b.n	800172a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	3301      	adds	r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	d3b5      	bcc.n	80016a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	687e      	ldr	r6, [r7, #4]
 800173c:	466d      	mov	r5, sp
 800173e:	f106 0410 	add.w	r4, r6, #16
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001752:	1d33      	adds	r3, r6, #4
 8001754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001756:	6838      	ldr	r0, [r7, #0]
 8001758:	f002 fc70 	bl	800403c <USB_DevInit>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e014      	b.n	8001798 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	2b01      	cmp	r3, #1
 8001784:	d102      	bne.n	800178c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f001 f9a8 	bl	8002adc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fdbe 	bl	8005312 <USB_DevDisconnect>

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_PCD_Start+0x16>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e012      	b.n	80017dc <HAL_PCD_Start+0x3c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fbcc 	bl	8003f60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 fd7f 	bl	80052d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08d      	sub	sp, #52	; 0x34
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fe3d 	bl	800547a <USB_GetMode>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 84b7 	bne.w	8002176 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fda1 	bl	8005354 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 84ad 	beq.w	8002174 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fd8e 	bl	8005354 <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f002 0202 	and.w	r2, r2, #2
 8001850:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fd7c 	bl	8005354 <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b10      	cmp	r3, #16
 8001864:	d161      	bne.n	800192a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0210 	bic.w	r2, r2, #16
 8001874:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	3304      	adds	r3, #4
 8001894:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	0c5b      	lsrs	r3, r3, #17
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d124      	bne.n	80018ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d035      	beq.n	800191a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	6a38      	ldr	r0, [r7, #32]
 80018c2:	f003 fbb3 	bl	800502c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d2:	441a      	add	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	6a1a      	ldr	r2, [r3, #32]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018e4:	441a      	add	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	621a      	str	r2, [r3, #32]
 80018ea:	e016      	b.n	800191a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	0c5b      	lsrs	r3, r3, #17
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	2b06      	cmp	r3, #6
 80018f6:	d110      	bne.n	800191a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018fe:	2208      	movs	r2, #8
 8001900:	4619      	mov	r1, r3
 8001902:	6a38      	ldr	r0, [r7, #32]
 8001904:	f003 fb92 	bl	800502c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001914:	441a      	add	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0210 	orr.w	r2, r2, #16
 8001928:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fd10 	bl	8005354 <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800193a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800193e:	f040 80a7 	bne.w	8001a90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fd15 	bl	800537a <USB_ReadDevAllOutEpInterrupt>
 8001950:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001952:	e099      	b.n	8001a88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 808e 	beq.w	8001a7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fd39 	bl	80053e2 <USB_ReadDevOutEPInterrupt>
 8001970:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00c      	beq.n	8001996 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	015a      	lsls	r2, r3, #5
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	4413      	add	r3, r2
 8001984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001988:	461a      	mov	r2, r3
 800198a:	2301      	movs	r3, #1
 800198c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800198e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 ff1d 	bl	80027d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ac:	461a      	mov	r2, r3
 80019ae:	2308      	movs	r3, #8
 80019b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fff3 	bl	80029a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d0:	461a      	mov	r2, r3
 80019d2:	2310      	movs	r3, #16
 80019d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d030      	beq.n	8001a42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e8:	2b80      	cmp	r3, #128	; 0x80
 80019ea:	d109      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	3304      	adds	r3, #4
 8001a14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	78db      	ldrb	r3, [r3, #3]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4619      	mov	r1, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f007 fd30 	bl	8009490 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2302      	movs	r3, #2
 8001a40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	015a      	lsls	r2, r3, #5
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a74:	461a      	mov	r2, r3
 8001a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	3301      	adds	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f47f af62 	bne.w	8001954 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fc5d 	bl	8005354 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001aa4:	f040 80db 	bne.w	8001c5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fc7e 	bl	80053ae <USB_ReadDevAllInEpInterrupt>
 8001ab2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ab8:	e0cd      	b.n	8001c56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80c2 	beq.w	8001c4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fca4 	bl	800541e <USB_ReadDevInEPInterrupt>
 8001ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d057      	beq.n	8001b92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	2201      	movs	r2, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69f9      	ldr	r1, [r7, #28]
 8001afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b02:	4013      	ands	r3, r2
 8001b04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b12:	461a      	mov	r2, r3
 8001b14:	2301      	movs	r3, #1
 8001b16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d132      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	334c      	adds	r3, #76	; 0x4c
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4403      	add	r3, r0
 8001b40:	3348      	adds	r3, #72	; 0x48
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4419      	add	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4403      	add	r3, r0
 8001b54:	334c      	adds	r3, #76	; 0x4c
 8001b56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d113      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x3a2>
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3354      	adds	r3, #84	; 0x54
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d108      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2101      	movs	r1, #1
 8001b82:	f003 fcad 	bl	80054e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f007 fbfa 	bl	8009386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2308      	movs	r3, #8
 8001bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2310      	movs	r3, #16
 8001bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be0:	461a      	mov	r2, r3
 8001be2:	2340      	movs	r3, #64	; 0x40
 8001be4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d023      	beq.n	8001c38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf2:	6a38      	ldr	r0, [r7, #32]
 8001bf4:	f002 fb80 	bl	80042f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	3338      	adds	r3, #56	; 0x38
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	3304      	adds	r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	78db      	ldrb	r3, [r3, #3]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d108      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2200      	movs	r2, #0
 8001c18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f007 fc47 	bl	80094b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c32:	461a      	mov	r2, r3
 8001c34:	2302      	movs	r3, #2
 8001c36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fd35 	bl	80026b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f47f af2e 	bne.w	8001aba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fb76 	bl	8005354 <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c72:	d122      	bne.n	8001cba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f007 fde1 	bl	8009864 <HAL_PCDEx_LPM_Callback>
 8001ca2:	e002      	b.n	8001caa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f007 fbe5 	bl	8009474 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fb48 	bl	8005354 <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cce:	d112      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d102      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f007 fba1 	bl	8009428 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fb2a 	bl	8005354 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d0a:	d121      	bne.n	8001d50 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001d1a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d111      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	f003 020f 	and.w	r2, r3, #15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d40:	2101      	movs	r1, #1
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f007 fd8e 	bl	8009864 <HAL_PCDEx_LPM_Callback>
 8001d48:	e002      	b.n	8001d50 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f007 fb6c 	bl	8009428 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 fafd 	bl	8005354 <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d64:	f040 80b7 	bne.w	8001ed6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2110      	movs	r1, #16
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fab8 	bl	80042f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8c:	e046      	b.n	8001e1c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001da0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db2:	0151      	lsls	r1, r2, #5
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	440a      	add	r2, r1
 8001db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de6:	0151      	lsls	r1, r2, #5
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	440a      	add	r2, r1
 8001dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001df0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001df4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e06:	0151      	lsls	r1, r2, #5
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	440a      	add	r2, r1
 8001e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	3301      	adds	r3, #1
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3b3      	bcc.n	8001d8e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d016      	beq.n	8001e70 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e52:	f043 030b 	orr.w	r3, r3, #11
 8001e56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e68:	f043 030b 	orr.w	r3, r3, #11
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	e015      	b.n	8001e9c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f242 032b 	movw	r3, #8235	; 0x202b
 8001e84:	4313      	orrs	r3, r2
 8001e86:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e96:	f043 030b 	orr.w	r3, r3, #11
 8001e9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001eae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f003 fb0d 	bl	80054e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fa3a 	bl	8005354 <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eea:	d124      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fad1 	bl	8005498 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 fa79 	bl	80043f2 <USB_GetDevSpeed>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681c      	ldr	r4, [r3, #0]
 8001f0c:	f001 fafa 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8001f10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f001 ff7e 	bl	8003e1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f007 fa58 	bl	80093d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fa0a 	bl	8005354 <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d10a      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f007 fa35 	bl	80093ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f002 0208 	and.w	r2, r2, #8
 8001f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 f9f5 	bl	8005354 <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d122      	bne.n	8001fba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f80:	2301      	movs	r3, #1
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
 8001f84:	e014      	b.n	8001fb0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fb27 	bl	80025f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	3301      	adds	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d3e5      	bcc.n	8001f86 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 f9c8 	bl	8005354 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fce:	d13b      	bne.n	8002048 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	e02b      	b.n	800202e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3340      	adds	r3, #64	; 0x40
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d115      	bne.n	8002028 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ffc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da12      	bge.n	8002028 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	333f      	adds	r3, #63	; 0x3f
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fae8 	bl	80025f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	3301      	adds	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002034:	429a      	cmp	r2, r3
 8002036:	d3ce      	bcc.n	8001fd6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 f981 	bl	8005354 <USB_ReadInterrupts>
 8002052:	4603      	mov	r3, r0
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800205c:	d155      	bne.n	800210a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800205e:	2301      	movs	r3, #1
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
 8002062:	e045      	b.n	80020f0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4413      	add	r3, r2
 800206c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d12e      	bne.n	80020ea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800208c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	da2b      	bge.n	80020ea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800209e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d121      	bne.n	80020ea <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e6:	6053      	str	r3, [r2, #4]
            break;
 80020e8:	e007      	b.n	80020fa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3b4      	bcc.n	8002064 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 f920 	bl	8005354 <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d10a      	bne.n	8002136 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f007 f9d9 	bl	80094d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 f90a 	bl	8005354 <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b04      	cmp	r3, #4
 8002148:	d115      	bne.n	8002176 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f007 f9c9 	bl	80094f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	e000      	b.n	8002176 <HAL_PCD_IRQHandler+0x992>
      return;
 8002174:	bf00      	nop
    }
  }
}
 8002176:	3734      	adds	r7, #52	; 0x34
 8002178:	46bd      	mov	sp, r7
 800217a:	bd90      	pop	{r4, r7, pc}

0800217c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_PCD_SetAddress+0x1a>
 8002192:	2302      	movs	r3, #2
 8002194:	e013      	b.n	80021be <HAL_PCD_SetAddress+0x42>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f003 f868 	bl	8005284 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	4608      	mov	r0, r1
 80021d0:	4611      	mov	r1, r2
 80021d2:	461a      	mov	r2, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	70fb      	strb	r3, [r7, #3]
 80021d8:	460b      	mov	r3, r1
 80021da:	803b      	strh	r3, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da0f      	bge.n	800220c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	f003 020f 	and.w	r2, r3, #15
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	3338      	adds	r3, #56	; 0x38
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	705a      	strb	r2, [r3, #1]
 800220a:	e00f      	b.n	800222c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	f003 020f 	and.w	r2, r3, #15
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002238:	883a      	ldrh	r2, [r7, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	78ba      	ldrb	r2, [r7, #2]
 8002242:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002256:	78bb      	ldrb	r3, [r7, #2]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d102      	bne.n	8002262 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_PCD_EP_Open+0xaa>
 800226c:	2302      	movs	r3, #2
 800226e:	e00e      	b.n	800228e <HAL_PCD_EP_Open+0xc8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	4618      	mov	r0, r3
 8002280:	f002 f8dc 	bl	800443c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800228c:	7afb      	ldrb	r3, [r7, #11]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da0f      	bge.n	80022ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	3338      	adds	r3, #56	; 0x38
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	705a      	strb	r2, [r3, #1]
 80022c8:	e00f      	b.n	80022ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_PCD_EP_Close+0x6e>
 8002300:	2302      	movs	r3, #2
 8002302:	e00e      	b.n	8002322 <HAL_PCD_EP_Close+0x8c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	4618      	mov	r0, r3
 8002314:	f002 f91a 	bl	800454c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	460b      	mov	r3, r1
 8002338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	f003 020f 	and.w	r2, r3, #15
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	3304      	adds	r3, #4
 8002352:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2200      	movs	r2, #0
 8002364:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2200      	movs	r2, #0
 800236a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	b2da      	uxtb	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d102      	bne.n	8002386 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002386:	7afb      	ldrb	r3, [r7, #11]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6979      	ldr	r1, [r7, #20]
 800239e:	f002 fc01 	bl	8004ba4 <USB_EP0StartXfer>
 80023a2:	e008      	b.n	80023b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	f002 f9a7 	bl	8004704 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 020f 	and.w	r2, r3, #15
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	460b      	mov	r3, r1
 80023fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002400:	7afb      	ldrb	r3, [r7, #11]
 8002402:	f003 020f 	and.w	r2, r3, #15
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	3338      	adds	r3, #56	; 0x38
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	3304      	adds	r3, #4
 8002416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2201      	movs	r2, #1
 800242e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002430:	7afb      	ldrb	r3, [r7, #11]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	b2da      	uxtb	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800244a:	7afb      	ldrb	r3, [r7, #11]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	6979      	ldr	r1, [r7, #20]
 8002462:	f002 fb9f 	bl	8004ba4 <USB_EP0StartXfer>
 8002466:	e008      	b.n	800247a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	6979      	ldr	r1, [r7, #20]
 8002476:	f002 f945 	bl	8004704 <USB_EPStartXfer>
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d901      	bls.n	80024a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e050      	b.n	8002544 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da0f      	bge.n	80024ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f003 020f 	and.w	r2, r3, #15
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3338      	adds	r3, #56	; 0x38
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	705a      	strb	r2, [r3, #1]
 80024c8:	e00d      	b.n	80024e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_PCD_EP_SetStall+0x82>
 8002502:	2302      	movs	r3, #2
 8002504:	e01e      	b.n	8002544 <HAL_PCD_EP_SetStall+0xc0>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68f9      	ldr	r1, [r7, #12]
 8002514:	4618      	mov	r0, r3
 8002516:	f002 fde1 	bl	80050dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	b2d9      	uxtb	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002534:	461a      	mov	r2, r3
 8002536:	f002 ffd3 	bl	80054e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	d901      	bls.n	800256a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e042      	b.n	80025f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800256a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800256e:	2b00      	cmp	r3, #0
 8002570:	da0f      	bge.n	8002592 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	3338      	adds	r3, #56	; 0x38
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	3304      	adds	r3, #4
 8002588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	705a      	strb	r2, [r3, #1]
 8002590:	e00f      	b.n	80025b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 020f 	and.w	r2, r3, #15
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	3304      	adds	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_PCD_EP_ClrStall+0x86>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e00e      	b.n	80025f0 <HAL_PCD_EP_ClrStall+0xa4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 fde9 	bl	80051b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002608:	2b00      	cmp	r3, #0
 800260a:	da0c      	bge.n	8002626 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	f003 020f 	and.w	r2, r3, #15
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	3338      	adds	r3, #56	; 0x38
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	3304      	adds	r3, #4
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e00c      	b.n	8002640 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 020f 	and.w	r2, r3, #15
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	3304      	adds	r3, #4
 800263e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fc08 	bl	8004e5c <USB_EPStopXfer>
 800264c:	4603      	mov	r3, r0
 800264e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002650:	7afb      	ldrb	r3, [r7, #11]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_PCD_EP_Flush+0x1a>
 8002670:	2302      	movs	r3, #2
 8002672:	e01b      	b.n	80026ac <HAL_PCD_EP_Flush+0x52>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800267c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002680:	2b00      	cmp	r3, #0
 8002682:	da09      	bge.n	8002698 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f001 fe31 	bl	80042f8 <USB_FlushTxFifo>
 8002696:	e004      	b.n	80026a2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f001 fe5f 	bl	8004360 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	3338      	adds	r3, #56	; 0x38
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d901      	bls.n	80026ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e06c      	b.n	80027c6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d902      	bls.n	8002708 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	3303      	adds	r3, #3
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002710:	e02b      	b.n	800276a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	429a      	cmp	r2, r3
 8002726:	d902      	bls.n	800272e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3303      	adds	r3, #3
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002746:	b2db      	uxtb	r3, r3
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	4603      	mov	r3, r0
 800274c:	6978      	ldr	r0, [r7, #20]
 800274e:	f002 fc2f 	bl	8004fb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	441a      	add	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	441a      	add	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	429a      	cmp	r2, r3
 800277e:	d809      	bhi.n	8002794 <PCD_WriteEmptyTxFifo+0xe0>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a1a      	ldr	r2, [r3, #32]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002788:	429a      	cmp	r2, r3
 800278a:	d203      	bcs.n	8002794 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1be      	bne.n	8002712 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	429a      	cmp	r2, r3
 800279e:	d811      	bhi.n	80027c4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	2201      	movs	r2, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	6939      	ldr	r1, [r7, #16]
 80027bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027c0:	4013      	ands	r3, r2
 80027c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	333c      	adds	r3, #60	; 0x3c
 80027e8:	3304      	adds	r3, #4
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d17b      	bne.n	80028fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	4a61      	ldr	r2, [pc, #388]	; (8002998 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	f240 80b9 	bls.w	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80b3 	beq.w	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002832:	461a      	mov	r2, r3
 8002834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002838:	6093      	str	r3, [r2, #8]
 800283a:	e0a7      	b.n	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002852:	461a      	mov	r2, r3
 8002854:	2320      	movs	r3, #32
 8002856:	6093      	str	r3, [r2, #8]
 8002858:	e098      	b.n	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	f040 8093 	bne.w	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d90f      	bls.n	800288e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002884:	461a      	mov	r2, r3
 8002886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288a:	6093      	str	r3, [r2, #8]
 800288c:	e07e      	b.n	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	0159      	lsls	r1, r3, #5
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	440b      	add	r3, r1
 80028b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	1ad2      	subs	r2, r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d114      	bne.n	80028f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028d8:	461a      	mov	r2, r3
 80028da:	2101      	movs	r1, #1
 80028dc:	f002 fe00 	bl	80054e0 <USB_EP0_OutStart>
 80028e0:	e006      	b.n	80028f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	441a      	add	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f006 fd2a 	bl	8009350 <HAL_PCD_DataOutStageCallback>
 80028fc:	e046      	b.n	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	4a26      	ldr	r2, [pc, #152]	; (800299c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d124      	bne.n	8002950 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291c:	461a      	mov	r2, r3
 800291e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002922:	6093      	str	r3, [r2, #8]
 8002924:	e032      	b.n	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293c:	461a      	mov	r2, r3
 800293e:	2320      	movs	r3, #32
 8002940:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f006 fd01 	bl	8009350 <HAL_PCD_DataOutStageCallback>
 800294e:	e01d      	b.n	800298c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d114      	bne.n	8002980 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d108      	bne.n	8002980 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002978:	461a      	mov	r2, r3
 800297a:	2100      	movs	r1, #0
 800297c:	f002 fdb0 	bl	80054e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f006 fce2 	bl	8009350 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	4f54300a 	.word	0x4f54300a
 800299c:	4f54310a 	.word	0x4f54310a

080029a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	333c      	adds	r3, #60	; 0x3c
 80029b8:	3304      	adds	r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <PCD_EP_OutSetupPacket_int+0x88>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d90e      	bls.n	80029f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ec:	461a      	mov	r2, r3
 80029ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f006 fc99 	bl	800932c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <PCD_EP_OutSetupPacket_int+0x88>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d90c      	bls.n	8002a1c <PCD_EP_OutSetupPacket_int+0x7c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a14:	461a      	mov	r2, r3
 8002a16:	2101      	movs	r1, #1
 8002a18:	f002 fd62 	bl	80054e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	4f54300a 	.word	0x4f54300a

08002a2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a4a:	883b      	ldrh	r3, [r7, #0]
 8002a4c:	0419      	lsls	r1, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
 8002a58:	e028      	b.n	8002aac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4413      	add	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e00d      	b.n	8002a8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	3340      	adds	r3, #64	; 0x40
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4413      	add	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	3301      	adds	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3ec      	bcc.n	8002a6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a94:	883b      	ldrh	r3, [r7, #0]
 8002a96:	0418      	lsls	r0, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	4302      	orrs	r2, r0
 8002aa4:	3340      	adds	r3, #64	; 0x40
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	10000003 	.word	0x10000003

08002b24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b52:	f7fd fedb 	bl	800090c <HAL_GetTick>
 8002b56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b58:	e009      	b.n	8002b6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b5a:	f7fd fed7 	bl	800090c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b68:	d901      	bls.n	8002b6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e022      	b.n	8002bb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b88:	f7fd fec0 	bl	800090c <HAL_GetTick>
 8002b8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b8e:	e009      	b.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b90:	f7fd febc 	bl	800090c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b9e:	d901      	bls.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e007      	b.n	8002bb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb0:	d1ee      	bne.n	8002b90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000

08002bc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e29b      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8087 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be8:	4b96      	ldr	r3, [pc, #600]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d00c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf4:	4b93      	ldr	r3, [pc, #588]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d112      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62>
 8002c00:	4b90      	ldr	r3, [pc, #576]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0c:	d10b      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0e:	4b8d      	ldr	r3, [pc, #564]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d06c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x130>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d168      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e275      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7a>
 8002c30:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a83      	ldr	r2, [pc, #524]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	e02e      	b.n	8002c9c <HAL_RCC_OscConfig+0xd8>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x9c>
 8002c46:	4b7f      	ldr	r3, [pc, #508]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7e      	ldr	r2, [pc, #504]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b7c      	ldr	r3, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7b      	ldr	r2, [pc, #492]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e01d      	b.n	8002c9c <HAL_RCC_OscConfig+0xd8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0xc0>
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b73      	ldr	r3, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a72      	ldr	r2, [pc, #456]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xd8>
 8002c84:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6b      	ldr	r2, [pc, #428]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fd fe32 	bl	800090c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fd fe2e 	bl	800090c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e229      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0xe8>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fd fe1e 	bl	800090c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fd fe1a 	bl	800090c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e215      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x110>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d069      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d02:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d11c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x190>
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x17a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1e9      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	493d      	ldr	r1, [pc, #244]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	e040      	b.n	8002dd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d023      	beq.n	8002da4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5c:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a38      	ldr	r2, [pc, #224]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fd fdd0 	bl	800090c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fd fdcc 	bl	800090c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1c7      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4929      	ldr	r1, [pc, #164]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
 8002da2:	e018      	b.n	8002dd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fd fdac 	bl	800090c <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db8:	f7fd fda8 	bl	800090c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1a3      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d038      	beq.n	8002e54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d019      	beq.n	8002e1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fd fd89 	bl	800090c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fd fd85 	bl	800090c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e180      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x23a>
 8002e1c:	e01a      	b.n	8002e54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fd fd6f 	bl	800090c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e32:	f7fd fd6b 	bl	800090c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d903      	bls.n	8002e48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e166      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
 8002e44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ee      	bne.n	8002e32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a4 	beq.w	8002faa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e62:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	4b89      	ldr	r3, [pc, #548]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a88      	ldr	r2, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7a:	4b86      	ldr	r3, [pc, #536]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8a:	4b83      	ldr	r3, [pc, #524]	; (8003098 <HAL_RCC_OscConfig+0x4d4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d118      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e96:	4b80      	ldr	r3, [pc, #512]	; (8003098 <HAL_RCC_OscConfig+0x4d4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7f      	ldr	r2, [pc, #508]	; (8003098 <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea2:	f7fd fd33 	bl	800090c <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eaa:	f7fd fd2f 	bl	800090c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b64      	cmp	r3, #100	; 0x64
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e12a      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x4d4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x31a>
 8002ed0:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a6f      	ldr	r2, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	e02d      	b.n	8002f3a <HAL_RCC_OscConfig+0x376>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x33c>
 8002ee6:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a6a      	ldr	r2, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	4b68      	ldr	r3, [pc, #416]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
 8002efe:	e01c      	b.n	8002f3a <HAL_RCC_OscConfig+0x376>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x35e>
 8002f08:	4b62      	ldr	r3, [pc, #392]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a61      	ldr	r2, [pc, #388]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	4b5f      	ldr	r3, [pc, #380]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4a5e      	ldr	r2, [pc, #376]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f20:	e00b      	b.n	8002f3a <HAL_RCC_OscConfig+0x376>
 8002f22:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a5b      	ldr	r2, [pc, #364]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2e:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d015      	beq.n	8002f6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fd fce3 	bl	800090c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fd fcdf 	bl	800090c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0d8      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0ee      	beq.n	8002f4a <HAL_RCC_OscConfig+0x386>
 8002f6c:	e014      	b.n	8002f98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fd fccd 	bl	800090c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fd fcc9 	bl	800090c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0c2      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ee      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d105      	bne.n	8002faa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a3c      	ldr	r2, [pc, #240]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80ae 	beq.w	8003110 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb4:	4b37      	ldr	r3, [pc, #220]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d06d      	beq.n	800309c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d14b      	bne.n	8003060 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a31      	ldr	r2, [pc, #196]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fd fc9a 	bl	800090c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fd fc96 	bl	800090c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e091      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	3b01      	subs	r3, #1
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	491b      	ldr	r1, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fd fc68 	bl	800090c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fd fc64 	bl	800090c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e05f      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x47c>
 800305e:	e057      	b.n	8003110 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fd fc4e 	bl	800090c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fd fc4a 	bl	800090c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e045      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCC_OscConfig+0x4d0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x4b0>
 8003092:	e03d      	b.n	8003110 <HAL_RCC_OscConfig+0x54c>
 8003094:	40023800 	.word	0x40023800
 8003098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800309c:	4b1f      	ldr	r3, [pc, #124]	; (800311c <HAL_RCC_OscConfig+0x558>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d030      	beq.n	800310c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d129      	bne.n	800310c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d122      	bne.n	800310c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d119      	bne.n	800310c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	3b01      	subs	r3, #1
 80030e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d10f      	bne.n	800310c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d107      	bne.n	800310c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800

08003120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0d0      	b.n	80032da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 020f 	bic.w	r2, r3, #15
 800314e:	4965      	ldr	r1, [pc, #404]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d040      	beq.n	8003244 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e073      	b.n	80032da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06b      	b.n	80032da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4936      	ldr	r1, [pc, #216]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003214:	f7fd fb7a 	bl	800090c <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fd fb76 	bl	800090c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e053      	b.n	80032da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d210      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 020f 	bic.w	r2, r3, #15
 800325a:	4922      	ldr	r1, [pc, #136]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1cc>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1d0>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1d4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fad6 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023c00 	.word	0x40023c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	08009c74 	.word	0x08009c74
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000004 	.word	0x20000004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b094      	sub	sp, #80	; 0x50
 80032fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	647b      	str	r3, [r7, #68]	; 0x44
 8003304:	2300      	movs	r3, #0
 8003306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003308:	2300      	movs	r3, #0
 800330a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003310:	4b79      	ldr	r3, [pc, #484]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d00d      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x40>
 800331c:	2b08      	cmp	r3, #8
 800331e:	f200 80e1 	bhi.w	80034e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003326:	2b04      	cmp	r3, #4
 8003328:	d003      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x3a>
 800332a:	e0db      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4b73      	ldr	r3, [pc, #460]	; (80034fc <HAL_RCC_GetSysClockFreq+0x204>)
 800332e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003330:	e0db      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003332:	4b73      	ldr	r3, [pc, #460]	; (8003500 <HAL_RCC_GetSysClockFreq+0x208>)
 8003334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003336:	e0d8      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4b6f      	ldr	r3, [pc, #444]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003340:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003342:	4b6d      	ldr	r3, [pc, #436]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d063      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b6a      	ldr	r3, [pc, #424]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	2200      	movs	r2, #0
 8003356:	63bb      	str	r3, [r7, #56]	; 0x38
 8003358:	63fa      	str	r2, [r7, #60]	; 0x3c
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003360:	633b      	str	r3, [r7, #48]	; 0x30
 8003362:	2300      	movs	r3, #0
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
 8003366:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800336a:	4622      	mov	r2, r4
 800336c:	462b      	mov	r3, r5
 800336e:	f04f 0000 	mov.w	r0, #0
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	0159      	lsls	r1, r3, #5
 8003378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800337c:	0150      	lsls	r0, r2, #5
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4621      	mov	r1, r4
 8003384:	1a51      	subs	r1, r2, r1
 8003386:	6139      	str	r1, [r7, #16]
 8003388:	4629      	mov	r1, r5
 800338a:	eb63 0301 	sbc.w	r3, r3, r1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800339c:	4659      	mov	r1, fp
 800339e:	018b      	lsls	r3, r1, #6
 80033a0:	4651      	mov	r1, sl
 80033a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033a6:	4651      	mov	r1, sl
 80033a8:	018a      	lsls	r2, r1, #6
 80033aa:	4651      	mov	r1, sl
 80033ac:	ebb2 0801 	subs.w	r8, r2, r1
 80033b0:	4659      	mov	r1, fp
 80033b2:	eb63 0901 	sbc.w	r9, r3, r1
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ca:	4690      	mov	r8, r2
 80033cc:	4699      	mov	r9, r3
 80033ce:	4623      	mov	r3, r4
 80033d0:	eb18 0303 	adds.w	r3, r8, r3
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	462b      	mov	r3, r5
 80033d8:	eb49 0303 	adc.w	r3, r9, r3
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ea:	4629      	mov	r1, r5
 80033ec:	024b      	lsls	r3, r1, #9
 80033ee:	4621      	mov	r1, r4
 80033f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033f4:	4621      	mov	r1, r4
 80033f6:	024a      	lsls	r2, r1, #9
 80033f8:	4610      	mov	r0, r2
 80033fa:	4619      	mov	r1, r3
 80033fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fe:	2200      	movs	r2, #0
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
 8003402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003404:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003408:	f7fc ff16 	bl	8000238 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4613      	mov	r3, r2
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003414:	e058      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	4618      	mov	r0, r3
 8003420:	4611      	mov	r1, r2
 8003422:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
 800342c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003430:	4642      	mov	r2, r8
 8003432:	464b      	mov	r3, r9
 8003434:	f04f 0000 	mov.w	r0, #0
 8003438:	f04f 0100 	mov.w	r1, #0
 800343c:	0159      	lsls	r1, r3, #5
 800343e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003442:	0150      	lsls	r0, r2, #5
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4641      	mov	r1, r8
 800344a:	ebb2 0a01 	subs.w	sl, r2, r1
 800344e:	4649      	mov	r1, r9
 8003450:	eb63 0b01 	sbc.w	fp, r3, r1
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003460:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003464:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003468:	ebb2 040a 	subs.w	r4, r2, sl
 800346c:	eb63 050b 	sbc.w	r5, r3, fp
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	00eb      	lsls	r3, r5, #3
 800347a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800347e:	00e2      	lsls	r2, r4, #3
 8003480:	4614      	mov	r4, r2
 8003482:	461d      	mov	r5, r3
 8003484:	4643      	mov	r3, r8
 8003486:	18e3      	adds	r3, r4, r3
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	464b      	mov	r3, r9
 800348c:	eb45 0303 	adc.w	r3, r5, r3
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800349e:	4629      	mov	r1, r5
 80034a0:	028b      	lsls	r3, r1, #10
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034a8:	4621      	mov	r1, r4
 80034aa:	028a      	lsls	r2, r1, #10
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	2200      	movs	r2, #0
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	61fa      	str	r2, [r7, #28]
 80034b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034bc:	f7fc febc 	bl	8000238 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	3301      	adds	r3, #1
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80034d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034e2:	e002      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetSysClockFreq+0x204>)
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3750      	adds	r7, #80	; 0x50
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	007a1200 	.word	0x007a1200

08003504 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCC_GetHCLKFreq+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003544:	4b69      	ldr	r3, [pc, #420]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a68      	ldr	r2, [pc, #416]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800354e:	6093      	str	r3, [r2, #8]
 8003550:	4b66      	ldr	r3, [pc, #408]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	4964      	ldr	r1, [pc, #400]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003576:	4b5d      	ldr	r3, [pc, #372]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800357c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	4959      	ldr	r1, [pc, #356]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d017      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035b2:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	494a      	ldr	r1, [pc, #296]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d0:	d101      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 808b 	beq.w	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	4a39      	ldr	r2, [pc, #228]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360a:	6413      	str	r3, [r2, #64]	; 0x40
 800360c:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a34      	ldr	r2, [pc, #208]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fd f972 	bl	800090c <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362c:	f7fd f96e 	bl	800090c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e38f      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800364a:	4b28      	ldr	r3, [pc, #160]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d035      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	429a      	cmp	r2, r3
 8003666:	d02e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367e:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d114      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd f936 	bl	800090c <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd f932 	bl	800090c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e351      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d2:	d111      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036e2:	400b      	ands	r3, r1
 80036e4:	4901      	ldr	r1, [pc, #4]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
 80036ea:	e00b      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000
 80036f4:	0ffffcff 	.word	0x0ffffcff
 80036f8:	4bac      	ldr	r3, [pc, #688]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4aab      	ldr	r2, [pc, #684]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	4ba9      	ldr	r3, [pc, #676]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	49a6      	ldr	r1, [pc, #664]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	4313      	orrs	r3, r2
 8003714:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d010      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003722:	4ba2      	ldr	r3, [pc, #648]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003728:	4aa0      	ldr	r2, [pc, #640]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003732:	4b9e      	ldr	r3, [pc, #632]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	499b      	ldr	r1, [pc, #620]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003750:	4b96      	ldr	r3, [pc, #600]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375e:	4993      	ldr	r1, [pc, #588]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003772:	4b8e      	ldr	r3, [pc, #568]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003780:	498a      	ldr	r1, [pc, #552]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003794:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a2:	4982      	ldr	r1, [pc, #520]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037b6:	4b7d      	ldr	r3, [pc, #500]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4979      	ldr	r1, [pc, #484]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d8:	4b74      	ldr	r3, [pc, #464]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4971      	ldr	r1, [pc, #452]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037fa:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	f023 020c 	bic.w	r2, r3, #12
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	4968      	ldr	r1, [pc, #416]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800381c:	4b63      	ldr	r3, [pc, #396]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	4960      	ldr	r1, [pc, #384]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800383e:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	4957      	ldr	r1, [pc, #348]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003860:	4b52      	ldr	r3, [pc, #328]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	494f      	ldr	r1, [pc, #316]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	4946      	ldr	r1, [pc, #280]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	493e      	ldr	r1, [pc, #248]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	4935      	ldr	r1, [pc, #212]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e8:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f6:	492d      	ldr	r1, [pc, #180]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d011      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800390a:	4b28      	ldr	r3, [pc, #160]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003910:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	4924      	ldr	r1, [pc, #144]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	4914      	ldr	r1, [pc, #80]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003972:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800397c:	490b      	ldr	r1, [pc, #44]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a0:	4902      	ldr	r1, [pc, #8]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039bc:	4b8a      	ldr	r3, [pc, #552]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	4986      	ldr	r1, [pc, #536]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039e0:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f0:	497d      	ldr	r1, [pc, #500]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d006      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80d6 	beq.w	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a0c:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a75      	ldr	r2, [pc, #468]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fc ff78 	bl	800090c <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a20:	f7fc ff74 	bl	800090c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e195      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a32:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a66:	0e1b      	lsrs	r3, r3, #24
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4958      	ldr	r1, [pc, #352]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab8:	d129      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aba:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac8:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	0f1b      	lsrs	r3, r3, #28
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	019a      	lsls	r2, r3, #6
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	071b      	lsls	r3, r3, #28
 8003aee:	493e      	ldr	r1, [pc, #248]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003af6:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afc:	f023 021f 	bic.w	r2, r3, #31
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	3b01      	subs	r3, #1
 8003b06:	4938      	ldr	r1, [pc, #224]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01d      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b1a:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b20:	0e1b      	lsrs	r3, r3, #24
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b28:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	0f1b      	lsrs	r3, r3, #28
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	019a      	lsls	r2, r3, #6
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	071b      	lsls	r3, r3, #28
 8003b4e:	4926      	ldr	r1, [pc, #152]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d011      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	019a      	lsls	r2, r3, #6
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	491a      	ldr	r1, [pc, #104]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b92:	f7fc febb 	bl	800090c <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b9a:	f7fc feb7 	bl	800090c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	; 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0d8      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	f040 80ce 	bne.w	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fc fe9e 	bl	800090c <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd2:	e00b      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bd4:	f7fc fe9a 	bl	800090c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d904      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0bb      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bec:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf8:	d0ec      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02e      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d12a      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c22:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c30:	4b4d      	ldr	r3, [pc, #308]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	0f1b      	lsrs	r3, r3, #28
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	4944      	ldr	r1, [pc, #272]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c5e:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	493d      	ldr	r1, [pc, #244]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d022      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8c:	d11d      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c9c:	4b32      	ldr	r3, [pc, #200]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	0f1b      	lsrs	r3, r3, #28
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	4929      	ldr	r1, [pc, #164]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d028      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ce4:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	019a      	lsls	r2, r3, #6
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	4917      	ldr	r1, [pc, #92]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4911      	ldr	r1, [pc, #68]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fc fdea 	bl	800090c <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d3c:	f7fc fde6 	bl	800090c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e007      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5a:	d1ef      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800

08003d6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	f107 001c 	add.w	r0, r7, #28
 8003d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d120      	bne.n	8003dc6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <USB_CoreInit+0xac>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d105      	bne.n	8003dba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f001 fbee 	bl	800559c <USB_CoreReset>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e010      	b.n	8003de8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f001 fbe2 	bl	800559c <USB_CoreReset>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10b      	bne.n	8003e06 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f043 0206 	orr.w	r2, r3, #6
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e12:	b004      	add	sp, #16
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	ffbdffbf 	.word	0xffbdffbf

08003e1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d165      	bne.n	8003efc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4a41      	ldr	r2, [pc, #260]	; (8003f38 <USB_SetTurnaroundTime+0x11c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d906      	bls.n	8003e46 <USB_SetTurnaroundTime+0x2a>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <USB_SetTurnaroundTime+0x120>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d202      	bcs.n	8003e46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e40:	230f      	movs	r3, #15
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e062      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4a3c      	ldr	r2, [pc, #240]	; (8003f3c <USB_SetTurnaroundTime+0x120>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d306      	bcc.n	8003e5c <USB_SetTurnaroundTime+0x40>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <USB_SetTurnaroundTime+0x124>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d202      	bcs.n	8003e5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e56:	230e      	movs	r3, #14
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e057      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <USB_SetTurnaroundTime+0x124>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d306      	bcc.n	8003e72 <USB_SetTurnaroundTime+0x56>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4a37      	ldr	r2, [pc, #220]	; (8003f44 <USB_SetTurnaroundTime+0x128>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d202      	bcs.n	8003e72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e6c:	230d      	movs	r3, #13
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e04c      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4a33      	ldr	r2, [pc, #204]	; (8003f44 <USB_SetTurnaroundTime+0x128>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d306      	bcc.n	8003e88 <USB_SetTurnaroundTime+0x6c>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4a32      	ldr	r2, [pc, #200]	; (8003f48 <USB_SetTurnaroundTime+0x12c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d802      	bhi.n	8003e88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e82:	230c      	movs	r3, #12
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e041      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <USB_SetTurnaroundTime+0x12c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d906      	bls.n	8003e9e <USB_SetTurnaroundTime+0x82>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4a2e      	ldr	r2, [pc, #184]	; (8003f4c <USB_SetTurnaroundTime+0x130>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d802      	bhi.n	8003e9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e98:	230b      	movs	r3, #11
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e036      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <USB_SetTurnaroundTime+0x130>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d906      	bls.n	8003eb4 <USB_SetTurnaroundTime+0x98>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <USB_SetTurnaroundTime+0x134>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d802      	bhi.n	8003eb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003eae:	230a      	movs	r3, #10
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e02b      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <USB_SetTurnaroundTime+0x134>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d906      	bls.n	8003eca <USB_SetTurnaroundTime+0xae>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4a25      	ldr	r2, [pc, #148]	; (8003f54 <USB_SetTurnaroundTime+0x138>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d202      	bcs.n	8003eca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ec4:	2309      	movs	r3, #9
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e020      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <USB_SetTurnaroundTime+0x138>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d306      	bcc.n	8003ee0 <USB_SetTurnaroundTime+0xc4>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <USB_SetTurnaroundTime+0x13c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003eda:	2308      	movs	r3, #8
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e015      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <USB_SetTurnaroundTime+0x13c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d906      	bls.n	8003ef6 <USB_SetTurnaroundTime+0xda>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <USB_SetTurnaroundTime+0x140>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d202      	bcs.n	8003ef6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ef0:	2307      	movs	r3, #7
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e00a      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ef6:	2306      	movs	r3, #6
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e007      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f02:	2309      	movs	r3, #9
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e001      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f08:	2309      	movs	r3, #9
 8003f0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	029b      	lsls	r3, r3, #10
 8003f20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	00d8acbf 	.word	0x00d8acbf
 8003f3c:	00e4e1c0 	.word	0x00e4e1c0
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	01067380 	.word	0x01067380
 8003f48:	011a499f 	.word	0x011a499f
 8003f4c:	01312cff 	.word	0x01312cff
 8003f50:	014ca43f 	.word	0x014ca43f
 8003f54:	016e3600 	.word	0x016e3600
 8003f58:	01a6ab1f 	.word	0x01a6ab1f
 8003f5c:	01e84800 	.word	0x01e84800

08003f60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d115      	bne.n	8003ff2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f7fc fca6 	bl	8000924 <HAL_Delay>
      ms++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f001 fa4b 	bl	800547a <USB_GetMode>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d01e      	beq.n	8004028 <USB_SetCurrentMode+0x84>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b31      	cmp	r3, #49	; 0x31
 8003fee:	d9f0      	bls.n	8003fd2 <USB_SetCurrentMode+0x2e>
 8003ff0:	e01a      	b.n	8004028 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d115      	bne.n	8004024 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004004:	2001      	movs	r0, #1
 8004006:	f7fc fc8d 	bl	8000924 <HAL_Delay>
      ms++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3301      	adds	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f001 fa32 	bl	800547a <USB_GetMode>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <USB_SetCurrentMode+0x84>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b31      	cmp	r3, #49	; 0x31
 8004020:	d9f0      	bls.n	8004004 <USB_SetCurrentMode+0x60>
 8004022:	e001      	b.n	8004028 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e005      	b.n	8004034 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b32      	cmp	r3, #50	; 0x32
 800402c:	d101      	bne.n	8004032 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800403c:	b084      	sub	sp, #16
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800404a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	e009      	b.n	8004070 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3340      	adds	r3, #64	; 0x40
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	2200      	movs	r2, #0
 8004068:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	3301      	adds	r3, #1
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b0e      	cmp	r3, #14
 8004074:	d9f2      	bls.n	800405c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11c      	bne.n	80040b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e005      	b.n	80040c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d4:	4619      	mov	r1, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040dc:	461a      	mov	r2, r3
 80040de:	680b      	ldr	r3, [r1, #0]
 80040e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10c      	bne.n	8004102 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ee:	2100      	movs	r1, #0
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f965 	bl	80043c0 <USB_SetDevSpeed>
 80040f6:	e008      	b.n	800410a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040f8:	2101      	movs	r1, #1
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f960 	bl	80043c0 <USB_SetDevSpeed>
 8004100:	e003      	b.n	800410a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004102:	2103      	movs	r1, #3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f95b 	bl	80043c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800410a:	2110      	movs	r1, #16
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f8f3 	bl	80042f8 <USB_FlushTxFifo>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f91f 	bl	8004360 <USB_FlushRxFifo>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	461a      	mov	r2, r3
 8004134:	2300      	movs	r3, #0
 8004136:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	461a      	mov	r2, r3
 8004140:	2300      	movs	r3, #0
 8004142:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	461a      	mov	r2, r3
 800414c:	2300      	movs	r3, #0
 800414e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	e043      	b.n	80041de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800416c:	d118      	bne.n	80041a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	461a      	mov	r2, r3
 8004182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e013      	b.n	80041b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e008      	b.n	80041b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	461a      	mov	r2, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	461a      	mov	r2, r3
 80041c0:	2300      	movs	r3, #0
 80041c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	3301      	adds	r3, #1
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3b7      	bcc.n	8004156 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	e043      	b.n	8004274 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004202:	d118      	bne.n	8004236 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	461a      	mov	r2, r3
 8004218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e013      	b.n	8004248 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e008      	b.n	8004248 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	2300      	movs	r3, #0
 8004246:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	2300      	movs	r3, #0
 8004258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	461a      	mov	r2, r3
 8004268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800426c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3301      	adds	r3, #1
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	429a      	cmp	r2, r3
 800427a:	d3b7      	bcc.n	80041ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800429c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f043 0210 	orr.w	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <USB_DevInit+0x2b4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f043 0208 	orr.w	r2, r3, #8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <USB_DevInit+0x2b8>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ec:	b004      	add	sp, #16
 80042ee:	4770      	bx	lr
 80042f0:	803c3800 	.word	0x803c3800
 80042f4:	40000004 	.word	0x40000004

080042f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3301      	adds	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a13      	ldr	r2, [pc, #76]	; (800435c <USB_FlushTxFifo+0x64>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d901      	bls.n	8004318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e01b      	b.n	8004350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	daf2      	bge.n	8004306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	019b      	lsls	r3, r3, #6
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3301      	adds	r3, #1
 8004334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a08      	ldr	r2, [pc, #32]	; (800435c <USB_FlushTxFifo+0x64>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e006      	b.n	8004350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d0f0      	beq.n	8004330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	00030d40 	.word	0x00030d40

08004360 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a11      	ldr	r2, [pc, #68]	; (80043bc <USB_FlushRxFifo+0x5c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e018      	b.n	80043b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	daf2      	bge.n	800436c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2210      	movs	r2, #16
 800438e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <USB_FlushRxFifo+0x5c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e006      	b.n	80043b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d0f0      	beq.n	8004390 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	00030d40 	.word	0x00030d40

080043c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b087      	sub	sp, #28
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]
 8004416:	e00a      	b.n	800442e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d002      	beq.n	8004424 <USB_GetDevSpeed+0x32>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d102      	bne.n	800442a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004424:	2302      	movs	r3, #2
 8004426:	75fb      	strb	r3, [r7, #23]
 8004428:	e001      	b.n	800442e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800442a:	230f      	movs	r3, #15
 800442c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004430:	4618      	mov	r0, r3
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d139      	bne.n	80044cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	b29b      	uxth	r3, r3
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004476:	4313      	orrs	r3, r2
 8004478:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d153      	bne.n	8004538 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	791b      	ldrb	r3, [r3, #4]
 80044aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	059b      	lsls	r3, r3, #22
 80044b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	0159      	lsls	r1, r3, #5
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	440b      	add	r3, r1
 80044be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c2:	4619      	mov	r1, r3
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <USB_ActivateEndpoint+0x10c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	e035      	b.n	8004538 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	2101      	movs	r1, #1
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d119      	bne.n	8004538 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	791b      	ldrb	r3, [r3, #4]
 800451e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004520:	430b      	orrs	r3, r1
 8004522:	431a      	orrs	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	0159      	lsls	r1, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	440b      	add	r3, r1
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	4619      	mov	r1, r3
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <USB_ActivateEndpoint+0x10c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	10008000 	.word	0x10008000

0800454c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d161      	bne.n	800462c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800457a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800457e:	d11f      	bne.n	80045c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800459e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	0151      	lsls	r1, r2, #5
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	440a      	add	r2, r1
 80045b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	2101      	movs	r1, #1
 80045d2:	fa01 f303 	lsl.w	r3, r1, r3
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e0:	4013      	ands	r3, r2
 80045e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004604:	4013      	ands	r3, r2
 8004606:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	0159      	lsls	r1, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	440b      	add	r3, r1
 800461e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004622:	4619      	mov	r1, r3
 8004624:	4b35      	ldr	r3, [pc, #212]	; (80046fc <USB_DeactivateEndpoint+0x1b0>)
 8004626:	4013      	ands	r3, r2
 8004628:	600b      	str	r3, [r1, #0]
 800462a:	e060      	b.n	80046ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800463e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004642:	d11f      	bne.n	8004684 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004662:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	0151      	lsls	r1, r2, #5
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	440a      	add	r2, r1
 800467a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	2101      	movs	r1, #1
 8004696:	fa01 f303 	lsl.w	r3, r1, r3
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	43db      	mvns	r3, r3
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a4:	4013      	ands	r3, r2
 80046a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	2101      	movs	r1, #1
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	43db      	mvns	r3, r3
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c8:	4013      	ands	r3, r2
 80046ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	0159      	lsls	r1, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	440b      	add	r3, r1
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	4619      	mov	r1, r3
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <USB_DeactivateEndpoint+0x1b4>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	ec337800 	.word	0xec337800
 8004700:	eff37800 	.word	0xeff37800

08004704 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	2b01      	cmp	r3, #1
 8004722:	f040 8163 	bne.w	80049ec <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d132      	bne.n	8004794 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	0159      	lsls	r1, r3, #5
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	440b      	add	r3, r1
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	4619      	mov	r1, r3
 800474a:	4ba5      	ldr	r3, [pc, #660]	; (80049e0 <USB_EPStartXfer+0x2dc>)
 800474c:	4013      	ands	r3, r2
 800474e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800476e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	0159      	lsls	r1, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	440b      	add	r3, r1
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	4619      	mov	r1, r3
 800478c:	4b95      	ldr	r3, [pc, #596]	; (80049e4 <USB_EPStartXfer+0x2e0>)
 800478e:	4013      	ands	r3, r2
 8004790:	610b      	str	r3, [r1, #16]
 8004792:	e074      	b.n	800487e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	0159      	lsls	r1, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	440b      	add	r3, r1
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	4619      	mov	r1, r3
 80047b0:	4b8c      	ldr	r3, [pc, #560]	; (80049e4 <USB_EPStartXfer+0x2e0>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	0159      	lsls	r1, r3, #5
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	440b      	add	r3, r1
 80047cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d0:	4619      	mov	r1, r3
 80047d2:	4b83      	ldr	r3, [pc, #524]	; (80049e0 <USB_EPStartXfer+0x2dc>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6999      	ldr	r1, [r3, #24]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	440b      	add	r3, r1
 80047f0:	1e59      	subs	r1, r3, #1
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047fc:	4b7a      	ldr	r3, [pc, #488]	; (80049e8 <USB_EPStartXfer+0x2e4>)
 80047fe:	400b      	ands	r3, r1
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	0148      	lsls	r0, r1, #5
 8004804:	69f9      	ldr	r1, [r7, #28]
 8004806:	4401      	add	r1, r0
 8004808:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800480c:	4313      	orrs	r3, r2
 800480e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004826:	69b9      	ldr	r1, [r7, #24]
 8004828:	0148      	lsls	r0, r1, #5
 800482a:	69f9      	ldr	r1, [r7, #28]
 800482c:	4401      	add	r1, r0
 800482e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004832:	4313      	orrs	r3, r2
 8004834:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	791b      	ldrb	r3, [r3, #4]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d11f      	bne.n	800487e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004858:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800485c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800487c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d14b      	bne.n	800491c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	461a      	mov	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	791b      	ldrb	r3, [r3, #4]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d128      	bne.n	80048fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d110      	bne.n	80048da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e00f      	b.n	80048fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e137      	b.n	8004b8c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800493a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	791b      	ldrb	r3, [r3, #4]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d015      	beq.n	8004970 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 811f 	beq.w	8004b8c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	69f9      	ldr	r1, [r7, #28]
 8004966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800496a:	4313      	orrs	r3, r2
 800496c:	634b      	str	r3, [r1, #52]	; 0x34
 800496e:	e10d      	b.n	8004b8c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d110      	bne.n	80049a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	e00f      	b.n	80049c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6919      	ldr	r1, [r3, #16]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	b298      	uxth	r0, r3
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	4603      	mov	r3, r0
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 faea 	bl	8004fb0 <USB_WritePacket>
 80049dc:	e0d6      	b.n	8004b8c <USB_EPStartXfer+0x488>
 80049de:	bf00      	nop
 80049e0:	e007ffff 	.word	0xe007ffff
 80049e4:	fff80000 	.word	0xfff80000
 80049e8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	0159      	lsls	r1, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	440b      	add	r3, r1
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	4619      	mov	r1, r3
 8004a08:	4b63      	ldr	r3, [pc, #396]	; (8004b98 <USB_EPStartXfer+0x494>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	0159      	lsls	r1, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	440b      	add	r3, r1
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4b5c      	ldr	r3, [pc, #368]	; (8004b9c <USB_EPStartXfer+0x498>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d123      	bne.n	8004a80 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4e:	69b9      	ldr	r1, [r7, #24]
 8004a50:	0148      	lsls	r0, r1, #5
 8004a52:	69f9      	ldr	r1, [r7, #28]
 8004a54:	4401      	add	r1, r0
 8004a56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a7c:	6113      	str	r3, [r2, #16]
 8004a7e:	e037      	b.n	8004af0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	1e5a      	subs	r2, r3, #1
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	8afa      	ldrh	r2, [r7, #22]
 8004a9c:	fb03 f202 	mul.w	r2, r3, r2
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	04d9      	lsls	r1, r3, #19
 8004ab6:	4b3a      	ldr	r3, [pc, #232]	; (8004ba0 <USB_EPStartXfer+0x49c>)
 8004ab8:	400b      	ands	r3, r1
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	0148      	lsls	r0, r1, #5
 8004abe:	69f9      	ldr	r1, [r7, #28]
 8004ac0:	4401      	add	r1, r0
 8004ac2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	0148      	lsls	r0, r1, #5
 8004ae4:	69f9      	ldr	r1, [r7, #28]
 8004ae6:	4401      	add	r1, r0
 8004ae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004aec:	4313      	orrs	r3, r2
 8004aee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d10d      	bne.n	8004b12 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6919      	ldr	r1, [r3, #16]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	460a      	mov	r2, r1
 8004b10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	791b      	ldrb	r3, [r3, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d128      	bne.n	8004b6c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d110      	bne.n	8004b4c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e00f      	b.n	8004b6c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	fff80000 	.word	0xfff80000
 8004b9c:	e007ffff 	.word	0xe007ffff
 8004ba0:	1ff80000 	.word	0x1ff80000

08004ba4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 80ce 	bne.w	8004d62 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d132      	bne.n	8004c34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	0159      	lsls	r1, r3, #5
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	440b      	add	r3, r1
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	4619      	mov	r1, r3
 8004bea:	4b9a      	ldr	r3, [pc, #616]	; (8004e54 <USB_EP0StartXfer+0x2b0>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	0159      	lsls	r1, r3, #5
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	440b      	add	r3, r1
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4b8a      	ldr	r3, [pc, #552]	; (8004e58 <USB_EP0StartXfer+0x2b4>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
 8004c32:	e04e      	b.n	8004cd2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	0159      	lsls	r1, r3, #5
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	440b      	add	r3, r1
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4b81      	ldr	r3, [pc, #516]	; (8004e58 <USB_EP0StartXfer+0x2b4>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	0159      	lsls	r1, r3, #5
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	4619      	mov	r1, r3
 8004c72:	4b78      	ldr	r3, [pc, #480]	; (8004e54 <USB_EP0StartXfer+0x2b0>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	699a      	ldr	r2, [r3, #24]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d903      	bls.n	8004c8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004caa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc2:	6939      	ldr	r1, [r7, #16]
 8004cc4:	0148      	lsls	r0, r1, #5
 8004cc6:	6979      	ldr	r1, [r7, #20]
 8004cc8:	4401      	add	r1, r0
 8004cca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d11e      	bne.n	8004d16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	461a      	mov	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e097      	b.n	8004e46 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8083 	beq.w	8004e46 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	634b      	str	r3, [r1, #52]	; 0x34
 8004d60:	e071      	b.n	8004e46 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	0159      	lsls	r1, r3, #5
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	440b      	add	r3, r1
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <USB_EP0StartXfer+0x2b4>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	0159      	lsls	r1, r3, #5
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	440b      	add	r3, r1
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <USB_EP0StartXfer+0x2b0>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df4:	6939      	ldr	r1, [r7, #16]
 8004df6:	0148      	lsls	r0, r1, #5
 8004df8:	6979      	ldr	r1, [r7, #20]
 8004dfa:	4401      	add	r1, r0
 8004dfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e00:	4313      	orrs	r3, r2
 8004e02:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10d      	bne.n	8004e26 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6919      	ldr	r1, [r3, #16]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	460a      	mov	r2, r1
 8004e24:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	e007ffff 	.word	0xe007ffff
 8004e58:	fff80000 	.word	0xfff80000

08004e5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d14a      	bne.n	8004f10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e92:	f040 8086 	bne.w	8004fa2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004edc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d902      	bls.n	8004ef4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ef2:	e056      	b.n	8004fa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0c:	d0e7      	beq.n	8004ede <USB_EPStopXfer+0x82>
 8004f0e:	e048      	b.n	8004fa2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f28:	d13b      	bne.n	8004fa2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	7812      	ldrb	r2, [r2, #0]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	7812      	ldrb	r2, [r2, #0]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3301      	adds	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d902      	bls.n	8004f88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	75fb      	strb	r3, [r7, #23]
          break;
 8004f86:	e00c      	b.n	8004fa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa0:	d0e7      	beq.n	8004f72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b089      	sub	sp, #36	; 0x24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	71fb      	strb	r3, [r7, #7]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d123      	bne.n	800501e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fd6:	88bb      	ldrh	r3, [r7, #4]
 8004fd8:	3303      	adds	r3, #3
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	e018      	b.n	8005016 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	031a      	lsls	r2, r3, #12
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3301      	adds	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	3301      	adds	r3, #1
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d3e2      	bcc.n	8004fe4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3724      	adds	r7, #36	; 0x24
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800502c:	b480      	push	{r7}
 800502e:	b08b      	sub	sp, #44	; 0x2c
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	b29b      	uxth	r3, r3
 8005048:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005052:	2300      	movs	r3, #0
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	e014      	b.n	8005082 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	601a      	str	r2, [r3, #0]
    pDest++;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	3301      	adds	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	3301      	adds	r3, #1
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	3301      	adds	r3, #1
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	3301      	adds	r3, #1
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	3301      	adds	r3, #1
 8005080:	623b      	str	r3, [r7, #32]
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	429a      	cmp	r2, r3
 8005088:	d3e6      	bcc.n	8005058 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800508a:	8bfb      	ldrh	r3, [r7, #30]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01e      	beq.n	80050ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509a:	461a      	mov	r2, r3
 800509c:	f107 0310 	add.w	r3, r7, #16
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	701a      	strb	r2, [r3, #0]
      i++;
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	3301      	adds	r3, #1
 80050ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	3301      	adds	r3, #1
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050c2:	8bfb      	ldrh	r3, [r7, #30]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050c8:	8bfb      	ldrh	r3, [r7, #30]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ea      	bne.n	80050a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	372c      	adds	r7, #44	; 0x2c
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d12c      	bne.n	8005152 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	db12      	blt.n	8005130 <USB_EPSetStall+0x54>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00f      	beq.n	8005130 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800512e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e02b      	b.n	80051aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	db12      	blt.n	800518a <USB_EPSetStall+0xae>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00f      	beq.n	800518a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005188:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d128      	bne.n	8005226 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	791b      	ldrb	r3, [r3, #4]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d003      	beq.n	8005204 <USB_EPClearStall+0x4c>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	791b      	ldrb	r3, [r3, #4]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d138      	bne.n	8005276 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e027      	b.n	8005276 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005244:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	791b      	ldrb	r3, [r3, #4]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d003      	beq.n	8005256 <USB_EPClearStall+0x9e>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	791b      	ldrb	r3, [r3, #4]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d10f      	bne.n	8005276 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fe:	f023 0302 	bic.w	r3, r3, #2
 8005302:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800532c:	f023 0303 	bic.w	r3, r3, #3
 8005330:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4013      	ands	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800536c:	68fb      	ldr	r3, [r7, #12]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	4013      	ands	r3, r2
 800539c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	0c1b      	lsrs	r3, r3, #16
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	4013      	ands	r3, r2
 80053d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	b29b      	uxth	r3, r3
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005410:	68bb      	ldr	r3, [r7, #8]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800541e:	b480      	push	{r7}
 8005420:	b087      	sub	sp, #28
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005440:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	fa22 f303 	lsr.w	r3, r2, r3
 800544e:	01db      	lsls	r3, r3, #7
 8005450:	b2db      	uxtb	r3, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4013      	ands	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800546c:	68bb      	ldr	r3, [r7, #8]
}
 800546e:	4618      	mov	r0, r3
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0301 	and.w	r3, r3, #1
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	4619      	mov	r1, r3
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <USB_ActivateSetup+0x44>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	fffff800 	.word	0xfffff800

080054e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	460b      	mov	r3, r1
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	333c      	adds	r3, #60	; 0x3c
 80054f6:	3304      	adds	r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4a26      	ldr	r2, [pc, #152]	; (8005598 <USB_EP0_OutStart+0xb8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d90a      	bls.n	800551a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005514:	d101      	bne.n	800551a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e037      	b.n	800558a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	461a      	mov	r2, r3
 8005522:	2300      	movs	r3, #0
 8005524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005548:	f043 0318 	orr.w	r3, r3, #24
 800554c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005560:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10f      	bne.n	8005588 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005582:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	4f54300a 	.word	0x4f54300a

0800559c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a13      	ldr	r2, [pc, #76]	; (8005600 <USB_CoreReset+0x64>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e01b      	b.n	80055f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	daf2      	bge.n	80055a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a09      	ldr	r2, [pc, #36]	; (8005600 <USB_CoreReset+0x64>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d901      	bls.n	80055e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e006      	b.n	80055f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d0f0      	beq.n	80055d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	00030d40 	.word	0x00030d40

08005604 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8005610:	f248 0074 	movw	r0, #32884	; 0x8074
 8005614:	f004 f9a6 	bl	8009964 <malloc>
 8005618:	4603      	mov	r3, r0
 800561a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <USBD_MSC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	32b0      	adds	r2, #176	; 0xb0
 800562c:	2100      	movs	r1, #0
 800562e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005632:	2302      	movs	r3, #2
 8005634:	e06e      	b.n	8005714 <USBD_MSC_Init+0x110>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	32b0      	adds	r2, #176	; 0xb0
 8005640:	68f9      	ldr	r1, [r7, #12]
 8005642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	32b0      	adds	r2, #176	; 0xb0
 8005650:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	7c1b      	ldrb	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d12b      	bne.n	80056ba <USBD_MSC_Init+0xb6>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005662:	4b2e      	ldr	r3, [pc, #184]	; (800571c <USBD_MSC_Init+0x118>)
 8005664:	7819      	ldrb	r1, [r3, #0]
 8005666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800566a:	2202      	movs	r2, #2
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f003 ffb6 	bl	80095de <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8005672:	4b2a      	ldr	r3, [pc, #168]	; (800571c <USBD_MSC_Init+0x118>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	f003 020f 	and.w	r2, r3, #15
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800568a:	2201      	movs	r2, #1
 800568c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800568e:	4b24      	ldr	r3, [pc, #144]	; (8005720 <USBD_MSC_Init+0x11c>)
 8005690:	7819      	ldrb	r1, [r3, #0]
 8005692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005696:	2202      	movs	r2, #2
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f003 ffa0 	bl	80095de <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <USBD_MSC_Init+0x11c>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	f003 020f 	and.w	r2, r3, #15
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	2201      	movs	r2, #1
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	e028      	b.n	800570c <USBD_MSC_Init+0x108>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80056ba:	4b18      	ldr	r3, [pc, #96]	; (800571c <USBD_MSC_Init+0x118>)
 80056bc:	7819      	ldrb	r1, [r3, #0]
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	2202      	movs	r2, #2
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f003 ff8b 	bl	80095de <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80056c8:	4b14      	ldr	r3, [pc, #80]	; (800571c <USBD_MSC_Init+0x118>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 020f 	and.w	r2, r3, #15
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80056e0:	2201      	movs	r2, #1
 80056e2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80056e4:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <USBD_MSC_Init+0x11c>)
 80056e6:	7819      	ldrb	r1, [r3, #0]
 80056e8:	2340      	movs	r3, #64	; 0x40
 80056ea:	2202      	movs	r2, #2
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f003 ff76 	bl	80095de <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <USBD_MSC_Init+0x11c>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	f003 020f 	and.w	r2, r3, #15
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	3324      	adds	r3, #36	; 0x24
 8005708:	2201      	movs	r2, #1
 800570a:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fa2b 	bl	8005b68 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	2000006f 	.word	0x2000006f
 8005720:	2000006e 	.word	0x2000006e

08005724 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8005730:	4b26      	ldr	r3, [pc, #152]	; (80057cc <USBD_MSC_DeInit+0xa8>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f003 ff77 	bl	800962a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800573c:	4b23      	ldr	r3, [pc, #140]	; (80057cc <USBD_MSC_DeInit+0xa8>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f003 020f 	and.w	r2, r3, #15
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005754:	2200      	movs	r2, #0
 8005756:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8005758:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <USBD_MSC_DeInit+0xac>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f003 ff63 	bl	800962a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <USBD_MSC_DeInit+0xac>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 020f 	and.w	r2, r3, #15
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3324      	adds	r3, #36	; 0x24
 800577a:	2200      	movs	r2, #0
 800577c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	32b0      	adds	r2, #176	; 0xb0
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d018      	beq.n	80057c2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fa6f 	bl	8005c74 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	; 0xb0
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f004 f8e5 	bl	8009974 <free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	32b0      	adds	r2, #176	; 0xb0
 80057b4:	2100      	movs	r1, #0
 80057b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2000006f 	.word	0x2000006f
 80057d0:	2000006e 	.word	0x2000006e

080057d4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	32b0      	adds	r2, #176	; 0xb0
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e0e1      	b.n	80059c4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005808:	2b00      	cmp	r3, #0
 800580a:	d053      	beq.n	80058b4 <USBD_MSC_Setup+0xe0>
 800580c:	2b20      	cmp	r3, #32
 800580e:	f040 80d1 	bne.w	80059b4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2bfe      	cmp	r3, #254	; 0xfe
 8005818:	d002      	beq.n	8005820 <USBD_MSC_Setup+0x4c>
 800581a:	2bff      	cmp	r3, #255	; 0xff
 800581c:	d02a      	beq.n	8005874 <USBD_MSC_Setup+0xa0>
 800581e:	e041      	b.n	80058a4 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	885b      	ldrh	r3, [r3, #2]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11e      	bne.n	8005866 <USBD_MSC_Setup+0x92>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	88db      	ldrh	r3, [r3, #6]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d11a      	bne.n	8005866 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005836:	2b00      	cmp	r3, #0
 8005838:	da15      	bge.n	8005866 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	33b0      	adds	r3, #176	; 0xb0
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	4798      	blx	r3
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2201      	movs	r2, #1
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f003 fa0d 	bl	8008c7c <USBD_CtlSendData>
 8005862:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005864:	e025      	b.n	80058b2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f003 f996 	bl	8008b9a <USBD_CtlError>
            ret = USBD_FAIL;
 800586e:	2303      	movs	r3, #3
 8005870:	75fb      	strb	r3, [r7, #23]
          break;
 8005872:	e01e      	b.n	80058b2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	885b      	ldrh	r3, [r3, #2]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10c      	bne.n	8005896 <USBD_MSC_Setup+0xc2>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	88db      	ldrh	r3, [r3, #6]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d108      	bne.n	8005896 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800588a:	2b00      	cmp	r3, #0
 800588c:	db03      	blt.n	8005896 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9bc 	bl	8005c0c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005894:	e00d      	b.n	80058b2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f003 f97e 	bl	8008b9a <USBD_CtlError>
            ret = USBD_FAIL;
 800589e:	2303      	movs	r3, #3
 80058a0:	75fb      	strb	r3, [r7, #23]
          break;
 80058a2:	e006      	b.n	80058b2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f003 f977 	bl	8008b9a <USBD_CtlError>
          ret = USBD_FAIL;
 80058ac:	2303      	movs	r3, #3
 80058ae:	75fb      	strb	r3, [r7, #23]
          break;
 80058b0:	bf00      	nop
      }
      break;
 80058b2:	e086      	b.n	80059c2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b0b      	cmp	r3, #11
 80058ba:	d872      	bhi.n	80059a2 <USBD_MSC_Setup+0x1ce>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <USBD_MSC_Setup+0xf0>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	08005971 	.word	0x08005971
 80058cc:	080059a3 	.word	0x080059a3
 80058d0:	080059a3 	.word	0x080059a3
 80058d4:	080059a3 	.word	0x080059a3
 80058d8:	080059a3 	.word	0x080059a3
 80058dc:	080059a3 	.word	0x080059a3
 80058e0:	080059a3 	.word	0x080059a3
 80058e4:	080059a3 	.word	0x080059a3
 80058e8:	080059a3 	.word	0x080059a3
 80058ec:	0800591f 	.word	0x0800591f
 80058f0:	08005949 	.word	0x08005949
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d107      	bne.n	8005910 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005900:	f107 030e 	add.w	r3, r7, #14
 8005904:	2202      	movs	r2, #2
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f003 f9b7 	bl	8008c7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800590e:	e050      	b.n	80059b2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f003 f941 	bl	8008b9a <USBD_CtlError>
            ret = USBD_FAIL;
 8005918:	2303      	movs	r3, #3
 800591a:	75fb      	strb	r3, [r7, #23]
          break;
 800591c:	e049      	b.n	80059b2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b03      	cmp	r3, #3
 8005928:	d107      	bne.n	800593a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	3304      	adds	r3, #4
 800592e:	2201      	movs	r2, #1
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f003 f9a2 	bl	8008c7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005938:	e03b      	b.n	80059b2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f003 f92c 	bl	8008b9a <USBD_CtlError>
            ret = USBD_FAIL;
 8005942:	2303      	movs	r3, #3
 8005944:	75fb      	strb	r3, [r7, #23]
          break;
 8005946:	e034      	b.n	80059b2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b03      	cmp	r3, #3
 8005952:	d106      	bne.n	8005962 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	885b      	ldrh	r3, [r3, #2]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005960:	e027      	b.n	80059b2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f003 f918 	bl	8008b9a <USBD_CtlError>
            ret = USBD_FAIL;
 800596a:	2303      	movs	r3, #3
 800596c:	75fb      	strb	r3, [r7, #23]
          break;
 800596e:	e020      	b.n	80059b2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b03      	cmp	r3, #3
 800597a:	d119      	bne.n	80059b0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	885b      	ldrh	r3, [r3, #2]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d115      	bne.n	80059b0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	889b      	ldrh	r3, [r3, #4]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f003 fe6b 	bl	8009668 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	889b      	ldrh	r3, [r3, #4]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fb54 	bl	8006048 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80059a0:	e006      	b.n	80059b0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f003 f8f8 	bl	8008b9a <USBD_CtlError>
          ret = USBD_FAIL;
 80059aa:	2303      	movs	r3, #3
 80059ac:	75fb      	strb	r3, [r7, #23]
          break;
 80059ae:	e000      	b.n	80059b2 <USBD_MSC_Setup+0x1de>
          break;
 80059b0:	bf00      	nop
      }
      break;
 80059b2:	e006      	b.n	80059c2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f003 f8ef 	bl	8008b9a <USBD_CtlError>
      ret = USBD_FAIL;
 80059bc:	2303      	movs	r3, #3
 80059be:	75fb      	strb	r3, [r7, #23]
      break;
 80059c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f961 	bl	8005ca4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f98d 	bl	8005d1c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005a14:	2181      	movs	r1, #129	; 0x81
 8005a16:	4812      	ldr	r0, [pc, #72]	; (8005a60 <USBD_MSC_GetHSCfgDesc+0x54>)
 8005a18:	f002 fa5c 	bl	8007ed4 <USBD_GetEpDesc>
 8005a1c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005a1e:	2101      	movs	r1, #1
 8005a20:	480f      	ldr	r0, [pc, #60]	; (8005a60 <USBD_MSC_GetHSCfgDesc+0x54>)
 8005a22:	f002 fa57 	bl	8007ed4 <USBD_GetEpDesc>
 8005a26:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	711a      	strb	r2, [r3, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f042 0202 	orr.w	r2, r2, #2
 8005a3a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2200      	movs	r2, #0
 8005a46:	711a      	strb	r2, [r3, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f042 0202 	orr.w	r2, r2, #2
 8005a4e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005a56:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000044 	.word	0x20000044

08005a64 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005a6c:	2181      	movs	r1, #129	; 0x81
 8005a6e:	4812      	ldr	r0, [pc, #72]	; (8005ab8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005a70:	f002 fa30 	bl	8007ed4 <USBD_GetEpDesc>
 8005a74:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005a76:	2101      	movs	r1, #1
 8005a78:	480f      	ldr	r0, [pc, #60]	; (8005ab8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005a7a:	f002 fa2b 	bl	8007ed4 <USBD_GetEpDesc>
 8005a7e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d006      	beq.n	8005a94 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a8e:	711a      	strb	r2, [r3, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa2:	711a      	strb	r2, [r3, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005aae:	4b02      	ldr	r3, [pc, #8]	; (8005ab8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000044 	.word	0x20000044

08005abc <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005ac4:	2181      	movs	r1, #129	; 0x81
 8005ac6:	4812      	ldr	r0, [pc, #72]	; (8005b10 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8005ac8:	f002 fa04 	bl	8007ed4 <USBD_GetEpDesc>
 8005acc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005ace:	2101      	movs	r1, #1
 8005ad0:	480f      	ldr	r0, [pc, #60]	; (8005b10 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8005ad2:	f002 f9ff 	bl	8007ed4 <USBD_GetEpDesc>
 8005ad6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d006      	beq.n	8005aec <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae6:	711a      	strb	r2, [r3, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afa:	711a      	strb	r2, [r3, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005b06:	4b02      	ldr	r3, [pc, #8]	; (8005b10 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000044 	.word	0x20000044

08005b14 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	220a      	movs	r2, #10
 8005b20:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8005b22:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000064 	.word	0x20000064

08005b34 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e009      	b.n	8005b5c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	33b0      	adds	r3, #176	; 0xb0
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	32b0      	adds	r2, #176	; 0xb0
 8005b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d039      	beq.n	8005bfa <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	33b0      	adds	r3, #176	; 0xb0
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2000      	movs	r0, #0
 8005bca:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <MSC_BOT_Init+0x9c>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f003 fd48 	bl	8009668 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <MSC_BOT_Init+0xa0>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f003 fd42 	bl	8009668 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <MSC_BOT_Init+0x9c>)
 8005be6:	7819      	ldrb	r1, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f248 0210 	movw	r2, #32784	; 0x8010
 8005bee:	441a      	add	r2, r3
 8005bf0:	231f      	movs	r3, #31
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f003 fe01 	bl	80097fa <USBD_LL_PrepareReceive>
 8005bf8:	e000      	b.n	8005bfc <MSC_BOT_Init+0x94>
    return;
 8005bfa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	2000006f 	.word	0x2000006f
 8005c08:	2000006e 	.word	0x2000006e

08005c0c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	32b0      	adds	r2, #176	; 0xb0
 8005c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01c      	beq.n	8005c64 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8005c36:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <MSC_BOT_Reset+0x60>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f003 fd51 	bl	80096e4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <MSC_BOT_Reset+0x64>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f003 fd4b 	bl	80096e4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005c4e:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <MSC_BOT_Reset+0x64>)
 8005c50:	7819      	ldrb	r1, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f248 0210 	movw	r2, #32784	; 0x8010
 8005c58:	441a      	add	r2, r3
 8005c5a:	231f      	movs	r3, #31
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f003 fdcc 	bl	80097fa <USBD_LL_PrepareReceive>
 8005c62:	e000      	b.n	8005c66 <MSC_BOT_Reset+0x5a>
    return;
 8005c64:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	2000006e 	.word	0x2000006e
 8005c70:	2000006f 	.word	0x2000006f

08005c74 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	32b0      	adds	r2, #176	; 0xb0
 8005c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	721a      	strb	r2, [r3, #8]
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	32b0      	adds	r2, #176	; 0xb0
 8005cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d022      	beq.n	8005d0c <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	7a1b      	ldrb	r3, [r3, #8]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d005      	beq.n	8005cda <MSC_BOT_DataIn+0x36>
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	db1e      	blt.n	8005d10 <MSC_BOT_DataIn+0x6c>
 8005cd2:	3b03      	subs	r3, #3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d81b      	bhi.n	8005d10 <MSC_BOT_DataIn+0x6c>
 8005cd8:	e013      	b.n	8005d02 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ce0:	7f59      	ldrb	r1, [r3, #29]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f248 031f 	movw	r3, #32799	; 0x801f
 8005ce8:	4413      	add	r3, r2
 8005cea:	461a      	mov	r2, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f9e5 	bl	80060bc <SCSI_ProcessCmd>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	da0d      	bge.n	8005d14 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f920 	bl	8005f40 <MSC_BOT_SendCSW>
      }
      break;
 8005d00:	e008      	b.n	8005d14 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005d02:	2100      	movs	r1, #0
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f91b 	bl	8005f40 <MSC_BOT_SendCSW>
      break;
 8005d0a:	e004      	b.n	8005d16 <MSC_BOT_DataIn+0x72>
    return;
 8005d0c:	bf00      	nop
 8005d0e:	e002      	b.n	8005d16 <MSC_BOT_DataIn+0x72>

    default:
      break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <MSC_BOT_DataIn+0x72>
      break;
 8005d14:	bf00      	nop
  }
}
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	32b0      	adds	r2, #176	; 0xb0
 8005d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d36:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01e      	beq.n	8005d7c <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	7a1b      	ldrb	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <MSC_BOT_DataOut+0x30>
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d004      	beq.n	8005d54 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005d4a:	e01a      	b.n	8005d82 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f81b 	bl	8005d88 <MSC_BOT_CBW_Decode>
      break;
 8005d52:	e016      	b.n	8005d82 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005d5a:	7f59      	ldrb	r1, [r3, #29]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f248 031f 	movw	r3, #32799	; 0x801f
 8005d62:	4413      	add	r3, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9a8 	bl	80060bc <SCSI_ProcessCmd>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da06      	bge.n	8005d80 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005d72:	2101      	movs	r1, #1
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f8e3 	bl	8005f40 <MSC_BOT_SendCSW>
      break;
 8005d7a:	e001      	b.n	8005d80 <MSC_BOT_DataOut+0x64>
    return;
 8005d7c:	bf00      	nop
 8005d7e:	e000      	b.n	8005d82 <MSC_BOT_DataOut+0x66>
      break;
 8005d80:	bf00      	nop
  }
}
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	32b0      	adds	r2, #176	; 0xb0
 8005d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8085 	beq.w	8005eb2 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8005db6:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8005dc6:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8005dc8:	4b3d      	ldr	r3, [pc, #244]	; (8005ec0 <MSC_BOT_CBW_Decode+0x138>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f003 fd34 	bl	800983c <USBD_LL_GetRxDataSize>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b1f      	cmp	r3, #31
 8005dd8:	d118      	bne.n	8005e0c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005de0:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8005de2:	4a38      	ldr	r2, [pc, #224]	; (8005ec4 <MSC_BOT_CBW_Decode+0x13c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d111      	bne.n	8005e0c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005dee:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d80b      	bhi.n	8005e0c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005dfa:	7f9b      	ldrb	r3, [r3, #30]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005e06:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d90f      	bls.n	8005e2c <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005e12:	7f59      	ldrb	r1, [r3, #29]
 8005e14:	2320      	movs	r3, #32
 8005e16:	2205      	movs	r2, #5
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fe7e 	bl	8006b1a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2202      	movs	r2, #2
 8005e22:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8cb 	bl	8005fc0 <MSC_BOT_Abort>
 8005e2a:	e045      	b.n	8005eb8 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005e32:	7f59      	ldrb	r1, [r3, #29]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	f248 031f 	movw	r3, #32799	; 0x801f
 8005e3a:	4413      	add	r3, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f93c 	bl	80060bc <SCSI_ProcessCmd>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da0c      	bge.n	8005e64 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	7a1b      	ldrb	r3, [r3, #8]
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d104      	bne.n	8005e5c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005e52:	2101      	movs	r1, #1
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f873 	bl	8005f40 <MSC_BOT_SendCSW>
 8005e5a:	e02d      	b.n	8005eb8 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f8af 	bl	8005fc0 <MSC_BOT_Abort>
 8005e62:	e029      	b.n	8005eb8 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	7a1b      	ldrb	r3, [r3, #8]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d024      	beq.n	8005eb6 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d020      	beq.n	8005eb6 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d01c      	beq.n	8005eb6 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f103 0110 	add.w	r1, r3, #16
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f819 	bl	8005ec8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005e96:	e00f      	b.n	8005eb8 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f84c 	bl	8005f40 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005ea8:	e006      	b.n	8005eb8 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f888 	bl	8005fc0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005eb0:	e002      	b.n	8005eb8 <MSC_BOT_CBW_Decode+0x130>
    return;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8005eb6:	bf00      	nop
    }
  }
}
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2000006f 	.word	0x2000006f
 8005ec4:	43425355 	.word	0x43425355

08005ec8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	32b0      	adds	r2, #176	; 0xb0
 8005ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d023      	beq.n	8005f32 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	bf28      	it	cs
 8005ef8:	4613      	movcs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8005f0e:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <MSC_BOT_SendData+0x74>)
 8005f24:	7819      	ldrb	r1, [r3, #0]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f003 fc44 	bl	80097b8 <USBD_LL_Transmit>
 8005f30:	e000      	b.n	8005f34 <MSC_BOT_SendData+0x6c>
    return;
 8005f32:	bf00      	nop
}
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	2000006e 	.word	0x2000006e

08005f40 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	32b0      	adds	r2, #176	; 0xb0
 8005f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d024      	beq.n	8005fac <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <MSC_BOT_SendCSW+0x74>)
 8005f6c:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005f74:	461a      	mov	r2, r3
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <MSC_BOT_SendCSW+0x78>)
 8005f84:	7819      	ldrb	r1, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f248 0230 	movw	r2, #32816	; 0x8030
 8005f8c:	441a      	add	r2, r3
 8005f8e:	230d      	movs	r3, #13
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f003 fc11 	bl	80097b8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005f96:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <MSC_BOT_SendCSW+0x7c>)
 8005f98:	7819      	ldrb	r1, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f248 0210 	movw	r2, #32784	; 0x8010
 8005fa0:	441a      	add	r2, r3
 8005fa2:	231f      	movs	r3, #31
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f003 fc28 	bl	80097fa <USBD_LL_PrepareReceive>
 8005faa:	e000      	b.n	8005fae <MSC_BOT_SendCSW+0x6e>
    return;
 8005fac:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	53425355 	.word	0x53425355
 8005fb8:	2000006e 	.word	0x2000006e
 8005fbc:	2000006f 	.word	0x2000006f

08005fc0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	32b0      	adds	r2, #176	; 0xb0
 8005fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02c      	beq.n	8006038 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005fe4:	7f1b      	ldrb	r3, [r3, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10f      	bne.n	800600a <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ff0:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d105      	bne.n	800600a <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005ffe:	4b10      	ldr	r3, [pc, #64]	; (8006040 <MSC_BOT_Abort+0x80>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f003 fb4e 	bl	80096a6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <MSC_BOT_Abort+0x84>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f003 fb48 	bl	80096a6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	7a5b      	ldrb	r3, [r3, #9]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d10d      	bne.n	800603a <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <MSC_BOT_Abort+0x84>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f003 fb3e 	bl	80096a6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <MSC_BOT_Abort+0x80>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f003 fb38 	bl	80096a6 <USBD_LL_StallEP>
 8006036:	e000      	b.n	800603a <MSC_BOT_Abort+0x7a>
    return;
 8006038:	bf00      	nop
  }
}
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	2000006f 	.word	0x2000006f
 8006044:	2000006e 	.word	0x2000006e

08006048 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	32b0      	adds	r2, #176	; 0xb0
 800605e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006062:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01d      	beq.n	80060a6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	7a5b      	ldrb	r3, [r3, #9]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d10c      	bne.n	800608c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <MSC_BOT_CplClrFeature+0x6c>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f003 fb14 	bl	80096a6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800607e:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <MSC_BOT_CplClrFeature+0x70>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f003 fb0e 	bl	80096a6 <USBD_LL_StallEP>
 800608a:	e00f      	b.n	80060ac <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800608c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	da0a      	bge.n	80060aa <MSC_BOT_CplClrFeature+0x62>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	7a5b      	ldrb	r3, [r3, #9]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d006      	beq.n	80060aa <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800609c:	2101      	movs	r1, #1
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ff4e 	bl	8005f40 <MSC_BOT_SendCSW>
 80060a4:	e002      	b.n	80060ac <MSC_BOT_CplClrFeature+0x64>
    return;
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80060aa:	bf00      	nop
  }
}
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	2000006e 	.word	0x2000006e
 80060b8:	2000006f 	.word	0x2000006f

080060bc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	460b      	mov	r3, r1
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	32b0      	adds	r2, #176	; 0xb0
 80060d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	e168      	b.n	80063b8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2baa      	cmp	r3, #170	; 0xaa
 80060ec:	f000 8144 	beq.w	8006378 <SCSI_ProcessCmd+0x2bc>
 80060f0:	2baa      	cmp	r3, #170	; 0xaa
 80060f2:	f300 8153 	bgt.w	800639c <SCSI_ProcessCmd+0x2e0>
 80060f6:	2ba8      	cmp	r3, #168	; 0xa8
 80060f8:	f000 812c 	beq.w	8006354 <SCSI_ProcessCmd+0x298>
 80060fc:	2ba8      	cmp	r3, #168	; 0xa8
 80060fe:	f300 814d 	bgt.w	800639c <SCSI_ProcessCmd+0x2e0>
 8006102:	2b5a      	cmp	r3, #90	; 0x5a
 8006104:	f300 80c0 	bgt.w	8006288 <SCSI_ProcessCmd+0x1cc>
 8006108:	2b00      	cmp	r3, #0
 800610a:	f2c0 8147 	blt.w	800639c <SCSI_ProcessCmd+0x2e0>
 800610e:	2b5a      	cmp	r3, #90	; 0x5a
 8006110:	f200 8144 	bhi.w	800639c <SCSI_ProcessCmd+0x2e0>
 8006114:	a201      	add	r2, pc, #4	; (adr r2, 800611c <SCSI_ProcessCmd+0x60>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	0800628f 	.word	0x0800628f
 8006120:	0800639d 	.word	0x0800639d
 8006124:	0800639d 	.word	0x0800639d
 8006128:	080062a1 	.word	0x080062a1
 800612c:	0800639d 	.word	0x0800639d
 8006130:	0800639d 	.word	0x0800639d
 8006134:	0800639d 	.word	0x0800639d
 8006138:	0800639d 	.word	0x0800639d
 800613c:	0800639d 	.word	0x0800639d
 8006140:	0800639d 	.word	0x0800639d
 8006144:	0800639d 	.word	0x0800639d
 8006148:	0800639d 	.word	0x0800639d
 800614c:	0800639d 	.word	0x0800639d
 8006150:	0800639d 	.word	0x0800639d
 8006154:	0800639d 	.word	0x0800639d
 8006158:	0800639d 	.word	0x0800639d
 800615c:	0800639d 	.word	0x0800639d
 8006160:	0800639d 	.word	0x0800639d
 8006164:	080062b3 	.word	0x080062b3
 8006168:	0800639d 	.word	0x0800639d
 800616c:	0800639d 	.word	0x0800639d
 8006170:	0800639d 	.word	0x0800639d
 8006174:	0800639d 	.word	0x0800639d
 8006178:	0800639d 	.word	0x0800639d
 800617c:	0800639d 	.word	0x0800639d
 8006180:	0800639d 	.word	0x0800639d
 8006184:	080062e9 	.word	0x080062e9
 8006188:	080062c5 	.word	0x080062c5
 800618c:	0800639d 	.word	0x0800639d
 8006190:	0800639d 	.word	0x0800639d
 8006194:	080062d7 	.word	0x080062d7
 8006198:	0800639d 	.word	0x0800639d
 800619c:	0800639d 	.word	0x0800639d
 80061a0:	0800639d 	.word	0x0800639d
 80061a4:	0800639d 	.word	0x0800639d
 80061a8:	0800630d 	.word	0x0800630d
 80061ac:	0800639d 	.word	0x0800639d
 80061b0:	0800631f 	.word	0x0800631f
 80061b4:	0800639d 	.word	0x0800639d
 80061b8:	0800639d 	.word	0x0800639d
 80061bc:	08006343 	.word	0x08006343
 80061c0:	0800639d 	.word	0x0800639d
 80061c4:	08006367 	.word	0x08006367
 80061c8:	0800639d 	.word	0x0800639d
 80061cc:	0800639d 	.word	0x0800639d
 80061d0:	0800639d 	.word	0x0800639d
 80061d4:	0800639d 	.word	0x0800639d
 80061d8:	0800638b 	.word	0x0800638b
 80061dc:	0800639d 	.word	0x0800639d
 80061e0:	0800639d 	.word	0x0800639d
 80061e4:	0800639d 	.word	0x0800639d
 80061e8:	0800639d 	.word	0x0800639d
 80061ec:	0800639d 	.word	0x0800639d
 80061f0:	0800639d 	.word	0x0800639d
 80061f4:	0800639d 	.word	0x0800639d
 80061f8:	0800639d 	.word	0x0800639d
 80061fc:	0800639d 	.word	0x0800639d
 8006200:	0800639d 	.word	0x0800639d
 8006204:	0800639d 	.word	0x0800639d
 8006208:	0800639d 	.word	0x0800639d
 800620c:	0800639d 	.word	0x0800639d
 8006210:	0800639d 	.word	0x0800639d
 8006214:	0800639d 	.word	0x0800639d
 8006218:	0800639d 	.word	0x0800639d
 800621c:	0800639d 	.word	0x0800639d
 8006220:	0800639d 	.word	0x0800639d
 8006224:	0800639d 	.word	0x0800639d
 8006228:	0800639d 	.word	0x0800639d
 800622c:	0800639d 	.word	0x0800639d
 8006230:	0800639d 	.word	0x0800639d
 8006234:	0800639d 	.word	0x0800639d
 8006238:	0800639d 	.word	0x0800639d
 800623c:	0800639d 	.word	0x0800639d
 8006240:	0800639d 	.word	0x0800639d
 8006244:	0800639d 	.word	0x0800639d
 8006248:	0800639d 	.word	0x0800639d
 800624c:	0800639d 	.word	0x0800639d
 8006250:	0800639d 	.word	0x0800639d
 8006254:	0800639d 	.word	0x0800639d
 8006258:	0800639d 	.word	0x0800639d
 800625c:	0800639d 	.word	0x0800639d
 8006260:	0800639d 	.word	0x0800639d
 8006264:	0800639d 	.word	0x0800639d
 8006268:	0800639d 	.word	0x0800639d
 800626c:	0800639d 	.word	0x0800639d
 8006270:	0800639d 	.word	0x0800639d
 8006274:	0800639d 	.word	0x0800639d
 8006278:	0800639d 	.word	0x0800639d
 800627c:	0800639d 	.word	0x0800639d
 8006280:	0800639d 	.word	0x0800639d
 8006284:	080062fb 	.word	0x080062fb
 8006288:	2b9e      	cmp	r3, #158	; 0x9e
 800628a:	d051      	beq.n	8006330 <SCSI_ProcessCmd+0x274>
 800628c:	e086      	b.n	800639c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800628e:	7afb      	ldrb	r3, [r7, #11]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	4619      	mov	r1, r3
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f893 	bl	80063c0 <SCSI_TestUnitReady>
 800629a:	4603      	mov	r3, r0
 800629c:	75fb      	strb	r3, [r7, #23]
      break;
 800629e:	e089      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	4619      	mov	r1, r3
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fb98 	bl	80069dc <SCSI_RequestSense>
 80062ac:	4603      	mov	r3, r0
 80062ae:	75fb      	strb	r3, [r7, #23]
      break;
 80062b0:	e080      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80062b2:	7afb      	ldrb	r3, [r7, #11]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	4619      	mov	r1, r3
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f8df 	bl	800647c <SCSI_Inquiry>
 80062be:	4603      	mov	r3, r0
 80062c0:	75fb      	strb	r3, [r7, #23]
      break;
 80062c2:	e077      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80062c4:	7afb      	ldrb	r3, [r7, #11]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	4619      	mov	r1, r3
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fc86 	bl	8006bdc <SCSI_StartStopUnit>
 80062d0:	4603      	mov	r3, r0
 80062d2:	75fb      	strb	r3, [r7, #23]
      break;
 80062d4:	e06e      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80062d6:	7afb      	ldrb	r3, [r7, #11]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4619      	mov	r1, r3
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fcda 	bl	8006c96 <SCSI_AllowPreventRemovable>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]
      break;
 80062e6:	e065      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4619      	mov	r1, r3
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fb14 	bl	800691c <SCSI_ModeSense6>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]
      break;
 80062f8:	e05c      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80062fa:	7afb      	ldrb	r3, [r7, #11]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	4619      	mov	r1, r3
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fb3b 	bl	800697c <SCSI_ModeSense10>
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]
      break;
 800630a:	e053      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4619      	mov	r1, r3
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fa85 	bl	8006822 <SCSI_ReadFormatCapacity>
 8006318:	4603      	mov	r3, r0
 800631a:	75fb      	strb	r3, [r7, #23]
      break;
 800631c:	e04a      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800631e:	7afb      	ldrb	r3, [r7, #11]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4619      	mov	r1, r3
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f929 	bl	800657c <SCSI_ReadCapacity10>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]
      break;
 800632e:	e041      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006330:	7afb      	ldrb	r3, [r7, #11]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4619      	mov	r1, r3
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f9af 	bl	800669a <SCSI_ReadCapacity16>
 800633c:	4603      	mov	r3, r0
 800633e:	75fb      	strb	r3, [r7, #23]
      break;
 8006340:	e038      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4619      	mov	r1, r3
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fcd5 	bl	8006cf8 <SCSI_Read10>
 800634e:	4603      	mov	r3, r0
 8006350:	75fb      	strb	r3, [r7, #23]
      break;
 8006352:	e02f      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006354:	7afb      	ldrb	r3, [r7, #11]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4619      	mov	r1, r3
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fd83 	bl	8006e66 <SCSI_Read12>
 8006360:	4603      	mov	r3, r0
 8006362:	75fb      	strb	r3, [r7, #23]
      break;
 8006364:	e026      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006366:	7afb      	ldrb	r3, [r7, #11]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	4619      	mov	r1, r3
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fe3b 	bl	8006fe8 <SCSI_Write10>
 8006372:	4603      	mov	r3, r0
 8006374:	75fb      	strb	r3, [r7, #23]
      break;
 8006376:	e01d      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4619      	mov	r1, r3
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 ff16 	bl	80071b0 <SCSI_Write12>
 8006384:	4603      	mov	r3, r0
 8006386:	75fb      	strb	r3, [r7, #23]
      break;
 8006388:	e014      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	4619      	mov	r1, r3
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f001 f801 	bl	8007398 <SCSI_Verify10>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]
      break;
 800639a:	e00b      	b.n	80063b4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800639c:	7af9      	ldrb	r1, [r7, #11]
 800639e:	2320      	movs	r3, #32
 80063a0:	2205      	movs	r2, #5
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fbb9 	bl	8006b1a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2202      	movs	r2, #2
 80063ac:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80063ae:	23ff      	movs	r3, #255	; 0xff
 80063b0:	75fb      	strb	r3, [r7, #23]
      break;
 80063b2:	bf00      	nop
  }

  return ret;
 80063b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	460b      	mov	r3, r1
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	32b0      	adds	r2, #176	; 0xb0
 80063d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063dc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80063e4:	f04f 33ff 	mov.w	r3, #4294967295
 80063e8:	e043      	b.n	8006472 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80063fc:	7f59      	ldrb	r1, [r3, #29]
 80063fe:	2320      	movs	r3, #32
 8006400:	2205      	movs	r2, #5
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fb89 	bl	8006b1a <SCSI_SenseCode>

    return -1;
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	e031      	b.n	8006472 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006414:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006418:	2b02      	cmp	r3, #2
 800641a:	d10b      	bne.n	8006434 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800641c:	7af9      	ldrb	r1, [r7, #11]
 800641e:	233a      	movs	r3, #58	; 0x3a
 8006420:	2202      	movs	r2, #2
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 fb79 	bl	8006b1a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2205      	movs	r2, #5
 800642c:	721a      	strb	r2, [r3, #8]
    return -1;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	e01e      	b.n	8006472 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	33b0      	adds	r3, #176	; 0xb0
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	7afa      	ldrb	r2, [r7, #11]
 8006448:	4610      	mov	r0, r2
 800644a:	4798      	blx	r3
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006452:	7af9      	ldrb	r1, [r7, #11]
 8006454:	233a      	movs	r3, #58	; 0x3a
 8006456:	2202      	movs	r2, #2
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fb5e 	bl	8006b1a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2205      	movs	r2, #5
 8006462:	721a      	strb	r2, [r3, #8]

    return -1;
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	e003      	b.n	8006472 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2200      	movs	r2, #0
 800646e:	60da      	str	r2, [r3, #12]

  return 0;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	460b      	mov	r3, r1
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	32b0      	adds	r2, #176	; 0xb0
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d102      	bne.n	80064a6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 80064a0:	f04f 33ff 	mov.w	r3, #4294967295
 80064a4:	e062      	b.n	800656c <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80064b8:	7f59      	ldrb	r1, [r3, #29]
 80064ba:	2320      	movs	r3, #32
 80064bc:	2205      	movs	r2, #5
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fb2b 	bl	8006b1a <SCSI_SenseCode>
    return -1;
 80064c4:	f04f 33ff 	mov.w	r3, #4294967295
 80064c8:	e050      	b.n	800656c <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3301      	adds	r3, #1
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d021      	beq.n	800651c <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3302      	adds	r3, #2
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d105      	bne.n	80064ee <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80064e2:	2206      	movs	r2, #6
 80064e4:	4923      	ldr	r1, [pc, #140]	; (8006574 <SCSI_Inquiry+0xf8>)
 80064e6:	69b8      	ldr	r0, [r7, #24]
 80064e8:	f001 f902 	bl	80076f0 <SCSI_UpdateBotData>
 80064ec:	e03d      	b.n	800656a <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3302      	adds	r3, #2
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d105      	bne.n	8006504 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80064f8:	2208      	movs	r2, #8
 80064fa:	491f      	ldr	r1, [pc, #124]	; (8006578 <SCSI_Inquiry+0xfc>)
 80064fc:	69b8      	ldr	r0, [r7, #24]
 80064fe:	f001 f8f7 	bl	80076f0 <SCSI_UpdateBotData>
 8006502:	e032      	b.n	800656a <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800650a:	7f59      	ldrb	r1, [r3, #29]
 800650c:	2324      	movs	r3, #36	; 0x24
 800650e:	2205      	movs	r2, #5
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fb02 	bl	8006b1a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	e027      	b.n	800656c <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	33b0      	adds	r3, #176	; 0xb0
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	69d9      	ldr	r1, [r3, #28]
 800652e:	7afa      	ldrb	r2, [r7, #11]
 8006530:	4613      	mov	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3304      	adds	r3, #4
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	3305      	adds	r3, #5
 8006546:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3304      	adds	r3, #4
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	8bfa      	ldrh	r2, [r7, #30]
 8006552:	429a      	cmp	r2, r3
 8006554:	d303      	bcc.n	800655e <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3304      	adds	r3, #4
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800655e:	8bfb      	ldrh	r3, [r7, #30]
 8006560:	461a      	mov	r2, r3
 8006562:	6979      	ldr	r1, [r7, #20]
 8006564:	69b8      	ldr	r0, [r7, #24]
 8006566:	f001 f8c3 	bl	80076f0 <SCSI_UpdateBotData>
  }

  return 0;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20000070 	.word	0x20000070
 8006578:	20000078 	.word	0x20000078

0800657c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800657c:	b590      	push	{r4, r7, lr}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	460b      	mov	r3, r1
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	32b0      	adds	r2, #176	; 0xb0
 8006594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006598:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80065a0:	f04f 33ff 	mov.w	r3, #4294967295
 80065a4:	e075      	b.n	8006692 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	33b0      	adds	r3, #176	; 0xb0
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	685c      	ldr	r4, [r3, #4]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	f248 0368 	movw	r3, #32872	; 0x8068
 80065be:	4413      	add	r3, r2
 80065c0:	6979      	ldr	r1, [r7, #20]
 80065c2:	f248 0264 	movw	r2, #32868	; 0x8064
 80065c6:	440a      	add	r2, r1
 80065c8:	7af8      	ldrb	r0, [r7, #11]
 80065ca:	4619      	mov	r1, r3
 80065cc:	47a0      	blx	r4
 80065ce:	4603      	mov	r3, r0
 80065d0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80065d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <SCSI_ReadCapacity10+0x6c>
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80065e0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d108      	bne.n	80065fa <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80065e8:	7af9      	ldrb	r1, [r7, #11]
 80065ea:	233a      	movs	r3, #58	; 0x3a
 80065ec:	2202      	movs	r2, #2
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fa93 	bl	8006b1a <SCSI_SenseCode>
    return -1;
 80065f4:	f04f 33ff 	mov.w	r3, #4294967295
 80065f8:	e04b      	b.n	8006692 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006602:	3b01      	subs	r3, #1
 8006604:	0e1b      	lsrs	r3, r3, #24
 8006606:	b2da      	uxtb	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006614:	3b01      	subs	r3, #1
 8006616:	0c1b      	lsrs	r3, r3, #16
 8006618:	b2da      	uxtb	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006626:	3b01      	subs	r3, #1
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	b2da      	uxtb	r2, r3
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006638:	b2db      	uxtb	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b2da      	uxtb	r2, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006648:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800664c:	161b      	asrs	r3, r3, #24
 800664e:	b2da      	uxtb	r2, r3
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800665a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800665e:	141b      	asrs	r3, r3, #16
 8006660:	b2da      	uxtb	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800666c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	b29b      	uxth	r3, r3
 8006674:	b2da      	uxtb	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006680:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006684:	b2da      	uxtb	r2, r3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2208      	movs	r2, #8
 800668e:	60da      	str	r2, [r3, #12]

  return 0;
 8006690:	2300      	movs	r3, #0

}
 8006692:	4618      	mov	r0, r3
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	bd90      	pop	{r4, r7, pc}

0800669a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800669a:	b590      	push	{r4, r7, lr}
 800669c:	b089      	sub	sp, #36	; 0x24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	460b      	mov	r3, r1
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	32b0      	adds	r2, #176	; 0xb0
 80066b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	e0aa      	b.n	800681a <SCSI_ReadCapacity16+0x180>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	33b0      	adds	r3, #176	; 0xb0
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	685c      	ldr	r4, [r3, #4]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	f248 0368 	movw	r3, #32872	; 0x8068
 80066dc:	4413      	add	r3, r2
 80066de:	69b9      	ldr	r1, [r7, #24]
 80066e0:	f248 0264 	movw	r2, #32868	; 0x8064
 80066e4:	440a      	add	r2, r1
 80066e6:	7af8      	ldrb	r0, [r7, #11]
 80066e8:	4619      	mov	r1, r3
 80066ea:	47a0      	blx	r4
 80066ec:	4603      	mov	r3, r0
 80066ee:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80066f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <SCSI_ReadCapacity16+0x6c>
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80066fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006702:	2b02      	cmp	r3, #2
 8006704:	d108      	bne.n	8006718 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006706:	7af9      	ldrb	r1, [r7, #11]
 8006708:	233a      	movs	r3, #58	; 0x3a
 800670a:	2202      	movs	r2, #2
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fa04 	bl	8006b1a <SCSI_SenseCode>
    return -1;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
 8006716:	e080      	b.n	800681a <SCSI_ReadCapacity16+0x180>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	330a      	adds	r3, #10
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	330b      	adds	r3, #11
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006728:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	330c      	adds	r3, #12
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006732:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	320d      	adds	r2, #13
 8006738:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800673a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006740:	2300      	movs	r3, #0
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e007      	b.n	8006756 <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 8006746:	7ffb      	ldrb	r3, [r7, #31]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4413      	add	r3, r2
 800674c:	2200      	movs	r2, #0
 800674e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006750:	7ffb      	ldrb	r3, [r7, #31]
 8006752:	3301      	adds	r3, #1
 8006754:	77fb      	strb	r3, [r7, #31]
 8006756:	7ffa      	ldrb	r2, [r7, #31]
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	429a      	cmp	r2, r3
 800675e:	d3f2      	bcc.n	8006746 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006768:	3b01      	subs	r3, #1
 800676a:	0e1b      	lsrs	r3, r3, #24
 800676c:	b2da      	uxtb	r2, r3
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800677a:	3b01      	subs	r3, #1
 800677c:	0c1b      	lsrs	r3, r3, #16
 800677e:	b2da      	uxtb	r2, r3
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800678a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800678c:	3b01      	subs	r3, #1
 800678e:	0a1b      	lsrs	r3, r3, #8
 8006790:	b2da      	uxtb	r2, r3
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800679c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80067ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80067b2:	161b      	asrs	r3, r3, #24
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80067c0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80067c4:	141b      	asrs	r3, r3, #16
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80067d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	b29b      	uxth	r3, r3
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80067e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	330a      	adds	r3, #10
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	330b      	adds	r3, #11
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006800:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	330c      	adds	r3, #12
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800680a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	320d      	adds	r2, #13
 8006810:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006812:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	60da      	str	r2, [r3, #12]

  return 0;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3724      	adds	r7, #36	; 0x24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd90      	pop	{r4, r7, pc}

08006822 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b088      	sub	sp, #32
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	460b      	mov	r3, r1
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	32b0      	adds	r2, #176	; 0xb0
 800683a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	e063      	b.n	8006914 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	33b0      	adds	r3, #176	; 0xb0
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f107 0214 	add.w	r2, r7, #20
 8006862:	f107 0110 	add.w	r1, r7, #16
 8006866:	7af8      	ldrb	r0, [r7, #11]
 8006868:	4798      	blx	r3
 800686a:	4603      	mov	r3, r0
 800686c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800686e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <SCSI_ReadFormatCapacity+0x62>
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800687c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006880:	2b02      	cmp	r3, #2
 8006882:	d108      	bne.n	8006896 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006884:	7af9      	ldrb	r1, [r7, #11]
 8006886:	233a      	movs	r3, #58	; 0x3a
 8006888:	2202      	movs	r2, #2
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 f945 	bl	8006b1a <SCSI_SenseCode>
    return -1;
 8006890:	f04f 33ff 	mov.w	r3, #4294967295
 8006894:	e03e      	b.n	8006914 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8006896:	2300      	movs	r3, #0
 8006898:	83fb      	strh	r3, [r7, #30]
 800689a:	e007      	b.n	80068ac <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800689c:	8bfb      	ldrh	r3, [r7, #30]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4413      	add	r3, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80068a6:	8bfb      	ldrh	r3, [r7, #30]
 80068a8:	3301      	adds	r3, #1
 80068aa:	83fb      	strh	r3, [r7, #30]
 80068ac:	8bfb      	ldrh	r3, [r7, #30]
 80068ae:	2b0b      	cmp	r3, #11
 80068b0:	d9f4      	bls.n	800689c <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2208      	movs	r2, #8
 80068b6:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	0e1b      	lsrs	r3, r3, #24
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	0a1b      	lsrs	r3, r3, #8
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2202      	movs	r2, #2
 80068ec:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80068ee:	8abb      	ldrh	r3, [r7, #20]
 80068f0:	141b      	asrs	r3, r3, #16
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80068f8:	8abb      	ldrh	r3, [r7, #20]
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006904:	8abb      	ldrh	r3, [r7, #20]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	220c      	movs	r2, #12
 8006910:	60da      	str	r2, [r3, #12]

  return 0;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3720      	adds	r7, #32
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	460b      	mov	r3, r1
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	32b0      	adds	r2, #176	; 0xb0
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800693a:	2317      	movs	r3, #23
 800693c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d102      	bne.n	800694a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8006944:	f04f 33ff 	mov.w	r3, #4294967295
 8006948:	e011      	b.n	800696e <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3304      	adds	r3, #4
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	8afa      	ldrh	r2, [r7, #22]
 8006954:	429a      	cmp	r2, r3
 8006956:	d303      	bcc.n	8006960 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3304      	adds	r3, #4
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8006960:	8afb      	ldrh	r3, [r7, #22]
 8006962:	461a      	mov	r2, r3
 8006964:	4904      	ldr	r1, [pc, #16]	; (8006978 <SCSI_ModeSense6+0x5c>)
 8006966:	6938      	ldr	r0, [r7, #16]
 8006968:	f000 fec2 	bl	80076f0 <SCSI_UpdateBotData>

  return 0;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000080 	.word	0x20000080

0800697c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	460b      	mov	r3, r1
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	32b0      	adds	r2, #176	; 0xb0
 8006994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006998:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800699a:	231b      	movs	r3, #27
 800699c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295
 80069a8:	e011      	b.n	80069ce <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3308      	adds	r3, #8
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8afa      	ldrh	r2, [r7, #22]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d303      	bcc.n	80069c0 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3308      	adds	r3, #8
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80069c0:	8afb      	ldrh	r3, [r7, #22]
 80069c2:	461a      	mov	r2, r3
 80069c4:	4904      	ldr	r1, [pc, #16]	; (80069d8 <SCSI_ModeSense10+0x5c>)
 80069c6:	6938      	ldr	r0, [r7, #16]
 80069c8:	f000 fe92 	bl	80076f0 <SCSI_UpdateBotData>

  return 0;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000098 	.word	0x20000098

080069dc <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	460b      	mov	r3, r1
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	32b0      	adds	r2, #176	; 0xb0
 80069f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295
 8006a04:	e085      	b.n	8006b12 <SCSI_RequestSense+0x136>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a18:	7f59      	ldrb	r1, [r3, #29]
 8006a1a:	2320      	movs	r3, #32
 8006a1c:	2205      	movs	r2, #5
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f87b 	bl	8006b1a <SCSI_SenseCode>
    return -1;
 8006a24:	f04f 33ff 	mov.w	r3, #4294967295
 8006a28:	e073      	b.n	8006b12 <SCSI_RequestSense+0x136>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75fb      	strb	r3, [r7, #23]
 8006a2e:	e007      	b.n	8006a40 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4413      	add	r3, r2
 8006a36:	2200      	movs	r2, #0
 8006a38:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	75fb      	strb	r3, [r7, #23]
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b11      	cmp	r3, #17
 8006a44:	d9f4      	bls.n	8006a30 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2270      	movs	r2, #112	; 0x70
 8006a4a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	220c      	movs	r2, #12
 8006a50:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a58:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a62:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d044      	beq.n	8006af4 <SCSI_RequestSense+0x118>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a70:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006a74:	4619      	mov	r1, r3
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	f241 0308 	movw	r3, #4104	; 0x1008
 8006a7c:	440b      	add	r3, r1
 8006a7e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a8c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006a90:	4619      	mov	r1, r3
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	f241 0308 	movw	r3, #4104	; 0x1008
 8006a98:	440b      	add	r3, r1
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	4413      	add	r3, r2
 8006a9e:	791a      	ldrb	r2, [r3, #4]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006aaa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006aae:	4619      	mov	r1, r3
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	f241 0308 	movw	r3, #4104	; 0x1008
 8006ab6:	440b      	add	r3, r1
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	4413      	add	r3, r2
 8006abc:	795a      	ldrb	r2, [r3, #5]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ac8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006acc:	3301      	adds	r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ad6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ae0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d105      	bne.n	8006af4 <SCSI_RequestSense+0x118>
    {
      hmsc->scsi_sense_head = 0U;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2212      	movs	r2, #18
 8006af8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3304      	adds	r3, #4
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b12      	cmp	r3, #18
 8006b02:	d805      	bhi.n	8006b10 <SCSI_RequestSense+0x134>
  {
    hmsc->bot_data_length = params[4];
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3304      	adds	r3, #4
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	461a      	mov	r2, r3
 8006b28:	4603      	mov	r3, r0
 8006b2a:	70fb      	strb	r3, [r7, #3]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70bb      	strb	r3, [r7, #2]
 8006b30:	4613      	mov	r3, r2
 8006b32:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	32b0      	adds	r2, #176	; 0xb0
 8006b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b42:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d042      	beq.n	8006bd0 <SCSI_SenseCode+0xb6>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006b50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006b54:	4619      	mov	r1, r3
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	f241 0308 	movw	r3, #4104	; 0x1008
 8006b5c:	440b      	add	r3, r1
 8006b5e:	78b9      	ldrb	r1, [r7, #2]
 8006b60:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006b6a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006b6e:	4619      	mov	r1, r3
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	f241 0308 	movw	r3, #4104	; 0x1008
 8006b76:	440b      	add	r3, r1
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	787a      	ldrb	r2, [r7, #1]
 8006b7e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006b86:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	f241 0308 	movw	r3, #4104	; 0x1008
 8006b92:	440b      	add	r3, r1
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4413      	add	r3, r2
 8006b98:	2200      	movs	r2, #0
 8006b9a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ba2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006bb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006bba:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d107      	bne.n	8006bd2 <SCSI_SenseCode+0xb8>
  {
    hmsc->scsi_sense_tail = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8006bce:	e000      	b.n	8006bd2 <SCSI_SenseCode+0xb8>
    return;
 8006bd0:	bf00      	nop
  }
}
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	460b      	mov	r3, r1
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	32b0      	adds	r2, #176	; 0xb0
 8006bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d102      	bne.n	8006c06 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8006c00:	f04f 33ff 	mov.w	r3, #4294967295
 8006c04:	e043      	b.n	8006c8e <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006c0c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d10f      	bne.n	8006c34 <SCSI_StartStopUnit+0x58>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d108      	bne.n	8006c34 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006c22:	7af9      	ldrb	r1, [r7, #11]
 8006c24:	2324      	movs	r3, #36	; 0x24
 8006c26:	2205      	movs	r2, #5
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff ff76 	bl	8006b1a <SCSI_SenseCode>

    return -1;
 8006c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c32:	e02c      	b.n	8006c8e <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d106      	bne.n	8006c50 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8006c4e:	e01a      	b.n	8006c86 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3304      	adds	r3, #4
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d106      	bne.n	8006c6c <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006c64:	2202      	movs	r2, #2
 8006c66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8006c6a:	e00c      	b.n	8006c86 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d105      	bne.n	8006c86 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	60da      	str	r2, [r3, #12]

  return 0;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b087      	sub	sp, #28
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	607a      	str	r2, [r7, #4]
 8006ca2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	32b0      	adds	r2, #176	; 0xb0
 8006cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbe:	e015      	b.n	8006cec <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8006cd6:	e005      	b.n	8006ce4 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	60da      	str	r2, [r3, #12]

  return 0;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	460b      	mov	r3, r1
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	32b0      	adds	r2, #176	; 0xb0
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <SCSI_Read10+0x2a>
  {
    return -1;
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d20:	e09d      	b.n	8006e5e <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	7a1b      	ldrb	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 808f 	bne.w	8006e4a <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d32:	7f1b      	ldrb	r3, [r3, #28]
 8006d34:	b25b      	sxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	db0b      	blt.n	8006d52 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d40:	7f59      	ldrb	r1, [r3, #29]
 8006d42:	2320      	movs	r3, #32
 8006d44:	2205      	movs	r2, #5
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7ff fee7 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8006d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d50:	e085      	b.n	8006e5e <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d58:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d108      	bne.n	8006d72 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d60:	7af9      	ldrb	r1, [r7, #11]
 8006d62:	233a      	movs	r3, #58	; 0x3a
 8006d64:	2202      	movs	r2, #2
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7ff fed7 	bl	8006b1a <SCSI_SenseCode>

      return -1;
 8006d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d70:	e075      	b.n	8006e5e <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	33b0      	adds	r3, #176	; 0xb0
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	7afa      	ldrb	r2, [r7, #11]
 8006d86:	4610      	mov	r0, r2
 8006d88:	4798      	blx	r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d008      	beq.n	8006da2 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d90:	7af9      	ldrb	r1, [r7, #11]
 8006d92:	233a      	movs	r3, #58	; 0x3a
 8006d94:	2202      	movs	r2, #2
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff febf 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8006d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006da0:	e05d      	b.n	8006e5e <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3302      	adds	r3, #2
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3303      	adds	r3, #3
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006db2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006dbc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	3205      	adds	r2, #5
 8006dc2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006dc4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8006dcc:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3307      	adds	r3, #7
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	3208      	adds	r2, #8
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8006de4:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006dec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	7af9      	ldrb	r1, [r7, #11]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fb0c 	bl	8007416 <SCSI_CheckAddressRange>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	da02      	bge.n	8006e0a <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	e029      	b.n	8006e5e <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	6979      	ldr	r1, [r7, #20]
 8006e1c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8006e20:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8006e24:	fb01 f303 	mul.w	r3, r1, r3
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d00b      	beq.n	8006e44 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006e32:	7f59      	ldrb	r1, [r3, #29]
 8006e34:	2320      	movs	r3, #32
 8006e36:	2205      	movs	r2, #5
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fe6e 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8006e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e42:	e00c      	b.n	8006e5e <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2202      	movs	r2, #2
 8006e48:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006e50:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	4619      	mov	r1, r3
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fb0a 	bl	8007470 <SCSI_ProcessRead>
 8006e5c:	4603      	mov	r3, r0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	32b0      	adds	r2, #176	; 0xb0
 8006e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e82:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <SCSI_Read12+0x2a>
  {
    return -1;
 8006e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e8e:	e0a7      	b.n	8006fe0 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	7a1b      	ldrb	r3, [r3, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f040 8099 	bne.w	8006fcc <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ea0:	7f1b      	ldrb	r3, [r3, #28]
 8006ea2:	b25b      	sxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	db0b      	blt.n	8006ec0 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006eae:	7f59      	ldrb	r1, [r3, #29]
 8006eb0:	2320      	movs	r3, #32
 8006eb2:	2205      	movs	r2, #5
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff fe30 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8006eba:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebe:	e08f      	b.n	8006fe0 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ec6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d108      	bne.n	8006ee0 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006ece:	7af9      	ldrb	r1, [r7, #11]
 8006ed0:	233a      	movs	r3, #58	; 0x3a
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fe20 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295
 8006ede:	e07f      	b.n	8006fe0 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	33b0      	adds	r3, #176	; 0xb0
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	7afa      	ldrb	r2, [r7, #11]
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d008      	beq.n	8006f10 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006efe:	7af9      	ldrb	r1, [r7, #11]
 8006f00:	233a      	movs	r3, #58	; 0x3a
 8006f02:	2202      	movs	r2, #2
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fe08 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0e:	e067      	b.n	8006fe0 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3302      	adds	r3, #2
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3303      	adds	r3, #3
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006f20:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3304      	adds	r3, #4
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006f2a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	3205      	adds	r2, #5
 8006f30:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006f32:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8006f3a:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3306      	adds	r3, #6
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3307      	adds	r3, #7
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006f4c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3308      	adds	r3, #8
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006f56:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	3209      	adds	r2, #9
 8006f5c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006f5e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8006f66:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	7af9      	ldrb	r1, [r7, #11]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fa4b 	bl	8007416 <SCSI_CheckAddressRange>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da02      	bge.n	8006f8c <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8a:	e029      	b.n	8006fe0 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9c:	6979      	ldr	r1, [r7, #20]
 8006f9e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8006fa2:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8006fa6:	fb01 f303 	mul.w	r3, r1, r3
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d00b      	beq.n	8006fc6 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006fb4:	7f59      	ldrb	r1, [r3, #29]
 8006fb6:	2320      	movs	r3, #32
 8006fb8:	2205      	movs	r2, #5
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7ff fdad 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8006fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc4:	e00c      	b.n	8006fe0 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006fd2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fa49 	bl	8007470 <SCSI_ProcessRead>
 8006fde:	4603      	mov	r3, r0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	32b0      	adds	r2, #176	; 0xb0
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <SCSI_Write10+0x2a>
  {
    return -1;
 800700c:	f04f 33ff 	mov.w	r3, #4294967295
 8007010:	e0c7      	b.n	80071a2 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	7a1b      	ldrb	r3, [r3, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f040 80bd 	bne.w	8007196 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800702e:	7f59      	ldrb	r1, [r3, #29]
 8007030:	2320      	movs	r3, #32
 8007032:	2205      	movs	r2, #5
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff fd70 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	e0b0      	b.n	80071a2 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007046:	7f1b      	ldrb	r3, [r3, #28]
 8007048:	b25b      	sxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	da0b      	bge.n	8007066 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007054:	7f59      	ldrb	r1, [r3, #29]
 8007056:	2320      	movs	r3, #32
 8007058:	2205      	movs	r2, #5
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7ff fd5d 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	e09d      	b.n	80071a2 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	33b0      	adds	r3, #176	; 0xb0
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	7afa      	ldrb	r2, [r7, #11]
 800707a:	4610      	mov	r0, r2
 800707c:	4798      	blx	r3
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007084:	7af9      	ldrb	r1, [r7, #11]
 8007086:	233a      	movs	r3, #58	; 0x3a
 8007088:	2202      	movs	r2, #2
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fd45 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8007090:	f04f 33ff 	mov.w	r3, #4294967295
 8007094:	e085      	b.n	80071a2 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	33b0      	adds	r3, #176	; 0xb0
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	7afa      	ldrb	r2, [r7, #11]
 80070aa:	4610      	mov	r0, r2
 80070ac:	4798      	blx	r3
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80070b4:	7af9      	ldrb	r1, [r7, #11]
 80070b6:	2327      	movs	r3, #39	; 0x27
 80070b8:	2202      	movs	r2, #2
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7ff fd2d 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295
 80070c4:	e06d      	b.n	80071a2 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3302      	adds	r3, #2
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3303      	adds	r3, #3
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80070d6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3304      	adds	r3, #4
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80070e0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	3205      	adds	r2, #5
 80070e6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80070e8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80070f0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3307      	adds	r3, #7
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	3208      	adds	r2, #8
 80070fe:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007100:	4313      	orrs	r3, r2
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8007108:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007110:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	7af9      	ldrb	r1, [r7, #11]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f97a 	bl	8007416 <SCSI_CheckAddressRange>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	da02      	bge.n	800712e <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007128:	f04f 33ff 	mov.w	r3, #4294967295
 800712c:	e039      	b.n	80071a2 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800713c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	429a      	cmp	r2, r3
 8007152:	d00b      	beq.n	800716c <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800715a:	7f59      	ldrb	r1, [r3, #29]
 800715c:	2320      	movs	r3, #32
 800715e:	2205      	movs	r2, #5
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff fcda 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	e01a      	b.n	80071a2 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007172:	bf28      	it	cs
 8007174:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8007178:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2201      	movs	r2, #1
 800717e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8007180:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <SCSI_Write10+0x1c4>)
 8007182:	7819      	ldrb	r1, [r3, #0]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f103 0210 	add.w	r2, r3, #16
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f002 fb34 	bl	80097fa <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007192:	2300      	movs	r3, #0
 8007194:	e005      	b.n	80071a2 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	4619      	mov	r1, r3
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f9fe 	bl	800759c <SCSI_ProcessWrite>
 80071a0:	4603      	mov	r3, r0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	2000006f 	.word	0x2000006f

080071b0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	460b      	mov	r3, r1
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	32b0      	adds	r2, #176	; 0xb0
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <SCSI_Write12+0x2a>
  {
    return -1;
 80071d4:	f04f 33ff 	mov.w	r3, #4294967295
 80071d8:	e0d7      	b.n	800738a <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	7a1b      	ldrb	r3, [r3, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f040 80cd 	bne.w	800737e <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80071f6:	7f59      	ldrb	r1, [r3, #29]
 80071f8:	2320      	movs	r3, #32
 80071fa:	2205      	movs	r2, #5
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fc8c 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8007202:	f04f 33ff 	mov.w	r3, #4294967295
 8007206:	e0c0      	b.n	800738a <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800720e:	7f1b      	ldrb	r3, [r3, #28]
 8007210:	b25b      	sxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	da0b      	bge.n	800722e <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800721c:	7f59      	ldrb	r1, [r3, #29]
 800721e:	2320      	movs	r3, #32
 8007220:	2205      	movs	r2, #5
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff fc79 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	e0ad      	b.n	800738a <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	33b0      	adds	r3, #176	; 0xb0
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	7afa      	ldrb	r2, [r7, #11]
 8007242:	4610      	mov	r0, r2
 8007244:	4798      	blx	r3
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800724c:	7af9      	ldrb	r1, [r7, #11]
 800724e:	233a      	movs	r3, #58	; 0x3a
 8007250:	2202      	movs	r2, #2
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fc61 	bl	8006b1a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2205      	movs	r2, #5
 800725c:	721a      	strb	r2, [r3, #8]
      return -1;
 800725e:	f04f 33ff 	mov.w	r3, #4294967295
 8007262:	e092      	b.n	800738a <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	33b0      	adds	r3, #176	; 0xb0
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	7afa      	ldrb	r2, [r7, #11]
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007282:	7af9      	ldrb	r1, [r7, #11]
 8007284:	2327      	movs	r3, #39	; 0x27
 8007286:	2202      	movs	r2, #2
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7ff fc46 	bl	8006b1a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2205      	movs	r2, #5
 8007292:	721a      	strb	r2, [r3, #8]
      return -1;
 8007294:	f04f 33ff 	mov.w	r3, #4294967295
 8007298:	e077      	b.n	800738a <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3302      	adds	r3, #2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3303      	adds	r3, #3
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80072b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	3205      	adds	r2, #5
 80072ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80072bc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80072c4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3306      	adds	r3, #6
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3307      	adds	r3, #7
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80072d6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3308      	adds	r3, #8
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80072e0:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	3209      	adds	r2, #9
 80072e6:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80072e8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80072f0:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	7af9      	ldrb	r1, [r7, #11]
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 f886 	bl	8007416 <SCSI_CheckAddressRange>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	da02      	bge.n	8007316 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007310:	f04f 33ff 	mov.w	r3, #4294967295
 8007314:	e039      	b.n	800738a <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800731c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8007324:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007328:	fb02 f303 	mul.w	r3, r2, r3
 800732c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	429a      	cmp	r2, r3
 800733a:	d00b      	beq.n	8007354 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007342:	7f59      	ldrb	r1, [r3, #29]
 8007344:	2320      	movs	r3, #32
 8007346:	2205      	movs	r2, #5
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f7ff fbe6 	bl	8006b1a <SCSI_SenseCode>
      return -1;
 800734e:	f04f 33ff 	mov.w	r3, #4294967295
 8007352:	e01a      	b.n	800738a <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800735a:	bf28      	it	cs
 800735c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8007360:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2201      	movs	r2, #1
 8007366:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <SCSI_Write12+0x1e4>)
 800736a:	7819      	ldrb	r1, [r3, #0]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f103 0210 	add.w	r2, r3, #16
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f002 fa40 	bl	80097fa <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800737a:	2300      	movs	r3, #0
 800737c:	e005      	b.n	800738a <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	4619      	mov	r1, r3
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f90a 	bl	800759c <SCSI_ProcessWrite>
 8007388:	4603      	mov	r3, r0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	2000006f 	.word	0x2000006f

08007398 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	460b      	mov	r3, r1
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	32b0      	adds	r2, #176	; 0xb0
 80073b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <SCSI_Verify10+0x2a>
  {
    return -1;
 80073bc:	f04f 33ff 	mov.w	r3, #4294967295
 80073c0:	e025      	b.n	800740e <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3301      	adds	r3, #1
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80073d0:	7af9      	ldrb	r1, [r7, #11]
 80073d2:	2324      	movs	r3, #36	; 0x24
 80073d4:	2205      	movs	r2, #5
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fb9f 	bl	8006b1a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80073dc:	f04f 33ff 	mov.w	r3, #4294967295
 80073e0:	e015      	b.n	800740e <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80073e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80073f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f2:	7af9      	ldrb	r1, [r7, #11]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f80e 	bl	8007416 <SCSI_CheckAddressRange>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da02      	bge.n	8007406 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 8007400:	f04f 33ff 	mov.w	r3, #4294967295
 8007404:	e003      	b.n	800740e <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	60da      	str	r2, [r3, #12]

  return 0;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b086      	sub	sp, #24
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
 8007422:	460b      	mov	r3, r1
 8007424:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	32b0      	adds	r2, #176	; 0xb0
 8007430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007434:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d102      	bne.n	8007442 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800743c:	f04f 33ff 	mov.w	r3, #4294967295
 8007440:	e012      	b.n	8007468 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	441a      	add	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800744e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007450:	429a      	cmp	r2, r3
 8007452:	d908      	bls.n	8007466 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007454:	7af9      	ldrb	r1, [r7, #11]
 8007456:	2321      	movs	r3, #33	; 0x21
 8007458:	2205      	movs	r2, #5
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fb5d 	bl	8006b1a <SCSI_SenseCode>
    return -1;
 8007460:	f04f 33ff 	mov.w	r3, #4294967295
 8007464:	e000      	b.n	8007468 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007470:	b590      	push	{r4, r7, lr}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32b0      	adds	r2, #176	; 0xb0
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8007492:	f04f 33ff 	mov.w	r3, #4294967295
 8007496:	e07b      	b.n	8007590 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800749e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80074a6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80074aa:	fb02 f303 	mul.w	r3, r2, r3
 80074ae:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b6:	bf28      	it	cs
 80074b8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80074bc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	33b0      	adds	r3, #176	; 0xb0
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	691c      	ldr	r4, [r3, #16]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f103 0110 	add.w	r1, r3, #16
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80074dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80074e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80074e8:	4618      	mov	r0, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	78f8      	ldrb	r0, [r7, #3]
 80074f4:	47a0      	blx	r4
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da08      	bge.n	800750e <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80074fc:	78f9      	ldrb	r1, [r7, #3]
 80074fe:	2311      	movs	r3, #17
 8007500:	2204      	movs	r2, #4
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff fb09 	bl	8006b1a <SCSI_SenseCode>
    return -1;
 8007508:	f04f 33ff 	mov.w	r3, #4294967295
 800750c:	e040      	b.n	8007590 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800750e:	4b22      	ldr	r3, [pc, #136]	; (8007598 <SCSI_ProcessRead+0x128>)
 8007510:	7819      	ldrb	r1, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f103 0210 	add.w	r2, r3, #16
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f002 f94c 	bl	80097b8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007526:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800752e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007532:	4619      	mov	r1, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	fbb3 f3f1 	udiv	r3, r3, r1
 800753a:	4413      	add	r3, r2
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8007542:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800754a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007552:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007556:	4619      	mov	r1, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	fbb3 f3f1 	udiv	r3, r3, r1
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8007566:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800756e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800757a:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2203      	movs	r2, #3
 800758c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	bd90      	pop	{r4, r7, pc}
 8007598:	2000006e 	.word	0x2000006e

0800759c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800759c:	b590      	push	{r4, r7, lr}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	32b0      	adds	r2, #176	; 0xb0
 80075b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
 80075c2:	e08e      	b.n	80076e2 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80075ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80075d2:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80075d6:	fb02 f303 	mul.w	r3, r2, r3
 80075da:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e2:	bf28      	it	cs
 80075e4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80075e8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	33b0      	adds	r3, #176	; 0xb0
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	695c      	ldr	r4, [r3, #20]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f103 0110 	add.w	r1, r3, #16
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007608:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007610:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007614:	4618      	mov	r0, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800761c:	b29b      	uxth	r3, r3
 800761e:	78f8      	ldrb	r0, [r7, #3]
 8007620:	47a0      	blx	r4
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	da08      	bge.n	800763a <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007628:	78f9      	ldrb	r1, [r7, #3]
 800762a:	2303      	movs	r3, #3
 800762c:	2204      	movs	r2, #4
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff fa73 	bl	8006b1a <SCSI_SenseCode>
    return -1;
 8007634:	f04f 33ff 	mov.w	r3, #4294967295
 8007638:	e053      	b.n	80076e2 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007640:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007648:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800764c:	4619      	mov	r1, r3
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	fbb3 f3f1 	udiv	r3, r3, r1
 8007654:	4413      	add	r3, r2
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800765c:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800766c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007670:	4619      	mov	r1, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	fbb3 f3f1 	udiv	r3, r3, r1
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8007680:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8007694:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800769c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80076a2:	2100      	movs	r1, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7fe fc4b 	bl	8005f40 <MSC_BOT_SendCSW>
 80076aa:	e019      	b.n	80076e0 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80076b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80076ba:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80076be:	fb02 f303 	mul.w	r3, r2, r3
 80076c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076c6:	bf28      	it	cs
 80076c8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80076cc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <SCSI_ProcessWrite+0x150>)
 80076d0:	7819      	ldrb	r1, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f103 0210 	add.w	r2, r3, #16
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f002 f88d 	bl	80097fa <USBD_LL_PrepareReceive>
  }

  return 0;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd90      	pop	{r4, r7, pc}
 80076ea:	bf00      	nop
 80076ec:	2000006f 	.word	0x2000006f

080076f0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007708:	f04f 33ff 	mov.w	r3, #4294967295
 800770c:	e013      	b.n	8007736 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800770e:	8afa      	ldrh	r2, [r7, #22]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007714:	e00b      	b.n	800772e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007716:	8afb      	ldrh	r3, [r7, #22]
 8007718:	3b01      	subs	r3, #1
 800771a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800771c:	8afb      	ldrh	r3, [r7, #22]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	441a      	add	r2, r3
 8007722:	8afb      	ldrh	r3, [r7, #22]
 8007724:	7811      	ldrb	r1, [r2, #0]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	460a      	mov	r2, r1
 800772c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800772e:	8afb      	ldrh	r3, [r7, #22]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f0      	bne.n	8007716 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	4613      	mov	r3, r2
 800774e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	e01f      	b.n	800779a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	79fa      	ldrb	r2, [r7, #7]
 800778c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f001 febe 	bl	8009510 <USBD_LL_Init>
 8007794:	4603      	mov	r3, r0
 8007796:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e025      	b.n	8007806 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	32ae      	adds	r2, #174	; 0xae
 80077cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00f      	beq.n	80077f6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	32ae      	adds	r2, #174	; 0xae
 80077e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	f107 020e 	add.w	r2, r7, #14
 80077ea:	4610      	mov	r0, r2
 80077ec:	4798      	blx	r3
 80077ee:	4602      	mov	r2, r0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fec6 	bl	80095a8 <USBD_LL_Start>
 800781c:	4603      	mov	r3, r0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800782e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	4611      	mov	r1, r2
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	78fa      	ldrb	r2, [r7, #3]
 800788e:	4611      	mov	r1, r2
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800789a:	2303      	movs	r3, #3
 800789c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f001 f933 	bl	8008b26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d01a      	beq.n	800791a <USBD_LL_SetupStage+0x72>
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d822      	bhi.n	800792e <USBD_LL_SetupStage+0x86>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <USBD_LL_SetupStage+0x4a>
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d00a      	beq.n	8007906 <USBD_LL_SetupStage+0x5e>
 80078f0:	e01d      	b.n	800792e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb60 	bl	8007fc0 <USBD_StdDevReq>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
      break;
 8007904:	e020      	b.n	8007948 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fbc8 	bl	80080a4 <USBD_StdItfReq>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
      break;
 8007918:	e016      	b.n	8007948 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fc2a 	bl	800817c <USBD_StdEPReq>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
      break;
 800792c:	e00c      	b.n	8007948 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007934:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007938:	b2db      	uxtb	r3, r3
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 feb2 	bl	80096a6 <USBD_LL_StallEP>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	bf00      	nop
  }

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	460b      	mov	r3, r1
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d16e      	bne.n	8007a48 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007970:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007978:	2b03      	cmp	r3, #3
 800797a:	f040 8098 	bne.w	8007aae <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	429a      	cmp	r2, r3
 8007988:	d913      	bls.n	80079b2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4293      	cmp	r3, r2
 80079a2:	bf28      	it	cs
 80079a4:	4613      	movcs	r3, r2
 80079a6:	461a      	mov	r2, r3
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f001 f992 	bl	8008cd4 <USBD_CtlContinueRx>
 80079b0:	e07d      	b.n	8007aae <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d014      	beq.n	80079ea <USBD_LL_DataOutStage+0x98>
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d81d      	bhi.n	8007a00 <USBD_LL_DataOutStage+0xae>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <USBD_LL_DataOutStage+0x7c>
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d003      	beq.n	80079d4 <USBD_LL_DataOutStage+0x82>
 80079cc:	e018      	b.n	8007a00 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75bb      	strb	r3, [r7, #22]
            break;
 80079d2:	e018      	b.n	8007a06 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fa5e 	bl	8007ea0 <USBD_CoreFindIF>
 80079e4:	4603      	mov	r3, r0
 80079e6:	75bb      	strb	r3, [r7, #22]
            break;
 80079e8:	e00d      	b.n	8007a06 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	4619      	mov	r1, r3
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fa60 	bl	8007eba <USBD_CoreFindEP>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75bb      	strb	r3, [r7, #22]
            break;
 80079fe:	e002      	b.n	8007a06 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	75bb      	strb	r3, [r7, #22]
            break;
 8007a04:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a06:	7dbb      	ldrb	r3, [r7, #22]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d119      	bne.n	8007a40 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d113      	bne.n	8007a40 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a18:	7dba      	ldrb	r2, [r7, #22]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	32ae      	adds	r2, #174	; 0xae
 8007a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a28:	7dba      	ldrb	r2, [r7, #22]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a30:	7dba      	ldrb	r2, [r7, #22]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	32ae      	adds	r2, #174	; 0xae
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 f958 	bl	8008cf6 <USBD_CtlSendStatus>
 8007a46:	e032      	b.n	8007aae <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	4619      	mov	r1, r3
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fa31 	bl	8007eba <USBD_CoreFindEP>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
 8007a5e:	2bff      	cmp	r3, #255	; 0xff
 8007a60:	d025      	beq.n	8007aae <USBD_LL_DataOutStage+0x15c>
 8007a62:	7dbb      	ldrb	r3, [r7, #22]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d122      	bne.n	8007aae <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d117      	bne.n	8007aa4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a74:	7dba      	ldrb	r2, [r7, #22]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	32ae      	adds	r2, #174	; 0xae
 8007a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00f      	beq.n	8007aa4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a84:	7dba      	ldrb	r2, [r7, #22]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a8c:	7dba      	ldrb	r2, [r7, #22]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	32ae      	adds	r2, #174	; 0xae
 8007a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	7afa      	ldrb	r2, [r7, #11]
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	4798      	blx	r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	e000      	b.n	8007ab0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d16f      	bne.n	8007bac <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3314      	adds	r3, #20
 8007ad0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d15a      	bne.n	8007b92 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d914      	bls.n	8007b12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	1ad2      	subs	r2, r2, r3
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	461a      	mov	r2, r3
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f001 f8d7 	bl	8008cb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b04:	2300      	movs	r3, #0
 8007b06:	2200      	movs	r2, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f001 fe75 	bl	80097fa <USBD_LL_PrepareReceive>
 8007b10:	e03f      	b.n	8007b92 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d11c      	bne.n	8007b58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d316      	bcc.n	8007b58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d20f      	bcs.n	8007b58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 f8b8 	bl	8008cb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2100      	movs	r1, #0
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f001 fe52 	bl	80097fa <USBD_LL_PrepareReceive>
 8007b56:	e01c      	b.n	8007b92 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d10f      	bne.n	8007b84 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b84:	2180      	movs	r1, #128	; 0x80
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f001 fd8d 	bl	80096a6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f001 f8c5 	bl	8008d1c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d03a      	beq.n	8007c12 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f7ff fe42 	bl	8007826 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007baa:	e032      	b.n	8007c12 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 f97f 	bl	8007eba <USBD_CoreFindEP>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	2bff      	cmp	r3, #255	; 0xff
 8007bc4:	d025      	beq.n	8007c12 <USBD_LL_DataInStage+0x15a>
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d122      	bne.n	8007c12 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d11c      	bne.n	8007c12 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bd8:	7dfa      	ldrb	r2, [r7, #23]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	32ae      	adds	r2, #174	; 0xae
 8007bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d014      	beq.n	8007c12 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007be8:	7dfa      	ldrb	r2, [r7, #23]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bf0:	7dfa      	ldrb	r2, [r7, #23]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	32ae      	adds	r2, #174	; 0xae
 8007bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	7afa      	ldrb	r2, [r7, #11]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	4798      	blx	r3
 8007c04:	4603      	mov	r3, r0
 8007c06:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c08:	7dbb      	ldrb	r3, [r7, #22]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c0e:	7dbb      	ldrb	r3, [r7, #22]
 8007c10:	e000      	b.n	8007c14 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d014      	beq.n	8007c82 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00e      	beq.n	8007c82 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	6852      	ldr	r2, [r2, #4]
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	4611      	mov	r1, r2
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c82:	2340      	movs	r3, #64	; 0x40
 8007c84:	2200      	movs	r2, #0
 8007c86:	2100      	movs	r1, #0
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 fca8 	bl	80095de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2240      	movs	r2, #64	; 0x40
 8007c9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c9e:	2340      	movs	r3, #64	; 0x40
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2180      	movs	r1, #128	; 0x80
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 fc9a 	bl	80095de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2240      	movs	r2, #64	; 0x40
 8007cb4:	621a      	str	r2, [r3, #32]

  return ret;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	78fa      	ldrb	r2, [r7, #3]
 8007cd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2204      	movs	r2, #4
 8007cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d106      	bne.n	8007d2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d110      	bne.n	8007d72 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	32ae      	adds	r2, #174	; 0xae
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e01c      	b.n	8007dd8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d115      	bne.n	8007dd6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	32ae      	adds	r2, #174	; 0xae
 8007db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	32ae      	adds	r2, #174	; 0xae
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32ae      	adds	r2, #174	; 0xae
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e01c      	b.n	8007e3c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d115      	bne.n	8007e3a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	32ae      	adds	r2, #174	; 0xae
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	32ae      	adds	r2, #174	; 0xae
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	78fa      	ldrb	r2, [r7, #3]
 8007e34:	4611      	mov	r1, r2
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00e      	beq.n	8007e96 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6852      	ldr	r2, [r2, #4]
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	4611      	mov	r1, r2
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	4798      	blx	r3
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e92:	2303      	movs	r3, #3
 8007e94:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ec6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	885b      	ldrh	r3, [r3, #2]
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d920      	bls.n	8007f3e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f04:	e013      	b.n	8007f2e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f06:	f107 030a 	add.w	r3, r7, #10
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6978      	ldr	r0, [r7, #20]
 8007f0e:	f000 f81b 	bl	8007f48 <USBD_GetNextDesc>
 8007f12:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	2b05      	cmp	r3, #5
 8007f1a:	d108      	bne.n	8007f2e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	789b      	ldrb	r3, [r3, #2]
 8007f24:	78fa      	ldrb	r2, [r7, #3]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d008      	beq.n	8007f3c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	885b      	ldrh	r3, [r3, #2]
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	897b      	ldrh	r3, [r7, #10]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d8e5      	bhi.n	8007f06 <USBD_GetEpDesc+0x32>
 8007f3a:	e000      	b.n	8007f3e <USBD_GetEpDesc+0x6a>
          break;
 8007f3c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f3e:	693b      	ldr	r3, [r7, #16]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	881a      	ldrh	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	4413      	add	r3, r2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4413      	add	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f74:	68fb      	ldr	r3, [r7, #12]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	3301      	adds	r3, #1
 8007f98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fa0:	8a3b      	ldrh	r3, [r7, #16]
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	b21a      	sxth	r2, r3
 8007fa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b21b      	sxth	r3, r3
 8007fae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fb0:	89fb      	ldrh	r3, [r7, #14]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	d005      	beq.n	8007fe6 <USBD_StdDevReq+0x26>
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d857      	bhi.n	800808e <USBD_StdDevReq+0xce>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00f      	beq.n	8008002 <USBD_StdDevReq+0x42>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d153      	bne.n	800808e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32ae      	adds	r2, #174	; 0xae
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	4798      	blx	r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8008000:	e04a      	b.n	8008098 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b09      	cmp	r3, #9
 8008008:	d83b      	bhi.n	8008082 <USBD_StdDevReq+0xc2>
 800800a:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <USBD_StdDevReq+0x50>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008065 	.word	0x08008065
 8008014:	08008079 	.word	0x08008079
 8008018:	08008083 	.word	0x08008083
 800801c:	0800806f 	.word	0x0800806f
 8008020:	08008083 	.word	0x08008083
 8008024:	08008043 	.word	0x08008043
 8008028:	08008039 	.word	0x08008039
 800802c:	08008083 	.word	0x08008083
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa3c 	bl	80084b8 <USBD_GetDescriptor>
          break;
 8008040:	e024      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fbcb 	bl	80087e0 <USBD_SetAddress>
          break;
 800804a:	e01f      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fc0a 	bl	8008868 <USBD_SetConfig>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
          break;
 8008058:	e018      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fcad 	bl	80089bc <USBD_GetConfig>
          break;
 8008062:	e013      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fcde 	bl	8008a28 <USBD_GetStatus>
          break;
 800806c:	e00e      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fd0d 	bl	8008a90 <USBD_SetFeature>
          break;
 8008076:	e009      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fd31 	bl	8008ae2 <USBD_ClrFeature>
          break;
 8008080:	e004      	b.n	800808c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fd88 	bl	8008b9a <USBD_CtlError>
          break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e004      	b.n	8008098 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fd82 	bl	8008b9a <USBD_CtlError>
      break;
 8008096:	bf00      	nop
  }

  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop

080080a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d005      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d852      	bhi.n	8008168 <USBD_StdItfReq+0xc4>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d14e      	bne.n	8008168 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d840      	bhi.n	800815a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	889b      	ldrh	r3, [r3, #4]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d836      	bhi.n	8008150 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	889b      	ldrh	r3, [r3, #4]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fed8 	bl	8007ea0 <USBD_CoreFindIF>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2bff      	cmp	r3, #255	; 0xff
 80080f8:	d01d      	beq.n	8008136 <USBD_StdItfReq+0x92>
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11a      	bne.n	8008136 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008100:	7bba      	ldrb	r2, [r7, #14]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	32ae      	adds	r2, #174	; 0xae
 8008106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00f      	beq.n	8008130 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008110:	7bba      	ldrb	r2, [r7, #14]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008118:	7bba      	ldrb	r2, [r7, #14]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	32ae      	adds	r2, #174	; 0xae
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800812e:	e004      	b.n	800813a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008130:	2303      	movs	r3, #3
 8008132:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008134:	e001      	b.n	800813a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008136:	2303      	movs	r3, #3
 8008138:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88db      	ldrh	r3, [r3, #6]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d110      	bne.n	8008164 <USBD_StdItfReq+0xc0>
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10d      	bne.n	8008164 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fdd4 	bl	8008cf6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800814e:	e009      	b.n	8008164 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fd21 	bl	8008b9a <USBD_CtlError>
          break;
 8008158:	e004      	b.n	8008164 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fd1c 	bl	8008b9a <USBD_CtlError>
          break;
 8008162:	e000      	b.n	8008166 <USBD_StdItfReq+0xc2>
          break;
 8008164:	bf00      	nop
      }
      break;
 8008166:	e004      	b.n	8008172 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fd15 	bl	8008b9a <USBD_CtlError>
      break;
 8008170:	bf00      	nop
  }

  return ret;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	889b      	ldrh	r3, [r3, #4]
 800818e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008198:	2b40      	cmp	r3, #64	; 0x40
 800819a:	d007      	beq.n	80081ac <USBD_StdEPReq+0x30>
 800819c:	2b40      	cmp	r3, #64	; 0x40
 800819e:	f200 817f 	bhi.w	80084a0 <USBD_StdEPReq+0x324>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d02a      	beq.n	80081fc <USBD_StdEPReq+0x80>
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	f040 817a 	bne.w	80084a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fe82 	bl	8007eba <USBD_CoreFindEP>
 80081b6:	4603      	mov	r3, r0
 80081b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ba:	7b7b      	ldrb	r3, [r7, #13]
 80081bc:	2bff      	cmp	r3, #255	; 0xff
 80081be:	f000 8174 	beq.w	80084aa <USBD_StdEPReq+0x32e>
 80081c2:	7b7b      	ldrb	r3, [r7, #13]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f040 8170 	bne.w	80084aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081ca:	7b7a      	ldrb	r2, [r7, #13]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081d2:	7b7a      	ldrb	r2, [r7, #13]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	32ae      	adds	r2, #174	; 0xae
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8163 	beq.w	80084aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081e4:	7b7a      	ldrb	r2, [r7, #13]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	32ae      	adds	r2, #174	; 0xae
 80081ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081fa:	e156      	b.n	80084aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d008      	beq.n	8008216 <USBD_StdEPReq+0x9a>
 8008204:	2b03      	cmp	r3, #3
 8008206:	f300 8145 	bgt.w	8008494 <USBD_StdEPReq+0x318>
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 809b 	beq.w	8008346 <USBD_StdEPReq+0x1ca>
 8008210:	2b01      	cmp	r3, #1
 8008212:	d03c      	beq.n	800828e <USBD_StdEPReq+0x112>
 8008214:	e13e      	b.n	8008494 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d002      	beq.n	8008228 <USBD_StdEPReq+0xac>
 8008222:	2b03      	cmp	r3, #3
 8008224:	d016      	beq.n	8008254 <USBD_StdEPReq+0xd8>
 8008226:	e02c      	b.n	8008282 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <USBD_StdEPReq+0xce>
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	2b80      	cmp	r3, #128	; 0x80
 8008232:	d00a      	beq.n	800824a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fa34 	bl	80096a6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800823e:	2180      	movs	r1, #128	; 0x80
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 fa30 	bl	80096a6 <USBD_LL_StallEP>
 8008246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008248:	e020      	b.n	800828c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fca4 	bl	8008b9a <USBD_CtlError>
              break;
 8008252:	e01b      	b.n	800828c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	885b      	ldrh	r3, [r3, #2]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10e      	bne.n	800827a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <USBD_StdEPReq+0xfe>
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b80      	cmp	r3, #128	; 0x80
 8008266:	d008      	beq.n	800827a <USBD_StdEPReq+0xfe>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	88db      	ldrh	r3, [r3, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 fa16 	bl	80096a6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fd3b 	bl	8008cf6 <USBD_CtlSendStatus>

              break;
 8008280:	e004      	b.n	800828c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc88 	bl	8008b9a <USBD_CtlError>
              break;
 800828a:	bf00      	nop
          }
          break;
 800828c:	e107      	b.n	800849e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d002      	beq.n	80082a0 <USBD_StdEPReq+0x124>
 800829a:	2b03      	cmp	r3, #3
 800829c:	d016      	beq.n	80082cc <USBD_StdEPReq+0x150>
 800829e:	e04b      	b.n	8008338 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00d      	beq.n	80082c2 <USBD_StdEPReq+0x146>
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b80      	cmp	r3, #128	; 0x80
 80082aa:	d00a      	beq.n	80082c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f9f8 	bl	80096a6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082b6:	2180      	movs	r1, #128	; 0x80
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f9f4 	bl	80096a6 <USBD_LL_StallEP>
 80082be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c0:	e040      	b.n	8008344 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc68 	bl	8008b9a <USBD_CtlError>
              break;
 80082ca:	e03b      	b.n	8008344 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d136      	bne.n	8008342 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 f9fe 	bl	80096e4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fd04 	bl	8008cf6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fde1 	bl	8007eba <USBD_CoreFindEP>
 80082f8:	4603      	mov	r3, r0
 80082fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082fc:	7b7b      	ldrb	r3, [r7, #13]
 80082fe:	2bff      	cmp	r3, #255	; 0xff
 8008300:	d01f      	beq.n	8008342 <USBD_StdEPReq+0x1c6>
 8008302:	7b7b      	ldrb	r3, [r7, #13]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d11c      	bne.n	8008342 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008308:	7b7a      	ldrb	r2, [r7, #13]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008310:	7b7a      	ldrb	r2, [r7, #13]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32ae      	adds	r2, #174	; 0xae
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d010      	beq.n	8008342 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008320:	7b7a      	ldrb	r2, [r7, #13]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	32ae      	adds	r2, #174	; 0xae
 8008326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008336:	e004      	b.n	8008342 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc2d 	bl	8008b9a <USBD_CtlError>
              break;
 8008340:	e000      	b.n	8008344 <USBD_StdEPReq+0x1c8>
              break;
 8008342:	bf00      	nop
          }
          break;
 8008344:	e0ab      	b.n	800849e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d002      	beq.n	8008358 <USBD_StdEPReq+0x1dc>
 8008352:	2b03      	cmp	r3, #3
 8008354:	d032      	beq.n	80083bc <USBD_StdEPReq+0x240>
 8008356:	e097      	b.n	8008488 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <USBD_StdEPReq+0x1f2>
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b80      	cmp	r3, #128	; 0x80
 8008362:	d004      	beq.n	800836e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fc17 	bl	8008b9a <USBD_CtlError>
                break;
 800836c:	e091      	b.n	8008492 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800836e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008372:	2b00      	cmp	r3, #0
 8008374:	da0b      	bge.n	800838e <USBD_StdEPReq+0x212>
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	3310      	adds	r3, #16
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
 800838a:	3304      	adds	r3, #4
 800838c:	e00b      	b.n	80083a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	4413      	add	r3, r2
 80083a4:	3304      	adds	r3, #4
 80083a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2202      	movs	r2, #2
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc61 	bl	8008c7c <USBD_CtlSendData>
              break;
 80083ba:	e06a      	b.n	8008492 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da11      	bge.n	80083e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	f003 020f 	and.w	r2, r3, #15
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	3324      	adds	r3, #36	; 0x24
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d117      	bne.n	800840e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fbda 	bl	8008b9a <USBD_CtlError>
                  break;
 80083e6:	e054      	b.n	8008492 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fbc7 	bl	8008b9a <USBD_CtlError>
                  break;
 800840c:	e041      	b.n	8008492 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800840e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da0b      	bge.n	800842e <USBD_StdEPReq+0x2b2>
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	3310      	adds	r3, #16
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	3304      	adds	r3, #4
 800842c:	e00b      	b.n	8008446 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	3304      	adds	r3, #4
 8008446:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <USBD_StdEPReq+0x2d8>
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b80      	cmp	r3, #128	; 0x80
 8008452:	d103      	bne.n	800845c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e00e      	b.n	800847a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f95e 	bl	8009722 <USBD_LL_IsStallEP>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2201      	movs	r2, #1
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e002      	b.n	800847a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2202      	movs	r2, #2
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fbfb 	bl	8008c7c <USBD_CtlSendData>
              break;
 8008486:	e004      	b.n	8008492 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb85 	bl	8008b9a <USBD_CtlError>
              break;
 8008490:	bf00      	nop
          }
          break;
 8008492:	e004      	b.n	800849e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb7f 	bl	8008b9a <USBD_CtlError>
          break;
 800849c:	bf00      	nop
      }
      break;
 800849e:	e005      	b.n	80084ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb79 	bl	8008b9a <USBD_CtlError>
      break;
 80084a8:	e000      	b.n	80084ac <USBD_StdEPReq+0x330>
      break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b0e      	cmp	r3, #14
 80084da:	f200 8152 	bhi.w	8008782 <USBD_GetDescriptor+0x2ca>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <USBD_GetDescriptor+0x2c>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008555 	.word	0x08008555
 80084e8:	0800856d 	.word	0x0800856d
 80084ec:	080085ad 	.word	0x080085ad
 80084f0:	08008783 	.word	0x08008783
 80084f4:	08008783 	.word	0x08008783
 80084f8:	08008723 	.word	0x08008723
 80084fc:	0800874f 	.word	0x0800874f
 8008500:	08008783 	.word	0x08008783
 8008504:	08008783 	.word	0x08008783
 8008508:	08008783 	.word	0x08008783
 800850c:	08008783 	.word	0x08008783
 8008510:	08008783 	.word	0x08008783
 8008514:	08008783 	.word	0x08008783
 8008518:	08008783 	.word	0x08008783
 800851c:	08008521 	.word	0x08008521
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7c12      	ldrb	r2, [r2, #16]
 8008538:	f107 0108 	add.w	r1, r7, #8
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008542:	e126      	b.n	8008792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fb27 	bl	8008b9a <USBD_CtlError>
        err++;
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	3301      	adds	r3, #1
 8008550:	72fb      	strb	r3, [r7, #11]
      break;
 8008552:	e11e      	b.n	8008792 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	7c12      	ldrb	r2, [r2, #16]
 8008560:	f107 0108 	add.w	r1, r7, #8
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	60f8      	str	r0, [r7, #12]
      break;
 800856a:	e112      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7c1b      	ldrb	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10d      	bne.n	8008590 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f107 0208 	add.w	r2, r7, #8
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
 8008584:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3301      	adds	r3, #1
 800858a:	2202      	movs	r2, #2
 800858c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800858e:	e100      	b.n	8008792 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	f107 0208 	add.w	r2, r7, #8
 800859c:	4610      	mov	r0, r2
 800859e:	4798      	blx	r3
 80085a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3301      	adds	r3, #1
 80085a6:	2202      	movs	r2, #2
 80085a8:	701a      	strb	r2, [r3, #0]
      break;
 80085aa:	e0f2      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	885b      	ldrh	r3, [r3, #2]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b05      	cmp	r3, #5
 80085b4:	f200 80ac 	bhi.w	8008710 <USBD_GetDescriptor+0x258>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <USBD_GetDescriptor+0x108>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085d9 	.word	0x080085d9
 80085c4:	0800860d 	.word	0x0800860d
 80085c8:	08008641 	.word	0x08008641
 80085cc:	08008675 	.word	0x08008675
 80085d0:	080086a9 	.word	0x080086a9
 80085d4:	080086dd 	.word	0x080086dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7c12      	ldrb	r2, [r2, #16]
 80085f0:	f107 0108 	add.w	r1, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fa:	e091      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 facb 	bl	8008b9a <USBD_CtlError>
            err++;
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	3301      	adds	r3, #1
 8008608:	72fb      	strb	r3, [r7, #11]
          break;
 800860a:	e089      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862e:	e077      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fab1 	bl	8008b9a <USBD_CtlError>
            err++;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	3301      	adds	r3, #1
 800863c:	72fb      	strb	r3, [r7, #11]
          break;
 800863e:	e06f      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008662:	e05d      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa97 	bl	8008b9a <USBD_CtlError>
            err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
          break;
 8008672:	e055      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	7c12      	ldrb	r2, [r2, #16]
 800868c:	f107 0108 	add.w	r1, r7, #8
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008696:	e043      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa7d 	bl	8008b9a <USBD_CtlError>
            err++;
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	3301      	adds	r3, #1
 80086a4:	72fb      	strb	r3, [r7, #11]
          break;
 80086a6:	e03b      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	7c12      	ldrb	r2, [r2, #16]
 80086c0:	f107 0108 	add.w	r1, r7, #8
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ca:	e029      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa63 	bl	8008b9a <USBD_CtlError>
            err++;
 80086d4:	7afb      	ldrb	r3, [r7, #11]
 80086d6:	3301      	adds	r3, #1
 80086d8:	72fb      	strb	r3, [r7, #11]
          break;
 80086da:	e021      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	7c12      	ldrb	r2, [r2, #16]
 80086f4:	f107 0108 	add.w	r1, r7, #8
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
 80086fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086fe:	e00f      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa49 	bl	8008b9a <USBD_CtlError>
            err++;
 8008708:	7afb      	ldrb	r3, [r7, #11]
 800870a:	3301      	adds	r3, #1
 800870c:	72fb      	strb	r3, [r7, #11]
          break;
 800870e:	e007      	b.n	8008720 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa41 	bl	8008b9a <USBD_CtlError>
          err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800871e:	bf00      	nop
      }
      break;
 8008720:	e037      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7c1b      	ldrb	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	f107 0208 	add.w	r2, r7, #8
 8008736:	4610      	mov	r0, r2
 8008738:	4798      	blx	r3
 800873a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800873c:	e029      	b.n	8008792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fa2a 	bl	8008b9a <USBD_CtlError>
        err++;
 8008746:	7afb      	ldrb	r3, [r7, #11]
 8008748:	3301      	adds	r3, #1
 800874a:	72fb      	strb	r3, [r7, #11]
      break;
 800874c:	e021      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	7c1b      	ldrb	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10d      	bne.n	8008772 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f107 0208 	add.w	r2, r7, #8
 8008762:	4610      	mov	r0, r2
 8008764:	4798      	blx	r3
 8008766:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3301      	adds	r3, #1
 800876c:	2207      	movs	r2, #7
 800876e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008770:	e00f      	b.n	8008792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fa10 	bl	8008b9a <USBD_CtlError>
        err++;
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	3301      	adds	r3, #1
 800877e:	72fb      	strb	r3, [r7, #11]
      break;
 8008780:	e007      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fa08 	bl	8008b9a <USBD_CtlError>
      err++;
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	3301      	adds	r3, #1
 800878e:	72fb      	strb	r3, [r7, #11]
      break;
 8008790:	bf00      	nop
  }

  if (err != 0U)
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11e      	bne.n	80087d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	88db      	ldrh	r3, [r3, #6]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d016      	beq.n	80087ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80087a0:	893b      	ldrh	r3, [r7, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00e      	beq.n	80087c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	88da      	ldrh	r2, [r3, #6]
 80087aa:	893b      	ldrh	r3, [r7, #8]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	bf28      	it	cs
 80087b0:	4613      	movcs	r3, r2
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087b6:	893b      	ldrh	r3, [r7, #8]
 80087b8:	461a      	mov	r2, r3
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fa5d 	bl	8008c7c <USBD_CtlSendData>
 80087c2:	e009      	b.n	80087d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f9e7 	bl	8008b9a <USBD_CtlError>
 80087cc:	e004      	b.n	80087d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa91 	bl	8008cf6 <USBD_CtlSendStatus>
 80087d4:	e000      	b.n	80087d8 <USBD_GetDescriptor+0x320>
    return;
 80087d6:	bf00      	nop
  }
}
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop

080087e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	889b      	ldrh	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d131      	bne.n	8008856 <USBD_SetAddress+0x76>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	88db      	ldrh	r3, [r3, #6]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d12d      	bne.n	8008856 <USBD_SetAddress+0x76>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008800:	d829      	bhi.n	8008856 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800880c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b03      	cmp	r3, #3
 8008818:	d104      	bne.n	8008824 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f9bc 	bl	8008b9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	e01d      	b.n	8008860 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7bfa      	ldrb	r2, [r7, #15]
 8008828:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 ffa2 	bl	800977a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa5d 	bl	8008cf6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d004      	beq.n	800884c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2202      	movs	r2, #2
 8008846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884a:	e009      	b.n	8008860 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008854:	e004      	b.n	8008860 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f99e 	bl	8008b9a <USBD_CtlError>
  }
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	885b      	ldrh	r3, [r3, #2]
 800887a:	b2da      	uxtb	r2, r3
 800887c:	4b4e      	ldr	r3, [pc, #312]	; (80089b8 <USBD_SetConfig+0x150>)
 800887e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008880:	4b4d      	ldr	r3, [pc, #308]	; (80089b8 <USBD_SetConfig+0x150>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d905      	bls.n	8008894 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f985 	bl	8008b9a <USBD_CtlError>
    return USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	e08c      	b.n	80089ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d002      	beq.n	80088a6 <USBD_SetConfig+0x3e>
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d029      	beq.n	80088f8 <USBD_SetConfig+0x90>
 80088a4:	e075      	b.n	8008992 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088a6:	4b44      	ldr	r3, [pc, #272]	; (80089b8 <USBD_SetConfig+0x150>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d020      	beq.n	80088f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088ae:	4b42      	ldr	r3, [pc, #264]	; (80089b8 <USBD_SetConfig+0x150>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088b8:	4b3f      	ldr	r3, [pc, #252]	; (80089b8 <USBD_SetConfig+0x150>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fe ffbc 	bl	800783c <USBD_SetClassConfig>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d008      	beq.n	80088e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f962 	bl	8008b9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088de:	e065      	b.n	80089ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fa08 	bl	8008cf6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2203      	movs	r2, #3
 80088ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088ee:	e05d      	b.n	80089ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fa00 	bl	8008cf6 <USBD_CtlSendStatus>
      break;
 80088f6:	e059      	b.n	80089ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088f8:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <USBD_SetConfig+0x150>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d112      	bne.n	8008926 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008908:	4b2b      	ldr	r3, [pc, #172]	; (80089b8 <USBD_SetConfig+0x150>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008912:	4b29      	ldr	r3, [pc, #164]	; (80089b8 <USBD_SetConfig+0x150>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7fe ffab 	bl	8007874 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9e9 	bl	8008cf6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008924:	e042      	b.n	80089ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008926:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <USBD_SetConfig+0x150>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d02a      	beq.n	800898a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fe ff99 	bl	8007874 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008942:	4b1d      	ldr	r3, [pc, #116]	; (80089b8 <USBD_SetConfig+0x150>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800894c:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <USBD_SetConfig+0x150>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7fe ff72 	bl	800783c <USBD_SetClassConfig>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00f      	beq.n	8008982 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f918 	bl	8008b9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7fe ff7e 	bl	8007874 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008980:	e014      	b.n	80089ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f9b7 	bl	8008cf6 <USBD_CtlSendStatus>
      break;
 8008988:	e010      	b.n	80089ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f9b3 	bl	8008cf6 <USBD_CtlSendStatus>
      break;
 8008990:	e00c      	b.n	80089ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f900 	bl	8008b9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800899a:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <USBD_SetConfig+0x150>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7fe ff67 	bl	8007874 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089a6:	2303      	movs	r3, #3
 80089a8:	73fb      	strb	r3, [r7, #15]
      break;
 80089aa:	bf00      	nop
  }

  return ret;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	200001c4 	.word	0x200001c4

080089bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	88db      	ldrh	r3, [r3, #6]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d004      	beq.n	80089d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f8e2 	bl	8008b9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089d6:	e023      	b.n	8008a20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	dc02      	bgt.n	80089ea <USBD_GetConfig+0x2e>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	dc03      	bgt.n	80089f0 <USBD_GetConfig+0x34>
 80089e8:	e015      	b.n	8008a16 <USBD_GetConfig+0x5a>
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d00b      	beq.n	8008a06 <USBD_GetConfig+0x4a>
 80089ee:	e012      	b.n	8008a16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3308      	adds	r3, #8
 80089fa:	2201      	movs	r2, #1
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f93c 	bl	8008c7c <USBD_CtlSendData>
        break;
 8008a04:	e00c      	b.n	8008a20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f934 	bl	8008c7c <USBD_CtlSendData>
        break;
 8008a14:	e004      	b.n	8008a20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f8be 	bl	8008b9a <USBD_CtlError>
        break;
 8008a1e:	bf00      	nop
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d81e      	bhi.n	8008a7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	88db      	ldrh	r3, [r3, #6]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d004      	beq.n	8008a52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f8a5 	bl	8008b9a <USBD_CtlError>
        break;
 8008a50:	e01a      	b.n	8008a88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d005      	beq.n	8008a6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f043 0202 	orr.w	r2, r3, #2
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	330c      	adds	r3, #12
 8008a72:	2202      	movs	r2, #2
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f900 	bl	8008c7c <USBD_CtlSendData>
      break;
 8008a7c:	e004      	b.n	8008a88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f88a 	bl	8008b9a <USBD_CtlError>
      break;
 8008a86:	bf00      	nop
  }
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d107      	bne.n	8008ab2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f923 	bl	8008cf6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ab0:	e013      	b.n	8008ada <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	885b      	ldrh	r3, [r3, #2]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d10b      	bne.n	8008ad2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	889b      	ldrh	r3, [r3, #4]
 8008abe:	0a1b      	lsrs	r3, r3, #8
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f913 	bl	8008cf6 <USBD_CtlSendStatus>
}
 8008ad0:	e003      	b.n	8008ada <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f860 	bl	8008b9a <USBD_CtlError>
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	3b01      	subs	r3, #1
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d80b      	bhi.n	8008b12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	885b      	ldrh	r3, [r3, #2]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d10c      	bne.n	8008b1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f8f3 	bl	8008cf6 <USBD_CtlSendStatus>
      }
      break;
 8008b10:	e004      	b.n	8008b1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f840 	bl	8008b9a <USBD_CtlError>
      break;
 8008b1a:	e000      	b.n	8008b1e <USBD_ClrFeature+0x3c>
      break;
 8008b1c:	bf00      	nop
  }
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	781a      	ldrb	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff fa16 	bl	8007f82 <SWAPBYTE>
 8008b56:	4603      	mov	r3, r0
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff fa09 	bl	8007f82 <SWAPBYTE>
 8008b70:	4603      	mov	r3, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7ff f9fc 	bl	8007f82 <SWAPBYTE>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	80da      	strh	r2, [r3, #6]
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ba4:	2180      	movs	r1, #128	; 0x80
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fd7d 	bl	80096a6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bac:	2100      	movs	r1, #0
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fd79 	bl	80096a6 <USBD_LL_StallEP>
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d036      	beq.n	8008c40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bd6:	6938      	ldr	r0, [r7, #16]
 8008bd8:	f000 f836 	bl	8008c48 <USBD_GetLen>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	3301      	adds	r3, #1
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	4413      	add	r3, r2
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	2203      	movs	r2, #3
 8008c04:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c0c:	e013      	b.n	8008c36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	4413      	add	r3, r2
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	7812      	ldrb	r2, [r2, #0]
 8008c18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	613b      	str	r3, [r7, #16]
    idx++;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	3301      	adds	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	3301      	adds	r3, #1
 8008c34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e7      	bne.n	8008c0e <USBD_GetString+0x52>
 8008c3e:	e000      	b.n	8008c42 <USBD_GetString+0x86>
    return;
 8008c40:	bf00      	nop
  }
}
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c58:	e005      	b.n	8008c66 <USBD_GetLen+0x1e>
  {
    len++;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	3301      	adds	r3, #1
 8008c64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1f5      	bne.n	8008c5a <USBD_GetLen+0x12>
  }

  return len;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fd88 	bl	80097b8 <USBD_LL_Transmit>

  return USBD_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fd77 	bl	80097b8 <USBD_LL_Transmit>

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 fd87 	bl	80097fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2204      	movs	r2, #4
 8008d02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d06:	2300      	movs	r3, #0
 8008d08:	2200      	movs	r2, #0
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fd53 	bl	80097b8 <USBD_LL_Transmit>

  return USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2205      	movs	r2, #5
 8008d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2100      	movs	r1, #0
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fd61 	bl	80097fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4912      	ldr	r1, [pc, #72]	; (8008d94 <MX_USB_DEVICE_Init+0x50>)
 8008d4c:	4812      	ldr	r0, [pc, #72]	; (8008d98 <MX_USB_DEVICE_Init+0x54>)
 8008d4e:	f7fe fcf8 	bl	8007742 <USBD_Init>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d58:	f7f7 fcb8 	bl	80006cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008d5c:	490f      	ldr	r1, [pc, #60]	; (8008d9c <MX_USB_DEVICE_Init+0x58>)
 8008d5e:	480e      	ldr	r0, [pc, #56]	; (8008d98 <MX_USB_DEVICE_Init+0x54>)
 8008d60:	f7fe fd1f 	bl	80077a2 <USBD_RegisterClass>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d6a:	f7f7 fcaf 	bl	80006cc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008d6e:	490c      	ldr	r1, [pc, #48]	; (8008da0 <MX_USB_DEVICE_Init+0x5c>)
 8008d70:	4809      	ldr	r0, [pc, #36]	; (8008d98 <MX_USB_DEVICE_Init+0x54>)
 8008d72:	f7fc fedf 	bl	8005b34 <USBD_MSC_RegisterStorage>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d7c:	f7f7 fca6 	bl	80006cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d80:	4805      	ldr	r0, [pc, #20]	; (8008d98 <MX_USB_DEVICE_Init+0x54>)
 8008d82:	f7fe fd44 	bl	800780e <USBD_Start>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d8c:	f7f7 fc9e 	bl	80006cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d90:	bf00      	nop
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	200000b4 	.word	0x200000b4
 8008d98:	200001c8 	.word	0x200001c8
 8008d9c:	2000000c 	.word	0x2000000c
 8008da0:	20000114 	.word	0x20000114

08008da4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2212      	movs	r2, #18
 8008db4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008db6:	4b03      	ldr	r3, [pc, #12]	; (8008dc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	200000d4 	.word	0x200000d4

08008dc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2204      	movs	r2, #4
 8008dd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dda:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	200000f4 	.word	0x200000f4

08008dec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	6039      	str	r1, [r7, #0]
 8008df6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d105      	bne.n	8008e0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	4907      	ldr	r1, [pc, #28]	; (8008e20 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e02:	4808      	ldr	r0, [pc, #32]	; (8008e24 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e04:	f7ff feda 	bl	8008bbc <USBD_GetString>
 8008e08:	e004      	b.n	8008e14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	4904      	ldr	r1, [pc, #16]	; (8008e20 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e0e:	4805      	ldr	r0, [pc, #20]	; (8008e24 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e10:	f7ff fed4 	bl	8008bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e14:	4b02      	ldr	r3, [pc, #8]	; (8008e20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	200004a4 	.word	0x200004a4
 8008e24:	08009c30 	.word	0x08009c30

08008e28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	6039      	str	r1, [r7, #0]
 8008e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	4904      	ldr	r1, [pc, #16]	; (8008e48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e38:	4804      	ldr	r0, [pc, #16]	; (8008e4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e3a:	f7ff febf 	bl	8008bbc <USBD_GetString>
  return USBD_StrDesc;
 8008e3e:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	200004a4 	.word	0x200004a4
 8008e4c:	08009c44 	.word	0x08009c44

08008e50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	221a      	movs	r2, #26
 8008e60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e62:	f000 f855 	bl	8008f10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e66:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200000f8 	.word	0x200000f8

08008e74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d105      	bne.n	8008e92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4907      	ldr	r1, [pc, #28]	; (8008ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e8a:	4808      	ldr	r0, [pc, #32]	; (8008eac <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e8c:	f7ff fe96 	bl	8008bbc <USBD_GetString>
 8008e90:	e004      	b.n	8008e9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	4904      	ldr	r1, [pc, #16]	; (8008ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e96:	4805      	ldr	r0, [pc, #20]	; (8008eac <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e98:	f7ff fe90 	bl	8008bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e9c:	4b02      	ldr	r3, [pc, #8]	; (8008ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200004a4 	.word	0x200004a4
 8008eac:	08009c58 	.word	0x08009c58

08008eb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6039      	str	r1, [r7, #0]
 8008eba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d105      	bne.n	8008ece <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	4907      	ldr	r1, [pc, #28]	; (8008ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ec6:	4808      	ldr	r0, [pc, #32]	; (8008ee8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ec8:	f7ff fe78 	bl	8008bbc <USBD_GetString>
 8008ecc:	e004      	b.n	8008ed8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	4904      	ldr	r1, [pc, #16]	; (8008ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ed2:	4805      	ldr	r0, [pc, #20]	; (8008ee8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ed4:	f7ff fe72 	bl	8008bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ed8:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200004a4 	.word	0x200004a4
 8008ee8:	08009c64 	.word	0x08009c64

08008eec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6039      	str	r1, [r7, #0]
 8008ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	220c      	movs	r2, #12
 8008efc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008efe:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	200000e8 	.word	0x200000e8

08008f10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <Get_SerialNum+0x44>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f1c:	4b0e      	ldr	r3, [pc, #56]	; (8008f58 <Get_SerialNum+0x48>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <Get_SerialNum+0x4c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f36:	2208      	movs	r2, #8
 8008f38:	4909      	ldr	r1, [pc, #36]	; (8008f60 <Get_SerialNum+0x50>)
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 f814 	bl	8008f68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f40:	2204      	movs	r2, #4
 8008f42:	4908      	ldr	r1, [pc, #32]	; (8008f64 <Get_SerialNum+0x54>)
 8008f44:	68b8      	ldr	r0, [r7, #8]
 8008f46:	f000 f80f 	bl	8008f68 <IntToUnicode>
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	1ff0f420 	.word	0x1ff0f420
 8008f58:	1ff0f424 	.word	0x1ff0f424
 8008f5c:	1ff0f428 	.word	0x1ff0f428
 8008f60:	200000fa 	.word	0x200000fa
 8008f64:	2000010a 	.word	0x2000010a

08008f68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75fb      	strb	r3, [r7, #23]
 8008f7e:	e027      	b.n	8008fd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	0f1b      	lsrs	r3, r3, #28
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d80b      	bhi.n	8008fa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	0f1b      	lsrs	r3, r3, #28
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	4619      	mov	r1, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	440b      	add	r3, r1
 8008f98:	3230      	adds	r2, #48	; 0x30
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	e00a      	b.n	8008fb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	0f1b      	lsrs	r3, r3, #28
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	4619      	mov	r1, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	440b      	add	r3, r1
 8008fb0:	3237      	adds	r2, #55	; 0x37
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	75fb      	strb	r3, [r7, #23]
 8008fd0:	7dfa      	ldrb	r2, [r7, #23]
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d3d3      	bcc.n	8008f80 <IntToUnicode+0x18>
  }
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
	...

08008fe8 <write_data_to_flash>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash( uint8_t *buf, uint32_t blk_addr, uint16_t blk_len )
{
 8008fe8:	b5b0      	push	{r4, r5, r7, lr}
 8008fea:	f5ad 2d80 	sub.w	sp, sp, #262144	; 0x40000
 8008fee:	b08c      	sub	sp, #48	; 0x30
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ff6:	f843 0c24 	str.w	r0, [r3, #-36]
 8008ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ffe:	f843 1c28 	str.w	r1, [r3, #-40]
 8009002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009006:	f823 2c2a 	strh.w	r2, [r3, #-42]
	HAL_StatusTypeDef ret = HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	4a4d      	ldr	r2, [pc, #308]	; (8009144 <write_data_to_flash+0x15c>)
 800900e:	443a      	add	r2, r7
 8009010:	7013      	strb	r3, [r2, #0]
	uint8_t           data[ TOTAL_USB_DEVICE_SIZE ];

	do
	{
		/* First copy the data to the local buffer from Flash */
		memcpy( data, (const void *)USB_FLASH_START_ADDRESS, TOTAL_USB_DEVICE_SIZE );
 8009012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009016:	4a4c      	ldr	r2, [pc, #304]	; (8009148 <write_data_to_flash+0x160>)
 8009018:	3b08      	subs	r3, #8
 800901a:	4611      	mov	r1, r2
 800901c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fd9f 	bl	8009b64 <memcpy>

		/* Make modifications in the local buffer */
		memcpy((void*)&data[blk_addr*STORAGE_BLK_SIZ], buf, (blk_len*STORAGE_BLK_SIZ));
 8009026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800902a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800902e:	025a      	lsls	r2, r3, #9
 8009030:	4b46      	ldr	r3, [pc, #280]	; (800914c <write_data_to_flash+0x164>)
 8009032:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8009036:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800903a:	443b      	add	r3, r7
 800903c:	1898      	adds	r0, r3, r2
 800903e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009042:	f833 3c2a 	ldrh.w	r3, [r3, #-42]
 8009046:	025b      	lsls	r3, r3, #9
 8009048:	461a      	mov	r2, r3
 800904a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800904e:	f853 1c24 	ldr.w	r1, [r3, #-36]
 8009052:	f000 fd87 	bl	8009b64 <memcpy>

		ret = HAL_FLASH_Unlock();
 8009056:	f7f7 fe73 	bl	8000d40 <HAL_FLASH_Unlock>
 800905a:	4603      	mov	r3, r0
 800905c:	4a39      	ldr	r2, [pc, #228]	; (8009144 <write_data_to_flash+0x15c>)
 800905e:	443a      	add	r2, r7
 8009060:	7013      	strb	r3, [r2, #0]
		if( ret != HAL_OK )
 8009062:	4b38      	ldr	r3, [pc, #224]	; (8009144 <write_data_to_flash+0x15c>)
 8009064:	443b      	add	r3, r7
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d160      	bne.n	800912e <write_data_to_flash+0x146>
		}

		/* Erase the Flash */
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;
		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800906c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009070:	461a      	mov	r2, r3
 8009072:	2300      	movs	r3, #0
 8009074:	f842 3c1c 	str.w	r3, [r2, #-28]
		EraseInitStruct.Sector        = FLASH_SECTOR_6;
 8009078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800907c:	461a      	mov	r2, r3
 800907e:	2306      	movs	r3, #6
 8009080:	f842 3c14 	str.w	r3, [r2, #-20]
		EraseInitStruct.NbSectors     = 1;                    //erase 1 sector(6)
 8009084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009088:	461a      	mov	r2, r3
 800908a:	2301      	movs	r3, #1
 800908c:	f842 3c10 	str.w	r3, [r2, #-16]
		EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8009090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009094:	461a      	mov	r2, r3
 8009096:	2302      	movs	r3, #2
 8009098:	f842 3c0c 	str.w	r3, [r2, #-12]

		ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 800909c:	4a2c      	ldr	r2, [pc, #176]	; (8009150 <write_data_to_flash+0x168>)
 800909e:	4b2d      	ldr	r3, [pc, #180]	; (8009154 <write_data_to_flash+0x16c>)
 80090a0:	4413      	add	r3, r2
 80090a2:	19da      	adds	r2, r3, r7
 80090a4:	4b2c      	ldr	r3, [pc, #176]	; (8009158 <write_data_to_flash+0x170>)
 80090a6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80090aa:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80090ae:	443b      	add	r3, r7
 80090b0:	4611      	mov	r1, r2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f7 ffa6 	bl	8001004 <HAL_FLASHEx_Erase>
 80090b8:	4603      	mov	r3, r0
 80090ba:	4a22      	ldr	r2, [pc, #136]	; (8009144 <write_data_to_flash+0x15c>)
 80090bc:	443a      	add	r2, r7
 80090be:	7013      	strb	r3, [r2, #0]

		/* Write the data to the Flash */
		for( uint32_t i = 0; i < TOTAL_USB_DEVICE_SIZE; i++)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4a26      	ldr	r2, [pc, #152]	; (800915c <write_data_to_flash+0x174>)
 80090c4:	443a      	add	r2, r7
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	e026      	b.n	8009118 <write_data_to_flash+0x130>
		{
			ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80090ca:	4b24      	ldr	r3, [pc, #144]	; (800915c <write_data_to_flash+0x174>)
 80090cc:	443b      	add	r3, r7
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	491d      	ldr	r1, [pc, #116]	; (8009148 <write_data_to_flash+0x160>)
 80090d2:	4419      	add	r1, r3
									 ( USB_FLASH_START_ADDRESS + i ),
									 data[i]
 80090d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090d8:	461a      	mov	r2, r3
 80090da:	4b20      	ldr	r3, [pc, #128]	; (800915c <write_data_to_flash+0x174>)
 80090dc:	443b      	add	r3, r7
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4413      	add	r3, r2
 80090e2:	3b08      	subs	r3, #8
 80090e4:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2200      	movs	r2, #0
 80090ea:	461c      	mov	r4, r3
 80090ec:	4615      	mov	r5, r2
 80090ee:	4622      	mov	r2, r4
 80090f0:	462b      	mov	r3, r5
 80090f2:	2000      	movs	r0, #0
 80090f4:	f7f7 fdc8 	bl	8000c88 <HAL_FLASH_Program>
 80090f8:	4603      	mov	r3, r0
 80090fa:	4a12      	ldr	r2, [pc, #72]	; (8009144 <write_data_to_flash+0x15c>)
 80090fc:	443a      	add	r2, r7
 80090fe:	7013      	strb	r3, [r2, #0]
								   );

			if( ret != HAL_OK )
 8009100:	4b10      	ldr	r3, [pc, #64]	; (8009144 <write_data_to_flash+0x15c>)
 8009102:	443b      	add	r3, r7
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10d      	bne.n	8009126 <write_data_to_flash+0x13e>
		for( uint32_t i = 0; i < TOTAL_USB_DEVICE_SIZE; i++)
 800910a:	4b14      	ldr	r3, [pc, #80]	; (800915c <write_data_to_flash+0x174>)
 800910c:	443b      	add	r3, r7
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	4a12      	ldr	r2, [pc, #72]	; (800915c <write_data_to_flash+0x174>)
 8009114:	443a      	add	r2, r7
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	4b10      	ldr	r3, [pc, #64]	; (800915c <write_data_to_flash+0x174>)
 800911a:	443b      	add	r3, r7
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009122:	d3d2      	bcc.n	80090ca <write_data_to_flash+0xe2>
 8009124:	e000      	b.n	8009128 <write_data_to_flash+0x140>
			{
				break;
 8009126:	bf00      	nop
			}
		}

		HAL_FLASH_Lock();
 8009128:	f7f7 fe2c 	bl	8000d84 <HAL_FLASH_Lock>
 800912c:	e000      	b.n	8009130 <write_data_to_flash+0x148>
		  break;
 800912e:	bf00      	nop
	} while( false );

	return( ret );
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <write_data_to_flash+0x15c>)
 8009132:	443b      	add	r3, r7
 8009134:	781b      	ldrb	r3, [r3, #0]
}
 8009136:	4618      	mov	r0, r3
 8009138:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
 800913c:	3730      	adds	r7, #48	; 0x30
 800913e:	46bd      	mov	sp, r7
 8009140:	bdb0      	pop	{r4, r5, r7, pc}
 8009142:	bf00      	nop
 8009144:	0004002f 	.word	0x0004002f
 8009148:	08080000 	.word	0x08080000
 800914c:	fffbfff8 	.word	0xfffbfff8
 8009150:	fffbffe0 	.word	0xfffbffe0
 8009154:	00040030 	.word	0x00040030
 8009158:	fffbffe4 	.word	0xfffbffe4
 800915c:	00040028 	.word	0x00040028

08009160 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800916a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800918c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009194:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8009196:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80091ae:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 80091c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	461a      	mov	r2, r3
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
 80091e4:	4613      	mov	r3, r2
 80091e6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	/* We can read directly from the Flash address */
	memcpy( buf,
		    (const void *)(USB_FLASH_START_ADDRESS + ( blk_addr * STORAGE_BLK_SIZ )),
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <STORAGE_Read_FS+0x34>)
 80091ec:	4413      	add	r3, r2
 80091ee:	025b      	lsls	r3, r3, #9
	memcpy( buf,
 80091f0:	4619      	mov	r1, r3
		    (blk_len * STORAGE_BLK_SIZ)
 80091f2:	89bb      	ldrh	r3, [r7, #12]
 80091f4:	025b      	lsls	r3, r3, #9
	memcpy( buf,
 80091f6:	461a      	mov	r2, r3
 80091f8:	68b8      	ldr	r0, [r7, #8]
 80091fa:	f000 fcb3 	bl	8009b64 <memcpy>
		  );

  return (USBD_OK);
 80091fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	00040400 	.word	0x00040400

0800920c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	461a      	mov	r2, r3
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]
 800921c:	4613      	mov	r3, r2
 800921e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

  return write_data_to_flash( buf, blk_addr, blk_len );
 8009220:	89bb      	ldrh	r3, [r7, #12]
 8009222:	461a      	mov	r2, r3
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	68b8      	ldr	r0, [r7, #8]
 8009228:	f7ff fede 	bl	8008fe8 <write_data_to_flash>
 800922c:	4603      	mov	r3, r0
 800922e:	b25b      	sxtb	r3, r3

  /* USER CODE END 7 */
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009238:	b480      	push	{r7}
 800923a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800923c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800923e:	4618      	mov	r0, r3
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b0ae      	sub	sp, #184	; 0xb8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009250:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	605a      	str	r2, [r3, #4]
 800925a:	609a      	str	r2, [r3, #8]
 800925c:	60da      	str	r2, [r3, #12]
 800925e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009260:	f107 0314 	add.w	r3, r7, #20
 8009264:	2290      	movs	r2, #144	; 0x90
 8009266:	2100      	movs	r1, #0
 8009268:	4618      	mov	r0, r3
 800926a:	f000 fc37 	bl	8009adc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009276:	d151      	bne.n	800931c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009278:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800927c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800927e:	2300      	movs	r3, #0
 8009280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009284:	f107 0314 	add.w	r3, r7, #20
 8009288:	4618      	mov	r0, r3
 800928a:	f7fa f947 	bl	800351c <HAL_RCCEx_PeriphCLKConfig>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8009294:	f7f7 fa1a 	bl	80006cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009298:	4b22      	ldr	r3, [pc, #136]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	4a21      	ldr	r2, [pc, #132]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	6313      	str	r3, [r2, #48]	; 0x30
 80092a4:	4b1f      	ldr	r3, [pc, #124]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	613b      	str	r3, [r7, #16]
 80092ae:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80092b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80092b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b8:	2302      	movs	r3, #2
 80092ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092c4:	2303      	movs	r3, #3
 80092c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092ca:	230a      	movs	r3, #10
 80092cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80092d4:	4619      	mov	r1, r3
 80092d6:	4814      	ldr	r0, [pc, #80]	; (8009328 <HAL_PCD_MspInit+0xe0>)
 80092d8:	f7f7 ff92 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092dc:	4b11      	ldr	r3, [pc, #68]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 80092de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e0:	4a10      	ldr	r2, [pc, #64]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 80092e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e6:	6353      	str	r3, [r2, #52]	; 0x34
 80092e8:	4b0e      	ldr	r3, [pc, #56]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 80092ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 80092f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f8:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 80092fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092fe:	6453      	str	r3, [r2, #68]	; 0x44
 8009300:	4b08      	ldr	r3, [pc, #32]	; (8009324 <HAL_PCD_MspInit+0xdc>)
 8009302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009308:	60bb      	str	r3, [r7, #8]
 800930a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800930c:	2200      	movs	r2, #0
 800930e:	2100      	movs	r1, #0
 8009310:	2043      	movs	r0, #67	; 0x43
 8009312:	f7f7 fc06 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009316:	2043      	movs	r0, #67	; 0x43
 8009318:	f7f7 fc1f 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800931c:	bf00      	nop
 800931e:	37b8      	adds	r7, #184	; 0xb8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	40023800 	.word	0x40023800
 8009328:	40020000 	.word	0x40020000

0800932c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f7fe fab0 	bl	80078a8 <USBD_LL_SetupStage>
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	4613      	mov	r3, r2
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	4413      	add	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	440b      	add	r3, r1
 8009370:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	78fb      	ldrb	r3, [r7, #3]
 8009378:	4619      	mov	r1, r3
 800937a:	f7fe faea 	bl	8007952 <USBD_LL_DataOutStage>
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	460b      	mov	r3, r1
 8009390:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009398:	78fa      	ldrb	r2, [r7, #3]
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	4613      	mov	r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	334c      	adds	r3, #76	; 0x4c
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	4619      	mov	r1, r3
 80093ae:	f7fe fb83 	bl	8007ab8 <USBD_LL_DataInStage>
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe fcb7 	bl	8007d3c <USBD_LL_SOF>
}
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093de:	2301      	movs	r3, #1
 80093e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d102      	bne.n	80093f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]
 80093ee:	e008      	b.n	8009402 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d102      	bne.n	80093fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80093f8:	2301      	movs	r3, #1
 80093fa:	73fb      	strb	r3, [r7, #15]
 80093fc:	e001      	b.n	8009402 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80093fe:	f7f7 f965 	bl	80006cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009408:	7bfa      	ldrb	r2, [r7, #15]
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f7fe fc57 	bl	8007cc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fbff 	bl	8007c1c <USBD_LL_Reset>
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe fc52 	bl	8007ce0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800944e:	f043 0301 	orr.w	r3, r3, #1
 8009452:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d005      	beq.n	8009468 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800945c:	4b04      	ldr	r3, [pc, #16]	; (8009470 <HAL_PCD_SuspendCallback+0x48>)
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	4a03      	ldr	r2, [pc, #12]	; (8009470 <HAL_PCD_SuspendCallback+0x48>)
 8009462:	f043 0306 	orr.w	r3, r3, #6
 8009466:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	e000ed00 	.word	0xe000ed00

08009474 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fc42 	bl	8007d0c <USBD_LL_Resume>
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80094a2:	78fa      	ldrb	r2, [r7, #3]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fc9a 	bl	8007de0 <USBD_LL_IsoOUTIncomplete>
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80094c6:	78fa      	ldrb	r2, [r7, #3]
 80094c8:	4611      	mov	r1, r2
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fc56 	bl	8007d7c <USBD_LL_IsoINIncomplete>
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe fcac 	bl	8007e44 <USBD_LL_DevConnected>
}
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fca9 	bl	8007e5a <USBD_LL_DevDisconnected>
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d13c      	bne.n	800959a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009520:	4a20      	ldr	r2, [pc, #128]	; (80095a4 <USBD_LL_Init+0x94>)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <USBD_LL_Init+0x94>)
 800952c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009530:	4b1c      	ldr	r3, [pc, #112]	; (80095a4 <USBD_LL_Init+0x94>)
 8009532:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009536:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <USBD_LL_Init+0x94>)
 800953a:	2206      	movs	r2, #6
 800953c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800953e:	4b19      	ldr	r3, [pc, #100]	; (80095a4 <USBD_LL_Init+0x94>)
 8009540:	2202      	movs	r2, #2
 8009542:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009544:	4b17      	ldr	r3, [pc, #92]	; (80095a4 <USBD_LL_Init+0x94>)
 8009546:	2200      	movs	r2, #0
 8009548:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800954a:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <USBD_LL_Init+0x94>)
 800954c:	2202      	movs	r2, #2
 800954e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009550:	4b14      	ldr	r3, [pc, #80]	; (80095a4 <USBD_LL_Init+0x94>)
 8009552:	2200      	movs	r2, #0
 8009554:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <USBD_LL_Init+0x94>)
 8009558:	2200      	movs	r2, #0
 800955a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800955c:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <USBD_LL_Init+0x94>)
 800955e:	2200      	movs	r2, #0
 8009560:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009562:	4b10      	ldr	r3, [pc, #64]	; (80095a4 <USBD_LL_Init+0x94>)
 8009564:	2200      	movs	r2, #0
 8009566:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009568:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <USBD_LL_Init+0x94>)
 800956a:	2200      	movs	r2, #0
 800956c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800956e:	480d      	ldr	r0, [pc, #52]	; (80095a4 <USBD_LL_Init+0x94>)
 8009570:	f7f7 fff2 	bl	8001558 <HAL_PCD_Init>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800957a:	f7f7 f8a7 	bl	80006cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800957e:	2180      	movs	r1, #128	; 0x80
 8009580:	4808      	ldr	r0, [pc, #32]	; (80095a4 <USBD_LL_Init+0x94>)
 8009582:	f7f9 fa9a 	bl	8002aba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009586:	2240      	movs	r2, #64	; 0x40
 8009588:	2100      	movs	r1, #0
 800958a:	4806      	ldr	r0, [pc, #24]	; (80095a4 <USBD_LL_Init+0x94>)
 800958c:	f7f9 fa4e 	bl	8002a2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009590:	2280      	movs	r2, #128	; 0x80
 8009592:	2101      	movs	r1, #1
 8009594:	4803      	ldr	r0, [pc, #12]	; (80095a4 <USBD_LL_Init+0x94>)
 8009596:	f7f9 fa49 	bl	8002a2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	200006a4 	.word	0x200006a4

080095a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095be:	4618      	mov	r0, r3
 80095c0:	f7f8 f8ee 	bl	80017a0 <HAL_PCD_Start>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f99e 	bl	800990c <USBD_Get_USB_Status>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	4608      	mov	r0, r1
 80095e8:	4611      	mov	r1, r2
 80095ea:	461a      	mov	r2, r3
 80095ec:	4603      	mov	r3, r0
 80095ee:	70fb      	strb	r3, [r7, #3]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70bb      	strb	r3, [r7, #2]
 80095f4:	4613      	mov	r3, r2
 80095f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009606:	78bb      	ldrb	r3, [r7, #2]
 8009608:	883a      	ldrh	r2, [r7, #0]
 800960a:	78f9      	ldrb	r1, [r7, #3]
 800960c:	f7f8 fddb 	bl	80021c6 <HAL_PCD_EP_Open>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f978 	bl	800990c <USBD_Get_USB_Status>
 800961c:	4603      	mov	r3, r0
 800961e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009620:	7bbb      	ldrb	r3, [r7, #14]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f7f8 fe24 	bl	8002296 <HAL_PCD_EP_Close>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f959 	bl	800990c <USBD_Get_USB_Status>
 800965a:	4603      	mov	r3, r0
 800965c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009682:	78fa      	ldrb	r2, [r7, #3]
 8009684:	4611      	mov	r1, r2
 8009686:	4618      	mov	r0, r3
 8009688:	f7f8 ffe7 	bl	800265a <HAL_PCD_EP_Flush>
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f93a 	bl	800990c <USBD_Get_USB_Status>
 8009698:	4603      	mov	r3, r0
 800969a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969c:	7bbb      	ldrb	r3, [r7, #14]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096c0:	78fa      	ldrb	r2, [r7, #3]
 80096c2:	4611      	mov	r1, r2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7f8 fedd 	bl	8002484 <HAL_PCD_EP_SetStall>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f91b 	bl	800990c <USBD_Get_USB_Status>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096da:	7bbb      	ldrb	r3, [r7, #14]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	4611      	mov	r1, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f7f8 ff22 	bl	800254c <HAL_PCD_EP_ClrStall>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f8fc 	bl	800990c <USBD_Get_USB_Status>
 8009714:	4603      	mov	r3, r0
 8009716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009718:	7bbb      	ldrb	r3, [r7, #14]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009722:	b480      	push	{r7}
 8009724:	b085      	sub	sp, #20
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009734:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800973a:	2b00      	cmp	r3, #0
 800973c:	da0b      	bge.n	8009756 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009744:	68f9      	ldr	r1, [r7, #12]
 8009746:	4613      	mov	r3, r2
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	333e      	adds	r3, #62	; 0x3e
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	e00b      	b.n	800976e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800975c:	68f9      	ldr	r1, [r7, #12]
 800975e:	4613      	mov	r3, r2
 8009760:	00db      	lsls	r3, r3, #3
 8009762:	4413      	add	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	440b      	add	r3, r1
 8009768:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800976c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	460b      	mov	r3, r1
 8009784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009794:	78fa      	ldrb	r2, [r7, #3]
 8009796:	4611      	mov	r1, r2
 8009798:	4618      	mov	r0, r3
 800979a:	f7f8 fcef 	bl	800217c <HAL_PCD_SetAddress>
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f8b1 	bl	800990c <USBD_Get_USB_Status>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	607a      	str	r2, [r7, #4]
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	460b      	mov	r3, r1
 80097c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097d6:	7af9      	ldrb	r1, [r7, #11]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	f7f8 fe08 	bl	80023f0 <HAL_PCD_EP_Transmit>
 80097e0:	4603      	mov	r3, r0
 80097e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f890 	bl	800990c <USBD_Get_USB_Status>
 80097ec:	4603      	mov	r3, r0
 80097ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b086      	sub	sp, #24
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
 8009806:	460b      	mov	r3, r1
 8009808:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009818:	7af9      	ldrb	r1, [r7, #11]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	f7f8 fd84 	bl	800232a <HAL_PCD_EP_Receive>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 f86f 	bl	800990c <USBD_Get_USB_Status>
 800982e:	4603      	mov	r3, r0
 8009830:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009832:	7dbb      	ldrb	r3, [r7, #22]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	4611      	mov	r1, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f7f8 fdb4 	bl	80023c0 <HAL_PCD_EP_GetRxCount>
 8009858:	4603      	mov	r3, r0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <HAL_PCDEx_LPM_Callback+0x18>
 8009876:	2b01      	cmp	r3, #1
 8009878:	d01f      	beq.n	80098ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800987a:	e03b      	b.n	80098f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d007      	beq.n	8009894 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009884:	f000 f83c 	bl	8009900 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009888:	4b1c      	ldr	r3, [pc, #112]	; (80098fc <HAL_PCDEx_LPM_Callback+0x98>)
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	4a1b      	ldr	r2, [pc, #108]	; (80098fc <HAL_PCDEx_LPM_Callback+0x98>)
 800988e:	f023 0306 	bic.w	r3, r3, #6
 8009892:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098a6:	f023 0301 	bic.w	r3, r3, #1
 80098aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fa2a 	bl	8007d0c <USBD_LL_Resume>
    break;
 80098b8:	e01c      	b.n	80098f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6812      	ldr	r2, [r2, #0]
 80098c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098cc:	f043 0301 	orr.w	r3, r3, #1
 80098d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe fa01 	bl	8007ce0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098e6:	4b05      	ldr	r3, [pc, #20]	; (80098fc <HAL_PCDEx_LPM_Callback+0x98>)
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	4a04      	ldr	r2, [pc, #16]	; (80098fc <HAL_PCDEx_LPM_Callback+0x98>)
 80098ec:	f043 0306 	orr.w	r3, r3, #6
 80098f0:	6113      	str	r3, [r2, #16]
    break;
 80098f2:	bf00      	nop
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	e000ed00 	.word	0xe000ed00

08009900 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009904:	f7f6 fe24 	bl	8000550 <SystemClock_Config>
}
 8009908:	bf00      	nop
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b03      	cmp	r3, #3
 800991e:	d817      	bhi.n	8009950 <USBD_Get_USB_Status+0x44>
 8009920:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <USBD_Get_USB_Status+0x1c>)
 8009922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009926:	bf00      	nop
 8009928:	08009939 	.word	0x08009939
 800992c:	0800993f 	.word	0x0800993f
 8009930:	08009945 	.word	0x08009945
 8009934:	0800994b 	.word	0x0800994b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	73fb      	strb	r3, [r7, #15]
    break;
 800993c:	e00b      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800993e:	2303      	movs	r3, #3
 8009940:	73fb      	strb	r3, [r7, #15]
    break;
 8009942:	e008      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009944:	2301      	movs	r3, #1
 8009946:	73fb      	strb	r3, [r7, #15]
    break;
 8009948:	e005      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800994a:	2303      	movs	r3, #3
 800994c:	73fb      	strb	r3, [r7, #15]
    break;
 800994e:	e002      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009950:	2303      	movs	r3, #3
 8009952:	73fb      	strb	r3, [r7, #15]
    break;
 8009954:	bf00      	nop
  }
  return usb_status;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <malloc>:
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <malloc+0xc>)
 8009966:	4601      	mov	r1, r0
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f000 b82b 	b.w	80099c4 <_malloc_r>
 800996e:	bf00      	nop
 8009970:	20000180 	.word	0x20000180

08009974 <free>:
 8009974:	4b02      	ldr	r3, [pc, #8]	; (8009980 <free+0xc>)
 8009976:	4601      	mov	r1, r0
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f000 b901 	b.w	8009b80 <_free_r>
 800997e:	bf00      	nop
 8009980:	20000180 	.word	0x20000180

08009984 <sbrk_aligned>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	4e0e      	ldr	r6, [pc, #56]	; (80099c0 <sbrk_aligned+0x3c>)
 8009988:	460c      	mov	r4, r1
 800998a:	6831      	ldr	r1, [r6, #0]
 800998c:	4605      	mov	r5, r0
 800998e:	b911      	cbnz	r1, 8009996 <sbrk_aligned+0x12>
 8009990:	f000 f8ac 	bl	8009aec <_sbrk_r>
 8009994:	6030      	str	r0, [r6, #0]
 8009996:	4621      	mov	r1, r4
 8009998:	4628      	mov	r0, r5
 800999a:	f000 f8a7 	bl	8009aec <_sbrk_r>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	d00a      	beq.n	80099b8 <sbrk_aligned+0x34>
 80099a2:	1cc4      	adds	r4, r0, #3
 80099a4:	f024 0403 	bic.w	r4, r4, #3
 80099a8:	42a0      	cmp	r0, r4
 80099aa:	d007      	beq.n	80099bc <sbrk_aligned+0x38>
 80099ac:	1a21      	subs	r1, r4, r0
 80099ae:	4628      	mov	r0, r5
 80099b0:	f000 f89c 	bl	8009aec <_sbrk_r>
 80099b4:	3001      	adds	r0, #1
 80099b6:	d101      	bne.n	80099bc <sbrk_aligned+0x38>
 80099b8:	f04f 34ff 	mov.w	r4, #4294967295
 80099bc:	4620      	mov	r0, r4
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	20000bb0 	.word	0x20000bb0

080099c4 <_malloc_r>:
 80099c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c8:	1ccd      	adds	r5, r1, #3
 80099ca:	f025 0503 	bic.w	r5, r5, #3
 80099ce:	3508      	adds	r5, #8
 80099d0:	2d0c      	cmp	r5, #12
 80099d2:	bf38      	it	cc
 80099d4:	250c      	movcc	r5, #12
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	4607      	mov	r7, r0
 80099da:	db01      	blt.n	80099e0 <_malloc_r+0x1c>
 80099dc:	42a9      	cmp	r1, r5
 80099de:	d905      	bls.n	80099ec <_malloc_r+0x28>
 80099e0:	230c      	movs	r3, #12
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	2600      	movs	r6, #0
 80099e6:	4630      	mov	r0, r6
 80099e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ac0 <_malloc_r+0xfc>
 80099f0:	f000 f868 	bl	8009ac4 <__malloc_lock>
 80099f4:	f8d8 3000 	ldr.w	r3, [r8]
 80099f8:	461c      	mov	r4, r3
 80099fa:	bb5c      	cbnz	r4, 8009a54 <_malloc_r+0x90>
 80099fc:	4629      	mov	r1, r5
 80099fe:	4638      	mov	r0, r7
 8009a00:	f7ff ffc0 	bl	8009984 <sbrk_aligned>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	4604      	mov	r4, r0
 8009a08:	d155      	bne.n	8009ab6 <_malloc_r+0xf2>
 8009a0a:	f8d8 4000 	ldr.w	r4, [r8]
 8009a0e:	4626      	mov	r6, r4
 8009a10:	2e00      	cmp	r6, #0
 8009a12:	d145      	bne.n	8009aa0 <_malloc_r+0xdc>
 8009a14:	2c00      	cmp	r4, #0
 8009a16:	d048      	beq.n	8009aaa <_malloc_r+0xe6>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	eb04 0903 	add.w	r9, r4, r3
 8009a22:	f000 f863 	bl	8009aec <_sbrk_r>
 8009a26:	4581      	cmp	r9, r0
 8009a28:	d13f      	bne.n	8009aaa <_malloc_r+0xe6>
 8009a2a:	6821      	ldr	r1, [r4, #0]
 8009a2c:	1a6d      	subs	r5, r5, r1
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4638      	mov	r0, r7
 8009a32:	f7ff ffa7 	bl	8009984 <sbrk_aligned>
 8009a36:	3001      	adds	r0, #1
 8009a38:	d037      	beq.n	8009aaa <_malloc_r+0xe6>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	442b      	add	r3, r5
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	f8d8 3000 	ldr.w	r3, [r8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d038      	beq.n	8009aba <_malloc_r+0xf6>
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	42a2      	cmp	r2, r4
 8009a4c:	d12b      	bne.n	8009aa6 <_malloc_r+0xe2>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	e00f      	b.n	8009a74 <_malloc_r+0xb0>
 8009a54:	6822      	ldr	r2, [r4, #0]
 8009a56:	1b52      	subs	r2, r2, r5
 8009a58:	d41f      	bmi.n	8009a9a <_malloc_r+0xd6>
 8009a5a:	2a0b      	cmp	r2, #11
 8009a5c:	d917      	bls.n	8009a8e <_malloc_r+0xca>
 8009a5e:	1961      	adds	r1, r4, r5
 8009a60:	42a3      	cmp	r3, r4
 8009a62:	6025      	str	r5, [r4, #0]
 8009a64:	bf18      	it	ne
 8009a66:	6059      	strne	r1, [r3, #4]
 8009a68:	6863      	ldr	r3, [r4, #4]
 8009a6a:	bf08      	it	eq
 8009a6c:	f8c8 1000 	streq.w	r1, [r8]
 8009a70:	5162      	str	r2, [r4, r5]
 8009a72:	604b      	str	r3, [r1, #4]
 8009a74:	4638      	mov	r0, r7
 8009a76:	f104 060b 	add.w	r6, r4, #11
 8009a7a:	f000 f829 	bl	8009ad0 <__malloc_unlock>
 8009a7e:	f026 0607 	bic.w	r6, r6, #7
 8009a82:	1d23      	adds	r3, r4, #4
 8009a84:	1af2      	subs	r2, r6, r3
 8009a86:	d0ae      	beq.n	80099e6 <_malloc_r+0x22>
 8009a88:	1b9b      	subs	r3, r3, r6
 8009a8a:	50a3      	str	r3, [r4, r2]
 8009a8c:	e7ab      	b.n	80099e6 <_malloc_r+0x22>
 8009a8e:	42a3      	cmp	r3, r4
 8009a90:	6862      	ldr	r2, [r4, #4]
 8009a92:	d1dd      	bne.n	8009a50 <_malloc_r+0x8c>
 8009a94:	f8c8 2000 	str.w	r2, [r8]
 8009a98:	e7ec      	b.n	8009a74 <_malloc_r+0xb0>
 8009a9a:	4623      	mov	r3, r4
 8009a9c:	6864      	ldr	r4, [r4, #4]
 8009a9e:	e7ac      	b.n	80099fa <_malloc_r+0x36>
 8009aa0:	4634      	mov	r4, r6
 8009aa2:	6876      	ldr	r6, [r6, #4]
 8009aa4:	e7b4      	b.n	8009a10 <_malloc_r+0x4c>
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	e7cc      	b.n	8009a44 <_malloc_r+0x80>
 8009aaa:	230c      	movs	r3, #12
 8009aac:	603b      	str	r3, [r7, #0]
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f000 f80e 	bl	8009ad0 <__malloc_unlock>
 8009ab4:	e797      	b.n	80099e6 <_malloc_r+0x22>
 8009ab6:	6025      	str	r5, [r4, #0]
 8009ab8:	e7dc      	b.n	8009a74 <_malloc_r+0xb0>
 8009aba:	605b      	str	r3, [r3, #4]
 8009abc:	deff      	udf	#255	; 0xff
 8009abe:	bf00      	nop
 8009ac0:	20000bac 	.word	0x20000bac

08009ac4 <__malloc_lock>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	; (8009acc <__malloc_lock+0x8>)
 8009ac6:	f000 b84b 	b.w	8009b60 <__retarget_lock_acquire_recursive>
 8009aca:	bf00      	nop
 8009acc:	20000cf0 	.word	0x20000cf0

08009ad0 <__malloc_unlock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__malloc_unlock+0x8>)
 8009ad2:	f000 b846 	b.w	8009b62 <__retarget_lock_release_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20000cf0 	.word	0x20000cf0

08009adc <memset>:
 8009adc:	4402      	add	r2, r0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d100      	bne.n	8009ae6 <memset+0xa>
 8009ae4:	4770      	bx	lr
 8009ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aea:	e7f9      	b.n	8009ae0 <memset+0x4>

08009aec <_sbrk_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	; (8009b08 <_sbrk_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f6 fe46 	bl	8000788 <_sbrk>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_sbrk_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_sbrk_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	20000cec 	.word	0x20000cec

08009b0c <__errno>:
 8009b0c:	4b01      	ldr	r3, [pc, #4]	; (8009b14 <__errno+0x8>)
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	20000180 	.word	0x20000180

08009b18 <__libc_init_array>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4d0d      	ldr	r5, [pc, #52]	; (8009b50 <__libc_init_array+0x38>)
 8009b1c:	4c0d      	ldr	r4, [pc, #52]	; (8009b54 <__libc_init_array+0x3c>)
 8009b1e:	1b64      	subs	r4, r4, r5
 8009b20:	10a4      	asrs	r4, r4, #2
 8009b22:	2600      	movs	r6, #0
 8009b24:	42a6      	cmp	r6, r4
 8009b26:	d109      	bne.n	8009b3c <__libc_init_array+0x24>
 8009b28:	4d0b      	ldr	r5, [pc, #44]	; (8009b58 <__libc_init_array+0x40>)
 8009b2a:	4c0c      	ldr	r4, [pc, #48]	; (8009b5c <__libc_init_array+0x44>)
 8009b2c:	f000 f874 	bl	8009c18 <_init>
 8009b30:	1b64      	subs	r4, r4, r5
 8009b32:	10a4      	asrs	r4, r4, #2
 8009b34:	2600      	movs	r6, #0
 8009b36:	42a6      	cmp	r6, r4
 8009b38:	d105      	bne.n	8009b46 <__libc_init_array+0x2e>
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b40:	4798      	blx	r3
 8009b42:	3601      	adds	r6, #1
 8009b44:	e7ee      	b.n	8009b24 <__libc_init_array+0xc>
 8009b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4a:	4798      	blx	r3
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	e7f2      	b.n	8009b36 <__libc_init_array+0x1e>
 8009b50:	08009cb0 	.word	0x08009cb0
 8009b54:	08009cb0 	.word	0x08009cb0
 8009b58:	08009cb0 	.word	0x08009cb0
 8009b5c:	08009cb4 	.word	0x08009cb4

08009b60 <__retarget_lock_acquire_recursive>:
 8009b60:	4770      	bx	lr

08009b62 <__retarget_lock_release_recursive>:
 8009b62:	4770      	bx	lr

08009b64 <memcpy>:
 8009b64:	440a      	add	r2, r1
 8009b66:	4291      	cmp	r1, r2
 8009b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b6c:	d100      	bne.n	8009b70 <memcpy+0xc>
 8009b6e:	4770      	bx	lr
 8009b70:	b510      	push	{r4, lr}
 8009b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	d1f9      	bne.n	8009b72 <memcpy+0xe>
 8009b7e:	bd10      	pop	{r4, pc}

08009b80 <_free_r>:
 8009b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b82:	2900      	cmp	r1, #0
 8009b84:	d044      	beq.n	8009c10 <_free_r+0x90>
 8009b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b8a:	9001      	str	r0, [sp, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b92:	bfb8      	it	lt
 8009b94:	18e4      	addlt	r4, r4, r3
 8009b96:	f7ff ff95 	bl	8009ac4 <__malloc_lock>
 8009b9a:	4a1e      	ldr	r2, [pc, #120]	; (8009c14 <_free_r+0x94>)
 8009b9c:	9801      	ldr	r0, [sp, #4]
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	b933      	cbnz	r3, 8009bb0 <_free_r+0x30>
 8009ba2:	6063      	str	r3, [r4, #4]
 8009ba4:	6014      	str	r4, [r2, #0]
 8009ba6:	b003      	add	sp, #12
 8009ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bac:	f7ff bf90 	b.w	8009ad0 <__malloc_unlock>
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	d908      	bls.n	8009bc6 <_free_r+0x46>
 8009bb4:	6825      	ldr	r5, [r4, #0]
 8009bb6:	1961      	adds	r1, r4, r5
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	bf01      	itttt	eq
 8009bbc:	6819      	ldreq	r1, [r3, #0]
 8009bbe:	685b      	ldreq	r3, [r3, #4]
 8009bc0:	1949      	addeq	r1, r1, r5
 8009bc2:	6021      	streq	r1, [r4, #0]
 8009bc4:	e7ed      	b.n	8009ba2 <_free_r+0x22>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	b10b      	cbz	r3, 8009bd0 <_free_r+0x50>
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	d9fa      	bls.n	8009bc6 <_free_r+0x46>
 8009bd0:	6811      	ldr	r1, [r2, #0]
 8009bd2:	1855      	adds	r5, r2, r1
 8009bd4:	42a5      	cmp	r5, r4
 8009bd6:	d10b      	bne.n	8009bf0 <_free_r+0x70>
 8009bd8:	6824      	ldr	r4, [r4, #0]
 8009bda:	4421      	add	r1, r4
 8009bdc:	1854      	adds	r4, r2, r1
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	6011      	str	r1, [r2, #0]
 8009be2:	d1e0      	bne.n	8009ba6 <_free_r+0x26>
 8009be4:	681c      	ldr	r4, [r3, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	6053      	str	r3, [r2, #4]
 8009bea:	440c      	add	r4, r1
 8009bec:	6014      	str	r4, [r2, #0]
 8009bee:	e7da      	b.n	8009ba6 <_free_r+0x26>
 8009bf0:	d902      	bls.n	8009bf8 <_free_r+0x78>
 8009bf2:	230c      	movs	r3, #12
 8009bf4:	6003      	str	r3, [r0, #0]
 8009bf6:	e7d6      	b.n	8009ba6 <_free_r+0x26>
 8009bf8:	6825      	ldr	r5, [r4, #0]
 8009bfa:	1961      	adds	r1, r4, r5
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	bf04      	itt	eq
 8009c00:	6819      	ldreq	r1, [r3, #0]
 8009c02:	685b      	ldreq	r3, [r3, #4]
 8009c04:	6063      	str	r3, [r4, #4]
 8009c06:	bf04      	itt	eq
 8009c08:	1949      	addeq	r1, r1, r5
 8009c0a:	6021      	streq	r1, [r4, #0]
 8009c0c:	6054      	str	r4, [r2, #4]
 8009c0e:	e7ca      	b.n	8009ba6 <_free_r+0x26>
 8009c10:	b003      	add	sp, #12
 8009c12:	bd30      	pop	{r4, r5, pc}
 8009c14:	20000bac 	.word	0x20000bac

08009c18 <_init>:
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	bf00      	nop
 8009c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1e:	bc08      	pop	{r3}
 8009c20:	469e      	mov	lr, r3
 8009c22:	4770      	bx	lr

08009c24 <_fini>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	bf00      	nop
 8009c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2a:	bc08      	pop	{r3}
 8009c2c:	469e      	mov	lr, r3
 8009c2e:	4770      	bx	lr
