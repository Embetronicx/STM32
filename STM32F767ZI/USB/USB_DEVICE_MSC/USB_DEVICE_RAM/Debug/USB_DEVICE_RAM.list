
USB_DEVICE_RAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009180  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f0  080093f0  00062000  2**0
                  CONTENTS
  4 .ARM          00000008  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093f8  080093f8  00062000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f8  080093f8  000193f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20032000  08009400  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b54  20032184  08009584  00022184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20032cd8  08009584  00022cd8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00062000  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0006202e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107a6  00000000  00000000  00062071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003413  00000000  00000000  00072817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00075c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f5  00000000  00000000  000769c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029fb4  00000000  00000000  000773b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cfe  00000000  00000000  000a1369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f055e  00000000  00000000  000b5067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000384c  00000000  00000000  001a55c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001a8e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .usb_data     00032000  20000000  20000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20032184 	.word	0x20032184
 8000214:	00000000 	.word	0x00000000
 8000218:	08009360 	.word	0x08009360

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20032188 	.word	0x20032188
 8000234:	08009360 	.word	0x08009360

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000538:	f000 f89c 	bl	8000674 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 f995 	bl	800086a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f806 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f872 	bl	800062c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000548:	f008 f856 	bl	80085f8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x18>
	...

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f008 fe60 	bl	8009224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <SystemClock_Config+0xd4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a2a      	ldr	r2, [pc, #168]	; (8000624 <SystemClock_Config+0xd4>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <SystemClock_Config+0xd4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a25      	ldr	r2, [pc, #148]	; (8000628 <SystemClock_Config+0xd8>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005bc:	23d8      	movs	r3, #216	; 0xd8
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005c4:	2309      	movs	r3, #9
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 f83b 	bl	800264c <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005dc:	f000 f876 	bl	80006cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e0:	f001 ffe4 	bl	80025ac <HAL_PWREx_EnableOverDrive>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ea:	f000 f86f 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2107      	movs	r1, #7
 800060c:	4618      	mov	r0, r3
 800060e:	f002 facb 	bl	8002ba8 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000618:	f000 f858 	bl	80006cc <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_GPIO_Init+0x44>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <MX_GPIO_Init+0x44>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_GPIO_Init+0x44>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_GPIO_Init+0x44>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <MX_GPIO_Init+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_GPIO_Init+0x44>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000686:	f000 fa83 	bl	8000b90 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800068a:	2301      	movs	r3, #1
 800068c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800068e:	2300      	movs	r3, #0
 8000690:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000696:	231f      	movs	r3, #31
 8000698:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800069a:	2387      	movs	r3, #135	; 0x87
 800069c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800069e:	2300      	movs	r3, #0
 80006a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006a2:	2300      	movs	r3, #0
 80006a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006aa:	2301      	movs	r3, #1
 80006ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006b6:	463b      	mov	r3, r7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 faa1 	bl	8000c00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006be:	2004      	movs	r0, #4
 80006c0:	f000 fa7e 	bl	8000bc0 <HAL_MPU_Enable>

}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x44>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x44>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_MspInit+0x44>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_MspInit+0x44>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6453      	str	r3, [r2, #68]	; 0x44
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_MspInit+0x44>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f8ba 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <OTG_FS_IRQHandler+0x10>)
 800077a:	f000 fd77 	bl	800126c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20032688 	.word	0x20032688

08000788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <_sbrk+0x5c>)
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <_sbrk+0x60>)
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <_sbrk+0x64>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <_sbrk+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d207      	bcs.n	80007c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b8:	f008 fd4c 	bl	8009254 <__errno>
 80007bc:	4603      	mov	r3, r0
 80007be:	220c      	movs	r2, #12
 80007c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	e009      	b.n	80007dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <_sbrk+0x64>)
 80007d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20080000 	.word	0x20080000
 80007e8:	00000400 	.word	0x00000400
 80007ec:	200321a0 	.word	0x200321a0
 80007f0:	20032cd8 	.word	0x20032cd8

080007f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800081e:	490e      	ldr	r1, [pc, #56]	; (8000858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000834:	4c0b      	ldr	r4, [pc, #44]	; (8000864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000842:	f7ff ffd7 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f008 fd0b 	bl	8009260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fe73 	bl	8000534 <main>
  bx  lr    
 800084e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000854:	20032000 	.word	0x20032000
  ldr r1, =_edata
 8000858:	20032184 	.word	0x20032184
  ldr r2, =_sidata
 800085c:	08009400 	.word	0x08009400
  ldr r2, =_sbss
 8000860:	20032184 	.word	0x20032184
  ldr r4, =_ebss
 8000864:	20032cd8 	.word	0x20032cd8

08000868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>

0800086a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086e:	2003      	movs	r0, #3
 8000870:	f000 f94c 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000874:	200f      	movs	r0, #15
 8000876:	f000 f805 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087a:	f7ff ff2d 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f967 	bl	8000b76 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f92f 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20032000 	.word	0x20032000
 80008dc:	20032008 	.word	0x20032008
 80008e0:	20032004 	.word	0x20032004

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20032008 	.word	0x20032008
 8000908:	200321a4 	.word	0x200321a4

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	200321a4 	.word	0x200321a4

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff ffee 	bl	800090c <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffde 	bl	800090c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20032008 	.word	0x20032008

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <__NVIC_SetPriorityGrouping+0x40>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	4313      	orrs	r3, r2
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x40>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00
 80009b0:	05fa0000 	.word	0x05fa0000

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff29 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff3e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff8e 	bl	8000a60 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff31 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b94:	f3bf 8f5f 	dmb	sy
}
 8000b98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_MPU_Disable+0x28>)
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_MPU_Disable+0x28>)
 8000ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_MPU_Disable+0x2c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	e000ed90 	.word	0xe000ed90

08000bc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <HAL_MPU_Enable+0x38>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_MPU_Enable+0x3c>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_MPU_Enable+0x3c>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bde:	f3bf 8f4f 	dsb	sy
}
 8000be2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000be4:	f3bf 8f6f 	isb	sy
}
 8000be8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed90 	.word	0xe000ed90
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	785a      	ldrb	r2, [r3, #1]
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
 8000c0e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d029      	beq.n	8000c6c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000c18:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7b1b      	ldrb	r3, [r3, #12]
 8000c24:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7adb      	ldrb	r3, [r3, #11]
 8000c2a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7a9b      	ldrb	r3, [r3, #10]
 8000c32:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7b5b      	ldrb	r3, [r3, #13]
 8000c3a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7b9b      	ldrb	r3, [r3, #14]
 8000c42:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7bdb      	ldrb	r3, [r3, #15]
 8000c4a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7a5b      	ldrb	r3, [r3, #9]
 8000c52:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7a1b      	ldrb	r3, [r3, #8]
 8000c5a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c5c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c66:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c68:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000c6a:	e005      	b.n	8000c78 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_MPU_ConfigRegion+0x84>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed90 	.word	0xe000ed90

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	e175      	b.n	8000f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ca8:	2201      	movs	r2, #1
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f040 8164 	bne.w	8000f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d005      	beq.n	8000cde <HAL_GPIO_Init+0x56>
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d130      	bne.n	8000d40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d14:	2201      	movs	r2, #1
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	091b      	lsrs	r3, r3, #4
 8000d2a:	f003 0201 	and.w	r2, r3, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d017      	beq.n	8000d7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d123      	bne.n	8000dd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	69b9      	ldr	r1, [r7, #24]
 8000dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0203 	and.w	r2, r3, #3
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80be 	beq.w	8000f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b66      	ldr	r3, [pc, #408]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a65      	ldr	r2, [pc, #404]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b63      	ldr	r3, [pc, #396]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e2a:	4a61      	ldr	r2, [pc, #388]	; (8000fb0 <HAL_GPIO_Init+0x328>)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <HAL_GPIO_Init+0x32c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d037      	beq.n	8000ec6 <HAL_GPIO_Init+0x23e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a57      	ldr	r2, [pc, #348]	; (8000fb8 <HAL_GPIO_Init+0x330>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d031      	beq.n	8000ec2 <HAL_GPIO_Init+0x23a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a56      	ldr	r2, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x334>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d02b      	beq.n	8000ebe <HAL_GPIO_Init+0x236>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a55      	ldr	r2, [pc, #340]	; (8000fc0 <HAL_GPIO_Init+0x338>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d025      	beq.n	8000eba <HAL_GPIO_Init+0x232>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a54      	ldr	r2, [pc, #336]	; (8000fc4 <HAL_GPIO_Init+0x33c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01f      	beq.n	8000eb6 <HAL_GPIO_Init+0x22e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a53      	ldr	r2, [pc, #332]	; (8000fc8 <HAL_GPIO_Init+0x340>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x22a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a52      	ldr	r2, [pc, #328]	; (8000fcc <HAL_GPIO_Init+0x344>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x226>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <HAL_GPIO_Init+0x348>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x222>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <HAL_GPIO_Init+0x34c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x21e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x21a>
 8000e9e:	2309      	movs	r3, #9
 8000ea0:	e012      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	e010      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	e00e      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <HAL_GPIO_Init+0x328>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0a:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f34:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	f67f ae86 	bls.w	8000ca8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40021400 	.word	0x40021400
 8000fcc:	40021800 	.word	0x40021800
 8000fd0:	40021c00 	.word	0x40021c00
 8000fd4:	40022000 	.word	0x40022000
 8000fd8:	40022400 	.word	0x40022400
 8000fdc:	40013c00 	.word	0x40013c00

08000fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b08f      	sub	sp, #60	; 0x3c
 8000fe4:	af0a      	add	r7, sp, #40	; 0x28
 8000fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e116      	b.n	8001220 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d106      	bne.n	8001012 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f007 fcbf 	bl	8008990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2203      	movs	r2, #3
 8001016:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fcea 	bl	8003a0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	687e      	ldr	r6, [r7, #4]
 800103e:	466d      	mov	r5, sp
 8001040:	f106 0410 	add.w	r4, r6, #16
 8001044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001050:	e885 0003 	stmia.w	r5, {r0, r1}
 8001054:	1d33      	adds	r3, r6, #4
 8001056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f002 fbcb 	bl	80037f4 <USB_CoreInit>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0d7      	b.n	8001220 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fcd8 	bl	8003a2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e04a      	b.n	8001118 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	333d      	adds	r3, #61	; 0x3d
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	333c      	adds	r3, #60	; 0x3c
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	b298      	uxth	r0, r3
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	3344      	adds	r3, #68	; 0x44
 80010be:	4602      	mov	r2, r0
 80010c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	3340      	adds	r3, #64	; 0x40
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3348      	adds	r3, #72	; 0x48
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	334c      	adds	r3, #76	; 0x4c
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	3354      	adds	r3, #84	; 0x54
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	3301      	adds	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3af      	bcc.n	8001082 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e044      	b.n	80011b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	3301      	adds	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3b5      	bcc.n	8001128 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	687e      	ldr	r6, [r7, #4]
 80011c4:	466d      	mov	r5, sp
 80011c6:	f106 0410 	add.w	r4, r6, #16
 80011ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80011da:	1d33      	adds	r3, r6, #4
 80011dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f002 fc70 	bl	8003ac4 <USB_DevInit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2202      	movs	r2, #2
 80011ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e014      	b.n	8001220 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	2b01      	cmp	r3, #1
 800120c:	d102      	bne.n	8001214 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f001 f9a8 	bl	8002564 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fdbe 	bl	8004d9a <USB_DevDisconnect>

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001228 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_PCD_Start+0x16>
 800123a:	2302      	movs	r3, #2
 800123c:	e012      	b.n	8001264 <HAL_PCD_Start+0x3c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fbcc 	bl	80039e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fd7f 	bl	8004d58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b08d      	sub	sp, #52	; 0x34
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fe3d 	bl	8004f02 <USB_GetMode>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 84b7 	bne.w	8001bfe <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fda1 	bl	8004ddc <USB_ReadInterrupts>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 84ad 	beq.w	8001bfc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fd8e 	bl	8004ddc <USB_ReadInterrupts>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d107      	bne.n	80012da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f002 0202 	and.w	r2, r2, #2
 80012d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fd7c 	bl	8004ddc <USB_ReadInterrupts>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d161      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0210 	bic.w	r2, r2, #16
 80012fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f003 020f 	and.w	r2, r3, #15
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	3304      	adds	r3, #4
 800131c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	0c5b      	lsrs	r3, r3, #17
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	2b02      	cmp	r3, #2
 8001328:	d124      	bne.n	8001374 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d035      	beq.n	80013a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	6a38      	ldr	r0, [r7, #32]
 800134a:	f003 fbb3 	bl	8004ab4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135a:	441a      	add	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	6a1a      	ldr	r2, [r3, #32]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136c:	441a      	add	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	621a      	str	r2, [r3, #32]
 8001372:	e016      	b.n	80013a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	0c5b      	lsrs	r3, r3, #17
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	2b06      	cmp	r3, #6
 800137e:	d110      	bne.n	80013a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001386:	2208      	movs	r2, #8
 8001388:	4619      	mov	r1, r3
 800138a:	6a38      	ldr	r0, [r7, #32]
 800138c:	f003 fb92 	bl	8004ab4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139c:	441a      	add	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0210 	orr.w	r2, r2, #16
 80013b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fd10 	bl	8004ddc <USB_ReadInterrupts>
 80013bc:	4603      	mov	r3, r0
 80013be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013c6:	f040 80a7 	bne.w	8001518 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fd15 	bl	8004e02 <USB_ReadDevAllOutEpInterrupt>
 80013d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013da:	e099      	b.n	8001510 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 808e 	beq.w	8001504 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fd39 	bl	8004e6a <USB_ReadDevOutEPInterrupt>
 80013f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00c      	beq.n	800141e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	015a      	lsls	r2, r3, #5
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	4413      	add	r3, r2
 800140c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001410:	461a      	mov	r2, r3
 8001412:	2301      	movs	r3, #1
 8001414:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 ff1d 	bl	8002258 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00c      	beq.n	8001442 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	015a      	lsls	r2, r3, #5
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001434:	461a      	mov	r2, r3
 8001436:	2308      	movs	r3, #8
 8001438:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800143a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fff3 	bl	8002428 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001458:	461a      	mov	r2, r3
 800145a:	2310      	movs	r3, #16
 800145c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d030      	beq.n	80014ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001470:	2b80      	cmp	r3, #128	; 0x80
 8001472:	d109      	bne.n	8001488 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001486:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	3304      	adds	r3, #4
 800149c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	78db      	ldrb	r3, [r3, #3]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d108      	bne.n	80014b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2200      	movs	r2, #0
 80014aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f007 fb90 	bl	8008bd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	015a      	lsls	r2, r3, #5
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	4413      	add	r3, r2
 80014c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014c4:	461a      	mov	r2, r3
 80014c6:	2302      	movs	r3, #2
 80014c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	015a      	lsls	r2, r3, #5
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4413      	add	r3, r2
 80014dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e0:	461a      	mov	r2, r3
 80014e2:	2320      	movs	r3, #32
 80014e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	015a      	lsls	r2, r3, #5
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fc:	461a      	mov	r2, r3
 80014fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001502:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	3301      	adds	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f af62 	bne.w	80013dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fc5d 	bl	8004ddc <USB_ReadInterrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800152c:	f040 80db 	bne.w	80016e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fc7e 	bl	8004e36 <USB_ReadDevAllInEpInterrupt>
 800153a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001540:	e0cd      	b.n	80016de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80c2 	beq.w	80016d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f003 fca4 	bl	8004ea6 <USB_ReadDevInEPInterrupt>
 800155e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d057      	beq.n	800161a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	2201      	movs	r2, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	69f9      	ldr	r1, [r7, #28]
 8001586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800158a:	4013      	ands	r3, r2
 800158c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4413      	add	r3, r2
 8001596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800159a:	461a      	mov	r2, r3
 800159c:	2301      	movs	r3, #1
 800159e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d132      	bne.n	800160e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	334c      	adds	r3, #76	; 0x4c
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4403      	add	r3, r0
 80015c8:	3348      	adds	r3, #72	; 0x48
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4419      	add	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4403      	add	r3, r0
 80015dc:	334c      	adds	r3, #76	; 0x4c
 80015de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d113      	bne.n	800160e <HAL_PCD_IRQHandler+0x3a2>
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3354      	adds	r3, #84	; 0x54
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001606:	461a      	mov	r2, r3
 8001608:	2101      	movs	r1, #1
 800160a:	f003 fcad 	bl	8004f68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f007 fa5a 	bl	8008ace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001630:	461a      	mov	r2, r3
 8001632:	2308      	movs	r3, #8
 8001634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164c:	461a      	mov	r2, r3
 800164e:	2310      	movs	r3, #16
 8001650:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001668:	461a      	mov	r2, r3
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800167a:	6a38      	ldr	r0, [r7, #32]
 800167c:	f002 fb80 	bl	8003d80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	3338      	adds	r3, #56	; 0x38
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	78db      	ldrb	r3, [r3, #3]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2200      	movs	r2, #0
 80016a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f007 faa7 	bl	8008bfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ba:	461a      	mov	r2, r3
 80016bc:	2302      	movs	r3, #2
 80016be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fd35 	bl	800213c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	3301      	adds	r3, #1
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f af2e 	bne.w	8001542 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fb76 	bl	8004ddc <USB_ReadInterrupts>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016fa:	d122      	bne.n	8001742 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001716:	2b01      	cmp	r3, #1
 8001718:	d108      	bne.n	800172c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f007 fc41 	bl	8008fac <HAL_PCDEx_LPM_Callback>
 800172a:	e002      	b.n	8001732 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f007 fa45 	bl	8008bbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fb48 	bl	8004ddc <USB_ReadInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001756:	d112      	bne.n	800177e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d102      	bne.n	800176e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f007 fa01 	bl	8008b70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800177c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f003 fb2a 	bl	8004ddc <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800178e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001792:	d121      	bne.n	80017d8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017a2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d111      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	f003 020f 	and.w	r2, r3, #15
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017c8:	2101      	movs	r1, #1
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f007 fbee 	bl	8008fac <HAL_PCDEx_LPM_Callback>
 80017d0:	e002      	b.n	80017d8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f007 f9cc 	bl	8008b70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 fafd 	bl	8004ddc <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ec:	f040 80b7 	bne.w	800195e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2110      	movs	r1, #16
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fab8 	bl	8003d80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001814:	e046      	b.n	80018a4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001822:	461a      	mov	r2, r3
 8001824:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001828:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	4413      	add	r3, r2
 8001832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183a:	0151      	lsls	r1, r2, #5
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	440a      	add	r2, r1
 8001840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001844:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001848:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	4413      	add	r3, r2
 8001852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001856:	461a      	mov	r2, r3
 8001858:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800185c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186e:	0151      	lsls	r1, r2, #5
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	440a      	add	r2, r1
 8001874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001878:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800187c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188e:	0151      	lsls	r1, r2, #5
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	440a      	add	r2, r1
 8001894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001898:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800189c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	3301      	adds	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3b3      	bcc.n	8001816 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d016      	beq.n	80018f8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018da:	f043 030b 	orr.w	r3, r3, #11
 80018de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f0:	f043 030b 	orr.w	r3, r3, #11
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	e015      	b.n	8001924 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001906:	4619      	mov	r1, r3
 8001908:	f242 032b 	movw	r3, #8235	; 0x202b
 800190c:	4313      	orrs	r3, r2
 800190e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191e:	f043 030b 	orr.w	r3, r3, #11
 8001922:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001932:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001936:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001948:	461a      	mov	r2, r3
 800194a:	f003 fb0d 	bl	8004f68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800195c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fa3a 	bl	8004ddc <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001972:	d124      	bne.n	80019be <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fad1 	bl	8004f20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fa79 	bl	8003e7a <USB_GetDevSpeed>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681c      	ldr	r4, [r3, #0]
 8001994:	f001 fafa 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8001998:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	4620      	mov	r0, r4
 80019a4:	f001 ff7e 	bl	80038a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f007 f8b8 	bl	8008b1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fa0a 	bl	8004ddc <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d10a      	bne.n	80019e8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f007 f895 	bl	8008b02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f002 0208 	and.w	r2, r2, #8
 80019e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 f9f5 	bl	8004ddc <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f8:	2b80      	cmp	r3, #128	; 0x80
 80019fa:	d122      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a08:	2301      	movs	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	e014      	b.n	8001a38 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d105      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fb27 	bl	8002080 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3e5      	bcc.n	8001a0e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f9c8 	bl	8004ddc <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a56:	d13b      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a58:	2301      	movs	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5c:	e02b      	b.n	8001ab6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3340      	adds	r3, #64	; 0x40
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d115      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da12      	bge.n	8001ab0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	333f      	adds	r3, #63	; 0x3f
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fae8 	bl	8002080 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d3ce      	bcc.n	8001a5e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 f981 	bl	8004ddc <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ae4:	d155      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	e045      	b.n	8001b78 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d12e      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da2b      	bge.n	8001b72 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b26:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d121      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10a      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6e:	6053      	str	r3, [r2, #4]
            break;
 8001b70:	e007      	b.n	8001b82 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3b4      	bcc.n	8001aec <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f920 	bl	8004ddc <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba6:	d10a      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f007 f839 	bl	8008c20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 f90a 	bl	8004ddc <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d115      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f007 f829 	bl	8008c3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	e000      	b.n	8001bfe <HAL_PCD_IRQHandler+0x992>
      return;
 8001bfc:	bf00      	nop
    }
  }
}
 8001bfe:	3734      	adds	r7, #52	; 0x34
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}

08001c04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_SetAddress+0x1a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e013      	b.n	8001c46 <HAL_PCD_SetAddress+0x42>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 f868 	bl	8004d0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	4608      	mov	r0, r1
 8001c58:	4611      	mov	r1, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	70fb      	strb	r3, [r7, #3]
 8001c60:	460b      	mov	r3, r1
 8001c62:	803b      	strh	r3, [r7, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da0f      	bge.n	8001c94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	3338      	adds	r3, #56	; 0x38
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	705a      	strb	r2, [r3, #1]
 8001c92:	e00f      	b.n	8001cb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	f003 020f 	and.w	r2, r3, #15
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	3304      	adds	r3, #4
 8001cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cc0:	883a      	ldrh	r2, [r7, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	78ba      	ldrb	r2, [r7, #2]
 8001cca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cde:	78bb      	ldrb	r3, [r7, #2]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d102      	bne.n	8001cea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_PCD_EP_Open+0xaa>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e00e      	b.n	8001d16 <HAL_PCD_EP_Open+0xc8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68f9      	ldr	r1, [r7, #12]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 f8dc 	bl	8003ec4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d14:	7afb      	ldrb	r3, [r7, #11]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da0f      	bge.n	8001d52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3338      	adds	r3, #56	; 0x38
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	705a      	strb	r2, [r3, #1]
 8001d50:	e00f      	b.n	8001d72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 020f 	and.w	r2, r3, #15
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	3304      	adds	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_PCD_EP_Close+0x6e>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e00e      	b.n	8001daa <HAL_PCD_EP_Close+0x8c>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 f91a 	bl	8003fd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2200      	movs	r2, #0
 8001dec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2200      	movs	r2, #0
 8001df2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	6979      	ldr	r1, [r7, #20]
 8001e26:	f002 fc01 	bl	800462c <USB_EP0StartXfer>
 8001e2a:	e008      	b.n	8001e3e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	6979      	ldr	r1, [r7, #20]
 8001e3a:	f002 f9a7 	bl	800418c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	f003 020f 	and.w	r2, r3, #15
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	460b      	mov	r3, r1
 8001e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	3338      	adds	r3, #56	; 0x38
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d102      	bne.n	8001ed2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6979      	ldr	r1, [r7, #20]
 8001eea:	f002 fb9f 	bl	800462c <USB_EP0StartXfer>
 8001eee:	e008      	b.n	8001f02 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	6979      	ldr	r1, [r7, #20]
 8001efe:	f002 f945 	bl	800418c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d901      	bls.n	8001f2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e050      	b.n	8001fcc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da0f      	bge.n	8001f52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	f003 020f 	and.w	r2, r3, #15
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	3338      	adds	r3, #56	; 0x38
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	3304      	adds	r3, #4
 8001f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	705a      	strb	r2, [r3, #1]
 8001f50:	e00d      	b.n	8001f6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	3304      	adds	r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_PCD_EP_SetStall+0x82>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e01e      	b.n	8001fcc <HAL_PCD_EP_SetStall+0xc0>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fde1 	bl	8004b64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10a      	bne.n	8001fc2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f002 ffd3 	bl	8004f68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d901      	bls.n	8001ff2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e042      	b.n	8002078 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da0f      	bge.n	800201a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 020f 	and.w	r2, r3, #15
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	3338      	adds	r3, #56	; 0x38
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	705a      	strb	r2, [r3, #1]
 8002018:	e00f      	b.n	800203a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 020f 	and.w	r2, r3, #15
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	b2da      	uxtb	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_PCD_EP_ClrStall+0x86>
 8002056:	2302      	movs	r3, #2
 8002058:	e00e      	b.n	8002078 <HAL_PCD_EP_ClrStall+0xa4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fde9 	bl	8004c40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800208c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002090:	2b00      	cmp	r3, #0
 8002092:	da0c      	bge.n	80020ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3338      	adds	r3, #56	; 0x38
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e00c      	b.n	80020c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fc08 	bl	80048e4 <USB_EPStopXfer>
 80020d4:	4603      	mov	r3, r0
 80020d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020d8:	7afb      	ldrb	r3, [r7, #11]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_PCD_EP_Flush+0x1a>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e01b      	b.n	8002134 <HAL_PCD_EP_Flush+0x52>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002108:	2b00      	cmp	r3, #0
 800210a:	da09      	bge.n	8002120 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f001 fe31 	bl	8003d80 <USB_FlushTxFifo>
 800211e:	e004      	b.n	800212a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f001 fe5f 	bl	8003de8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	3338      	adds	r3, #56	; 0x38
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	429a      	cmp	r2, r3
 800216e:	d901      	bls.n	8002174 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e06c      	b.n	800224e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	429a      	cmp	r2, r3
 8002188:	d902      	bls.n	8002190 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3303      	adds	r3, #3
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002198:	e02b      	b.n	80021f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d902      	bls.n	80021b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3303      	adds	r3, #3
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6919      	ldr	r1, [r3, #16]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	4603      	mov	r3, r0
 80021d4:	6978      	ldr	r0, [r7, #20]
 80021d6:	f002 fc2f 	bl	8004a38 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	441a      	add	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	441a      	add	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	429a      	cmp	r2, r3
 8002206:	d809      	bhi.n	800221c <PCD_WriteEmptyTxFifo+0xe0>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a1a      	ldr	r2, [r3, #32]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002210:	429a      	cmp	r2, r3
 8002212:	d203      	bcs.n	800221c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1be      	bne.n	800219a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d811      	bhi.n	800224c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	2201      	movs	r2, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	43db      	mvns	r3, r3
 8002242:	6939      	ldr	r1, [r7, #16]
 8002244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002248:	4013      	ands	r3, r2
 800224a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	333c      	adds	r3, #60	; 0x3c
 8002270:	3304      	adds	r3, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d17b      	bne.n	8002386 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	4a61      	ldr	r2, [pc, #388]	; (8002420 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	f240 80b9 	bls.w	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80b3 	beq.w	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c0:	6093      	str	r3, [r2, #8]
 80022c2:	e0a7      	b.n	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	461a      	mov	r2, r3
 80022dc:	2320      	movs	r3, #32
 80022de:	6093      	str	r3, [r2, #8]
 80022e0:	e098      	b.n	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 8093 	bne.w	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4a4b      	ldr	r2, [pc, #300]	; (8002420 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d90f      	bls.n	8002316 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230c:	461a      	mov	r2, r3
 800230e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002312:	6093      	str	r3, [r2, #8]
 8002314:	e07e      	b.n	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	3304      	adds	r3, #4
 800232a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	0159      	lsls	r1, r3, #5
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	440b      	add	r3, r1
 8002338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d114      	bne.n	8002378 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002360:	461a      	mov	r2, r3
 8002362:	2101      	movs	r1, #1
 8002364:	f002 fe00 	bl	8004f68 <USB_EP0_OutStart>
 8002368:	e006      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	441a      	add	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	4619      	mov	r1, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f006 fb8a 	bl	8008a98 <HAL_PCD_DataOutStageCallback>
 8002384:	e046      	b.n	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d124      	bne.n	80023d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a4:	461a      	mov	r2, r3
 80023a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023aa:	6093      	str	r3, [r2, #8]
 80023ac:	e032      	b.n	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	461a      	mov	r2, r3
 80023c6:	2320      	movs	r3, #32
 80023c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	4619      	mov	r1, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f006 fb61 	bl	8008a98 <HAL_PCD_DataOutStageCallback>
 80023d6:	e01d      	b.n	8002414 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d114      	bne.n	8002408 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002400:	461a      	mov	r2, r3
 8002402:	2100      	movs	r1, #0
 8002404:	f002 fdb0 	bl	8004f68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f006 fb42 	bl	8008a98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	4f54300a 	.word	0x4f54300a
 8002424:	4f54310a 	.word	0x4f54310a

08002428 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	333c      	adds	r3, #60	; 0x3c
 8002440:	3304      	adds	r3, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d90e      	bls.n	800247c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002474:	461a      	mov	r2, r3
 8002476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800247a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f006 faf9 	bl	8008a74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d90c      	bls.n	80024a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800249c:	461a      	mov	r2, r3
 800249e:	2101      	movs	r1, #1
 80024a0:	f002 fd62 	bl	8004f68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	4f54300a 	.word	0x4f54300a

080024b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
 80024c0:	4613      	mov	r3, r2
 80024c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024d2:	883b      	ldrh	r3, [r7, #0]
 80024d4:	0419      	lsls	r1, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	430a      	orrs	r2, r1
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
 80024e0:	e028      	b.n	8002534 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	0c1b      	lsrs	r3, r3, #16
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4413      	add	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e00d      	b.n	8002512 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	3340      	adds	r3, #64	; 0x40
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	4413      	add	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	3301      	adds	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	3b01      	subs	r3, #1
 8002518:	429a      	cmp	r2, r3
 800251a:	d3ec      	bcc.n	80024f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800251c:	883b      	ldrh	r3, [r7, #0]
 800251e:	0418      	lsls	r0, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	3b01      	subs	r3, #1
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	4302      	orrs	r2, r0
 800252c:	3340      	adds	r3, #64	; 0x40
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002594:	4313      	orrs	r3, r2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	10000003 	.word	0x10000003

080025ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_PWREx_EnableOverDrive+0x98>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <HAL_PWREx_EnableOverDrive+0x98>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_PWREx_EnableOverDrive+0x98>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025da:	f7fe f997 	bl	800090c <HAL_GetTick>
 80025de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e0:	e009      	b.n	80025f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025e2:	f7fe f993 	bl	800090c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025f0:	d901      	bls.n	80025f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e022      	b.n	800263c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d1ee      	bne.n	80025e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_PWREx_EnableOverDrive+0x9c>)
 800260a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002610:	f7fe f97c 	bl	800090c <HAL_GetTick>
 8002614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002616:	e009      	b.n	800262c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002618:	f7fe f978 	bl	800090c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002626:	d901      	bls.n	800262c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e007      	b.n	800263c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_PWREx_EnableOverDrive+0x9c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002638:	d1ee      	bne.n	8002618 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	40007000 	.word	0x40007000

0800264c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e29b      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8087 	beq.w	800277e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002670:	4b96      	ldr	r3, [pc, #600]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b04      	cmp	r3, #4
 800267a:	d00c      	beq.n	8002696 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267c:	4b93      	ldr	r3, [pc, #588]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b08      	cmp	r3, #8
 8002686:	d112      	bne.n	80026ae <HAL_RCC_OscConfig+0x62>
 8002688:	4b90      	ldr	r3, [pc, #576]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002694:	d10b      	bne.n	80026ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	4b8d      	ldr	r3, [pc, #564]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d06c      	beq.n	800277c <HAL_RCC_OscConfig+0x130>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d168      	bne.n	800277c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e275      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x7a>
 80026b8:	4b84      	ldr	r3, [pc, #528]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a83      	ldr	r2, [pc, #524]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e02e      	b.n	8002724 <HAL_RCC_OscConfig+0xd8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x9c>
 80026ce:	4b7f      	ldr	r3, [pc, #508]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a7e      	ldr	r2, [pc, #504]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7b      	ldr	r2, [pc, #492]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80026e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e01d      	b.n	8002724 <HAL_RCC_OscConfig+0xd8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0xc0>
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a75      	ldr	r2, [pc, #468]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b73      	ldr	r3, [pc, #460]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a72      	ldr	r2, [pc, #456]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xd8>
 800270c:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6b      	ldr	r2, [pc, #428]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe f8ee 	bl	800090c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe f8ea 	bl	800090c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e229      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b61      	ldr	r3, [pc, #388]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0xe8>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe f8da 	bl	800090c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe f8d6 	bl	800090c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e215      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	4b57      	ldr	r3, [pc, #348]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x110>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d069      	beq.n	800285e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800278a:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002796:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d11c      	bne.n	80027dc <HAL_RCC_OscConfig+0x190>
 80027a2:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d116      	bne.n	80027dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_RCC_OscConfig+0x17a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1e9      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	493d      	ldr	r1, [pc, #244]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	e040      	b.n	800285e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d023      	beq.n	800282c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e4:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a38      	ldr	r2, [pc, #224]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe f88c 	bl	800090c <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f8:	f7fe f888 	bl	800090c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e1c7      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280a:	4b30      	ldr	r3, [pc, #192]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4929      	ldr	r1, [pc, #164]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
 800282a:	e018      	b.n	800285e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a26      	ldr	r2, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe f868 	bl	800090c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002840:	f7fe f864 	bl	800090c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1a3      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d038      	beq.n	80028dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d019      	beq.n	80028a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002876:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7fe f845 	bl	800090c <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002886:	f7fe f841 	bl	800090c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e180      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 800289a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x23a>
 80028a4:	e01a      	b.n	80028dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80028a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe f82b 	bl	800090c <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe f827 	bl	800090c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d903      	bls.n	80028d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e166      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
 80028cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80028d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ee      	bne.n	80028ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a4 	beq.w	8002a32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b8c      	ldr	r3, [pc, #560]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	4b89      	ldr	r3, [pc, #548]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a88      	ldr	r2, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b86      	ldr	r3, [pc, #536]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002912:	4b83      	ldr	r3, [pc, #524]	; (8002b20 <HAL_RCC_OscConfig+0x4d4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800291e:	4b80      	ldr	r3, [pc, #512]	; (8002b20 <HAL_RCC_OscConfig+0x4d4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7f      	ldr	r2, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x4d4>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fd ffef 	bl	800090c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fd ffeb 	bl	800090c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b64      	cmp	r3, #100	; 0x64
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e12a      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x4d4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x31a>
 8002958:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a6f      	ldr	r2, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
 8002964:	e02d      	b.n	80029c2 <HAL_RCC_OscConfig+0x376>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x33c>
 800296e:	4b6b      	ldr	r3, [pc, #428]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a6a      	ldr	r2, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
 800297a:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	4a67      	ldr	r2, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6713      	str	r3, [r2, #112]	; 0x70
 8002986:	e01c      	b.n	80029c2 <HAL_RCC_OscConfig+0x376>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x35e>
 8002990:	4b62      	ldr	r3, [pc, #392]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a61      	ldr	r2, [pc, #388]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
 800299c:	4b5f      	ldr	r3, [pc, #380]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a5e      	ldr	r2, [pc, #376]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	e00b      	b.n	80029c2 <HAL_RCC_OscConfig+0x376>
 80029aa:	4b5c      	ldr	r3, [pc, #368]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a5b      	ldr	r2, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d015      	beq.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fd ff9f 	bl	800090c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fd ff9b 	bl	800090c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0d8      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ee      	beq.n	80029d2 <HAL_RCC_OscConfig+0x386>
 80029f4:	e014      	b.n	8002a20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7fd ff89 	bl	800090c <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fd ff85 	bl	800090c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e0c2      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a14:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ee      	bne.n	80029fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d105      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	4a3c      	ldr	r2, [pc, #240]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80ae 	beq.w	8002b98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3c:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d06d      	beq.n	8002b24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d14b      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a31      	ldr	r2, [pc, #196]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fd ff56 	bl	800090c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fd ff52 	bl	800090c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e091      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	019b      	lsls	r3, r3, #6
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	071b      	lsls	r3, r3, #28
 8002aae:	491b      	ldr	r1, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fd ff24 	bl	800090c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fd ff20 	bl	800090c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e05f      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
 8002ae6:	e057      	b.n	8002b98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fd ff0a 	bl	800090c <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fd ff06 	bl	800090c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e045      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_RCC_OscConfig+0x4d0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x4b0>
 8002b1a:	e03d      	b.n	8002b98 <HAL_RCC_OscConfig+0x54c>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_RCC_OscConfig+0x558>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d030      	beq.n	8002b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d129      	bne.n	8002b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d122      	bne.n	8002b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d119      	bne.n	8002b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d10f      	bne.n	8002b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0d0      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d910      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b67      	ldr	r3, [pc, #412]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 020f 	bic.w	r2, r3, #15
 8002bd6:	4965      	ldr	r1, [pc, #404]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0b8      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c08:	4b59      	ldr	r3, [pc, #356]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2c:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	494d      	ldr	r1, [pc, #308]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d040      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d115      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e073      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06b      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4936      	ldr	r1, [pc, #216]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fd fe36 	bl	800090c <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fd fe32 	bl	800090c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e053      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d210      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	4922      	ldr	r1, [pc, #136]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e032      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4916      	ldr	r1, [pc, #88]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d26:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	490e      	ldr	r1, [pc, #56]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d3a:	f000 f821 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	490a      	ldr	r1, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x1cc>)
 8002d4c:	5ccb      	ldrb	r3, [r1, r3]
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1d0>)
 8002d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1d4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fd92 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023c00 	.word	0x40023c00
 8002d70:	40023800 	.word	0x40023800
 8002d74:	080093bc 	.word	0x080093bc
 8002d78:	20032000 	.word	0x20032000
 8002d7c:	20032004 	.word	0x20032004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b094      	sub	sp, #80	; 0x50
 8002d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d90:	2300      	movs	r3, #0
 8002d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d00d      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	f200 80e1 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x3a>
 8002db2:	e0db      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b73      	ldr	r3, [pc, #460]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002db8:	e0db      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dba:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dbe:	e0d8      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dca:	4b6d      	ldr	r3, [pc, #436]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d063      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	4b6a      	ldr	r3, [pc, #424]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	2200      	movs	r2, #0
 8002dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
 8002dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	1a51      	subs	r1, r2, r1
 8002e0e:	6139      	str	r1, [r7, #16]
 8002e10:	4629      	mov	r1, r5
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e24:	4659      	mov	r1, fp
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2e:	4651      	mov	r1, sl
 8002e30:	018a      	lsls	r2, r1, #6
 8002e32:	4651      	mov	r1, sl
 8002e34:	ebb2 0801 	subs.w	r8, r2, r1
 8002e38:	4659      	mov	r1, fp
 8002e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e52:	4690      	mov	r8, r2
 8002e54:	4699      	mov	r9, r3
 8002e56:	4623      	mov	r3, r4
 8002e58:	eb18 0303 	adds.w	r3, r8, r3
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	462b      	mov	r3, r5
 8002e60:	eb49 0303 	adc.w	r3, r9, r3
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e72:	4629      	mov	r1, r5
 8002e74:	024b      	lsls	r3, r1, #9
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	024a      	lsls	r2, r1, #9
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e86:	2200      	movs	r2, #0
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e90:	f7fd f9d2 	bl	8000238 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9c:	e058      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eb8:	4642      	mov	r2, r8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	f04f 0000 	mov.w	r0, #0
 8002ec0:	f04f 0100 	mov.w	r1, #0
 8002ec4:	0159      	lsls	r1, r3, #5
 8002ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eca:	0150      	lsls	r0, r2, #5
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	00eb      	lsls	r3, r5, #3
 8002f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f06:	00e2      	lsls	r2, r4, #3
 8002f08:	4614      	mov	r4, r2
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	4643      	mov	r3, r8
 8002f0e:	18e3      	adds	r3, r4, r3
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	464b      	mov	r3, r9
 8002f14:	eb45 0303 	adc.w	r3, r5, r3
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f26:	4629      	mov	r1, r5
 8002f28:	028b      	lsls	r3, r1, #10
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f30:	4621      	mov	r1, r4
 8002f32:	028a      	lsls	r2, r1, #10
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	61fa      	str	r2, [r7, #28]
 8002f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f44:	f7fd f978 	bl	8000238 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3750      	adds	r7, #80	; 0x50
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20032000 	.word	0x20032000

08002fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d012      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fcc:	4b69      	ldr	r3, [pc, #420]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a68      	ldr	r2, [pc, #416]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fd6:	6093      	str	r3, [r2, #8]
 8002fd8:	4b66      	ldr	r3, [pc, #408]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	4964      	ldr	r1, [pc, #400]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d017      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	4959      	ldr	r1, [pc, #356]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301c:	d101      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800301e:	2301      	movs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d017      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800303a:	4b4e      	ldr	r3, [pc, #312]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	494a      	ldr	r1, [pc, #296]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003058:	d101      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800305a:	2301      	movs	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003076:	2301      	movs	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 808b 	beq.w	800319e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	4a39      	ldr	r2, [pc, #228]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6413      	str	r3, [r2, #64]	; 0x40
 8003094:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a34      	ldr	r2, [pc, #208]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fd fc2e 	bl	800090c <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7fd fc2a 	bl	800090c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e38f      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030c6:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d035      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d02e      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003110:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d114      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd fbf2 	bl	800090c <HAL_GetTick>
 8003128:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fd fbee 	bl	800090c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e351      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ee      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315a:	d111      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800316a:	400b      	ands	r3, r1
 800316c:	4901      	ldr	r1, [pc, #4]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
 8003172:	e00b      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003174:	40023800 	.word	0x40023800
 8003178:	40007000 	.word	0x40007000
 800317c:	0ffffcff 	.word	0x0ffffcff
 8003180:	4bac      	ldr	r3, [pc, #688]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4aab      	ldr	r2, [pc, #684]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800318a:	6093      	str	r3, [r2, #8]
 800318c:	4ba9      	ldr	r3, [pc, #676]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	49a6      	ldr	r1, [pc, #664]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	4313      	orrs	r3, r2
 800319c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031aa:	4ba2      	ldr	r3, [pc, #648]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b0:	4aa0      	ldr	r2, [pc, #640]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ba:	4b9e      	ldr	r3, [pc, #632]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	499b      	ldr	r1, [pc, #620]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d8:	4b96      	ldr	r3, [pc, #600]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e6:	4993      	ldr	r1, [pc, #588]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031fa:	4b8e      	ldr	r3, [pc, #568]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003208:	498a      	ldr	r1, [pc, #552]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800321c:	4b85      	ldr	r3, [pc, #532]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322a:	4982      	ldr	r1, [pc, #520]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800323e:	4b7d      	ldr	r3, [pc, #500]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4979      	ldr	r1, [pc, #484]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003260:	4b74      	ldr	r3, [pc, #464]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4971      	ldr	r1, [pc, #452]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f023 020c 	bic.w	r2, r3, #12
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	4968      	ldr	r1, [pc, #416]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a4:	4b63      	ldr	r3, [pc, #396]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	4960      	ldr	r1, [pc, #384]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c6:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	4957      	ldr	r1, [pc, #348]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032e8:	4b52      	ldr	r3, [pc, #328]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	494f      	ldr	r1, [pc, #316]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800330a:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	4946      	ldr	r1, [pc, #280]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800332c:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	493e      	ldr	r1, [pc, #248]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800334e:	4b39      	ldr	r3, [pc, #228]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	4935      	ldr	r1, [pc, #212]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003370:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337e:	492d      	ldr	r1, [pc, #180]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d011      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a0:	4924      	ldr	r1, [pc, #144]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b0:	d101      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e0:	4914      	ldr	r1, [pc, #80]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003404:	490b      	ldr	r1, [pc, #44]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003428:	4902      	ldr	r1, [pc, #8]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003430:	e002      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003444:	4b8a      	ldr	r3, [pc, #552]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800344a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003454:	4986      	ldr	r1, [pc, #536]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003468:	4b81      	ldr	r3, [pc, #516]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800346e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003478:	497d      	ldr	r1, [pc, #500]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d006      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80d6 	beq.w	8003640 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003494:	4b76      	ldr	r3, [pc, #472]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a75      	ldr	r2, [pc, #468]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800349e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fd fa34 	bl	800090c <HAL_GetTick>
 80034a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034a8:	f7fd fa30 	bl	800090c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e195      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034ba:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d021      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11d      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ee:	0e1b      	lsrs	r3, r3, #24
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	019a      	lsls	r2, r3, #6
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	071b      	lsls	r3, r3, #28
 800350e:	4958      	ldr	r1, [pc, #352]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d004      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003534:	2b00      	cmp	r3, #0
 8003536:	d02e      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003540:	d129      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003542:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003550:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003556:	0f1b      	lsrs	r3, r3, #28
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	019a      	lsls	r2, r3, #6
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	041b      	lsls	r3, r3, #16
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	061b      	lsls	r3, r3, #24
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	071b      	lsls	r3, r3, #28
 8003576:	493e      	ldr	r1, [pc, #248]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800357e:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003584:	f023 021f 	bic.w	r2, r3, #31
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	3b01      	subs	r3, #1
 800358e:	4938      	ldr	r1, [pc, #224]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d01d      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035a2:	4b33      	ldr	r3, [pc, #204]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a8:	0e1b      	lsrs	r3, r3, #24
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035b0:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b6:	0f1b      	lsrs	r3, r3, #28
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	019a      	lsls	r2, r3, #6
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	431a      	orrs	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	071b      	lsls	r3, r3, #28
 80035d6:	4926      	ldr	r1, [pc, #152]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d011      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	019a      	lsls	r2, r3, #6
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	491a      	ldr	r1, [pc, #104]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a17      	ldr	r2, [pc, #92]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361a:	f7fd f977 	bl	800090c <HAL_GetTick>
 800361e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003622:	f7fd f973 	bl	800090c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b64      	cmp	r3, #100	; 0x64
 800362e:	d901      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0d8      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	f040 80ce 	bne.w	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a08      	ldr	r2, [pc, #32]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003654:	f7fd f95a 	bl	800090c <HAL_GetTick>
 8003658:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800365a:	e00b      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800365c:	f7fd f956 	bl	800090c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d904      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0bb      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003674:	4b5e      	ldr	r3, [pc, #376]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800367c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003680:	d0ec      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d02e      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d12a      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036aa:	4b51      	ldr	r3, [pc, #324]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036b8:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	0f1b      	lsrs	r3, r3, #28
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	019a      	lsls	r2, r3, #6
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	071b      	lsls	r3, r3, #28
 80036de:	4944      	ldr	r1, [pc, #272]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036e6:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	493d      	ldr	r1, [pc, #244]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d022      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003714:	d11d      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003716:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	0e1b      	lsrs	r3, r3, #24
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003724:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	0f1b      	lsrs	r3, r3, #28
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	019a      	lsls	r2, r3, #6
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	061b      	lsls	r3, r3, #24
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	071b      	lsls	r3, r3, #28
 800374a:	4929      	ldr	r1, [pc, #164]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d028      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	0e1b      	lsrs	r3, r3, #24
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800376c:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	019a      	lsls	r2, r3, #6
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	061b      	lsls	r3, r3, #24
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	071b      	lsls	r3, r3, #28
 8003792:	4917      	ldr	r1, [pc, #92]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800379c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4911      	ldr	r1, [pc, #68]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037bc:	f7fd f8a6 	bl	800090c <HAL_GetTick>
 80037c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037c4:	f7fd f8a2 	bl	800090c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e007      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e2:	d1ef      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800

080037f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037f4:	b084      	sub	sp, #16
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	f107 001c 	add.w	r0, r7, #28
 8003802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	2b01      	cmp	r3, #1
 800380a:	d120      	bne.n	800384e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <USB_CoreInit+0xac>)
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d105      	bne.n	8003842 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f001 fbee 	bl	8005024 <USB_CoreReset>
 8003848:	4603      	mov	r3, r0
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	e010      	b.n	8003870 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f001 fbe2 	bl	8005024 <USB_CoreReset>
 8003860:	4603      	mov	r3, r0
 8003862:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10b      	bne.n	800388e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f043 0206 	orr.w	r2, r3, #6
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f043 0220 	orr.w	r2, r3, #32
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800389a:	b004      	add	sp, #16
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	ffbdffbf 	.word	0xffbdffbf

080038a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d165      	bne.n	8003984 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <USB_SetTurnaroundTime+0x11c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d906      	bls.n	80038ce <USB_SetTurnaroundTime+0x2a>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a40      	ldr	r2, [pc, #256]	; (80039c4 <USB_SetTurnaroundTime+0x120>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d202      	bcs.n	80038ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80038c8:	230f      	movs	r3, #15
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e062      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <USB_SetTurnaroundTime+0x120>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d306      	bcc.n	80038e4 <USB_SetTurnaroundTime+0x40>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a3b      	ldr	r2, [pc, #236]	; (80039c8 <USB_SetTurnaroundTime+0x124>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d202      	bcs.n	80038e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038de:	230e      	movs	r3, #14
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e057      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a38      	ldr	r2, [pc, #224]	; (80039c8 <USB_SetTurnaroundTime+0x124>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d306      	bcc.n	80038fa <USB_SetTurnaroundTime+0x56>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a37      	ldr	r2, [pc, #220]	; (80039cc <USB_SetTurnaroundTime+0x128>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d202      	bcs.n	80038fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038f4:	230d      	movs	r3, #13
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e04c      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a33      	ldr	r2, [pc, #204]	; (80039cc <USB_SetTurnaroundTime+0x128>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d306      	bcc.n	8003910 <USB_SetTurnaroundTime+0x6c>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4a32      	ldr	r2, [pc, #200]	; (80039d0 <USB_SetTurnaroundTime+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d802      	bhi.n	8003910 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800390a:	230c      	movs	r3, #12
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e041      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <USB_SetTurnaroundTime+0x12c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d906      	bls.n	8003926 <USB_SetTurnaroundTime+0x82>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <USB_SetTurnaroundTime+0x130>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d802      	bhi.n	8003926 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003920:	230b      	movs	r3, #11
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e036      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <USB_SetTurnaroundTime+0x130>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d906      	bls.n	800393c <USB_SetTurnaroundTime+0x98>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <USB_SetTurnaroundTime+0x134>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d802      	bhi.n	800393c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003936:	230a      	movs	r3, #10
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e02b      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <USB_SetTurnaroundTime+0x134>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d906      	bls.n	8003952 <USB_SetTurnaroundTime+0xae>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4a25      	ldr	r2, [pc, #148]	; (80039dc <USB_SetTurnaroundTime+0x138>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d202      	bcs.n	8003952 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800394c:	2309      	movs	r3, #9
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e020      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4a21      	ldr	r2, [pc, #132]	; (80039dc <USB_SetTurnaroundTime+0x138>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d306      	bcc.n	8003968 <USB_SetTurnaroundTime+0xc4>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <USB_SetTurnaroundTime+0x13c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d802      	bhi.n	8003968 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003962:	2308      	movs	r3, #8
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e015      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <USB_SetTurnaroundTime+0x13c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d906      	bls.n	800397e <USB_SetTurnaroundTime+0xda>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <USB_SetTurnaroundTime+0x140>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d202      	bcs.n	800397e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003978:	2307      	movs	r3, #7
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	e00a      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800397e:	2306      	movs	r3, #6
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e007      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800398a:	2309      	movs	r3, #9
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e001      	b.n	8003994 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003990:	2309      	movs	r3, #9
 8003992:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	029b      	lsls	r3, r3, #10
 80039a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	00d8acbf 	.word	0x00d8acbf
 80039c4:	00e4e1c0 	.word	0x00e4e1c0
 80039c8:	00f42400 	.word	0x00f42400
 80039cc:	01067380 	.word	0x01067380
 80039d0:	011a499f 	.word	0x011a499f
 80039d4:	01312cff 	.word	0x01312cff
 80039d8:	014ca43f 	.word	0x014ca43f
 80039dc:	016e3600 	.word	0x016e3600
 80039e0:	01a6ab1f 	.word	0x01a6ab1f
 80039e4:	01e84800 	.word	0x01e84800

080039e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d115      	bne.n	8003a7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f7fc ff62 	bl	8000924 <HAL_Delay>
      ms++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f001 fa4b 	bl	8004f02 <USB_GetMode>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d01e      	beq.n	8003ab0 <USB_SetCurrentMode+0x84>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b31      	cmp	r3, #49	; 0x31
 8003a76:	d9f0      	bls.n	8003a5a <USB_SetCurrentMode+0x2e>
 8003a78:	e01a      	b.n	8003ab0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d115      	bne.n	8003aac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f7fc ff49 	bl	8000924 <HAL_Delay>
      ms++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f001 fa32 	bl	8004f02 <USB_GetMode>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <USB_SetCurrentMode+0x84>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b31      	cmp	r3, #49	; 0x31
 8003aa8:	d9f0      	bls.n	8003a8c <USB_SetCurrentMode+0x60>
 8003aaa:	e001      	b.n	8003ab0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e005      	b.n	8003abc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b32      	cmp	r3, #50	; 0x32
 8003ab4:	d101      	bne.n	8003aba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e009      	b.n	8003af8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3340      	adds	r3, #64	; 0x40
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	2200      	movs	r2, #0
 8003af0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3301      	adds	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b0e      	cmp	r3, #14
 8003afc:	d9f2      	bls.n	8003ae4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11c      	bne.n	8003b3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b12:	f043 0302 	orr.w	r3, r3, #2
 8003b16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e005      	b.n	8003b4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b64:	461a      	mov	r2, r3
 8003b66:	680b      	ldr	r3, [r1, #0]
 8003b68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10c      	bne.n	8003b8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b76:	2100      	movs	r1, #0
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f965 	bl	8003e48 <USB_SetDevSpeed>
 8003b7e:	e008      	b.n	8003b92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b80:	2101      	movs	r1, #1
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f960 	bl	8003e48 <USB_SetDevSpeed>
 8003b88:	e003      	b.n	8003b92 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b8a:	2103      	movs	r1, #3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f95b 	bl	8003e48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b92:	2110      	movs	r1, #16
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8f3 	bl	8003d80 <USB_FlushTxFifo>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f91f 	bl	8003de8 <USB_FlushRxFifo>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2300      	movs	r3, #0
 8003bca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e043      	b.n	8003c66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bf4:	d118      	bne.n	8003c28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e013      	b.n	8003c3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e008      	b.n	8003c3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	461a      	mov	r2, r3
 8003c36:	2300      	movs	r3, #0
 8003c38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c46:	461a      	mov	r2, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	3301      	adds	r3, #1
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d3b7      	bcc.n	8003bde <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	e043      	b.n	8003cfc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8a:	d118      	bne.n	8003cbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e013      	b.n	8003cd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	e008      	b.n	8003cd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2300      	movs	r3, #0
 8003cce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2300      	movs	r3, #0
 8003ce0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d3b7      	bcc.n	8003c74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f043 0210 	orr.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <USB_DevInit+0x2b4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f043 0208 	orr.w	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <USB_DevInit+0x2b8>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d74:	b004      	add	sp, #16
 8003d76:	4770      	bx	lr
 8003d78:	803c3800 	.word	0x803c3800
 8003d7c:	40000004 	.word	0x40000004

08003d80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <USB_FlushTxFifo+0x64>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e01b      	b.n	8003dd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	daf2      	bge.n	8003d8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	019b      	lsls	r3, r3, #6
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <USB_FlushTxFifo+0x64>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e006      	b.n	8003dd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d0f0      	beq.n	8003db8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	00030d40 	.word	0x00030d40

08003de8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <USB_FlushRxFifo+0x5c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e018      	b.n	8003e38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	daf2      	bge.n	8003df4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2210      	movs	r2, #16
 8003e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <USB_FlushRxFifo+0x5c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e006      	b.n	8003e38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d0f0      	beq.n	8003e18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	00030d40 	.word	0x00030d40

08003e48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	68f9      	ldr	r1, [r7, #12]
 8003e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b087      	sub	sp, #28
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0306 	and.w	r3, r3, #6
 8003e92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]
 8003e9e:	e00a      	b.n	8003eb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d002      	beq.n	8003eac <USB_GetDevSpeed+0x32>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b06      	cmp	r3, #6
 8003eaa:	d102      	bne.n	8003eb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003eac:	2302      	movs	r3, #2
 8003eae:	75fb      	strb	r3, [r7, #23]
 8003eb0:	e001      	b.n	8003eb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003eb2:	230f      	movs	r3, #15
 8003eb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	785b      	ldrb	r3, [r3, #1]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d139      	bne.n	8003f54 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	68f9      	ldr	r1, [r7, #12]
 8003efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d153      	bne.n	8003fc0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	791b      	ldrb	r3, [r3, #4]
 8003f32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	059b      	lsls	r3, r3, #22
 8003f3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	0159      	lsls	r1, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <USB_ActivateEndpoint+0x10c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
 8003f52:	e035      	b.n	8003fc0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	68f9      	ldr	r1, [r7, #12]
 8003f6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d119      	bne.n	8003fc0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	791b      	ldrb	r3, [r3, #4]
 8003fa6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	0159      	lsls	r1, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	440b      	add	r3, r1
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <USB_ActivateEndpoint+0x10c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	10008000 	.word	0x10008000

08003fd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d161      	bne.n	80040b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004006:	d11f      	bne.n	8004048 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004026:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004046:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004068:	4013      	ands	r3, r2
 800406a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	2101      	movs	r1, #1
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800408c:	4013      	ands	r3, r2
 800408e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	0159      	lsls	r1, r3, #5
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040aa:	4619      	mov	r1, r3
 80040ac:	4b35      	ldr	r3, [pc, #212]	; (8004184 <USB_DeactivateEndpoint+0x1b0>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
 80040b2:	e060      	b.n	8004176 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ca:	d11f      	bne.n	800410c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	0151      	lsls	r1, r2, #5
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	440a      	add	r2, r1
 80040e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	440a      	add	r2, r1
 8004102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f303 	lsl.w	r3, r1, r3
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	43db      	mvns	r3, r3
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800412c:	4013      	ands	r3, r2
 800412e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	43db      	mvns	r3, r3
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004150:	4013      	ands	r3, r2
 8004152:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	0159      	lsls	r1, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	440b      	add	r3, r1
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	4619      	mov	r1, r3
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <USB_DeactivateEndpoint+0x1b4>)
 8004172:	4013      	ands	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	ec337800 	.word	0xec337800
 8004188:	eff37800 	.word	0xeff37800

0800418c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	f040 8163 	bne.w	8004474 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d132      	bne.n	800421c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	0159      	lsls	r1, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	4619      	mov	r1, r3
 80041d2:	4ba5      	ldr	r3, [pc, #660]	; (8004468 <USB_EPStartXfer+0x2dc>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	0159      	lsls	r1, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	440b      	add	r3, r1
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	4619      	mov	r1, r3
 8004214:	4b95      	ldr	r3, [pc, #596]	; (800446c <USB_EPStartXfer+0x2e0>)
 8004216:	4013      	ands	r3, r2
 8004218:	610b      	str	r3, [r1, #16]
 800421a:	e074      	b.n	8004306 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	0159      	lsls	r1, r3, #5
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	440b      	add	r3, r1
 8004232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004236:	4619      	mov	r1, r3
 8004238:	4b8c      	ldr	r3, [pc, #560]	; (800446c <USB_EPStartXfer+0x2e0>)
 800423a:	4013      	ands	r3, r2
 800423c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	0159      	lsls	r1, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	440b      	add	r3, r1
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	4619      	mov	r1, r3
 800425a:	4b83      	ldr	r3, [pc, #524]	; (8004468 <USB_EPStartXfer+0x2dc>)
 800425c:	4013      	ands	r3, r2
 800425e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	440b      	add	r3, r1
 8004278:	1e59      	subs	r1, r3, #1
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004282:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004284:	4b7a      	ldr	r3, [pc, #488]	; (8004470 <USB_EPStartXfer+0x2e4>)
 8004286:	400b      	ands	r3, r1
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	0148      	lsls	r0, r1, #5
 800428c:	69f9      	ldr	r1, [r7, #28]
 800428e:	4401      	add	r1, r0
 8004290:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004294:	4313      	orrs	r3, r2
 8004296:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ae:	69b9      	ldr	r1, [r7, #24]
 80042b0:	0148      	lsls	r0, r1, #5
 80042b2:	69f9      	ldr	r1, [r7, #28]
 80042b4:	4401      	add	r1, r0
 80042b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ba:	4313      	orrs	r3, r2
 80042bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	791b      	ldrb	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d11f      	bne.n	8004306 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004300:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004304:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d14b      	bne.n	80043a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004320:	461a      	mov	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	791b      	ldrb	r3, [r3, #4]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d128      	bne.n	8004382 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d110      	bne.n	8004362 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e00f      	b.n	8004382 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004380:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e137      	b.n	8004614 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	791b      	ldrb	r3, [r3, #4]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d015      	beq.n	80043f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 811f 	beq.w	8004614 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	2101      	movs	r1, #1
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	69f9      	ldr	r1, [r7, #28]
 80043ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f2:	4313      	orrs	r3, r2
 80043f4:	634b      	str	r3, [r1, #52]	; 0x34
 80043f6:	e10d      	b.n	8004614 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d110      	bne.n	800442a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	0151      	lsls	r1, r2, #5
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	440a      	add	r2, r1
 800441e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e00f      	b.n	800444a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6919      	ldr	r1, [r3, #16]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	b298      	uxth	r0, r3
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4603      	mov	r3, r0
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 faea 	bl	8004a38 <USB_WritePacket>
 8004464:	e0d6      	b.n	8004614 <USB_EPStartXfer+0x488>
 8004466:	bf00      	nop
 8004468:	e007ffff 	.word	0xe007ffff
 800446c:	fff80000 	.word	0xfff80000
 8004470:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	0159      	lsls	r1, r3, #5
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	440b      	add	r3, r1
 800448a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448e:	4619      	mov	r1, r3
 8004490:	4b63      	ldr	r3, [pc, #396]	; (8004620 <USB_EPStartXfer+0x494>)
 8004492:	4013      	ands	r3, r2
 8004494:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	0159      	lsls	r1, r3, #5
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	440b      	add	r3, r1
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	4619      	mov	r1, r3
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <USB_EPStartXfer+0x498>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d123      	bne.n	8004508 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d6:	69b9      	ldr	r1, [r7, #24]
 80044d8:	0148      	lsls	r0, r1, #5
 80044da:	69f9      	ldr	r1, [r7, #28]
 80044dc:	4401      	add	r1, r0
 80044de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044e2:	4313      	orrs	r3, r2
 80044e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004504:	6113      	str	r3, [r2, #16]
 8004506:	e037      	b.n	8004578 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4413      	add	r3, r2
 8004512:	1e5a      	subs	r2, r3, #1
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	8afa      	ldrh	r2, [r7, #22]
 8004524:	fb03 f202 	mul.w	r2, r3, r2
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	8afb      	ldrh	r3, [r7, #22]
 800453c:	04d9      	lsls	r1, r3, #19
 800453e:	4b3a      	ldr	r3, [pc, #232]	; (8004628 <USB_EPStartXfer+0x49c>)
 8004540:	400b      	ands	r3, r1
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	0148      	lsls	r0, r1, #5
 8004546:	69f9      	ldr	r1, [r7, #28]
 8004548:	4401      	add	r1, r0
 800454a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800454e:	4313      	orrs	r3, r2
 8004550:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004568:	69b9      	ldr	r1, [r7, #24]
 800456a:	0148      	lsls	r0, r1, #5
 800456c:	69f9      	ldr	r1, [r7, #28]
 800456e:	4401      	add	r1, r0
 8004570:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004574:	4313      	orrs	r3, r2
 8004576:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10d      	bne.n	800459a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6919      	ldr	r1, [r3, #16]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	460a      	mov	r2, r1
 8004598:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	791b      	ldrb	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d128      	bne.n	80045f4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d110      	bne.n	80045d4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e00f      	b.n	80045f4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	fff80000 	.word	0xfff80000
 8004624:	e007ffff 	.word	0xe007ffff
 8004628:	1ff80000 	.word	0x1ff80000

0800462c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b01      	cmp	r3, #1
 800464a:	f040 80ce 	bne.w	80047ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d132      	bne.n	80046bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	0159      	lsls	r1, r3, #5
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	440b      	add	r3, r1
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	4619      	mov	r1, r3
 8004672:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <USB_EP0StartXfer+0x2b0>)
 8004674:	4013      	ands	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	0159      	lsls	r1, r3, #5
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	440b      	add	r3, r1
 80046ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b2:	4619      	mov	r1, r3
 80046b4:	4b8a      	ldr	r3, [pc, #552]	; (80048e0 <USB_EP0StartXfer+0x2b4>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	610b      	str	r3, [r1, #16]
 80046ba:	e04e      	b.n	800475a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	0159      	lsls	r1, r3, #5
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	440b      	add	r3, r1
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	4619      	mov	r1, r3
 80046d8:	4b81      	ldr	r3, [pc, #516]	; (80048e0 <USB_EP0StartXfer+0x2b4>)
 80046da:	4013      	ands	r3, r2
 80046dc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	0159      	lsls	r1, r3, #5
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	440b      	add	r3, r1
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	4619      	mov	r1, r3
 80046fa:	4b78      	ldr	r3, [pc, #480]	; (80048dc <USB_EP0StartXfer+0x2b0>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474a:	6939      	ldr	r1, [r7, #16]
 800474c:	0148      	lsls	r0, r1, #5
 800474e:	6979      	ldr	r1, [r7, #20]
 8004750:	4401      	add	r1, r0
 8004752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004756:	4313      	orrs	r3, r2
 8004758:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d11e      	bne.n	800479e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e097      	b.n	80048ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8083 	beq.w	80048ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047e4:	4313      	orrs	r3, r2
 80047e6:	634b      	str	r3, [r1, #52]	; 0x34
 80047e8:	e071      	b.n	80048ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	0159      	lsls	r1, r3, #5
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	440b      	add	r3, r1
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	4619      	mov	r1, r3
 8004806:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <USB_EP0StartXfer+0x2b4>)
 8004808:	4013      	ands	r3, r2
 800480a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	0159      	lsls	r1, r3, #5
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	440b      	add	r3, r1
 8004822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004826:	4619      	mov	r1, r3
 8004828:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <USB_EP0StartXfer+0x2b0>)
 800482a:	4013      	ands	r3, r2
 800482c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	440a      	add	r2, r1
 800485c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004864:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487c:	6939      	ldr	r1, [r7, #16]
 800487e:	0148      	lsls	r0, r1, #5
 8004880:	6979      	ldr	r1, [r7, #20]
 8004882:	4401      	add	r1, r0
 8004884:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004888:	4313      	orrs	r3, r2
 800488a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d10d      	bne.n	80048ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6919      	ldr	r1, [r3, #16]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	460a      	mov	r2, r1
 80048ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e007ffff 	.word	0xe007ffff
 80048e0:	fff80000 	.word	0xfff80000

080048e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d14a      	bne.n	8004998 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800491a:	f040 8086 	bne.w	8004a2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004940:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004964:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3301      	adds	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004972:	4293      	cmp	r3, r2
 8004974:	d902      	bls.n	800497c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
          break;
 800497a:	e056      	b.n	8004a2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004994:	d0e7      	beq.n	8004966 <USB_EPStopXfer+0x82>
 8004996:	e048      	b.n	8004a2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b0:	d13b      	bne.n	8004a2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	7812      	ldrb	r2, [r2, #0]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d902      	bls.n	8004a10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a0e:	e00c      	b.n	8004a2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a28:	d0e7      	beq.n	80049fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b089      	sub	sp, #36	; 0x24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	460b      	mov	r3, r1
 8004a48:	71fb      	strb	r3, [r7, #7]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d123      	bne.n	8004aa6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a5e:	88bb      	ldrh	r3, [r7, #4]
 8004a60:	3303      	adds	r3, #3
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e018      	b.n	8004a9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	031a      	lsls	r2, r3, #12
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a78:	461a      	mov	r2, r3
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3301      	adds	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3e2      	bcc.n	8004a6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3724      	adds	r7, #36	; 0x24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b08b      	sub	sp, #44	; 0x2c
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	e014      	b.n	8004b0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	601a      	str	r2, [r3, #0]
    pDest++;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	3301      	adds	r3, #1
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	3301      	adds	r3, #1
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	3301      	adds	r3, #1
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	3301      	adds	r3, #1
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	3301      	adds	r3, #1
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d3e6      	bcc.n	8004ae0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b12:	8bfb      	ldrh	r3, [r7, #30]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01e      	beq.n	8004b56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b22:	461a      	mov	r2, r3
 8004b24:	f107 0310 	add.w	r3, r7, #16
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	701a      	strb	r2, [r3, #0]
      i++;
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	3301      	adds	r3, #1
 8004b42:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	3301      	adds	r3, #1
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b4a:	8bfb      	ldrh	r3, [r7, #30]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b50:	8bfb      	ldrh	r3, [r7, #30]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ea      	bne.n	8004b2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	372c      	adds	r7, #44	; 0x2c
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d12c      	bne.n	8004bda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	db12      	blt.n	8004bb8 <USB_EPSetStall+0x54>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00f      	beq.n	8004bb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e02b      	b.n	8004c32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db12      	blt.n	8004c12 <USB_EPSetStall+0xae>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00f      	beq.n	8004c12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d128      	bne.n	8004cae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	791b      	ldrb	r3, [r3, #4]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d003      	beq.n	8004c8c <USB_EPClearStall+0x4c>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	791b      	ldrb	r3, [r3, #4]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d138      	bne.n	8004cfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e027      	b.n	8004cfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ccc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	791b      	ldrb	r3, [r3, #4]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d003      	beq.n	8004cde <USB_EPClearStall+0x9e>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	791b      	ldrb	r3, [r3, #4]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d10f      	bne.n	8004cfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d86:	f023 0302 	bic.w	r3, r3, #2
 8004d8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004db4:	f023 0303 	bic.w	r3, r3, #3
 8004db8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004df4:	68fb      	ldr	r3, [r7, #12]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	0c1b      	lsrs	r3, r3, #16
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	b29b      	uxth	r3, r3
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4013      	ands	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e98:	68bb      	ldr	r3, [r7, #8]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <USB_ActivateSetup+0x44>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	fffff800 	.word	0xfffff800

08004f68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	460b      	mov	r3, r1
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	333c      	adds	r3, #60	; 0x3c
 8004f7e:	3304      	adds	r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4a26      	ldr	r2, [pc, #152]	; (8005020 <USB_EP0_OutStart+0xb8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d90a      	bls.n	8004fa2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f9c:	d101      	bne.n	8004fa2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e037      	b.n	8005012 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2300      	movs	r3, #0
 8004fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd0:	f043 0318 	orr.w	r3, r3, #24
 8004fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fe8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004fea:	7afb      	ldrb	r3, [r7, #11]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10f      	bne.n	8005010 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800500e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	4f54300a 	.word	0x4f54300a

08005024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a13      	ldr	r2, [pc, #76]	; (8005088 <USB_CoreReset+0x64>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e01b      	b.n	800507a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	daf2      	bge.n	8005030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a09      	ldr	r2, [pc, #36]	; (8005088 <USB_CoreReset+0x64>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e006      	b.n	800507a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d0f0      	beq.n	800505a <USB_CoreReset+0x36>

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	00030d40 	.word	0x00030d40

0800508c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8005098:	f44f 701d 	mov.w	r0, #628	; 0x274
 800509c:	f004 f806 	bl	80090ac <malloc>
 80050a0:	4603      	mov	r3, r0
 80050a2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <USBD_MSC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	32b0      	adds	r2, #176	; 0xb0
 80050b4:	2100      	movs	r1, #0
 80050b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80050ba:	2302      	movs	r3, #2
 80050bc:	e06e      	b.n	800519c <USBD_MSC_Init+0x110>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	32b0      	adds	r2, #176	; 0xb0
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	32b0      	adds	r2, #176	; 0xb0
 80050d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	7c1b      	ldrb	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d12b      	bne.n	8005142 <USBD_MSC_Init+0xb6>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80050ea:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <USBD_MSC_Init+0x118>)
 80050ec:	7819      	ldrb	r1, [r3, #0]
 80050ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050f2:	2202      	movs	r2, #2
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f003 fe16 	bl	8008d26 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80050fa:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <USBD_MSC_Init+0x118>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	f003 020f 	and.w	r2, r3, #15
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005112:	2201      	movs	r2, #1
 8005114:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005116:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <USBD_MSC_Init+0x11c>)
 8005118:	7819      	ldrb	r1, [r3, #0]
 800511a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800511e:	2202      	movs	r2, #2
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f003 fe00 	bl	8008d26 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <USBD_MSC_Init+0x11c>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	f003 020f 	and.w	r2, r3, #15
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	3324      	adds	r3, #36	; 0x24
 800513c:	2201      	movs	r2, #1
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	e028      	b.n	8005194 <USBD_MSC_Init+0x108>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <USBD_MSC_Init+0x118>)
 8005144:	7819      	ldrb	r1, [r3, #0]
 8005146:	2340      	movs	r3, #64	; 0x40
 8005148:	2202      	movs	r2, #2
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f003 fdeb 	bl	8008d26 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <USBD_MSC_Init+0x118>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f003 020f 	and.w	r2, r3, #15
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005168:	2201      	movs	r2, #1
 800516a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <USBD_MSC_Init+0x11c>)
 800516e:	7819      	ldrb	r1, [r3, #0]
 8005170:	2340      	movs	r3, #64	; 0x40
 8005172:	2202      	movs	r2, #2
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f003 fdd6 	bl	8008d26 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <USBD_MSC_Init+0x11c>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f003 020f 	and.w	r2, r3, #15
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3324      	adds	r3, #36	; 0x24
 8005190:	2201      	movs	r2, #1
 8005192:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa2b 	bl	80055f0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	2003206f 	.word	0x2003206f
 80051a8:	2003206e 	.word	0x2003206e

080051ac <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80051b8:	4b26      	ldr	r3, [pc, #152]	; (8005254 <USBD_MSC_DeInit+0xa8>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f003 fdd7 	bl	8008d72 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <USBD_MSC_DeInit+0xa8>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f003 020f 	and.w	r2, r3, #15
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051dc:	2200      	movs	r2, #0
 80051de:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80051e0:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <USBD_MSC_DeInit+0xac>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	4619      	mov	r1, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f003 fdc3 	bl	8008d72 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <USBD_MSC_DeInit+0xac>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 020f 	and.w	r2, r3, #15
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	3324      	adds	r3, #36	; 0x24
 8005202:	2200      	movs	r2, #0
 8005204:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	32b0      	adds	r2, #176	; 0xb0
 8005210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d018      	beq.n	800524a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa67 	bl	80056ec <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	32b0      	adds	r2, #176	; 0xb0
 8005228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522c:	4618      	mov	r0, r3
 800522e:	f003 ff45 	bl	80090bc <free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	32b0      	adds	r2, #176	; 0xb0
 800523c:	2100      	movs	r1, #0
 800523e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	2003206f 	.word	0x2003206f
 8005258:	2003206e 	.word	0x2003206e

0800525c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	32b0      	adds	r2, #176	; 0xb0
 8005270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005274:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005284:	2303      	movs	r3, #3
 8005286:	e0e1      	b.n	800544c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005290:	2b00      	cmp	r3, #0
 8005292:	d053      	beq.n	800533c <USBD_MSC_Setup+0xe0>
 8005294:	2b20      	cmp	r3, #32
 8005296:	f040 80d1 	bne.w	800543c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	2bfe      	cmp	r3, #254	; 0xfe
 80052a0:	d002      	beq.n	80052a8 <USBD_MSC_Setup+0x4c>
 80052a2:	2bff      	cmp	r3, #255	; 0xff
 80052a4:	d02a      	beq.n	80052fc <USBD_MSC_Setup+0xa0>
 80052a6:	e041      	b.n	800532c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	885b      	ldrh	r3, [r3, #2]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11e      	bne.n	80052ee <USBD_MSC_Setup+0x92>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	88db      	ldrh	r3, [r3, #6]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d11a      	bne.n	80052ee <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80052be:	2b00      	cmp	r3, #0
 80052c0:	da15      	bge.n	80052ee <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	33b0      	adds	r3, #176	; 0xb0
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	4798      	blx	r3
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2201      	movs	r2, #1
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f003 f923 	bl	8008530 <USBD_CtlSendData>
 80052ea:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052ec:	e025      	b.n	800533a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f003 f8ac 	bl	800844e <USBD_CtlError>
            ret = USBD_FAIL;
 80052f6:	2303      	movs	r3, #3
 80052f8:	75fb      	strb	r3, [r7, #23]
          break;
 80052fa:	e01e      	b.n	800533a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	885b      	ldrh	r3, [r3, #2]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10c      	bne.n	800531e <USBD_MSC_Setup+0xc2>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	88db      	ldrh	r3, [r3, #6]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d108      	bne.n	800531e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005312:	2b00      	cmp	r3, #0
 8005314:	db03      	blt.n	800531e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f9b4 	bl	8005684 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800531c:	e00d      	b.n	800533a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f003 f894 	bl	800844e <USBD_CtlError>
            ret = USBD_FAIL;
 8005326:	2303      	movs	r3, #3
 8005328:	75fb      	strb	r3, [r7, #23]
          break;
 800532a:	e006      	b.n	800533a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f003 f88d 	bl	800844e <USBD_CtlError>
          ret = USBD_FAIL;
 8005334:	2303      	movs	r3, #3
 8005336:	75fb      	strb	r3, [r7, #23]
          break;
 8005338:	bf00      	nop
      }
      break;
 800533a:	e086      	b.n	800544a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b0b      	cmp	r3, #11
 8005342:	d872      	bhi.n	800542a <USBD_MSC_Setup+0x1ce>
 8005344:	a201      	add	r2, pc, #4	; (adr r2, 800534c <USBD_MSC_Setup+0xf0>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	0800537d 	.word	0x0800537d
 8005350:	080053f9 	.word	0x080053f9
 8005354:	0800542b 	.word	0x0800542b
 8005358:	0800542b 	.word	0x0800542b
 800535c:	0800542b 	.word	0x0800542b
 8005360:	0800542b 	.word	0x0800542b
 8005364:	0800542b 	.word	0x0800542b
 8005368:	0800542b 	.word	0x0800542b
 800536c:	0800542b 	.word	0x0800542b
 8005370:	0800542b 	.word	0x0800542b
 8005374:	080053a7 	.word	0x080053a7
 8005378:	080053d1 	.word	0x080053d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b03      	cmp	r3, #3
 8005386:	d107      	bne.n	8005398 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005388:	f107 030e 	add.w	r3, r7, #14
 800538c:	2202      	movs	r2, #2
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f003 f8cd 	bl	8008530 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005396:	e050      	b.n	800543a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f003 f857 	bl	800844e <USBD_CtlError>
            ret = USBD_FAIL;
 80053a0:	2303      	movs	r3, #3
 80053a2:	75fb      	strb	r3, [r7, #23]
          break;
 80053a4:	e049      	b.n	800543a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d107      	bne.n	80053c2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3304      	adds	r3, #4
 80053b6:	2201      	movs	r2, #1
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f003 f8b8 	bl	8008530 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053c0:	e03b      	b.n	800543a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f003 f842 	bl	800844e <USBD_CtlError>
            ret = USBD_FAIL;
 80053ca:	2303      	movs	r3, #3
 80053cc:	75fb      	strb	r3, [r7, #23]
          break;
 80053ce:	e034      	b.n	800543a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d106      	bne.n	80053ea <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	885b      	ldrh	r3, [r3, #2]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053e8:	e027      	b.n	800543a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f003 f82e 	bl	800844e <USBD_CtlError>
            ret = USBD_FAIL;
 80053f2:	2303      	movs	r3, #3
 80053f4:	75fb      	strb	r3, [r7, #23]
          break;
 80053f6:	e020      	b.n	800543a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b03      	cmp	r3, #3
 8005402:	d119      	bne.n	8005438 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	885b      	ldrh	r3, [r3, #2]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d115      	bne.n	8005438 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	889b      	ldrh	r3, [r3, #4]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f003 fccb 	bl	8008db0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	889b      	ldrh	r3, [r3, #4]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fb2e 	bl	8005a84 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8005428:	e006      	b.n	8005438 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f003 f80e 	bl	800844e <USBD_CtlError>
          ret = USBD_FAIL;
 8005432:	2303      	movs	r3, #3
 8005434:	75fb      	strb	r3, [r7, #23]
          break;
 8005436:	e000      	b.n	800543a <USBD_MSC_Setup+0x1de>
          break;
 8005438:	bf00      	nop
      }
      break;
 800543a:	e006      	b.n	800544a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f003 f805 	bl	800844e <USBD_CtlError>
      ret = USBD_FAIL;
 8005444:	2303      	movs	r3, #3
 8005446:	75fb      	strb	r3, [r7, #23]
      break;
 8005448:	bf00      	nop
  }

  return (uint8_t)ret;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f959 	bl	800571c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	4619      	mov	r1, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f983 	bl	8005790 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800549c:	2181      	movs	r1, #129	; 0x81
 800549e:	4812      	ldr	r0, [pc, #72]	; (80054e8 <USBD_MSC_GetHSCfgDesc+0x54>)
 80054a0:	f002 f972 	bl	8007788 <USBD_GetEpDesc>
 80054a4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80054a6:	2101      	movs	r1, #1
 80054a8:	480f      	ldr	r0, [pc, #60]	; (80054e8 <USBD_MSC_GetHSCfgDesc+0x54>)
 80054aa:	f002 f96d 	bl	8007788 <USBD_GetEpDesc>
 80054ae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	711a      	strb	r2, [r3, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f042 0202 	orr.w	r2, r2, #2
 80054c2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	711a      	strb	r2, [r3, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f042 0202 	orr.w	r2, r2, #2
 80054d6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80054de:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20032044 	.word	0x20032044

080054ec <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80054f4:	2181      	movs	r1, #129	; 0x81
 80054f6:	4812      	ldr	r0, [pc, #72]	; (8005540 <USBD_MSC_GetFSCfgDesc+0x54>)
 80054f8:	f002 f946 	bl	8007788 <USBD_GetEpDesc>
 80054fc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80054fe:	2101      	movs	r1, #1
 8005500:	480f      	ldr	r0, [pc, #60]	; (8005540 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005502:	f002 f941 	bl	8007788 <USBD_GetEpDesc>
 8005506:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d006      	beq.n	800551c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005516:	711a      	strb	r2, [r3, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2200      	movs	r2, #0
 8005526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552a:	711a      	strb	r2, [r3, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005536:	4b02      	ldr	r3, [pc, #8]	; (8005540 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20032044 	.word	0x20032044

08005544 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800554c:	2181      	movs	r1, #129	; 0x81
 800554e:	4812      	ldr	r0, [pc, #72]	; (8005598 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8005550:	f002 f91a 	bl	8007788 <USBD_GetEpDesc>
 8005554:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005556:	2101      	movs	r1, #1
 8005558:	480f      	ldr	r0, [pc, #60]	; (8005598 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800555a:	f002 f915 	bl	8007788 <USBD_GetEpDesc>
 800555e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d006      	beq.n	8005574 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556e:	711a      	strb	r2, [r3, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d006      	beq.n	8005588 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005582:	711a      	strb	r2, [r3, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800558e:	4b02      	ldr	r3, [pc, #8]	; (8005598 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20032044 	.word	0x20032044

0800559c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	220a      	movs	r2, #10
 80055a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80055aa:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	20032064 	.word	0x20032064

080055bc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e009      	b.n	80055e4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	33b0      	adds	r3, #176	; 0xb0
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	32b0      	adds	r2, #176	; 0xb0
 8005602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005606:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d032      	beq.n	8005674 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	33b0      	adds	r3, #176	; 0xb0
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2000      	movs	r0, #0
 8005646:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <MSC_BOT_Init+0x8c>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f003 fbae 	bl	8008db0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <MSC_BOT_Init+0x90>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f003 fba8 	bl	8008db0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <MSC_BOT_Init+0x8c>)
 8005662:	7819      	ldrb	r1, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800566a:	231f      	movs	r3, #31
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f003 fc68 	bl	8008f42 <USBD_LL_PrepareReceive>
 8005672:	e000      	b.n	8005676 <MSC_BOT_Init+0x86>
    return;
 8005674:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2003206f 	.word	0x2003206f
 8005680:	2003206e 	.word	0x2003206e

08005684 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	32b0      	adds	r2, #176	; 0xb0
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01b      	beq.n	80056da <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <MSC_BOT_Reset+0x60>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f003 fbb9 	bl	8008e2c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <MSC_BOT_Reset+0x64>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f003 fbb3 	bl	8008e2c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <MSC_BOT_Reset+0x64>)
 80056c8:	7819      	ldrb	r1, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80056d0:	231f      	movs	r3, #31
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f003 fc35 	bl	8008f42 <USBD_LL_PrepareReceive>
 80056d8:	e000      	b.n	80056dc <MSC_BOT_Reset+0x58>
    return;
 80056da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	2003206e 	.word	0x2003206e
 80056e8:	2003206f 	.word	0x2003206f

080056ec <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	32b0      	adds	r2, #176	; 0xb0
 80056fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005702:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	721a      	strb	r2, [r3, #8]
  }
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	32b0      	adds	r2, #176	; 0xb0
 8005732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005736:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d020      	beq.n	8005780 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	7a1b      	ldrb	r3, [r3, #8]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d005      	beq.n	8005752 <MSC_BOT_DataIn+0x36>
 8005746:	2b02      	cmp	r3, #2
 8005748:	db1c      	blt.n	8005784 <MSC_BOT_DataIn+0x68>
 800574a:	3b03      	subs	r3, #3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d819      	bhi.n	8005784 <MSC_BOT_DataIn+0x68>
 8005750:	e011      	b.n	8005776 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800575e:	461a      	mov	r2, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f9c9 	bl	8005af8 <SCSI_ProcessCmd>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	da0d      	bge.n	8005788 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800576c:	2101      	movs	r1, #1
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f90c 	bl	800598c <MSC_BOT_SendCSW>
      }
      break;
 8005774:	e008      	b.n	8005788 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005776:	2100      	movs	r1, #0
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f907 	bl	800598c <MSC_BOT_SendCSW>
      break;
 800577e:	e004      	b.n	800578a <MSC_BOT_DataIn+0x6e>
    return;
 8005780:	bf00      	nop
 8005782:	e002      	b.n	800578a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8005784:	bf00      	nop
 8005786:	e000      	b.n	800578a <MSC_BOT_DataIn+0x6e>
      break;
 8005788:	bf00      	nop
  }
}
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	32b0      	adds	r2, #176	; 0xb0
 80057a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01c      	beq.n	80057ec <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	7a1b      	ldrb	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <MSC_BOT_DataOut+0x30>
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d004      	beq.n	80057c8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80057be:	e018      	b.n	80057f2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f819 	bl	80057f8 <MSC_BOT_CBW_Decode>
      break;
 80057c6:	e014      	b.n	80057f2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80057d4:	461a      	mov	r2, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f98e 	bl	8005af8 <SCSI_ProcessCmd>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da06      	bge.n	80057f0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80057e2:	2101      	movs	r1, #1
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8d1 	bl	800598c <MSC_BOT_SendCSW>
      break;
 80057ea:	e001      	b.n	80057f0 <MSC_BOT_DataOut+0x60>
    return;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <MSC_BOT_DataOut+0x62>
      break;
 80057f0:	bf00      	nop
  }
}
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	32b0      	adds	r2, #176	; 0xb0
 800580a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d079      	beq.n	800590a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800582e:	4b3a      	ldr	r3, [pc, #232]	; (8005918 <MSC_BOT_CBW_Decode+0x120>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f003 fba5 	bl	8008f84 <USBD_LL_GetRxDataSize>
 800583a:	4603      	mov	r3, r0
 800583c:	2b1f      	cmp	r3, #31
 800583e:	d114      	bne.n	800586a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8005846:	4a35      	ldr	r2, [pc, #212]	; (800591c <MSC_BOT_CBW_Decode+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10e      	bne.n	800586a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005852:	2b01      	cmp	r3, #1
 8005854:	d809      	bhi.n	800586a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005866:	2b10      	cmp	r3, #16
 8005868:	d90e      	bls.n	8005888 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005870:	2320      	movs	r3, #32
 8005872:	2205      	movs	r2, #5
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fe28 	bl	80064ca <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2202      	movs	r2, #2
 800587e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f8bd 	bl	8005a00 <MSC_BOT_Abort>
 8005886:	e043      	b.n	8005910 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005894:	461a      	mov	r2, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f92e 	bl	8005af8 <SCSI_ProcessCmd>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da0c      	bge.n	80058bc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	7a1b      	ldrb	r3, [r3, #8]
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d104      	bne.n	80058b4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80058aa:	2101      	movs	r1, #1
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f86d 	bl	800598c <MSC_BOT_SendCSW>
 80058b2:	e02d      	b.n	8005910 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f8a3 	bl	8005a00 <MSC_BOT_Abort>
 80058ba:	e029      	b.n	8005910 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	7a1b      	ldrb	r3, [r3, #8]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d024      	beq.n	800590e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d020      	beq.n	800590e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d01c      	beq.n	800590e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f103 0110 	add.w	r1, r3, #16
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f819 	bl	8005920 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80058ee:	e00f      	b.n	8005910 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80058f8:	2100      	movs	r1, #0
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f846 	bl	800598c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005900:	e006      	b.n	8005910 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f87c 	bl	8005a00 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005908:	e002      	b.n	8005910 <MSC_BOT_CBW_Decode+0x118>
    return;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800590e:	bf00      	nop
    }
  }
}
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	2003206f 	.word	0x2003206f
 800591c:	43425355 	.word	0x43425355

08005920 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	32b0      	adds	r2, #176	; 0xb0
 8005936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d01e      	beq.n	8005980 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4293      	cmp	r3, r2
 800594c:	bf28      	it	cs
 800594e:	4613      	movcs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	1ad2      	subs	r2, r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2204      	movs	r2, #4
 800596e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <MSC_BOT_SendData+0x68>)
 8005972:	7819      	ldrb	r1, [r3, #0]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f003 fac1 	bl	8008f00 <USBD_LL_Transmit>
 800597e:	e000      	b.n	8005982 <MSC_BOT_SendData+0x62>
    return;
 8005980:	bf00      	nop
}
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	2003206e 	.word	0x2003206e

0800598c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	32b0      	adds	r2, #176	; 0xb0
 80059a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01d      	beq.n	80059ea <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <MSC_BOT_SendCSW+0x68>)
 80059b2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <MSC_BOT_SendCSW+0x6c>)
 80059c6:	7819      	ldrb	r1, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80059ce:	230d      	movs	r3, #13
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f003 fa95 	bl	8008f00 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <MSC_BOT_SendCSW+0x70>)
 80059d8:	7819      	ldrb	r1, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80059e0:	231f      	movs	r3, #31
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f003 faad 	bl	8008f42 <USBD_LL_PrepareReceive>
 80059e8:	e000      	b.n	80059ec <MSC_BOT_SendCSW+0x60>
    return;
 80059ea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	53425355 	.word	0x53425355
 80059f8:	2003206e 	.word	0x2003206e
 80059fc:	2003206f 	.word	0x2003206f

08005a00 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	32b0      	adds	r2, #176	; 0xb0
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d02a      	beq.n	8005a74 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10e      	bne.n	8005a46 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005a3a:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <MSC_BOT_Abort+0x7c>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f003 f9d4 	bl	8008dee <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005a46:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <MSC_BOT_Abort+0x80>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f003 f9ce 	bl	8008dee <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	7a5b      	ldrb	r3, [r3, #9]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d10d      	bne.n	8005a76 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005a5a:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <MSC_BOT_Abort+0x80>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f003 f9c4 	bl	8008dee <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <MSC_BOT_Abort+0x7c>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f003 f9be 	bl	8008dee <USBD_LL_StallEP>
 8005a72:	e000      	b.n	8005a76 <MSC_BOT_Abort+0x76>
    return;
 8005a74:	bf00      	nop
  }
}
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	2003206f 	.word	0x2003206f
 8005a80:	2003206e 	.word	0x2003206e

08005a84 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	32b0      	adds	r2, #176	; 0xb0
 8005a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01d      	beq.n	8005ae2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	7a5b      	ldrb	r3, [r3, #9]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d10c      	bne.n	8005ac8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <MSC_BOT_CplClrFeature+0x6c>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f003 f99a 	bl	8008dee <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005aba:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <MSC_BOT_CplClrFeature+0x70>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f003 f994 	bl	8008dee <USBD_LL_StallEP>
 8005ac6:	e00f      	b.n	8005ae8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da0a      	bge.n	8005ae6 <MSC_BOT_CplClrFeature+0x62>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	7a5b      	ldrb	r3, [r3, #9]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d006      	beq.n	8005ae6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005ad8:	2101      	movs	r1, #1
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff ff56 	bl	800598c <MSC_BOT_SendCSW>
 8005ae0:	e002      	b.n	8005ae8 <MSC_BOT_CplClrFeature+0x64>
    return;
 8005ae2:	bf00      	nop
 8005ae4:	e000      	b.n	8005ae8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8005ae6:	bf00      	nop
  }
}
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	2003206e 	.word	0x2003206e
 8005af4:	2003206f 	.word	0x2003206f

08005af8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	460b      	mov	r3, r1
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	32b0      	adds	r2, #176	; 0xb0
 8005b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b14:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8005b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b20:	e168      	b.n	8005df4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2baa      	cmp	r3, #170	; 0xaa
 8005b28:	f000 8144 	beq.w	8005db4 <SCSI_ProcessCmd+0x2bc>
 8005b2c:	2baa      	cmp	r3, #170	; 0xaa
 8005b2e:	f300 8153 	bgt.w	8005dd8 <SCSI_ProcessCmd+0x2e0>
 8005b32:	2ba8      	cmp	r3, #168	; 0xa8
 8005b34:	f000 812c 	beq.w	8005d90 <SCSI_ProcessCmd+0x298>
 8005b38:	2ba8      	cmp	r3, #168	; 0xa8
 8005b3a:	f300 814d 	bgt.w	8005dd8 <SCSI_ProcessCmd+0x2e0>
 8005b3e:	2b5a      	cmp	r3, #90	; 0x5a
 8005b40:	f300 80c0 	bgt.w	8005cc4 <SCSI_ProcessCmd+0x1cc>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f2c0 8147 	blt.w	8005dd8 <SCSI_ProcessCmd+0x2e0>
 8005b4a:	2b5a      	cmp	r3, #90	; 0x5a
 8005b4c:	f200 8144 	bhi.w	8005dd8 <SCSI_ProcessCmd+0x2e0>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <SCSI_ProcessCmd+0x60>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005ccb 	.word	0x08005ccb
 8005b5c:	08005dd9 	.word	0x08005dd9
 8005b60:	08005dd9 	.word	0x08005dd9
 8005b64:	08005cdd 	.word	0x08005cdd
 8005b68:	08005dd9 	.word	0x08005dd9
 8005b6c:	08005dd9 	.word	0x08005dd9
 8005b70:	08005dd9 	.word	0x08005dd9
 8005b74:	08005dd9 	.word	0x08005dd9
 8005b78:	08005dd9 	.word	0x08005dd9
 8005b7c:	08005dd9 	.word	0x08005dd9
 8005b80:	08005dd9 	.word	0x08005dd9
 8005b84:	08005dd9 	.word	0x08005dd9
 8005b88:	08005dd9 	.word	0x08005dd9
 8005b8c:	08005dd9 	.word	0x08005dd9
 8005b90:	08005dd9 	.word	0x08005dd9
 8005b94:	08005dd9 	.word	0x08005dd9
 8005b98:	08005dd9 	.word	0x08005dd9
 8005b9c:	08005dd9 	.word	0x08005dd9
 8005ba0:	08005cef 	.word	0x08005cef
 8005ba4:	08005dd9 	.word	0x08005dd9
 8005ba8:	08005dd9 	.word	0x08005dd9
 8005bac:	08005dd9 	.word	0x08005dd9
 8005bb0:	08005dd9 	.word	0x08005dd9
 8005bb4:	08005dd9 	.word	0x08005dd9
 8005bb8:	08005dd9 	.word	0x08005dd9
 8005bbc:	08005dd9 	.word	0x08005dd9
 8005bc0:	08005d25 	.word	0x08005d25
 8005bc4:	08005d01 	.word	0x08005d01
 8005bc8:	08005dd9 	.word	0x08005dd9
 8005bcc:	08005dd9 	.word	0x08005dd9
 8005bd0:	08005d13 	.word	0x08005d13
 8005bd4:	08005dd9 	.word	0x08005dd9
 8005bd8:	08005dd9 	.word	0x08005dd9
 8005bdc:	08005dd9 	.word	0x08005dd9
 8005be0:	08005dd9 	.word	0x08005dd9
 8005be4:	08005d49 	.word	0x08005d49
 8005be8:	08005dd9 	.word	0x08005dd9
 8005bec:	08005d5b 	.word	0x08005d5b
 8005bf0:	08005dd9 	.word	0x08005dd9
 8005bf4:	08005dd9 	.word	0x08005dd9
 8005bf8:	08005d7f 	.word	0x08005d7f
 8005bfc:	08005dd9 	.word	0x08005dd9
 8005c00:	08005da3 	.word	0x08005da3
 8005c04:	08005dd9 	.word	0x08005dd9
 8005c08:	08005dd9 	.word	0x08005dd9
 8005c0c:	08005dd9 	.word	0x08005dd9
 8005c10:	08005dd9 	.word	0x08005dd9
 8005c14:	08005dc7 	.word	0x08005dc7
 8005c18:	08005dd9 	.word	0x08005dd9
 8005c1c:	08005dd9 	.word	0x08005dd9
 8005c20:	08005dd9 	.word	0x08005dd9
 8005c24:	08005dd9 	.word	0x08005dd9
 8005c28:	08005dd9 	.word	0x08005dd9
 8005c2c:	08005dd9 	.word	0x08005dd9
 8005c30:	08005dd9 	.word	0x08005dd9
 8005c34:	08005dd9 	.word	0x08005dd9
 8005c38:	08005dd9 	.word	0x08005dd9
 8005c3c:	08005dd9 	.word	0x08005dd9
 8005c40:	08005dd9 	.word	0x08005dd9
 8005c44:	08005dd9 	.word	0x08005dd9
 8005c48:	08005dd9 	.word	0x08005dd9
 8005c4c:	08005dd9 	.word	0x08005dd9
 8005c50:	08005dd9 	.word	0x08005dd9
 8005c54:	08005dd9 	.word	0x08005dd9
 8005c58:	08005dd9 	.word	0x08005dd9
 8005c5c:	08005dd9 	.word	0x08005dd9
 8005c60:	08005dd9 	.word	0x08005dd9
 8005c64:	08005dd9 	.word	0x08005dd9
 8005c68:	08005dd9 	.word	0x08005dd9
 8005c6c:	08005dd9 	.word	0x08005dd9
 8005c70:	08005dd9 	.word	0x08005dd9
 8005c74:	08005dd9 	.word	0x08005dd9
 8005c78:	08005dd9 	.word	0x08005dd9
 8005c7c:	08005dd9 	.word	0x08005dd9
 8005c80:	08005dd9 	.word	0x08005dd9
 8005c84:	08005dd9 	.word	0x08005dd9
 8005c88:	08005dd9 	.word	0x08005dd9
 8005c8c:	08005dd9 	.word	0x08005dd9
 8005c90:	08005dd9 	.word	0x08005dd9
 8005c94:	08005dd9 	.word	0x08005dd9
 8005c98:	08005dd9 	.word	0x08005dd9
 8005c9c:	08005dd9 	.word	0x08005dd9
 8005ca0:	08005dd9 	.word	0x08005dd9
 8005ca4:	08005dd9 	.word	0x08005dd9
 8005ca8:	08005dd9 	.word	0x08005dd9
 8005cac:	08005dd9 	.word	0x08005dd9
 8005cb0:	08005dd9 	.word	0x08005dd9
 8005cb4:	08005dd9 	.word	0x08005dd9
 8005cb8:	08005dd9 	.word	0x08005dd9
 8005cbc:	08005dd9 	.word	0x08005dd9
 8005cc0:	08005d37 	.word	0x08005d37
 8005cc4:	2b9e      	cmp	r3, #158	; 0x9e
 8005cc6:	d051      	beq.n	8005d6c <SCSI_ProcessCmd+0x274>
 8005cc8:	e086      	b.n	8005dd8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f893 	bl	8005dfc <SCSI_TestUnitReady>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cda:	e089      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fb6e 	bl	80063c4 <SCSI_RequestSense>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	75fb      	strb	r3, [r7, #23]
      break;
 8005cec:	e080      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005cee:	7afb      	ldrb	r3, [r7, #11]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f8db 	bl	8005eb0 <SCSI_Inquiry>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfe:	e077      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005d00:	7afb      	ldrb	r3, [r7, #11]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	4619      	mov	r1, r3
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fc2a 	bl	8006560 <SCSI_StartStopUnit>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	e06e      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005d12:	7afb      	ldrb	r3, [r7, #11]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4619      	mov	r1, r3
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fc76 	bl	800660a <SCSI_AllowPreventRemovable>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	75fb      	strb	r3, [r7, #23]
      break;
 8005d22:	e065      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005d24:	7afb      	ldrb	r3, [r7, #11]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 faea 	bl	8006304 <SCSI_ModeSense6>
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]
      break;
 8005d34:	e05c      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8005d36:	7afb      	ldrb	r3, [r7, #11]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fb11 	bl	8006364 <SCSI_ModeSense10>
 8005d42:	4603      	mov	r3, r0
 8005d44:	75fb      	strb	r3, [r7, #23]
      break;
 8005d46:	e053      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005d48:	7afb      	ldrb	r3, [r7, #11]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fa5d 	bl	800620e <SCSI_ReadFormatCapacity>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]
      break;
 8005d58:	e04a      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f923 	bl	8005fac <SCSI_ReadCapacity10>
 8005d66:	4603      	mov	r3, r0
 8005d68:	75fb      	strb	r3, [r7, #23]
      break;
 8005d6a:	e041      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4619      	mov	r1, r3
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f998 	bl	80060a8 <SCSI_ReadCapacity16>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d7c:	e038      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4619      	mov	r1, r3
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fc6d 	bl	8006664 <SCSI_Read10>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8e:	e02f      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005d90:	7afb      	ldrb	r3, [r7, #11]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	4619      	mov	r1, r3
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fd0e 	bl	80067b8 <SCSI_Read12>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005da0:	e026      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4619      	mov	r1, r3
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fdb9 	bl	8006920 <SCSI_Write10>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]
      break;
 8005db2:	e01d      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8005db4:	7afb      	ldrb	r3, [r7, #11]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4619      	mov	r1, r3
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fe86 	bl	8006acc <SCSI_Write12>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc4:	e014      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 ff63 	bl	8006c98 <SCSI_Verify10>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd6:	e00b      	b.n	8005df0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005dd8:	7af9      	ldrb	r1, [r7, #11]
 8005dda:	2320      	movs	r3, #32
 8005ddc:	2205      	movs	r2, #5
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fb73 	bl	80064ca <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2202      	movs	r2, #2
 8005de8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005dea:	23ff      	movs	r3, #255	; 0xff
 8005dec:	75fb      	strb	r3, [r7, #23]
      break;
 8005dee:	bf00      	nop
  }

  return ret;
 8005df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	460b      	mov	r3, r1
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	32b0      	adds	r2, #176	; 0xb0
 8005e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e18:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	e03f      	b.n	8005ea6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005e36:	2320      	movs	r3, #32
 8005e38:	2205      	movs	r2, #5
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fb45 	bl	80064ca <SCSI_SenseCode>

    return -1;
 8005e40:	f04f 33ff 	mov.w	r3, #4294967295
 8005e44:	e02f      	b.n	8005ea6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d10b      	bne.n	8005e68 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e50:	7af9      	ldrb	r1, [r7, #11]
 8005e52:	233a      	movs	r3, #58	; 0x3a
 8005e54:	2202      	movs	r2, #2
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fb37 	bl	80064ca <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2205      	movs	r2, #5
 8005e60:	721a      	strb	r2, [r3, #8]
    return -1;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	e01e      	b.n	8005ea6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	33b0      	adds	r3, #176	; 0xb0
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	7afa      	ldrb	r2, [r7, #11]
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e86:	7af9      	ldrb	r1, [r7, #11]
 8005e88:	233a      	movs	r3, #58	; 0x3a
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 fb1c 	bl	80064ca <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2205      	movs	r2, #5
 8005e96:	721a      	strb	r2, [r3, #8]

    return -1;
 8005e98:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9c:	e003      	b.n	8005ea6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	60da      	str	r2, [r3, #12]

  return 0;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	32b0      	adds	r2, #176	; 0xb0
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <SCSI_Inquiry+0x2a>
  {
    return -1;
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed8:	e05f      	b.n	8005f9a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005eea:	2320      	movs	r3, #32
 8005eec:	2205      	movs	r2, #5
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 faeb 	bl	80064ca <SCSI_SenseCode>
    return -1;
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef8:	e04f      	b.n	8005f9a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3301      	adds	r3, #1
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005f12:	2206      	movs	r2, #6
 8005f14:	4923      	ldr	r1, [pc, #140]	; (8005fa4 <SCSI_Inquiry+0xf4>)
 8005f16:	69b8      	ldr	r0, [r7, #24]
 8005f18:	f001 f844 	bl	8006fa4 <SCSI_UpdateBotData>
 8005f1c:	e03c      	b.n	8005f98 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3302      	adds	r3, #2
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b80      	cmp	r3, #128	; 0x80
 8005f26:	d105      	bne.n	8005f34 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005f28:	2208      	movs	r2, #8
 8005f2a:	491f      	ldr	r1, [pc, #124]	; (8005fa8 <SCSI_Inquiry+0xf8>)
 8005f2c:	69b8      	ldr	r0, [r7, #24]
 8005f2e:	f001 f839 	bl	8006fa4 <SCSI_UpdateBotData>
 8005f32:	e031      	b.n	8005f98 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f3a:	2324      	movs	r3, #36	; 0x24
 8005f3c:	2205      	movs	r2, #5
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fac3 	bl	80064ca <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	e027      	b.n	8005f9a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	33b0      	adds	r3, #176	; 0xb0
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	69d9      	ldr	r1, [r3, #28]
 8005f5c:	7afa      	ldrb	r2, [r7, #11]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3305      	adds	r3, #5
 8005f74:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8bfa      	ldrh	r2, [r7, #30]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d303      	bcc.n	8005f8c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3304      	adds	r3, #4
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005f8c:	8bfb      	ldrh	r3, [r7, #30]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6979      	ldr	r1, [r7, #20]
 8005f92:	69b8      	ldr	r0, [r7, #24]
 8005f94:	f001 f806 	bl	8006fa4 <SCSI_UpdateBotData>
  }

  return 0;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20032070 	.word	0x20032070
 8005fa8:	20032078 	.word	0x20032078

08005fac <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	32b0      	adds	r2, #176	; 0xb0
 8005fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd4:	e064      	b.n	80060a0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	33b0      	adds	r3, #176	; 0xb0
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005ff4:	7af8      	ldrb	r0, [r7, #11]
 8005ff6:	4798      	blx	r3
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005ffc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <SCSI_ReadCapacity10+0x62>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800600a:	2b02      	cmp	r3, #2
 800600c:	d108      	bne.n	8006020 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800600e:	7af9      	ldrb	r1, [r7, #11]
 8006010:	233a      	movs	r3, #58	; 0x3a
 8006012:	2202      	movs	r2, #2
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fa58 	bl	80064ca <SCSI_SenseCode>
    return -1;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	e03f      	b.n	80060a0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006026:	3b01      	subs	r3, #1
 8006028:	0e1b      	lsrs	r3, r3, #24
 800602a:	b2da      	uxtb	r2, r3
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006036:	3b01      	subs	r3, #1
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	b2da      	uxtb	r2, r3
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006046:	3b01      	subs	r3, #1
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	b2da      	uxtb	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006056:	b2db      	uxtb	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b2da      	uxtb	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006066:	161b      	asrs	r3, r3, #24
 8006068:	b2da      	uxtb	r2, r3
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006074:	141b      	asrs	r3, r3, #16
 8006076:	b2da      	uxtb	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	b29b      	uxth	r3, r3
 8006086:	b2da      	uxtb	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006092:	b2da      	uxtb	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2208      	movs	r2, #8
 800609c:	60da      	str	r2, [r3, #12]

  return 0;
 800609e:	2300      	movs	r3, #0

}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	460b      	mov	r3, r1
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	32b0      	adds	r2, #176	; 0xb0
 80060c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295
 80060d0:	e099      	b.n	8006206 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	33b0      	adds	r3, #176	; 0xb0
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80060f0:	7af8      	ldrb	r0, [r7, #11]
 80060f2:	4798      	blx	r3
 80060f4:	4603      	mov	r3, r0
 80060f6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80060f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <SCSI_ReadCapacity16+0x62>
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006106:	2b02      	cmp	r3, #2
 8006108:	d108      	bne.n	800611c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800610a:	7af9      	ldrb	r1, [r7, #11]
 800610c:	233a      	movs	r3, #58	; 0x3a
 800610e:	2202      	movs	r2, #2
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f9da 	bl	80064ca <SCSI_SenseCode>
    return -1;
 8006116:	f04f 33ff 	mov.w	r3, #4294967295
 800611a:	e074      	b.n	8006206 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	330a      	adds	r3, #10
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	330b      	adds	r3, #11
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800612c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	330c      	adds	r3, #12
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006136:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	320d      	adds	r2, #13
 800613c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800613e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006144:	2300      	movs	r3, #0
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e007      	b.n	800615a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800614a:	7ffb      	ldrb	r3, [r7, #31]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4413      	add	r3, r2
 8006150:	2200      	movs	r2, #0
 8006152:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006154:	7ffb      	ldrb	r3, [r7, #31]
 8006156:	3301      	adds	r3, #1
 8006158:	77fb      	strb	r3, [r7, #31]
 800615a:	7ffa      	ldrb	r2, [r7, #31]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	429a      	cmp	r2, r3
 8006162:	d3f2      	bcc.n	800614a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800616a:	3b01      	subs	r3, #1
 800616c:	0e1b      	lsrs	r3, r3, #24
 800616e:	b2da      	uxtb	r2, r3
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800617a:	3b01      	subs	r3, #1
 800617c:	0c1b      	lsrs	r3, r3, #16
 800617e:	b2da      	uxtb	r2, r3
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800618a:	3b01      	subs	r3, #1
 800618c:	0a1b      	lsrs	r3, r3, #8
 800618e:	b2da      	uxtb	r2, r3
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800619a:	b2db      	uxtb	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80061aa:	161b      	asrs	r3, r3, #24
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80061b8:	141b      	asrs	r3, r3, #16
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	330a      	adds	r3, #10
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	330b      	adds	r3, #11
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80061ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	330c      	adds	r3, #12
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80061f6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	320d      	adds	r2, #13
 80061fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80061fe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	60da      	str	r2, [r3, #12]

  return 0;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b088      	sub	sp, #32
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	460b      	mov	r3, r1
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	32b0      	adds	r2, #176	; 0xb0
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d102      	bne.n	8006238 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	e061      	b.n	80062fc <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	33b0      	adds	r3, #176	; 0xb0
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f107 0214 	add.w	r2, r7, #20
 800624e:	f107 0110 	add.w	r1, r7, #16
 8006252:	7af8      	ldrb	r0, [r7, #11]
 8006254:	4798      	blx	r3
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800625a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <SCSI_ReadFormatCapacity+0x5e>
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006268:	2b02      	cmp	r3, #2
 800626a:	d108      	bne.n	800627e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800626c:	7af9      	ldrb	r1, [r7, #11]
 800626e:	233a      	movs	r3, #58	; 0x3a
 8006270:	2202      	movs	r2, #2
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f929 	bl	80064ca <SCSI_SenseCode>
    return -1;
 8006278:	f04f 33ff 	mov.w	r3, #4294967295
 800627c:	e03e      	b.n	80062fc <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800627e:	2300      	movs	r3, #0
 8006280:	83fb      	strh	r3, [r7, #30]
 8006282:	e007      	b.n	8006294 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8006284:	8bfb      	ldrh	r3, [r7, #30]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4413      	add	r3, r2
 800628a:	2200      	movs	r2, #0
 800628c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800628e:	8bfb      	ldrh	r3, [r7, #30]
 8006290:	3301      	adds	r3, #1
 8006292:	83fb      	strh	r3, [r7, #30]
 8006294:	8bfb      	ldrh	r3, [r7, #30]
 8006296:	2b0b      	cmp	r3, #11
 8006298:	d9f4      	bls.n	8006284 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2208      	movs	r2, #8
 800629e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	0e1b      	lsrs	r3, r3, #24
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	2202      	movs	r2, #2
 80062d4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80062d6:	8abb      	ldrh	r3, [r7, #20]
 80062d8:	141b      	asrs	r3, r3, #16
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80062e0:	8abb      	ldrh	r3, [r7, #20]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80062ec:	8abb      	ldrh	r3, [r7, #20]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	220c      	movs	r2, #12
 80062f8:	60da      	str	r2, [r3, #12]

  return 0;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	460b      	mov	r3, r1
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	32b0      	adds	r2, #176	; 0xb0
 800631c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006320:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8006322:	2317      	movs	r3, #23
 8006324:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800632c:	f04f 33ff 	mov.w	r3, #4294967295
 8006330:	e011      	b.n	8006356 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	b29b      	uxth	r3, r3
 800633a:	8afa      	ldrh	r2, [r7, #22]
 800633c:	429a      	cmp	r2, r3
 800633e:	d303      	bcc.n	8006348 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8006348:	8afb      	ldrh	r3, [r7, #22]
 800634a:	461a      	mov	r2, r3
 800634c:	4904      	ldr	r1, [pc, #16]	; (8006360 <SCSI_ModeSense6+0x5c>)
 800634e:	6938      	ldr	r0, [r7, #16]
 8006350:	f000 fe28 	bl	8006fa4 <SCSI_UpdateBotData>

  return 0;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20032080 	.word	0x20032080

08006364 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	460b      	mov	r3, r1
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	32b0      	adds	r2, #176	; 0xb0
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8006382:	231b      	movs	r3, #27
 8006384:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800638c:	f04f 33ff 	mov.w	r3, #4294967295
 8006390:	e011      	b.n	80063b6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3308      	adds	r3, #8
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	8afa      	ldrh	r2, [r7, #22]
 800639c:	429a      	cmp	r2, r3
 800639e:	d303      	bcc.n	80063a8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3308      	adds	r3, #8
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80063a8:	8afb      	ldrh	r3, [r7, #22]
 80063aa:	461a      	mov	r2, r3
 80063ac:	4904      	ldr	r1, [pc, #16]	; (80063c0 <SCSI_ModeSense10+0x5c>)
 80063ae:	6938      	ldr	r0, [r7, #16]
 80063b0:	f000 fdf8 	bl	8006fa4 <SCSI_UpdateBotData>

  return 0;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20032098 	.word	0x20032098

080063c4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	460b      	mov	r3, r1
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	32b0      	adds	r2, #176	; 0xb0
 80063dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <SCSI_RequestSense+0x2a>
  {
    return -1;
 80063e8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ec:	e069      	b.n	80064c2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80063fe:	2320      	movs	r3, #32
 8006400:	2205      	movs	r2, #5
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f861 	bl	80064ca <SCSI_SenseCode>
    return -1;
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	e059      	b.n	80064c2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]
 8006412:	e007      	b.n	8006424 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	2200      	movs	r2, #0
 800641c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	3301      	adds	r3, #1
 8006422:	75fb      	strb	r3, [r7, #23]
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b11      	cmp	r3, #17
 8006428:	d9f4      	bls.n	8006414 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2270      	movs	r2, #112	; 0x70
 800642e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	220c      	movs	r2, #12
 8006434:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006442:	429a      	cmp	r2, r3
 8006444:	d02e      	beq.n	80064a4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800644c:	461a      	mov	r2, r3
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3248      	adds	r2, #72	; 0x48
 8006452:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	3348      	adds	r3, #72	; 0x48
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4413      	add	r3, r2
 8006468:	791a      	ldrb	r2, [r3, #4]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	3348      	adds	r3, #72	; 0x48
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4413      	add	r3, r2
 800647c:	795a      	ldrb	r2, [r3, #5]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006488:	3301      	adds	r3, #1
 800648a:	b2da      	uxtb	r2, r3
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006498:	2b04      	cmp	r3, #4
 800649a:	d103      	bne.n	80064a4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2212      	movs	r2, #18
 80064a8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3304      	adds	r3, #4
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b12      	cmp	r3, #18
 80064b2:	d805      	bhi.n	80064c0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3304      	adds	r3, #4
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	4608      	mov	r0, r1
 80064d4:	4611      	mov	r1, r2
 80064d6:	461a      	mov	r2, r3
 80064d8:	4603      	mov	r3, r0
 80064da:	70fb      	strb	r3, [r7, #3]
 80064dc:	460b      	mov	r3, r1
 80064de:	70bb      	strb	r3, [r7, #2]
 80064e0:	4613      	mov	r3, r2
 80064e2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32b0      	adds	r2, #176	; 0xb0
 80064ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d02c      	beq.n	8006554 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006500:	461a      	mov	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3248      	adds	r2, #72	; 0x48
 8006506:	78b9      	ldrb	r1, [r7, #2]
 8006508:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	3348      	adds	r3, #72	; 0x48
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4413      	add	r3, r2
 800651a:	787a      	ldrb	r2, [r7, #1]
 800651c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	3348      	adds	r3, #72	; 0x48
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	2200      	movs	r2, #0
 800652e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006536:	3301      	adds	r3, #1
 8006538:	b2da      	uxtb	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006546:	2b04      	cmp	r3, #4
 8006548:	d105      	bne.n	8006556 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8006552:	e000      	b.n	8006556 <SCSI_SenseCode+0x8c>
    return;
 8006554:	bf00      	nop
  }
}
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	460b      	mov	r3, r1
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	32b0      	adds	r2, #176	; 0xb0
 8006578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8006584:	f04f 33ff 	mov.w	r3, #4294967295
 8006588:	e03b      	b.n	8006602 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10f      	bne.n	80065b4 <SCSI_StartStopUnit+0x54>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d108      	bne.n	80065b4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80065a2:	7af9      	ldrb	r1, [r7, #11]
 80065a4:	2324      	movs	r3, #36	; 0x24
 80065a6:	2205      	movs	r2, #5
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff ff8e 	bl	80064ca <SCSI_SenseCode>

    return -1;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	e026      	b.n	8006602 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3304      	adds	r3, #4
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d104      	bne.n	80065cc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80065ca:	e016      	b.n	80065fa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d104      	bne.n	80065e4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2202      	movs	r2, #2
 80065de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80065e2:	e00a      	b.n	80065fa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d103      	bne.n	80065fa <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	60da      	str	r2, [r3, #12]

  return 0;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800660a:	b480      	push	{r7}
 800660c:	b087      	sub	sp, #28
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	460b      	mov	r3, r1
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	32b0      	adds	r2, #176	; 0xb0
 8006622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006626:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	e011      	b.n	8006658 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8006646:	e003      	b.n	8006650 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	60da      	str	r2, [r3, #12]

  return 0;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	460b      	mov	r3, r1
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	32b0      	adds	r2, #176	; 0xb0
 800667c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006680:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <SCSI_Read10+0x2a>
  {
    return -1;
 8006688:	f04f 33ff 	mov.w	r3, #4294967295
 800668c:	e090      	b.n	80067b0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	7a1b      	ldrb	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f040 8082 	bne.w	800679c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800669e:	b25b      	sxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db0a      	blt.n	80066ba <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80066aa:	2320      	movs	r3, #32
 80066ac:	2205      	movs	r2, #5
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff ff0b 	bl	80064ca <SCSI_SenseCode>
      return -1;
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295
 80066b8:	e07a      	b.n	80067b0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d108      	bne.n	80066d6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80066c4:	7af9      	ldrb	r1, [r7, #11]
 80066c6:	233a      	movs	r3, #58	; 0x3a
 80066c8:	2202      	movs	r2, #2
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff fefd 	bl	80064ca <SCSI_SenseCode>

      return -1;
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	e06c      	b.n	80067b0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	33b0      	adds	r3, #176	; 0xb0
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	7afa      	ldrb	r2, [r7, #11]
 80066ea:	4610      	mov	r0, r2
 80066ec:	4798      	blx	r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80066f4:	7af9      	ldrb	r1, [r7, #11]
 80066f6:	233a      	movs	r3, #58	; 0x3a
 80066f8:	2202      	movs	r2, #2
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff fee5 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	e054      	b.n	80067b0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3302      	adds	r3, #2
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3303      	adds	r3, #3
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006716:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3304      	adds	r3, #4
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006720:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	3205      	adds	r2, #5
 8006726:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006728:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3307      	adds	r3, #7
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	3208      	adds	r2, #8
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	431a      	orrs	r2, r3
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006752:	7af9      	ldrb	r1, [r7, #11]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fadc 	bl	8006d12 <SCSI_CheckAddressRange>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	da02      	bge.n	8006766 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	e024      	b.n	80067b0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	429a      	cmp	r2, r3
 800677e:	d00a      	beq.n	8006796 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006786:	2320      	movs	r3, #32
 8006788:	2205      	movs	r2, #5
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff fe9d 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006790:	f04f 33ff 	mov.w	r3, #4294967295
 8006794:	e00c      	b.n	80067b0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2202      	movs	r2, #2
 800679a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fadf 	bl	8006d6c <SCSI_ProcessRead>
 80067ae:	4603      	mov	r3, r0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	460b      	mov	r3, r1
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	32b0      	adds	r2, #176	; 0xb0
 80067d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <SCSI_Read12+0x2a>
  {
    return -1;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	e09a      	b.n	8006918 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	7a1b      	ldrb	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f040 808c 	bne.w	8006904 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80067f2:	b25b      	sxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	db0a      	blt.n	800680e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80067fe:	2320      	movs	r3, #32
 8006800:	2205      	movs	r2, #5
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff fe61 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006808:	f04f 33ff 	mov.w	r3, #4294967295
 800680c:	e084      	b.n	8006918 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006814:	2b02      	cmp	r3, #2
 8006816:	d108      	bne.n	800682a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006818:	7af9      	ldrb	r1, [r7, #11]
 800681a:	233a      	movs	r3, #58	; 0x3a
 800681c:	2202      	movs	r2, #2
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff fe53 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	e076      	b.n	8006918 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	33b0      	adds	r3, #176	; 0xb0
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	7afa      	ldrb	r2, [r7, #11]
 800683e:	4610      	mov	r0, r2
 8006840:	4798      	blx	r3
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006848:	7af9      	ldrb	r1, [r7, #11]
 800684a:	233a      	movs	r3, #58	; 0x3a
 800684c:	2202      	movs	r2, #2
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7ff fe3b 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006854:	f04f 33ff 	mov.w	r3, #4294967295
 8006858:	e05e      	b.n	8006918 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3302      	adds	r3, #2
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3303      	adds	r3, #3
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800686a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3304      	adds	r3, #4
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006874:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	3205      	adds	r2, #5
 800687a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800687c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3306      	adds	r3, #6
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3307      	adds	r3, #7
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006894:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3308      	adds	r3, #8
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800689e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	3209      	adds	r2, #9
 80068a4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80068a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80068ba:	7af9      	ldrb	r1, [r7, #11]
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fa28 	bl	8006d12 <SCSI_CheckAddressRange>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	da02      	bge.n	80068ce <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80068c8:	f04f 33ff 	mov.w	r3, #4294967295
 80068cc:	e024      	b.n	8006918 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80068da:	6979      	ldr	r1, [r7, #20]
 80068dc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d00a      	beq.n	80068fe <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80068ee:	2320      	movs	r3, #32
 80068f0:	2205      	movs	r2, #5
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff fde9 	bl	80064ca <SCSI_SenseCode>
      return -1;
 80068f8:	f04f 33ff 	mov.w	r3, #4294967295
 80068fc:	e00c      	b.n	8006918 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2202      	movs	r2, #2
 8006902:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	4619      	mov	r1, r3
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fa2b 	bl	8006d6c <SCSI_ProcessRead>
 8006916:	4603      	mov	r3, r0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	460b      	mov	r3, r1
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	32b0      	adds	r2, #176	; 0xb0
 8006938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d102      	bne.n	800694a <SCSI_Write10+0x2a>
  {
    return -1;
 8006944:	f04f 33ff 	mov.w	r3, #4294967295
 8006948:	e0ba      	b.n	8006ac0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	7a1b      	ldrb	r3, [r3, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	f040 80b0 	bne.w	8006ab4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10a      	bne.n	8006974 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006964:	2320      	movs	r3, #32
 8006966:	2205      	movs	r2, #5
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff fdae 	bl	80064ca <SCSI_SenseCode>
      return -1;
 800696e:	f04f 33ff 	mov.w	r3, #4294967295
 8006972:	e0a5      	b.n	8006ac0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800697a:	b25b      	sxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	da0a      	bge.n	8006996 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006986:	2320      	movs	r3, #32
 8006988:	2205      	movs	r2, #5
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fd9d 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
 8006994:	e094      	b.n	8006ac0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	33b0      	adds	r3, #176	; 0xb0
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	7afa      	ldrb	r2, [r7, #11]
 80069aa:	4610      	mov	r0, r2
 80069ac:	4798      	blx	r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80069b4:	7af9      	ldrb	r1, [r7, #11]
 80069b6:	233a      	movs	r3, #58	; 0x3a
 80069b8:	2202      	movs	r2, #2
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff fd85 	bl	80064ca <SCSI_SenseCode>
      return -1;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	e07c      	b.n	8006ac0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	33b0      	adds	r3, #176	; 0xb0
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	7afa      	ldrb	r2, [r7, #11]
 80069da:	4610      	mov	r0, r2
 80069dc:	4798      	blx	r3
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80069e4:	7af9      	ldrb	r1, [r7, #11]
 80069e6:	2327      	movs	r3, #39	; 0x27
 80069e8:	2202      	movs	r2, #2
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7ff fd6d 	bl	80064ca <SCSI_SenseCode>
      return -1;
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295
 80069f4:	e064      	b.n	8006ac0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3302      	adds	r3, #2
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3303      	adds	r3, #3
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006a06:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006a10:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	3205      	adds	r2, #5
 8006a16:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006a18:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3307      	adds	r3, #7
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	3208      	adds	r2, #8
 8006a2c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006a42:	7af9      	ldrb	r1, [r7, #11]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f964 	bl	8006d12 <SCSI_CheckAddressRange>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	da02      	bge.n	8006a56 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
 8006a54:	e034      	b.n	8006ac0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d00a      	beq.n	8006a8a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006a7a:	2320      	movs	r3, #32
 8006a7c:	2205      	movs	r2, #5
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff fd23 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295
 8006a88:	e01a      	b.n	8006ac0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a90:	bf28      	it	cs
 8006a92:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006a96:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006a9e:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <SCSI_Write10+0x1a8>)
 8006aa0:	7819      	ldrb	r1, [r3, #0]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f103 0210 	add.w	r2, r3, #16
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f002 fa49 	bl	8008f42 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e005      	b.n	8006ac0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8006ab4:	7afb      	ldrb	r3, [r7, #11]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f9dd 	bl	8006e78 <SCSI_ProcessWrite>
 8006abe:	4603      	mov	r3, r0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	2003206f 	.word	0x2003206f

08006acc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	32b0      	adds	r2, #176	; 0xb0
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <SCSI_Write12+0x2a>
  {
    return -1;
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295
 8006af4:	e0ca      	b.n	8006c8c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	7a1b      	ldrb	r3, [r3, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 80c0 	bne.w	8006c80 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006b10:	2320      	movs	r3, #32
 8006b12:	2205      	movs	r2, #5
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fcd8 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1e:	e0b5      	b.n	8006c8c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006b26:	b25b      	sxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da0a      	bge.n	8006b42 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006b32:	2320      	movs	r3, #32
 8006b34:	2205      	movs	r2, #5
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fcc7 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b40:	e0a4      	b.n	8006c8c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	33b0      	adds	r3, #176	; 0xb0
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	7afa      	ldrb	r2, [r7, #11]
 8006b56:	4610      	mov	r0, r2
 8006b58:	4798      	blx	r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006b60:	7af9      	ldrb	r1, [r7, #11]
 8006b62:	233a      	movs	r3, #58	; 0x3a
 8006b64:	2202      	movs	r2, #2
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fcaf 	bl	80064ca <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2205      	movs	r2, #5
 8006b70:	721a      	strb	r2, [r3, #8]
      return -1;
 8006b72:	f04f 33ff 	mov.w	r3, #4294967295
 8006b76:	e089      	b.n	8006c8c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	33b0      	adds	r3, #176	; 0xb0
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	7afa      	ldrb	r2, [r7, #11]
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4798      	blx	r3
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006b96:	7af9      	ldrb	r1, [r7, #11]
 8006b98:	2327      	movs	r3, #39	; 0x27
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff fc94 	bl	80064ca <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2205      	movs	r2, #5
 8006ba6:	721a      	strb	r2, [r3, #8]
      return -1;
 8006ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bac:	e06e      	b.n	8006c8c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3303      	adds	r3, #3
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006bbe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006bc8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	3205      	adds	r2, #5
 8006bce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006bd0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3306      	adds	r3, #6
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3307      	adds	r3, #7
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006be8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3308      	adds	r3, #8
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006bf2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	3209      	adds	r2, #9
 8006bf8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006bfa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006c0e:	7af9      	ldrb	r1, [r7, #11]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 f87e 	bl	8006d12 <SCSI_CheckAddressRange>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	da02      	bge.n	8006c22 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	e034      	b.n	8006c8c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006c2e:	fb02 f303 	mul.w	r3, r2, r3
 8006c32:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d00a      	beq.n	8006c56 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006c46:	2320      	movs	r3, #32
 8006c48:	2205      	movs	r2, #5
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff fc3d 	bl	80064ca <SCSI_SenseCode>
      return -1;
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295
 8006c54:	e01a      	b.n	8006c8c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c5c:	bf28      	it	cs
 8006c5e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006c62:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2201      	movs	r2, #1
 8006c68:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <SCSI_Write12+0x1c8>)
 8006c6c:	7819      	ldrb	r1, [r3, #0]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f103 0210 	add.w	r2, r3, #16
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f002 f963 	bl	8008f42 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e005      	b.n	8006c8c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	4619      	mov	r1, r3
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f8f7 	bl	8006e78 <SCSI_ProcessWrite>
 8006c8a:	4603      	mov	r3, r0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	2003206f 	.word	0x2003206f

08006c98 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	32b0      	adds	r2, #176	; 0xb0
 8006cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <SCSI_Verify10+0x2a>
  {
    return -1;
 8006cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc0:	e023      	b.n	8006d0a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006cd0:	7af9      	ldrb	r1, [r7, #11]
 8006cd2:	2324      	movs	r3, #36	; 0x24
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f7ff fbf7 	bl	80064ca <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce0:	e013      	b.n	8006d0a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006cee:	7af9      	ldrb	r1, [r7, #11]
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f80e 	bl	8006d12 <SCSI_CheckAddressRange>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	da02      	bge.n	8006d02 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8006cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006d00:	e003      	b.n	8006d0a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2200      	movs	r2, #0
 8006d06:	60da      	str	r2, [r3, #12]

  return 0;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	32b0      	adds	r2, #176	; 0xb0
 8006d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d30:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8006d38:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3c:	e011      	b.n	8006d62 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	441a      	add	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d908      	bls.n	8006d60 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006d4e:	7af9      	ldrb	r1, [r7, #11]
 8006d50:	2321      	movs	r3, #33	; 0x21
 8006d52:	2205      	movs	r2, #5
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff fbb8 	bl	80064ca <SCSI_SenseCode>
    return -1;
 8006d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5e:	e000      	b.n	8006d62 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006d6c:	b590      	push	{r4, r7, lr}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	32b0      	adds	r2, #176	; 0xb0
 8006d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d86:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8006d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d92:	e06a      	b.n	8006e6a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006da0:	fb02 f303 	mul.w	r3, r2, r3
 8006da4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dac:	bf28      	it	cs
 8006dae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006db2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	33b0      	adds	r3, #176	; 0xb0
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	691c      	ldr	r4, [r3, #16]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f103 0110 	add.w	r1, r3, #16
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006dd8:	4618      	mov	r0, r3
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	78f8      	ldrb	r0, [r7, #3]
 8006de4:	47a0      	blx	r4
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	da08      	bge.n	8006dfe <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006dec:	78f9      	ldrb	r1, [r7, #3]
 8006dee:	2311      	movs	r3, #17
 8006df0:	2204      	movs	r2, #4
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff fb69 	bl	80064ca <SCSI_SenseCode>
    return -1;
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfc:	e035      	b.n	8006e6a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8006dfe:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <SCSI_ProcessRead+0x108>)
 8006e00:	7819      	ldrb	r1, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f103 0210 	add.w	r2, r3, #16
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f002 f878 	bl	8008f00 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e24:	441a      	add	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006e38:	4619      	mov	r1, r3
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e40:	1ad2      	subs	r2, r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	1ad2      	subs	r2, r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2203      	movs	r2, #3
 8006e66:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd90      	pop	{r4, r7, pc}
 8006e72:	bf00      	nop
 8006e74:	2003206e 	.word	0x2003206e

08006e78 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006e78:	b590      	push	{r4, r7, lr}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	32b0      	adds	r2, #176	; 0xb0
 8006e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e92:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d102      	bne.n	8006ea0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8006e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9e:	e07a      	b.n	8006f96 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006eac:	fb02 f303 	mul.w	r3, r2, r3
 8006eb0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb8:	bf28      	it	cs
 8006eba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006ebe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	33b0      	adds	r3, #176	; 0xb0
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	695c      	ldr	r4, [r3, #20]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f103 0110 	add.w	r1, r3, #16
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	78f8      	ldrb	r0, [r7, #3]
 8006ef0:	47a0      	blx	r4
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	da08      	bge.n	8006f0a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006ef8:	78f9      	ldrb	r1, [r7, #3]
 8006efa:	2303      	movs	r3, #3
 8006efc:	2204      	movs	r2, #4
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff fae3 	bl	80064ca <SCSI_SenseCode>
    return -1;
 8006f04:	f04f 33ff 	mov.w	r3, #4294967295
 8006f08:	e045      	b.n	8006f96 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006f16:	4619      	mov	r1, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f1e:	441a      	add	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006f32:	4619      	mov	r1, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fe fd14 	bl	800598c <MSC_BOT_SendCSW>
 8006f64:	e016      	b.n	8006f94 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006f72:	fb02 f303 	mul.w	r3, r2, r3
 8006f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7a:	bf28      	it	cs
 8006f7c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006f80:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006f82:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <SCSI_ProcessWrite+0x128>)
 8006f84:	7819      	ldrb	r1, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f103 0210 	add.w	r2, r3, #16
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 ffd7 	bl	8008f42 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd90      	pop	{r4, r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2003206f 	.word	0x2003206f

08006fa4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8006fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc0:	e013      	b.n	8006fea <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8006fc2:	8afa      	ldrh	r2, [r7, #22]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006fc8:	e00b      	b.n	8006fe2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8006fca:	8afb      	ldrh	r3, [r7, #22]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8006fd0:	8afb      	ldrh	r3, [r7, #22]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	8afb      	ldrh	r3, [r7, #22]
 8006fd8:	7811      	ldrb	r1, [r2, #0]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	460a      	mov	r2, r1
 8006fe0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8006fe2:	8afb      	ldrh	r3, [r7, #22]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1f0      	bne.n	8006fca <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b086      	sub	sp, #24
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	4613      	mov	r3, r2
 8007002:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800700a:	2303      	movs	r3, #3
 800700c:	e01f      	b.n	800704e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	79fa      	ldrb	r2, [r7, #7]
 8007040:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f001 fe08 	bl	8008c58 <USBD_LL_Init>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800704c:	7dfb      	ldrb	r3, [r7, #23]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800706a:	2303      	movs	r3, #3
 800706c:	e025      	b.n	80070ba <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	32ae      	adds	r2, #174	; 0xae
 8007080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00f      	beq.n	80070aa <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	32ae      	adds	r2, #174	; 0xae
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	f107 020e 	add.w	r2, r7, #14
 800709e:	4610      	mov	r0, r2
 80070a0:	4798      	blx	r3
 80070a2:	4602      	mov	r2, r0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 fe10 	bl	8008cf0 <USBD_LL_Start>
 80070d0:	4603      	mov	r3, r0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	4611      	mov	r1, r2
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
 800711a:	4603      	mov	r3, r0
 800711c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	78fa      	ldrb	r2, [r7, #3]
 8007142:	4611      	mov	r1, r2
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	4798      	blx	r3
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800714e:	2303      	movs	r3, #3
 8007150:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f001 f933 	bl	80083da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007190:	f003 031f 	and.w	r3, r3, #31
 8007194:	2b02      	cmp	r3, #2
 8007196:	d01a      	beq.n	80071ce <USBD_LL_SetupStage+0x72>
 8007198:	2b02      	cmp	r3, #2
 800719a:	d822      	bhi.n	80071e2 <USBD_LL_SetupStage+0x86>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <USBD_LL_SetupStage+0x4a>
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d00a      	beq.n	80071ba <USBD_LL_SetupStage+0x5e>
 80071a4:	e01d      	b.n	80071e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fb60 	bl	8007874 <USBD_StdDevReq>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]
      break;
 80071b8:	e020      	b.n	80071fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fbc8 	bl	8007958 <USBD_StdItfReq>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	e016      	b.n	80071fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fc2a 	bl	8007a30 <USBD_StdEPReq>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]
      break;
 80071e0:	e00c      	b.n	80071fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fdfc 	bl	8008dee <USBD_LL_StallEP>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
      break;
 80071fa:	bf00      	nop
  }

  return ret;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	460b      	mov	r3, r1
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d16e      	bne.n	80072fc <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007224:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800722c:	2b03      	cmp	r3, #3
 800722e:	f040 8098 	bne.w	8007362 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	429a      	cmp	r2, r3
 800723c:	d913      	bls.n	8007266 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	4293      	cmp	r3, r2
 8007256:	bf28      	it	cs
 8007258:	4613      	movcs	r3, r2
 800725a:	461a      	mov	r2, r3
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f001 f992 	bl	8008588 <USBD_CtlContinueRx>
 8007264:	e07d      	b.n	8007362 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	2b02      	cmp	r3, #2
 8007272:	d014      	beq.n	800729e <USBD_LL_DataOutStage+0x98>
 8007274:	2b02      	cmp	r3, #2
 8007276:	d81d      	bhi.n	80072b4 <USBD_LL_DataOutStage+0xae>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <USBD_LL_DataOutStage+0x7c>
 800727c:	2b01      	cmp	r3, #1
 800727e:	d003      	beq.n	8007288 <USBD_LL_DataOutStage+0x82>
 8007280:	e018      	b.n	80072b4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	75bb      	strb	r3, [r7, #22]
            break;
 8007286:	e018      	b.n	80072ba <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800728e:	b2db      	uxtb	r3, r3
 8007290:	4619      	mov	r1, r3
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fa5e 	bl	8007754 <USBD_CoreFindIF>
 8007298:	4603      	mov	r3, r0
 800729a:	75bb      	strb	r3, [r7, #22]
            break;
 800729c:	e00d      	b.n	80072ba <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fa60 	bl	800776e <USBD_CoreFindEP>
 80072ae:	4603      	mov	r3, r0
 80072b0:	75bb      	strb	r3, [r7, #22]
            break;
 80072b2:	e002      	b.n	80072ba <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	75bb      	strb	r3, [r7, #22]
            break;
 80072b8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072ba:	7dbb      	ldrb	r3, [r7, #22]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d119      	bne.n	80072f4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d113      	bne.n	80072f4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072cc:	7dba      	ldrb	r2, [r7, #22]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	32ae      	adds	r2, #174	; 0xae
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072dc:	7dba      	ldrb	r2, [r7, #22]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072e4:	7dba      	ldrb	r2, [r7, #22]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	32ae      	adds	r2, #174	; 0xae
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f001 f958 	bl	80085aa <USBD_CtlSendStatus>
 80072fa:	e032      	b.n	8007362 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007302:	b2db      	uxtb	r3, r3
 8007304:	4619      	mov	r1, r3
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fa31 	bl	800776e <USBD_CoreFindEP>
 800730c:	4603      	mov	r3, r0
 800730e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007310:	7dbb      	ldrb	r3, [r7, #22]
 8007312:	2bff      	cmp	r3, #255	; 0xff
 8007314:	d025      	beq.n	8007362 <USBD_LL_DataOutStage+0x15c>
 8007316:	7dbb      	ldrb	r3, [r7, #22]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d122      	bne.n	8007362 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b03      	cmp	r3, #3
 8007326:	d117      	bne.n	8007358 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007328:	7dba      	ldrb	r2, [r7, #22]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	32ae      	adds	r2, #174	; 0xae
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00f      	beq.n	8007358 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007338:	7dba      	ldrb	r2, [r7, #22]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007340:	7dba      	ldrb	r2, [r7, #22]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	32ae      	adds	r2, #174	; 0xae
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	7afa      	ldrb	r2, [r7, #11]
 800734e:	4611      	mov	r1, r2
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	4798      	blx	r3
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	e000      	b.n	8007364 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	460b      	mov	r3, r1
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d16f      	bne.n	8007460 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3314      	adds	r3, #20
 8007384:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800738c:	2b02      	cmp	r3, #2
 800738e:	d15a      	bne.n	8007446 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d914      	bls.n	80073c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	1ad2      	subs	r2, r2, r3
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f001 f8d7 	bl	8008566 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f001 fdbf 	bl	8008f42 <USBD_LL_PrepareReceive>
 80073c4:	e03f      	b.n	8007446 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d11c      	bne.n	800740c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073da:	429a      	cmp	r2, r3
 80073dc:	d316      	bcc.n	800740c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d20f      	bcs.n	800740c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073ec:	2200      	movs	r2, #0
 80073ee:	2100      	movs	r1, #0
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f001 f8b8 	bl	8008566 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073fe:	2300      	movs	r3, #0
 8007400:	2200      	movs	r2, #0
 8007402:	2100      	movs	r1, #0
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f001 fd9c 	bl	8008f42 <USBD_LL_PrepareReceive>
 800740a:	e01c      	b.n	8007446 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b03      	cmp	r3, #3
 8007416:	d10f      	bne.n	8007438 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d009      	beq.n	8007438 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007438:	2180      	movs	r1, #128	; 0x80
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f001 fcd7 	bl	8008dee <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f001 f8c5 	bl	80085d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d03a      	beq.n	80074c6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff fe42 	bl	80070da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800745e:	e032      	b.n	80074c6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 f97f 	bl	800776e <USBD_CoreFindEP>
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2bff      	cmp	r3, #255	; 0xff
 8007478:	d025      	beq.n	80074c6 <USBD_LL_DataInStage+0x15a>
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d122      	bne.n	80074c6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b03      	cmp	r3, #3
 800748a:	d11c      	bne.n	80074c6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800748c:	7dfa      	ldrb	r2, [r7, #23]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	32ae      	adds	r2, #174	; 0xae
 8007492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d014      	beq.n	80074c6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800749c:	7dfa      	ldrb	r2, [r7, #23]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80074a4:	7dfa      	ldrb	r2, [r7, #23]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	32ae      	adds	r2, #174	; 0xae
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	7afa      	ldrb	r2, [r7, #11]
 80074b2:	4611      	mov	r1, r2
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	4798      	blx	r3
 80074b8:	4603      	mov	r3, r0
 80074ba:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074bc:	7dbb      	ldrb	r3, [r7, #22]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074c2:	7dbb      	ldrb	r3, [r7, #22]
 80074c4:	e000      	b.n	80074c8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d014      	beq.n	8007536 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00e      	beq.n	8007536 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6852      	ldr	r2, [r2, #4]
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	4611      	mov	r1, r2
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	2200      	movs	r2, #0
 800753a:	2100      	movs	r1, #0
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 fbf2 	bl	8008d26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2240      	movs	r2, #64	; 0x40
 800754e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007552:	2340      	movs	r3, #64	; 0x40
 8007554:	2200      	movs	r2, #0
 8007556:	2180      	movs	r1, #128	; 0x80
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fbe4 	bl	8008d26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	621a      	str	r2, [r3, #32]

  return ret;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2204      	movs	r2, #4
 80075ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d106      	bne.n	80075e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b03      	cmp	r3, #3
 8007602:	d110      	bne.n	8007626 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	32ae      	adds	r2, #174	; 0xae
 8007646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	e01c      	b.n	800768c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b03      	cmp	r3, #3
 800765c:	d115      	bne.n	800768a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	32ae      	adds	r2, #174	; 0xae
 8007668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	32ae      	adds	r2, #174	; 0xae
 800767c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	78fa      	ldrb	r2, [r7, #3]
 8007684:	4611      	mov	r1, r2
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32ae      	adds	r2, #174	; 0xae
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e01c      	b.n	80076f0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d115      	bne.n	80076ee <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	32ae      	adds	r2, #174	; 0xae
 80076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	32ae      	adds	r2, #174	; 0xae
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	4611      	mov	r1, r2
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00e      	beq.n	800774a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6852      	ldr	r2, [r2, #4]
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	4611      	mov	r1, r2
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007746:	2303      	movs	r3, #3
 8007748:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007760:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800777a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	885b      	ldrh	r3, [r3, #2]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d920      	bls.n	80077f2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077b8:	e013      	b.n	80077e2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077ba:	f107 030a 	add.w	r3, r7, #10
 80077be:	4619      	mov	r1, r3
 80077c0:	6978      	ldr	r0, [r7, #20]
 80077c2:	f000 f81b 	bl	80077fc <USBD_GetNextDesc>
 80077c6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	2b05      	cmp	r3, #5
 80077ce:	d108      	bne.n	80077e2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	789b      	ldrb	r3, [r3, #2]
 80077d8:	78fa      	ldrb	r2, [r7, #3]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d008      	beq.n	80077f0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	885b      	ldrh	r3, [r3, #2]
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	897b      	ldrh	r3, [r7, #10]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d8e5      	bhi.n	80077ba <USBD_GetEpDesc+0x32>
 80077ee:	e000      	b.n	80077f2 <USBD_GetEpDesc+0x6a>
          break;
 80077f0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077f2:	693b      	ldr	r3, [r7, #16]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	881a      	ldrh	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	4413      	add	r3, r2
 8007816:	b29a      	uxth	r2, r3
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007828:	68fb      	ldr	r3, [r7, #12]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007836:	b480      	push	{r7}
 8007838:	b087      	sub	sp, #28
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	3301      	adds	r3, #1
 800784c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007854:	8a3b      	ldrh	r3, [r7, #16]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	b21a      	sxth	r2, r3
 800785a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800785e:	4313      	orrs	r3, r2
 8007860:	b21b      	sxth	r3, r3
 8007862:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007864:	89fb      	ldrh	r3, [r7, #14]
}
 8007866:	4618      	mov	r0, r3
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
	...

08007874 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d005      	beq.n	800789a <USBD_StdDevReq+0x26>
 800788e:	2b40      	cmp	r3, #64	; 0x40
 8007890:	d857      	bhi.n	8007942 <USBD_StdDevReq+0xce>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00f      	beq.n	80078b6 <USBD_StdDevReq+0x42>
 8007896:	2b20      	cmp	r3, #32
 8007898:	d153      	bne.n	8007942 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	32ae      	adds	r2, #174	; 0xae
 80078a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]
      break;
 80078b4:	e04a      	b.n	800794c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b09      	cmp	r3, #9
 80078bc:	d83b      	bhi.n	8007936 <USBD_StdDevReq+0xc2>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <USBD_StdDevReq+0x50>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	08007919 	.word	0x08007919
 80078c8:	0800792d 	.word	0x0800792d
 80078cc:	08007937 	.word	0x08007937
 80078d0:	08007923 	.word	0x08007923
 80078d4:	08007937 	.word	0x08007937
 80078d8:	080078f7 	.word	0x080078f7
 80078dc:	080078ed 	.word	0x080078ed
 80078e0:	08007937 	.word	0x08007937
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	08007901 	.word	0x08007901
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa3c 	bl	8007d6c <USBD_GetDescriptor>
          break;
 80078f4:	e024      	b.n	8007940 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fbcb 	bl	8008094 <USBD_SetAddress>
          break;
 80078fe:	e01f      	b.n	8007940 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fc0a 	bl	800811c <USBD_SetConfig>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
          break;
 800790c:	e018      	b.n	8007940 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fcad 	bl	8008270 <USBD_GetConfig>
          break;
 8007916:	e013      	b.n	8007940 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fcde 	bl	80082dc <USBD_GetStatus>
          break;
 8007920:	e00e      	b.n	8007940 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fd0d 	bl	8008344 <USBD_SetFeature>
          break;
 800792a:	e009      	b.n	8007940 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fd31 	bl	8008396 <USBD_ClrFeature>
          break;
 8007934:	e004      	b.n	8007940 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fd88 	bl	800844e <USBD_CtlError>
          break;
 800793e:	bf00      	nop
      }
      break;
 8007940:	e004      	b.n	800794c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fd82 	bl	800844e <USBD_CtlError>
      break;
 800794a:	bf00      	nop
  }

  return ret;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop

08007958 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d005      	beq.n	800797e <USBD_StdItfReq+0x26>
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d852      	bhi.n	8007a1c <USBD_StdItfReq+0xc4>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <USBD_StdItfReq+0x26>
 800797a:	2b20      	cmp	r3, #32
 800797c:	d14e      	bne.n	8007a1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007984:	b2db      	uxtb	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	2b02      	cmp	r3, #2
 800798a:	d840      	bhi.n	8007a0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	889b      	ldrh	r3, [r3, #4]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b01      	cmp	r3, #1
 8007994:	d836      	bhi.n	8007a04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	889b      	ldrh	r3, [r3, #4]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff fed8 	bl	8007754 <USBD_CoreFindIF>
 80079a4:	4603      	mov	r3, r0
 80079a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2bff      	cmp	r3, #255	; 0xff
 80079ac:	d01d      	beq.n	80079ea <USBD_StdItfReq+0x92>
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11a      	bne.n	80079ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079b4:	7bba      	ldrb	r2, [r7, #14]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	32ae      	adds	r2, #174	; 0xae
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00f      	beq.n	80079e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079c4:	7bba      	ldrb	r2, [r7, #14]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079cc:	7bba      	ldrb	r2, [r7, #14]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	32ae      	adds	r2, #174	; 0xae
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	4798      	blx	r3
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079e2:	e004      	b.n	80079ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079e4:	2303      	movs	r3, #3
 80079e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079e8:	e001      	b.n	80079ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079ea:	2303      	movs	r3, #3
 80079ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	88db      	ldrh	r3, [r3, #6]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d110      	bne.n	8007a18 <USBD_StdItfReq+0xc0>
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10d      	bne.n	8007a18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fdd4 	bl	80085aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a02:	e009      	b.n	8007a18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fd21 	bl	800844e <USBD_CtlError>
          break;
 8007a0c:	e004      	b.n	8007a18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fd1c 	bl	800844e <USBD_CtlError>
          break;
 8007a16:	e000      	b.n	8007a1a <USBD_StdItfReq+0xc2>
          break;
 8007a18:	bf00      	nop
      }
      break;
 8007a1a:	e004      	b.n	8007a26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fd15 	bl	800844e <USBD_CtlError>
      break;
 8007a24:	bf00      	nop
  }

  return ret;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	889b      	ldrh	r3, [r3, #4]
 8007a42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d007      	beq.n	8007a60 <USBD_StdEPReq+0x30>
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	f200 817f 	bhi.w	8007d54 <USBD_StdEPReq+0x324>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d02a      	beq.n	8007ab0 <USBD_StdEPReq+0x80>
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	f040 817a 	bne.w	8007d54 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff fe82 	bl	800776e <USBD_CoreFindEP>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a6e:	7b7b      	ldrb	r3, [r7, #13]
 8007a70:	2bff      	cmp	r3, #255	; 0xff
 8007a72:	f000 8174 	beq.w	8007d5e <USBD_StdEPReq+0x32e>
 8007a76:	7b7b      	ldrb	r3, [r7, #13]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 8170 	bne.w	8007d5e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a7e:	7b7a      	ldrb	r2, [r7, #13]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a86:	7b7a      	ldrb	r2, [r7, #13]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	32ae      	adds	r2, #174	; 0xae
 8007a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8163 	beq.w	8007d5e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a98:	7b7a      	ldrb	r2, [r7, #13]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32ae      	adds	r2, #174	; 0xae
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007aae:	e156      	b.n	8007d5e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	d008      	beq.n	8007aca <USBD_StdEPReq+0x9a>
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	f300 8145 	bgt.w	8007d48 <USBD_StdEPReq+0x318>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 809b 	beq.w	8007bfa <USBD_StdEPReq+0x1ca>
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d03c      	beq.n	8007b42 <USBD_StdEPReq+0x112>
 8007ac8:	e13e      	b.n	8007d48 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d002      	beq.n	8007adc <USBD_StdEPReq+0xac>
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d016      	beq.n	8007b08 <USBD_StdEPReq+0xd8>
 8007ada:	e02c      	b.n	8007b36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00d      	beq.n	8007afe <USBD_StdEPReq+0xce>
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	2b80      	cmp	r3, #128	; 0x80
 8007ae6:	d00a      	beq.n	8007afe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 f97e 	bl	8008dee <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007af2:	2180      	movs	r1, #128	; 0x80
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 f97a 	bl	8008dee <USBD_LL_StallEP>
 8007afa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007afc:	e020      	b.n	8007b40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fca4 	bl	800844e <USBD_CtlError>
              break;
 8007b06:	e01b      	b.n	8007b40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	885b      	ldrh	r3, [r3, #2]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10e      	bne.n	8007b2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00b      	beq.n	8007b2e <USBD_StdEPReq+0xfe>
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b80      	cmp	r3, #128	; 0x80
 8007b1a:	d008      	beq.n	8007b2e <USBD_StdEPReq+0xfe>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	88db      	ldrh	r3, [r3, #6]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 f960 	bl	8008dee <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fd3b 	bl	80085aa <USBD_CtlSendStatus>

              break;
 8007b34:	e004      	b.n	8007b40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fc88 	bl	800844e <USBD_CtlError>
              break;
 8007b3e:	bf00      	nop
          }
          break;
 8007b40:	e107      	b.n	8007d52 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d002      	beq.n	8007b54 <USBD_StdEPReq+0x124>
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d016      	beq.n	8007b80 <USBD_StdEPReq+0x150>
 8007b52:	e04b      	b.n	8007bec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00d      	beq.n	8007b76 <USBD_StdEPReq+0x146>
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b80      	cmp	r3, #128	; 0x80
 8007b5e:	d00a      	beq.n	8007b76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f942 	bl	8008dee <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b6a:	2180      	movs	r1, #128	; 0x80
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f93e 	bl	8008dee <USBD_LL_StallEP>
 8007b72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b74:	e040      	b.n	8007bf8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fc68 	bl	800844e <USBD_CtlError>
              break;
 8007b7e:	e03b      	b.n	8007bf8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	885b      	ldrh	r3, [r3, #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d136      	bne.n	8007bf6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 f948 	bl	8008e2c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fd04 	bl	80085aa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff fde1 	bl	800776e <USBD_CoreFindEP>
 8007bac:	4603      	mov	r3, r0
 8007bae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bb0:	7b7b      	ldrb	r3, [r7, #13]
 8007bb2:	2bff      	cmp	r3, #255	; 0xff
 8007bb4:	d01f      	beq.n	8007bf6 <USBD_StdEPReq+0x1c6>
 8007bb6:	7b7b      	ldrb	r3, [r7, #13]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d11c      	bne.n	8007bf6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bbc:	7b7a      	ldrb	r2, [r7, #13]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bc4:	7b7a      	ldrb	r2, [r7, #13]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	32ae      	adds	r2, #174	; 0xae
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d010      	beq.n	8007bf6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bd4:	7b7a      	ldrb	r2, [r7, #13]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	32ae      	adds	r2, #174	; 0xae
 8007bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	4798      	blx	r3
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bea:	e004      	b.n	8007bf6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fc2d 	bl	800844e <USBD_CtlError>
              break;
 8007bf4:	e000      	b.n	8007bf8 <USBD_StdEPReq+0x1c8>
              break;
 8007bf6:	bf00      	nop
          }
          break;
 8007bf8:	e0ab      	b.n	8007d52 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d002      	beq.n	8007c0c <USBD_StdEPReq+0x1dc>
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d032      	beq.n	8007c70 <USBD_StdEPReq+0x240>
 8007c0a:	e097      	b.n	8007d3c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <USBD_StdEPReq+0x1f2>
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b80      	cmp	r3, #128	; 0x80
 8007c16:	d004      	beq.n	8007c22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fc17 	bl	800844e <USBD_CtlError>
                break;
 8007c20:	e091      	b.n	8007d46 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	da0b      	bge.n	8007c42 <USBD_StdEPReq+0x212>
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	3310      	adds	r3, #16
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	3304      	adds	r3, #4
 8007c40:	e00b      	b.n	8007c5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	3304      	adds	r3, #4
 8007c5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2202      	movs	r2, #2
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fc61 	bl	8008530 <USBD_CtlSendData>
              break;
 8007c6e:	e06a      	b.n	8007d46 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da11      	bge.n	8007c9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	f003 020f 	and.w	r2, r3, #15
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	3324      	adds	r3, #36	; 0x24
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d117      	bne.n	8007cc2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fbda 	bl	800844e <USBD_CtlError>
                  break;
 8007c9a:	e054      	b.n	8007d46 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	f003 020f 	and.w	r2, r3, #15
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	440b      	add	r3, r1
 8007cae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fbc7 	bl	800844e <USBD_CtlError>
                  break;
 8007cc0:	e041      	b.n	8007d46 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da0b      	bge.n	8007ce2 <USBD_StdEPReq+0x2b2>
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	3310      	adds	r3, #16
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	4413      	add	r3, r2
 8007cde:	3304      	adds	r3, #4
 8007ce0:	e00b      	b.n	8007cfa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <USBD_StdEPReq+0x2d8>
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b80      	cmp	r3, #128	; 0x80
 8007d06:	d103      	bne.n	8007d10 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	e00e      	b.n	8007d2e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 f8a8 	bl	8008e6a <USBD_LL_IsStallEP>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2201      	movs	r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2202      	movs	r2, #2
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fbfb 	bl	8008530 <USBD_CtlSendData>
              break;
 8007d3a:	e004      	b.n	8007d46 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fb85 	bl	800844e <USBD_CtlError>
              break;
 8007d44:	bf00      	nop
          }
          break;
 8007d46:	e004      	b.n	8007d52 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fb7f 	bl	800844e <USBD_CtlError>
          break;
 8007d50:	bf00      	nop
      }
      break;
 8007d52:	e005      	b.n	8007d60 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fb79 	bl	800844e <USBD_CtlError>
      break;
 8007d5c:	e000      	b.n	8007d60 <USBD_StdEPReq+0x330>
      break;
 8007d5e:	bf00      	nop
  }

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	885b      	ldrh	r3, [r3, #2]
 8007d86:	0a1b      	lsrs	r3, r3, #8
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	2b0e      	cmp	r3, #14
 8007d8e:	f200 8152 	bhi.w	8008036 <USBD_GetDescriptor+0x2ca>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <USBD_GetDescriptor+0x2c>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007e09 	.word	0x08007e09
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007e61 	.word	0x08007e61
 8007da4:	08008037 	.word	0x08008037
 8007da8:	08008037 	.word	0x08008037
 8007dac:	08007fd7 	.word	0x08007fd7
 8007db0:	08008003 	.word	0x08008003
 8007db4:	08008037 	.word	0x08008037
 8007db8:	08008037 	.word	0x08008037
 8007dbc:	08008037 	.word	0x08008037
 8007dc0:	08008037 	.word	0x08008037
 8007dc4:	08008037 	.word	0x08008037
 8007dc8:	08008037 	.word	0x08008037
 8007dcc:	08008037 	.word	0x08008037
 8007dd0:	08007dd5 	.word	0x08007dd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7c12      	ldrb	r2, [r2, #16]
 8007dec:	f107 0108 	add.w	r1, r7, #8
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df6:	e126      	b.n	8008046 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fb27 	bl	800844e <USBD_CtlError>
        err++;
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	3301      	adds	r3, #1
 8007e04:	72fb      	strb	r3, [r7, #11]
      break;
 8007e06:	e11e      	b.n	8008046 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
      break;
 8007e1e:	e112      	b.n	8008046 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7c1b      	ldrb	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10d      	bne.n	8007e44 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	f107 0208 	add.w	r2, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	2202      	movs	r2, #2
 8007e40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e42:	e100      	b.n	8008046 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	f107 0208 	add.w	r2, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	701a      	strb	r2, [r3, #0]
      break;
 8007e5e:	e0f2      	b.n	8008046 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	f200 80ac 	bhi.w	8007fc4 <USBD_GetDescriptor+0x258>
 8007e6c:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <USBD_GetDescriptor+0x108>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007e8d 	.word	0x08007e8d
 8007e78:	08007ec1 	.word	0x08007ec1
 8007e7c:	08007ef5 	.word	0x08007ef5
 8007e80:	08007f29 	.word	0x08007f29
 8007e84:	08007f5d 	.word	0x08007f5d
 8007e88:	08007f91 	.word	0x08007f91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 0108 	add.w	r1, r7, #8
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eae:	e091      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 facb 	bl	800844e <USBD_CtlError>
            err++;
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ebe:	e089      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7c12      	ldrb	r2, [r2, #16]
 8007ed8:	f107 0108 	add.w	r1, r7, #8
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
 8007ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee2:	e077      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fab1 	bl	800844e <USBD_CtlError>
            err++;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef2:	e06f      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	7c12      	ldrb	r2, [r2, #16]
 8007f0c:	f107 0108 	add.w	r1, r7, #8
 8007f10:	4610      	mov	r0, r2
 8007f12:	4798      	blx	r3
 8007f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f16:	e05d      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa97 	bl	800844e <USBD_CtlError>
            err++;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	3301      	adds	r3, #1
 8007f24:	72fb      	strb	r3, [r7, #11]
          break;
 8007f26:	e055      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7c12      	ldrb	r2, [r2, #16]
 8007f40:	f107 0108 	add.w	r1, r7, #8
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f4a:	e043      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa7d 	bl	800844e <USBD_CtlError>
            err++;
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	3301      	adds	r3, #1
 8007f58:	72fb      	strb	r3, [r7, #11]
          break;
 8007f5a:	e03b      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	7c12      	ldrb	r2, [r2, #16]
 8007f74:	f107 0108 	add.w	r1, r7, #8
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
 8007f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f7e:	e029      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa63 	bl	800844e <USBD_CtlError>
            err++;
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f8e:	e021      	b.n	8007fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	7c12      	ldrb	r2, [r2, #16]
 8007fa8:	f107 0108 	add.w	r1, r7, #8
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fb2:	e00f      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa49 	bl	800844e <USBD_CtlError>
            err++;
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fc2:	e007      	b.n	8007fd4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa41 	bl	800844e <USBD_CtlError>
          err++;
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fd2:	bf00      	nop
      }
      break;
 8007fd4:	e037      	b.n	8008046 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	7c1b      	ldrb	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe6:	f107 0208 	add.w	r2, r7, #8
 8007fea:	4610      	mov	r0, r2
 8007fec:	4798      	blx	r3
 8007fee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ff0:	e029      	b.n	8008046 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fa2a 	bl	800844e <USBD_CtlError>
        err++;
 8007ffa:	7afb      	ldrb	r3, [r7, #11]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8008000:	e021      	b.n	8008046 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7c1b      	ldrb	r3, [r3, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10d      	bne.n	8008026 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	f107 0208 	add.w	r2, r7, #8
 8008016:	4610      	mov	r0, r2
 8008018:	4798      	blx	r3
 800801a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	2207      	movs	r2, #7
 8008022:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008024:	e00f      	b.n	8008046 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fa10 	bl	800844e <USBD_CtlError>
        err++;
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	3301      	adds	r3, #1
 8008032:	72fb      	strb	r3, [r7, #11]
      break;
 8008034:	e007      	b.n	8008046 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fa08 	bl	800844e <USBD_CtlError>
      err++;
 800803e:	7afb      	ldrb	r3, [r7, #11]
 8008040:	3301      	adds	r3, #1
 8008042:	72fb      	strb	r3, [r7, #11]
      break;
 8008044:	bf00      	nop
  }

  if (err != 0U)
 8008046:	7afb      	ldrb	r3, [r7, #11]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d11e      	bne.n	800808a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	88db      	ldrh	r3, [r3, #6]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d016      	beq.n	8008082 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008054:	893b      	ldrh	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00e      	beq.n	8008078 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	88da      	ldrh	r2, [r3, #6]
 800805e:	893b      	ldrh	r3, [r7, #8]
 8008060:	4293      	cmp	r3, r2
 8008062:	bf28      	it	cs
 8008064:	4613      	movcs	r3, r2
 8008066:	b29b      	uxth	r3, r3
 8008068:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800806a:	893b      	ldrh	r3, [r7, #8]
 800806c:	461a      	mov	r2, r3
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa5d 	bl	8008530 <USBD_CtlSendData>
 8008076:	e009      	b.n	800808c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f9e7 	bl	800844e <USBD_CtlError>
 8008080:	e004      	b.n	800808c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa91 	bl	80085aa <USBD_CtlSendStatus>
 8008088:	e000      	b.n	800808c <USBD_GetDescriptor+0x320>
    return;
 800808a:	bf00      	nop
  }
}
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop

08008094 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	889b      	ldrh	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d131      	bne.n	800810a <USBD_SetAddress+0x76>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	88db      	ldrh	r3, [r3, #6]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d12d      	bne.n	800810a <USBD_SetAddress+0x76>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	2b7f      	cmp	r3, #127	; 0x7f
 80080b4:	d829      	bhi.n	800810a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	885b      	ldrh	r3, [r3, #2]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d104      	bne.n	80080d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f9bc 	bl	800844e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d6:	e01d      	b.n	8008114 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	7bfa      	ldrb	r2, [r7, #15]
 80080dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 feec 	bl	8008ec2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa5d 	bl	80085aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d004      	beq.n	8008100 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2202      	movs	r2, #2
 80080fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fe:	e009      	b.n	8008114 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008108:	e004      	b.n	8008114 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f99e 	bl	800844e <USBD_CtlError>
  }
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	885b      	ldrh	r3, [r3, #2]
 800812e:	b2da      	uxtb	r2, r3
 8008130:	4b4e      	ldr	r3, [pc, #312]	; (800826c <USBD_SetConfig+0x150>)
 8008132:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008134:	4b4d      	ldr	r3, [pc, #308]	; (800826c <USBD_SetConfig+0x150>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d905      	bls.n	8008148 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f985 	bl	800844e <USBD_CtlError>
    return USBD_FAIL;
 8008144:	2303      	movs	r3, #3
 8008146:	e08c      	b.n	8008262 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d002      	beq.n	800815a <USBD_SetConfig+0x3e>
 8008154:	2b03      	cmp	r3, #3
 8008156:	d029      	beq.n	80081ac <USBD_SetConfig+0x90>
 8008158:	e075      	b.n	8008246 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800815a:	4b44      	ldr	r3, [pc, #272]	; (800826c <USBD_SetConfig+0x150>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d020      	beq.n	80081a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008162:	4b42      	ldr	r3, [pc, #264]	; (800826c <USBD_SetConfig+0x150>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800816c:	4b3f      	ldr	r3, [pc, #252]	; (800826c <USBD_SetConfig+0x150>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7fe ffbc 	bl	80070f0 <USBD_SetClassConfig>
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f962 	bl	800844e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2202      	movs	r2, #2
 800818e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008192:	e065      	b.n	8008260 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa08 	bl	80085aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2203      	movs	r2, #3
 800819e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081a2:	e05d      	b.n	8008260 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fa00 	bl	80085aa <USBD_CtlSendStatus>
      break;
 80081aa:	e059      	b.n	8008260 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081ac:	4b2f      	ldr	r3, [pc, #188]	; (800826c <USBD_SetConfig+0x150>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d112      	bne.n	80081da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081bc:	4b2b      	ldr	r3, [pc, #172]	; (800826c <USBD_SetConfig+0x150>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081c6:	4b29      	ldr	r3, [pc, #164]	; (800826c <USBD_SetConfig+0x150>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7fe ffab 	bl	8007128 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f9e9 	bl	80085aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081d8:	e042      	b.n	8008260 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081da:	4b24      	ldr	r3, [pc, #144]	; (800826c <USBD_SetConfig+0x150>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d02a      	beq.n	800823e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7fe ff99 	bl	8007128 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081f6:	4b1d      	ldr	r3, [pc, #116]	; (800826c <USBD_SetConfig+0x150>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008200:	4b1a      	ldr	r3, [pc, #104]	; (800826c <USBD_SetConfig+0x150>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7fe ff72 	bl	80070f0 <USBD_SetClassConfig>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00f      	beq.n	8008236 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f918 	bl	800844e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7fe ff7e 	bl	8007128 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008234:	e014      	b.n	8008260 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f9b7 	bl	80085aa <USBD_CtlSendStatus>
      break;
 800823c:	e010      	b.n	8008260 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f9b3 	bl	80085aa <USBD_CtlSendStatus>
      break;
 8008244:	e00c      	b.n	8008260 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f900 	bl	800844e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800824e:	4b07      	ldr	r3, [pc, #28]	; (800826c <USBD_SetConfig+0x150>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7fe ff67 	bl	8007128 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800825a:	2303      	movs	r3, #3
 800825c:	73fb      	strb	r3, [r7, #15]
      break;
 800825e:	bf00      	nop
  }

  return ret;
 8008260:	7bfb      	ldrb	r3, [r7, #15]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	200321a8 	.word	0x200321a8

08008270 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	88db      	ldrh	r3, [r3, #6]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d004      	beq.n	800828c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f8e2 	bl	800844e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800828a:	e023      	b.n	80082d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	dc02      	bgt.n	800829e <USBD_GetConfig+0x2e>
 8008298:	2b00      	cmp	r3, #0
 800829a:	dc03      	bgt.n	80082a4 <USBD_GetConfig+0x34>
 800829c:	e015      	b.n	80082ca <USBD_GetConfig+0x5a>
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d00b      	beq.n	80082ba <USBD_GetConfig+0x4a>
 80082a2:	e012      	b.n	80082ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3308      	adds	r3, #8
 80082ae:	2201      	movs	r2, #1
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f93c 	bl	8008530 <USBD_CtlSendData>
        break;
 80082b8:	e00c      	b.n	80082d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3304      	adds	r3, #4
 80082be:	2201      	movs	r2, #1
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f934 	bl	8008530 <USBD_CtlSendData>
        break;
 80082c8:	e004      	b.n	80082d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f8be 	bl	800844e <USBD_CtlError>
        break;
 80082d2:	bf00      	nop
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d81e      	bhi.n	8008332 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	88db      	ldrh	r3, [r3, #6]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d004      	beq.n	8008306 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f8a5 	bl	800844e <USBD_CtlError>
        break;
 8008304:	e01a      	b.n	800833c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008312:	2b00      	cmp	r3, #0
 8008314:	d005      	beq.n	8008322 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f043 0202 	orr.w	r2, r3, #2
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	330c      	adds	r3, #12
 8008326:	2202      	movs	r2, #2
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f900 	bl	8008530 <USBD_CtlSendData>
      break;
 8008330:	e004      	b.n	800833c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f88a 	bl	800844e <USBD_CtlError>
      break;
 800833a:	bf00      	nop
  }
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	885b      	ldrh	r3, [r3, #2]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d107      	bne.n	8008366 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f923 	bl	80085aa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008364:	e013      	b.n	800838e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d10b      	bne.n	8008386 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	889b      	ldrh	r3, [r3, #4]
 8008372:	0a1b      	lsrs	r3, r3, #8
 8008374:	b29b      	uxth	r3, r3
 8008376:	b2da      	uxtb	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f913 	bl	80085aa <USBD_CtlSendStatus>
}
 8008384:	e003      	b.n	800838e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f860 	bl	800844e <USBD_CtlError>
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d80b      	bhi.n	80083c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	885b      	ldrh	r3, [r3, #2]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d10c      	bne.n	80083d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f8f3 	bl	80085aa <USBD_CtlSendStatus>
      }
      break;
 80083c4:	e004      	b.n	80083d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f840 	bl	800844e <USBD_CtlError>
      break;
 80083ce:	e000      	b.n	80083d2 <USBD_ClrFeature+0x3c>
      break;
 80083d0:	bf00      	nop
  }
}
 80083d2:	bf00      	nop
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	781a      	ldrb	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	781a      	ldrb	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff fa16 	bl	8007836 <SWAPBYTE>
 800840a:	4603      	mov	r3, r0
 800840c:	461a      	mov	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fa09 	bl	8007836 <SWAPBYTE>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3301      	adds	r3, #1
 8008436:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f7ff f9fc 	bl	8007836 <SWAPBYTE>
 800843e:	4603      	mov	r3, r0
 8008440:	461a      	mov	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	80da      	strh	r2, [r3, #6]
}
 8008446:	bf00      	nop
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008458:	2180      	movs	r1, #128	; 0x80
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fcc7 	bl	8008dee <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008460:	2100      	movs	r1, #0
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fcc3 	bl	8008dee <USBD_LL_StallEP>
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d036      	beq.n	80084f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800848a:	6938      	ldr	r0, [r7, #16]
 800848c:	f000 f836 	bl	80084fc <USBD_GetLen>
 8008490:	4603      	mov	r3, r0
 8008492:	3301      	adds	r3, #1
 8008494:	b29b      	uxth	r3, r3
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	b29a      	uxth	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	4413      	add	r3, r2
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	7812      	ldrb	r2, [r2, #0]
 80084a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	3301      	adds	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	4413      	add	r3, r2
 80084b6:	2203      	movs	r2, #3
 80084b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	3301      	adds	r3, #1
 80084be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084c0:	e013      	b.n	80084ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	4413      	add	r3, r2
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	7812      	ldrb	r2, [r2, #0]
 80084cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	3301      	adds	r3, #1
 80084d2:	613b      	str	r3, [r7, #16]
    idx++;
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	3301      	adds	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	4413      	add	r3, r2
 80084e0:	2200      	movs	r2, #0
 80084e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	3301      	adds	r3, #1
 80084e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e7      	bne.n	80084c2 <USBD_GetString+0x52>
 80084f2:	e000      	b.n	80084f6 <USBD_GetString+0x86>
    return;
 80084f4:	bf00      	nop
  }
}
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800850c:	e005      	b.n	800851a <USBD_GetLen+0x1e>
  {
    len++;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	3301      	adds	r3, #1
 8008512:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	3301      	adds	r3, #1
 8008518:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f5      	bne.n	800850e <USBD_GetLen+0x12>
  }

  return len;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2202      	movs	r2, #2
 8008540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	2100      	movs	r1, #0
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 fcd2 	bl	8008f00 <USBD_LL_Transmit>

  return USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	2100      	movs	r1, #0
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 fcc1 	bl	8008f00 <USBD_LL_Transmit>

  return USBD_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	2100      	movs	r1, #0
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 fcd1 	bl	8008f42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2204      	movs	r2, #4
 80085b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085ba:	2300      	movs	r3, #0
 80085bc:	2200      	movs	r2, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fc9d 	bl	8008f00 <USBD_LL_Transmit>

  return USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2205      	movs	r2, #5
 80085dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085e0:	2300      	movs	r3, #0
 80085e2:	2200      	movs	r2, #0
 80085e4:	2100      	movs	r1, #0
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fcab 	bl	8008f42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085fc:	2200      	movs	r2, #0
 80085fe:	4912      	ldr	r1, [pc, #72]	; (8008648 <MX_USB_DEVICE_Init+0x50>)
 8008600:	4812      	ldr	r0, [pc, #72]	; (800864c <MX_USB_DEVICE_Init+0x54>)
 8008602:	f7fe fcf8 	bl	8006ff6 <USBD_Init>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800860c:	f7f8 f85e 	bl	80006cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008610:	490f      	ldr	r1, [pc, #60]	; (8008650 <MX_USB_DEVICE_Init+0x58>)
 8008612:	480e      	ldr	r0, [pc, #56]	; (800864c <MX_USB_DEVICE_Init+0x54>)
 8008614:	f7fe fd1f 	bl	8007056 <USBD_RegisterClass>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800861e:	f7f8 f855 	bl	80006cc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008622:	490c      	ldr	r1, [pc, #48]	; (8008654 <MX_USB_DEVICE_Init+0x5c>)
 8008624:	4809      	ldr	r0, [pc, #36]	; (800864c <MX_USB_DEVICE_Init+0x54>)
 8008626:	f7fc ffc9 	bl	80055bc <USBD_MSC_RegisterStorage>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008630:	f7f8 f84c 	bl	80006cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008634:	4805      	ldr	r0, [pc, #20]	; (800864c <MX_USB_DEVICE_Init+0x54>)
 8008636:	f7fe fd44 	bl	80070c2 <USBD_Start>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008640:	f7f8 f844 	bl	80006cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008644:	bf00      	nop
 8008646:	bd80      	pop	{r7, pc}
 8008648:	200320b4 	.word	0x200320b4
 800864c:	200321ac 	.word	0x200321ac
 8008650:	2003200c 	.word	0x2003200c
 8008654:	20032114 	.word	0x20032114

08008658 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	6039      	str	r1, [r7, #0]
 8008662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2212      	movs	r2, #18
 8008668:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800866a:	4b03      	ldr	r3, [pc, #12]	; (8008678 <USBD_FS_DeviceDescriptor+0x20>)
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	200320d4 	.word	0x200320d4

0800867c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	6039      	str	r1, [r7, #0]
 8008686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2204      	movs	r2, #4
 800868c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800868e:	4b03      	ldr	r3, [pc, #12]	; (800869c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	200320f4 	.word	0x200320f4

080086a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	6039      	str	r1, [r7, #0]
 80086aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d105      	bne.n	80086be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	4907      	ldr	r1, [pc, #28]	; (80086d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80086b6:	4808      	ldr	r0, [pc, #32]	; (80086d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80086b8:	f7ff feda 	bl	8008470 <USBD_GetString>
 80086bc:	e004      	b.n	80086c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	4904      	ldr	r1, [pc, #16]	; (80086d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80086c2:	4805      	ldr	r0, [pc, #20]	; (80086d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80086c4:	f7ff fed4 	bl	8008470 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c8:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20032488 	.word	0x20032488
 80086d8:	08009378 	.word	0x08009378

080086dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	6039      	str	r1, [r7, #0]
 80086e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	4904      	ldr	r1, [pc, #16]	; (80086fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086ec:	4804      	ldr	r0, [pc, #16]	; (8008700 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086ee:	f7ff febf 	bl	8008470 <USBD_GetString>
  return USBD_StrDesc;
 80086f2:	4b02      	ldr	r3, [pc, #8]	; (80086fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20032488 	.word	0x20032488
 8008700:	0800938c 	.word	0x0800938c

08008704 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	221a      	movs	r2, #26
 8008714:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008716:	f000 f855 	bl	80087c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800871a:	4b02      	ldr	r3, [pc, #8]	; (8008724 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	200320f8 	.word	0x200320f8

08008728 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4907      	ldr	r1, [pc, #28]	; (800875c <USBD_FS_ConfigStrDescriptor+0x34>)
 800873e:	4808      	ldr	r0, [pc, #32]	; (8008760 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008740:	f7ff fe96 	bl	8008470 <USBD_GetString>
 8008744:	e004      	b.n	8008750 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4904      	ldr	r1, [pc, #16]	; (800875c <USBD_FS_ConfigStrDescriptor+0x34>)
 800874a:	4805      	ldr	r0, [pc, #20]	; (8008760 <USBD_FS_ConfigStrDescriptor+0x38>)
 800874c:	f7ff fe90 	bl	8008470 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20032488 	.word	0x20032488
 8008760:	080093a0 	.word	0x080093a0

08008764 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d105      	bne.n	8008782 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	4907      	ldr	r1, [pc, #28]	; (8008798 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800877a:	4808      	ldr	r0, [pc, #32]	; (800879c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800877c:	f7ff fe78 	bl	8008470 <USBD_GetString>
 8008780:	e004      	b.n	800878c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	4904      	ldr	r1, [pc, #16]	; (8008798 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008786:	4805      	ldr	r0, [pc, #20]	; (800879c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008788:	f7ff fe72 	bl	8008470 <USBD_GetString>
  }
  return USBD_StrDesc;
 800878c:	4b02      	ldr	r3, [pc, #8]	; (8008798 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800878e:	4618      	mov	r0, r3
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20032488 	.word	0x20032488
 800879c:	080093ac 	.word	0x080093ac

080087a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	220c      	movs	r2, #12
 80087b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80087b2:	4b03      	ldr	r3, [pc, #12]	; (80087c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	200320e8 	.word	0x200320e8

080087c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087ca:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <Get_SerialNum+0x44>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087d0:	4b0e      	ldr	r3, [pc, #56]	; (800880c <Get_SerialNum+0x48>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087d6:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <Get_SerialNum+0x4c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087ea:	2208      	movs	r2, #8
 80087ec:	4909      	ldr	r1, [pc, #36]	; (8008814 <Get_SerialNum+0x50>)
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 f814 	bl	800881c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087f4:	2204      	movs	r2, #4
 80087f6:	4908      	ldr	r1, [pc, #32]	; (8008818 <Get_SerialNum+0x54>)
 80087f8:	68b8      	ldr	r0, [r7, #8]
 80087fa:	f000 f80f 	bl	800881c <IntToUnicode>
  }
}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	1ff0f420 	.word	0x1ff0f420
 800880c:	1ff0f424 	.word	0x1ff0f424
 8008810:	1ff0f428 	.word	0x1ff0f428
 8008814:	200320fa 	.word	0x200320fa
 8008818:	2003210a 	.word	0x2003210a

0800881c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]
 8008832:	e027      	b.n	8008884 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	0f1b      	lsrs	r3, r3, #28
 8008838:	2b09      	cmp	r3, #9
 800883a:	d80b      	bhi.n	8008854 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	0f1b      	lsrs	r3, r3, #28
 8008840:	b2da      	uxtb	r2, r3
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	4619      	mov	r1, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	440b      	add	r3, r1
 800884c:	3230      	adds	r2, #48	; 0x30
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	e00a      	b.n	800886a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	0f1b      	lsrs	r3, r3, #28
 8008858:	b2da      	uxtb	r2, r3
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	4619      	mov	r1, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	440b      	add	r3, r1
 8008864:	3237      	adds	r2, #55	; 0x37
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	011b      	lsls	r3, r3, #4
 800886e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	3301      	adds	r3, #1
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	4413      	add	r3, r2
 800887a:	2200      	movs	r2, #0
 800887c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	3301      	adds	r3, #1
 8008882:	75fb      	strb	r3, [r7, #23]
 8008884:	7dfa      	ldrb	r2, [r7, #23]
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	429a      	cmp	r2, r3
 800888a:	d3d3      	bcc.n	8008834 <IntToUnicode+0x18>
  }
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	371c      	adds	r7, #28
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	4603      	mov	r3, r0
 80088a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 80088a4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	4603      	mov	r3, r0
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80088c6:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ce:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80088d0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	4603      	mov	r3, r0
 80088e6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80088e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	4603      	mov	r3, r0
 80088fe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8008900:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
	...

08008910 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	607a      	str	r2, [r7, #4]
 800891a:	461a      	mov	r2, r3
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]
 8008920:	4613      	mov	r3, r2
 8008922:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

  memcpy(buf, (void*)&etx_buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	025b      	lsls	r3, r3, #9
 8008928:	4a06      	ldr	r2, [pc, #24]	; (8008944 <STORAGE_Read_FS+0x34>)
 800892a:	1899      	adds	r1, r3, r2
 800892c:	89bb      	ldrh	r3, [r7, #12]
 800892e:	025b      	lsls	r3, r3, #9
 8008930:	461a      	mov	r2, r3
 8008932:	68b8      	ldr	r0, [r7, #8]
 8008934:	f000 fcba 	bl	80092ac <memcpy>

  return (USBD_OK);
 8008938:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000000 	.word	0x20000000

08008948 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
 8008952:	461a      	mov	r2, r3
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
 8008958:	4613      	mov	r3, r2
 800895a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

  memcpy((void*)&etx_buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	025b      	lsls	r3, r3, #9
 8008960:	4a06      	ldr	r2, [pc, #24]	; (800897c <STORAGE_Write_FS+0x34>)
 8008962:	1898      	adds	r0, r3, r2
 8008964:	89bb      	ldrh	r3, [r7, #12]
 8008966:	025b      	lsls	r3, r3, #9
 8008968:	461a      	mov	r2, r3
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	f000 fc9e 	bl	80092ac <memcpy>

  return (USBD_OK);
 8008970:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20000000 	.word	0x20000000

08008980 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008984:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008986:	4618      	mov	r0, r3
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b0ae      	sub	sp, #184	; 0xb8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008998:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	605a      	str	r2, [r3, #4]
 80089a2:	609a      	str	r2, [r3, #8]
 80089a4:	60da      	str	r2, [r3, #12]
 80089a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	2290      	movs	r2, #144	; 0x90
 80089ae:	2100      	movs	r1, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 fc37 	bl	8009224 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089be:	d151      	bne.n	8008a64 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80089c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80089cc:	f107 0314 	add.w	r3, r7, #20
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fa fae7 	bl	8002fa4 <HAL_RCCEx_PeriphCLKConfig>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80089dc:	f7f7 fe76 	bl	80006cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089e0:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	4a21      	ldr	r2, [pc, #132]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	6313      	str	r3, [r2, #48]	; 0x30
 80089ec:	4b1f      	ldr	r3, [pc, #124]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	613b      	str	r3, [r7, #16]
 80089f6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a00:	2302      	movs	r3, #2
 8008a02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a12:	230a      	movs	r3, #10
 8008a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4814      	ldr	r0, [pc, #80]	; (8008a70 <HAL_PCD_MspInit+0xe0>)
 8008a20:	f7f8 f932 	bl	8000c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a24:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 8008a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a28:	4a10      	ldr	r2, [pc, #64]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 8008a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2e:	6353      	str	r3, [r2, #52]	; 0x34
 8008a30:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 8008a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 8008a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a46:	6453      	str	r3, [r2, #68]	; 0x44
 8008a48:	4b08      	ldr	r3, [pc, #32]	; (8008a6c <HAL_PCD_MspInit+0xdc>)
 8008a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a50:	60bb      	str	r3, [r7, #8]
 8008a52:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a54:	2200      	movs	r2, #0
 8008a56:	2100      	movs	r1, #0
 8008a58:	2043      	movs	r0, #67	; 0x43
 8008a5a:	f7f8 f862 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a5e:	2043      	movs	r0, #67	; 0x43
 8008a60:	f7f8 f87b 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a64:	bf00      	nop
 8008a66:	37b8      	adds	r7, #184	; 0xb8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	40023800 	.word	0x40023800
 8008a70:	40020000 	.word	0x40020000

08008a74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	f7fe fb66 	bl	800715c <USBD_LL_SetupStage>
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008aaa:	78fa      	ldrb	r2, [r7, #3]
 8008aac:	6879      	ldr	r1, [r7, #4]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	440b      	add	r3, r1
 8008ab8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f7fe fba0 	bl	8007206 <USBD_LL_DataOutStage>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	334c      	adds	r3, #76	; 0x4c
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	4619      	mov	r1, r3
 8008af6:	f7fe fc39 	bl	800736c <USBD_LL_DataInStage>
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fd6d 	bl	80075f0 <USBD_LL_SOF>
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b26:	2301      	movs	r3, #1
 8008b28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
 8008b36:	e008      	b.n	8008b4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d102      	bne.n	8008b46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b40:	2301      	movs	r3, #1
 8008b42:	73fb      	strb	r3, [r7, #15]
 8008b44:	e001      	b.n	8008b4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b46:	f7f7 fdc1 	bl	80006cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008b50:	7bfa      	ldrb	r2, [r7, #15]
 8008b52:	4611      	mov	r1, r2
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe fd0d 	bl	8007574 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fe fcb5 	bl	80074d0 <USBD_LL_Reset>
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fd08 	bl	8007594 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6812      	ldr	r2, [r2, #0]
 8008b92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ba4:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <HAL_PCD_SuspendCallback+0x48>)
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	4a03      	ldr	r2, [pc, #12]	; (8008bb8 <HAL_PCD_SuspendCallback+0x48>)
 8008baa:	f043 0306 	orr.w	r3, r3, #6
 8008bae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	e000ed00 	.word	0xe000ed00

08008bbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe fcf8 	bl	80075c0 <USBD_LL_Resume>
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fd50 	bl	8007694 <USBD_LL_IsoOUTIncomplete>
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fd0c 	bl	8007630 <USBD_LL_IsoINIncomplete>
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fd62 	bl	80076f8 <USBD_LL_DevConnected>
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fd5f 	bl	800770e <USBD_LL_DevDisconnected>
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d13c      	bne.n	8008ce2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c68:	4a20      	ldr	r2, [pc, #128]	; (8008cec <USBD_LL_Init+0x94>)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a1e      	ldr	r2, [pc, #120]	; (8008cec <USBD_LL_Init+0x94>)
 8008c74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c78:	4b1c      	ldr	r3, [pc, #112]	; (8008cec <USBD_LL_Init+0x94>)
 8008c7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008c80:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <USBD_LL_Init+0x94>)
 8008c82:	2206      	movs	r2, #6
 8008c84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c86:	4b19      	ldr	r3, [pc, #100]	; (8008cec <USBD_LL_Init+0x94>)
 8008c88:	2202      	movs	r2, #2
 8008c8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c8c:	4b17      	ldr	r3, [pc, #92]	; (8008cec <USBD_LL_Init+0x94>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c92:	4b16      	ldr	r3, [pc, #88]	; (8008cec <USBD_LL_Init+0x94>)
 8008c94:	2202      	movs	r2, #2
 8008c96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c98:	4b14      	ldr	r3, [pc, #80]	; (8008cec <USBD_LL_Init+0x94>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c9e:	4b13      	ldr	r3, [pc, #76]	; (8008cec <USBD_LL_Init+0x94>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ca4:	4b11      	ldr	r3, [pc, #68]	; (8008cec <USBD_LL_Init+0x94>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008caa:	4b10      	ldr	r3, [pc, #64]	; (8008cec <USBD_LL_Init+0x94>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cb0:	4b0e      	ldr	r3, [pc, #56]	; (8008cec <USBD_LL_Init+0x94>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cb6:	480d      	ldr	r0, [pc, #52]	; (8008cec <USBD_LL_Init+0x94>)
 8008cb8:	f7f8 f992 	bl	8000fe0 <HAL_PCD_Init>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008cc2:	f7f7 fd03 	bl	80006cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008cc6:	2180      	movs	r1, #128	; 0x80
 8008cc8:	4808      	ldr	r0, [pc, #32]	; (8008cec <USBD_LL_Init+0x94>)
 8008cca:	f7f9 fc3a 	bl	8002542 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008cce:	2240      	movs	r2, #64	; 0x40
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4806      	ldr	r0, [pc, #24]	; (8008cec <USBD_LL_Init+0x94>)
 8008cd4:	f7f9 fbee 	bl	80024b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008cd8:	2280      	movs	r2, #128	; 0x80
 8008cda:	2101      	movs	r1, #1
 8008cdc:	4803      	ldr	r0, [pc, #12]	; (8008cec <USBD_LL_Init+0x94>)
 8008cde:	f7f9 fbe9 	bl	80024b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20032688 	.word	0x20032688

08008cf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7f8 fa8e 	bl	8001228 <HAL_PCD_Start>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f99e 	bl	8009054 <USBD_Get_USB_Status>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	4608      	mov	r0, r1
 8008d30:	4611      	mov	r1, r2
 8008d32:	461a      	mov	r2, r3
 8008d34:	4603      	mov	r3, r0
 8008d36:	70fb      	strb	r3, [r7, #3]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70bb      	strb	r3, [r7, #2]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d4e:	78bb      	ldrb	r3, [r7, #2]
 8008d50:	883a      	ldrh	r2, [r7, #0]
 8008d52:	78f9      	ldrb	r1, [r7, #3]
 8008d54:	f7f8 ff7b 	bl	8001c4e <HAL_PCD_EP_Open>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f978 	bl	8009054 <USBD_Get_USB_Status>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d8c:	78fa      	ldrb	r2, [r7, #3]
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7f8 ffc4 	bl	8001d1e <HAL_PCD_EP_Close>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 f959 	bl	8009054 <USBD_Get_USB_Status>
 8008da2:	4603      	mov	r3, r0
 8008da4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dca:	78fa      	ldrb	r2, [r7, #3]
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7f9 f987 	bl	80020e2 <HAL_PCD_EP_Flush>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f93a 	bl	8009054 <USBD_Get_USB_Status>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e08:	78fa      	ldrb	r2, [r7, #3]
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7f9 f87d 	bl	8001f0c <HAL_PCD_EP_SetStall>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 f91b 	bl	8009054 <USBD_Get_USB_Status>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e46:	78fa      	ldrb	r2, [r7, #3]
 8008e48:	4611      	mov	r1, r2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7f9 f8c2 	bl	8001fd4 <HAL_PCD_EP_ClrStall>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 f8fc 	bl	8009054 <USBD_Get_USB_Status>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b085      	sub	sp, #20
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e7c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	da0b      	bge.n	8008e9e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e8c:	68f9      	ldr	r1, [r7, #12]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	333e      	adds	r3, #62	; 0x3e
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	e00b      	b.n	8008eb6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ea4:	68f9      	ldr	r1, [r7, #12]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008eb4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008edc:	78fa      	ldrb	r2, [r7, #3]
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7f8 fe8f 	bl	8001c04 <HAL_PCD_SetAddress>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 f8b1 	bl	8009054 <USBD_Get_USB_Status>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	603b      	str	r3, [r7, #0]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f1e:	7af9      	ldrb	r1, [r7, #11]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	f7f8 ffa8 	bl	8001e78 <HAL_PCD_EP_Transmit>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f890 	bl	8009054 <USBD_Get_USB_Status>
 8008f34:	4603      	mov	r3, r0
 8008f36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f38:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b086      	sub	sp, #24
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f60:	7af9      	ldrb	r1, [r7, #11]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	f7f8 ff24 	bl	8001db2 <HAL_PCD_EP_Receive>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f86f 	bl	8009054 <USBD_Get_USB_Status>
 8008f76:	4603      	mov	r3, r0
 8008f78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f96:	78fa      	ldrb	r2, [r7, #3]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f8 ff54 	bl	8001e48 <HAL_PCD_EP_GetRxCount>
 8008fa0:	4603      	mov	r3, r0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <HAL_PCDEx_LPM_Callback+0x18>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d01f      	beq.n	8009002 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008fc2:	e03b      	b.n	800903c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008fcc:	f000 f83c 	bl	8009048 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fd0:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <HAL_PCDEx_LPM_Callback+0x98>)
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	4a1b      	ldr	r2, [pc, #108]	; (8009044 <HAL_PCDEx_LPM_Callback+0x98>)
 8008fd6:	f023 0306 	bic.w	r3, r3, #6
 8008fda:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	6812      	ldr	r2, [r2, #0]
 8008fea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fae0 	bl	80075c0 <USBD_LL_Resume>
    break;
 8009000:	e01c      	b.n	800903c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6812      	ldr	r2, [r2, #0]
 8009010:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009014:	f043 0301 	orr.w	r3, r3, #1
 8009018:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fab7 	bl	8007594 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d005      	beq.n	800903a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_PCDEx_LPM_Callback+0x98>)
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <HAL_PCDEx_LPM_Callback+0x98>)
 8009034:	f043 0306 	orr.w	r3, r3, #6
 8009038:	6113      	str	r3, [r2, #16]
    break;
 800903a:	bf00      	nop
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	e000ed00 	.word	0xe000ed00

08009048 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800904c:	f7f7 fa80 	bl	8000550 <SystemClock_Config>
}
 8009050:	bf00      	nop
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	2b03      	cmp	r3, #3
 8009066:	d817      	bhi.n	8009098 <USBD_Get_USB_Status+0x44>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <USBD_Get_USB_Status+0x1c>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	08009081 	.word	0x08009081
 8009074:	08009087 	.word	0x08009087
 8009078:	0800908d 	.word	0x0800908d
 800907c:	08009093 	.word	0x08009093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]
    break;
 8009084:	e00b      	b.n	800909e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009086:	2303      	movs	r3, #3
 8009088:	73fb      	strb	r3, [r7, #15]
    break;
 800908a:	e008      	b.n	800909e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800908c:	2301      	movs	r3, #1
 800908e:	73fb      	strb	r3, [r7, #15]
    break;
 8009090:	e005      	b.n	800909e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009092:	2303      	movs	r3, #3
 8009094:	73fb      	strb	r3, [r7, #15]
    break;
 8009096:	e002      	b.n	800909e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009098:	2303      	movs	r3, #3
 800909a:	73fb      	strb	r3, [r7, #15]
    break;
 800909c:	bf00      	nop
  }
  return usb_status;
 800909e:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <malloc>:
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <malloc+0xc>)
 80090ae:	4601      	mov	r1, r0
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	f000 b82b 	b.w	800910c <_malloc_r>
 80090b6:	bf00      	nop
 80090b8:	20032180 	.word	0x20032180

080090bc <free>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <free+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f000 b901 	b.w	80092c8 <_free_r>
 80090c6:	bf00      	nop
 80090c8:	20032180 	.word	0x20032180

080090cc <sbrk_aligned>:
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	4e0e      	ldr	r6, [pc, #56]	; (8009108 <sbrk_aligned+0x3c>)
 80090d0:	460c      	mov	r4, r1
 80090d2:	6831      	ldr	r1, [r6, #0]
 80090d4:	4605      	mov	r5, r0
 80090d6:	b911      	cbnz	r1, 80090de <sbrk_aligned+0x12>
 80090d8:	f000 f8ac 	bl	8009234 <_sbrk_r>
 80090dc:	6030      	str	r0, [r6, #0]
 80090de:	4621      	mov	r1, r4
 80090e0:	4628      	mov	r0, r5
 80090e2:	f000 f8a7 	bl	8009234 <_sbrk_r>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	d00a      	beq.n	8009100 <sbrk_aligned+0x34>
 80090ea:	1cc4      	adds	r4, r0, #3
 80090ec:	f024 0403 	bic.w	r4, r4, #3
 80090f0:	42a0      	cmp	r0, r4
 80090f2:	d007      	beq.n	8009104 <sbrk_aligned+0x38>
 80090f4:	1a21      	subs	r1, r4, r0
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 f89c 	bl	8009234 <_sbrk_r>
 80090fc:	3001      	adds	r0, #1
 80090fe:	d101      	bne.n	8009104 <sbrk_aligned+0x38>
 8009100:	f04f 34ff 	mov.w	r4, #4294967295
 8009104:	4620      	mov	r0, r4
 8009106:	bd70      	pop	{r4, r5, r6, pc}
 8009108:	20032b94 	.word	0x20032b94

0800910c <_malloc_r>:
 800910c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009110:	1ccd      	adds	r5, r1, #3
 8009112:	f025 0503 	bic.w	r5, r5, #3
 8009116:	3508      	adds	r5, #8
 8009118:	2d0c      	cmp	r5, #12
 800911a:	bf38      	it	cc
 800911c:	250c      	movcc	r5, #12
 800911e:	2d00      	cmp	r5, #0
 8009120:	4607      	mov	r7, r0
 8009122:	db01      	blt.n	8009128 <_malloc_r+0x1c>
 8009124:	42a9      	cmp	r1, r5
 8009126:	d905      	bls.n	8009134 <_malloc_r+0x28>
 8009128:	230c      	movs	r3, #12
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	2600      	movs	r6, #0
 800912e:	4630      	mov	r0, r6
 8009130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009134:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009208 <_malloc_r+0xfc>
 8009138:	f000 f868 	bl	800920c <__malloc_lock>
 800913c:	f8d8 3000 	ldr.w	r3, [r8]
 8009140:	461c      	mov	r4, r3
 8009142:	bb5c      	cbnz	r4, 800919c <_malloc_r+0x90>
 8009144:	4629      	mov	r1, r5
 8009146:	4638      	mov	r0, r7
 8009148:	f7ff ffc0 	bl	80090cc <sbrk_aligned>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	4604      	mov	r4, r0
 8009150:	d155      	bne.n	80091fe <_malloc_r+0xf2>
 8009152:	f8d8 4000 	ldr.w	r4, [r8]
 8009156:	4626      	mov	r6, r4
 8009158:	2e00      	cmp	r6, #0
 800915a:	d145      	bne.n	80091e8 <_malloc_r+0xdc>
 800915c:	2c00      	cmp	r4, #0
 800915e:	d048      	beq.n	80091f2 <_malloc_r+0xe6>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	4631      	mov	r1, r6
 8009164:	4638      	mov	r0, r7
 8009166:	eb04 0903 	add.w	r9, r4, r3
 800916a:	f000 f863 	bl	8009234 <_sbrk_r>
 800916e:	4581      	cmp	r9, r0
 8009170:	d13f      	bne.n	80091f2 <_malloc_r+0xe6>
 8009172:	6821      	ldr	r1, [r4, #0]
 8009174:	1a6d      	subs	r5, r5, r1
 8009176:	4629      	mov	r1, r5
 8009178:	4638      	mov	r0, r7
 800917a:	f7ff ffa7 	bl	80090cc <sbrk_aligned>
 800917e:	3001      	adds	r0, #1
 8009180:	d037      	beq.n	80091f2 <_malloc_r+0xe6>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	442b      	add	r3, r5
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	f8d8 3000 	ldr.w	r3, [r8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d038      	beq.n	8009202 <_malloc_r+0xf6>
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	42a2      	cmp	r2, r4
 8009194:	d12b      	bne.n	80091ee <_malloc_r+0xe2>
 8009196:	2200      	movs	r2, #0
 8009198:	605a      	str	r2, [r3, #4]
 800919a:	e00f      	b.n	80091bc <_malloc_r+0xb0>
 800919c:	6822      	ldr	r2, [r4, #0]
 800919e:	1b52      	subs	r2, r2, r5
 80091a0:	d41f      	bmi.n	80091e2 <_malloc_r+0xd6>
 80091a2:	2a0b      	cmp	r2, #11
 80091a4:	d917      	bls.n	80091d6 <_malloc_r+0xca>
 80091a6:	1961      	adds	r1, r4, r5
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	6025      	str	r5, [r4, #0]
 80091ac:	bf18      	it	ne
 80091ae:	6059      	strne	r1, [r3, #4]
 80091b0:	6863      	ldr	r3, [r4, #4]
 80091b2:	bf08      	it	eq
 80091b4:	f8c8 1000 	streq.w	r1, [r8]
 80091b8:	5162      	str	r2, [r4, r5]
 80091ba:	604b      	str	r3, [r1, #4]
 80091bc:	4638      	mov	r0, r7
 80091be:	f104 060b 	add.w	r6, r4, #11
 80091c2:	f000 f829 	bl	8009218 <__malloc_unlock>
 80091c6:	f026 0607 	bic.w	r6, r6, #7
 80091ca:	1d23      	adds	r3, r4, #4
 80091cc:	1af2      	subs	r2, r6, r3
 80091ce:	d0ae      	beq.n	800912e <_malloc_r+0x22>
 80091d0:	1b9b      	subs	r3, r3, r6
 80091d2:	50a3      	str	r3, [r4, r2]
 80091d4:	e7ab      	b.n	800912e <_malloc_r+0x22>
 80091d6:	42a3      	cmp	r3, r4
 80091d8:	6862      	ldr	r2, [r4, #4]
 80091da:	d1dd      	bne.n	8009198 <_malloc_r+0x8c>
 80091dc:	f8c8 2000 	str.w	r2, [r8]
 80091e0:	e7ec      	b.n	80091bc <_malloc_r+0xb0>
 80091e2:	4623      	mov	r3, r4
 80091e4:	6864      	ldr	r4, [r4, #4]
 80091e6:	e7ac      	b.n	8009142 <_malloc_r+0x36>
 80091e8:	4634      	mov	r4, r6
 80091ea:	6876      	ldr	r6, [r6, #4]
 80091ec:	e7b4      	b.n	8009158 <_malloc_r+0x4c>
 80091ee:	4613      	mov	r3, r2
 80091f0:	e7cc      	b.n	800918c <_malloc_r+0x80>
 80091f2:	230c      	movs	r3, #12
 80091f4:	603b      	str	r3, [r7, #0]
 80091f6:	4638      	mov	r0, r7
 80091f8:	f000 f80e 	bl	8009218 <__malloc_unlock>
 80091fc:	e797      	b.n	800912e <_malloc_r+0x22>
 80091fe:	6025      	str	r5, [r4, #0]
 8009200:	e7dc      	b.n	80091bc <_malloc_r+0xb0>
 8009202:	605b      	str	r3, [r3, #4]
 8009204:	deff      	udf	#255	; 0xff
 8009206:	bf00      	nop
 8009208:	20032b90 	.word	0x20032b90

0800920c <__malloc_lock>:
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <__malloc_lock+0x8>)
 800920e:	f000 b84b 	b.w	80092a8 <__retarget_lock_acquire_recursive>
 8009212:	bf00      	nop
 8009214:	20032cd4 	.word	0x20032cd4

08009218 <__malloc_unlock>:
 8009218:	4801      	ldr	r0, [pc, #4]	; (8009220 <__malloc_unlock+0x8>)
 800921a:	f000 b846 	b.w	80092aa <__retarget_lock_release_recursive>
 800921e:	bf00      	nop
 8009220:	20032cd4 	.word	0x20032cd4

08009224 <memset>:
 8009224:	4402      	add	r2, r0
 8009226:	4603      	mov	r3, r0
 8009228:	4293      	cmp	r3, r2
 800922a:	d100      	bne.n	800922e <memset+0xa>
 800922c:	4770      	bx	lr
 800922e:	f803 1b01 	strb.w	r1, [r3], #1
 8009232:	e7f9      	b.n	8009228 <memset+0x4>

08009234 <_sbrk_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_sbrk_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7f7 faa2 	bl	8000788 <_sbrk>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_sbrk_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_sbrk_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20032cd0 	.word	0x20032cd0

08009254 <__errno>:
 8009254:	4b01      	ldr	r3, [pc, #4]	; (800925c <__errno+0x8>)
 8009256:	6818      	ldr	r0, [r3, #0]
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20032180 	.word	0x20032180

08009260 <__libc_init_array>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	4d0d      	ldr	r5, [pc, #52]	; (8009298 <__libc_init_array+0x38>)
 8009264:	4c0d      	ldr	r4, [pc, #52]	; (800929c <__libc_init_array+0x3c>)
 8009266:	1b64      	subs	r4, r4, r5
 8009268:	10a4      	asrs	r4, r4, #2
 800926a:	2600      	movs	r6, #0
 800926c:	42a6      	cmp	r6, r4
 800926e:	d109      	bne.n	8009284 <__libc_init_array+0x24>
 8009270:	4d0b      	ldr	r5, [pc, #44]	; (80092a0 <__libc_init_array+0x40>)
 8009272:	4c0c      	ldr	r4, [pc, #48]	; (80092a4 <__libc_init_array+0x44>)
 8009274:	f000 f874 	bl	8009360 <_init>
 8009278:	1b64      	subs	r4, r4, r5
 800927a:	10a4      	asrs	r4, r4, #2
 800927c:	2600      	movs	r6, #0
 800927e:	42a6      	cmp	r6, r4
 8009280:	d105      	bne.n	800928e <__libc_init_array+0x2e>
 8009282:	bd70      	pop	{r4, r5, r6, pc}
 8009284:	f855 3b04 	ldr.w	r3, [r5], #4
 8009288:	4798      	blx	r3
 800928a:	3601      	adds	r6, #1
 800928c:	e7ee      	b.n	800926c <__libc_init_array+0xc>
 800928e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009292:	4798      	blx	r3
 8009294:	3601      	adds	r6, #1
 8009296:	e7f2      	b.n	800927e <__libc_init_array+0x1e>
 8009298:	080093f8 	.word	0x080093f8
 800929c:	080093f8 	.word	0x080093f8
 80092a0:	080093f8 	.word	0x080093f8
 80092a4:	080093fc 	.word	0x080093fc

080092a8 <__retarget_lock_acquire_recursive>:
 80092a8:	4770      	bx	lr

080092aa <__retarget_lock_release_recursive>:
 80092aa:	4770      	bx	lr

080092ac <memcpy>:
 80092ac:	440a      	add	r2, r1
 80092ae:	4291      	cmp	r1, r2
 80092b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092b4:	d100      	bne.n	80092b8 <memcpy+0xc>
 80092b6:	4770      	bx	lr
 80092b8:	b510      	push	{r4, lr}
 80092ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092c2:	4291      	cmp	r1, r2
 80092c4:	d1f9      	bne.n	80092ba <memcpy+0xe>
 80092c6:	bd10      	pop	{r4, pc}

080092c8 <_free_r>:
 80092c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092ca:	2900      	cmp	r1, #0
 80092cc:	d044      	beq.n	8009358 <_free_r+0x90>
 80092ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d2:	9001      	str	r0, [sp, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f1a1 0404 	sub.w	r4, r1, #4
 80092da:	bfb8      	it	lt
 80092dc:	18e4      	addlt	r4, r4, r3
 80092de:	f7ff ff95 	bl	800920c <__malloc_lock>
 80092e2:	4a1e      	ldr	r2, [pc, #120]	; (800935c <_free_r+0x94>)
 80092e4:	9801      	ldr	r0, [sp, #4]
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	b933      	cbnz	r3, 80092f8 <_free_r+0x30>
 80092ea:	6063      	str	r3, [r4, #4]
 80092ec:	6014      	str	r4, [r2, #0]
 80092ee:	b003      	add	sp, #12
 80092f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092f4:	f7ff bf90 	b.w	8009218 <__malloc_unlock>
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	d908      	bls.n	800930e <_free_r+0x46>
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	1961      	adds	r1, r4, r5
 8009300:	428b      	cmp	r3, r1
 8009302:	bf01      	itttt	eq
 8009304:	6819      	ldreq	r1, [r3, #0]
 8009306:	685b      	ldreq	r3, [r3, #4]
 8009308:	1949      	addeq	r1, r1, r5
 800930a:	6021      	streq	r1, [r4, #0]
 800930c:	e7ed      	b.n	80092ea <_free_r+0x22>
 800930e:	461a      	mov	r2, r3
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	b10b      	cbz	r3, 8009318 <_free_r+0x50>
 8009314:	42a3      	cmp	r3, r4
 8009316:	d9fa      	bls.n	800930e <_free_r+0x46>
 8009318:	6811      	ldr	r1, [r2, #0]
 800931a:	1855      	adds	r5, r2, r1
 800931c:	42a5      	cmp	r5, r4
 800931e:	d10b      	bne.n	8009338 <_free_r+0x70>
 8009320:	6824      	ldr	r4, [r4, #0]
 8009322:	4421      	add	r1, r4
 8009324:	1854      	adds	r4, r2, r1
 8009326:	42a3      	cmp	r3, r4
 8009328:	6011      	str	r1, [r2, #0]
 800932a:	d1e0      	bne.n	80092ee <_free_r+0x26>
 800932c:	681c      	ldr	r4, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	6053      	str	r3, [r2, #4]
 8009332:	440c      	add	r4, r1
 8009334:	6014      	str	r4, [r2, #0]
 8009336:	e7da      	b.n	80092ee <_free_r+0x26>
 8009338:	d902      	bls.n	8009340 <_free_r+0x78>
 800933a:	230c      	movs	r3, #12
 800933c:	6003      	str	r3, [r0, #0]
 800933e:	e7d6      	b.n	80092ee <_free_r+0x26>
 8009340:	6825      	ldr	r5, [r4, #0]
 8009342:	1961      	adds	r1, r4, r5
 8009344:	428b      	cmp	r3, r1
 8009346:	bf04      	itt	eq
 8009348:	6819      	ldreq	r1, [r3, #0]
 800934a:	685b      	ldreq	r3, [r3, #4]
 800934c:	6063      	str	r3, [r4, #4]
 800934e:	bf04      	itt	eq
 8009350:	1949      	addeq	r1, r1, r5
 8009352:	6021      	streq	r1, [r4, #0]
 8009354:	6054      	str	r4, [r2, #4]
 8009356:	e7ca      	b.n	80092ee <_free_r+0x26>
 8009358:	b003      	add	sp, #12
 800935a:	bd30      	pop	{r4, r5, pc}
 800935c:	20032b90 	.word	0x20032b90

08009360 <_init>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	bf00      	nop
 8009364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009366:	bc08      	pop	{r3}
 8009368:	469e      	mov	lr, r3
 800936a:	4770      	bx	lr

0800936c <_fini>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	bf00      	nop
 8009370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009372:	bc08      	pop	{r3}
 8009374:	469e      	mov	lr, r3
 8009376:	4770      	bx	lr
