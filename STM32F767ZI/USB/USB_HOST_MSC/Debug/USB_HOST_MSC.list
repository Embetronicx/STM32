
USB_HOST_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  0800d7f0  0800d7f0  0001d7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e108  0800e108  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800e108  0800e108  0001e108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e110  0800e110  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e110  0800e110  0001e110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e114  0800e114  0001e114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800e118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000914  20000088  0800e1a0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  0800e1a0  0002099c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b12c  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004505  00000000  00000000  0003b225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  0003f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7d  00000000  00000000  00040908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c681  00000000  00000000  00041685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c642  00000000  00000000  0006dd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f932b  00000000  00000000  0008a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005000  00000000  00000000  00183674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00188674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d7d8 	.word	0x0800d7d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	0800d7d8 	.word	0x0800d7d8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 f904 	bl	80007ec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 facb 	bl	8000b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f80c 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f8a8 	bl	8000740 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f876 	bl	80006e0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005f4:	f005 f9fa 	bl	80059ec <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80005f8:	f00b fda0 	bl	800c13c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005fc:	f00b fdc4 	bl	800c188 <MX_USB_HOST_Process>
 8000600:	e7fc      	b.n	80005fc <main+0x20>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00c fbc0 	bl	800cd98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemClock_Config+0xd4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <SystemClock_Config+0xd4>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xd4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a25      	ldr	r2, [pc, #148]	; (80006dc <SystemClock_Config+0xd8>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemClock_Config+0xd8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000670:	23d8      	movs	r3, #216	; 0xd8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000678:	2309      	movs	r3, #9
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fbd9 	bl	8002e3c <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000690:	f000 f8d8 	bl	8000844 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000694:	f002 fb82 	bl	8002d9c <HAL_PWREx_EnableOverDrive>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800069e:	f000 f8d1 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2107      	movs	r1, #7
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fe69 	bl	8003398 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006cc:	f000 f8ba 	bl	8000844 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART3_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART3_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART3_UART_Init+0x58>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART3_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART3_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART3_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART3_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART3_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART3_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART3_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART3_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART3_UART_Init+0x58>)
 8000724:	f003 fc86 	bl	8004034 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f889 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000a4 	.word	0x200000a4
 800073c:	40004800 	.word	0x40004800

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800078c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_GPIO_Init+0xa4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <MX_GPIO_Init+0xa4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_GPIO_Init+0xa4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0xa8>)
 80007bc:	f000 fd9a 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_GPIO_Init+0xa8>)
 80007d8:	f000 fbe0 	bl	8000f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40021800 	.word	0x40021800

080007ec <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007fe:	f000 fb51 	bl	8000ea4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000802:	2301      	movs	r3, #1
 8000804:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000806:	2300      	movs	r3, #0
 8000808:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800080e:	231f      	movs	r3, #31
 8000810:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000812:	2387      	movs	r3, #135	; 0x87
 8000814:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000816:	2300      	movs	r3, #0
 8000818:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800081a:	2300      	movs	r3, #0
 800081c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800081e:	2301      	movs	r3, #1
 8000820:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000822:	2301      	movs	r3, #1
 8000824:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082e:	463b      	mov	r3, r7
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fb6f 	bl	8000f14 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000836:	2004      	movs	r0, #4
 8000838:	f000 fb4c 	bl	8000ed4 <HAL_MPU_Enable>

}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0ae      	sub	sp, #184	; 0xb8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2290      	movs	r2, #144	; 0x90
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00c fa6d 	bl	800cd98 <memset>
  if(huart->Instance==USART3)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a22      	ldr	r2, [pc, #136]	; (800094c <HAL_UART_MspInit+0xb4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d13c      	bne.n	8000942 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 ff84 	bl	80037e4 <HAL_RCCEx_PeriphCLKConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008e2:	f7ff ffaf 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <HAL_UART_MspInit+0xb8>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_UART_MspInit+0xb8>)
 80008ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_UART_MspInit+0xb8>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_UART_MspInit+0xb8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <HAL_UART_MspInit+0xb8>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_UART_MspInit+0xb8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800091a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000930:	2307      	movs	r3, #7
 8000932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000936:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <HAL_UART_MspInit+0xbc>)
 800093e:	f000 fb2d 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	37b8      	adds	r7, #184	; 0xb8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40004800 	.word	0x40004800
 8000950:	40023800 	.word	0x40023800
 8000954:	40020c00 	.word	0x40020c00

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f928 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <OTG_FS_IRQHandler+0x10>)
 80009b2:	f000 ff23 	bl	80017fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000054c 	.word	0x2000054c

080009c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d2:	f3af 8000 	nop.w
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
  }

  return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f00b fa1b 	bl	800be50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf1      	blt.n	8000a0c <_write+0x12>
  }
  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f00c f9c2 	bl	800ce54 <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20080000 	.word	0x20080000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	2000012c 	.word	0x2000012c
 8000b04:	200009a0 	.word	0x200009a0

08000b08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b48:	4c0b      	ldr	r4, [pc, #44]	; (8000b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd7 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f00c f981 	bl	800ce60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fd3d 	bl	80005dc <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b70:	0800e118 	.word	0x0800e118
  ldr r2, =_sbss
 8000b74:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b78:	2000099c 	.word	0x2000099c

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>

08000b7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 f94c 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b88:	200f      	movs	r0, #15
 8000b8a:	f000 f805 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8e:	f7ff fe5f 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f967 	bl	8000e8a <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f92f 	bl	8000e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000130 	.word	0x20000130

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000130 	.word	0x20000130

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	05fa0000 	.word	0x05fa0000

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff29 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff3e 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff31 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa2 	bl	8000ddc <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ea8:	f3bf 8f5f 	dmb	sy
}
 8000eac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_MPU_Disable+0x28>)
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_MPU_Disable+0x28>)
 8000eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_MPU_Disable+0x2c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	e000ed90 	.word	0xe000ed90

08000ed4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_MPU_Enable+0x38>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_MPU_Enable+0x3c>)
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_MPU_Enable+0x3c>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef2:	f3bf 8f4f 	dsb	sy
}
 8000ef6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef8:	f3bf 8f6f 	isb	sy
}
 8000efc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed90 	.word	0xe000ed90
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	785a      	ldrb	r2, [r3, #1]
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_MPU_ConfigRegion+0x84>)
 8000f22:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d029      	beq.n	8000f80 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <HAL_MPU_ConfigRegion+0x84>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7b1b      	ldrb	r3, [r3, #12]
 8000f38:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7adb      	ldrb	r3, [r3, #11]
 8000f3e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7a9b      	ldrb	r3, [r3, #10]
 8000f46:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7b5b      	ldrb	r3, [r3, #13]
 8000f4e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7b9b      	ldrb	r3, [r3, #14]
 8000f56:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7bdb      	ldrb	r3, [r3, #15]
 8000f5e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7a5b      	ldrb	r3, [r3, #9]
 8000f66:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7a1b      	ldrb	r3, [r3, #8]
 8000f6e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f70:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f7a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f7c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000f7e:	e005      	b.n	8000f8c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_MPU_ConfigRegion+0x84>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <HAL_MPU_ConfigRegion+0x84>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed90 	.word	0xe000ed90

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e175      	b.n	80012a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8164 	bne.w	80012a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d005      	beq.n	8000ff2 <HAL_GPIO_Init+0x56>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b03      	cmp	r3, #3
 800105e:	d017      	beq.n	8001090 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80be 	beq.w	80012a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a65      	ldr	r2, [pc, #404]	; (80012c0 <HAL_GPIO_Init+0x324>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800113e:	4a61      	ldr	r2, [pc, #388]	; (80012c4 <HAL_GPIO_Init+0x328>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a58      	ldr	r2, [pc, #352]	; (80012c8 <HAL_GPIO_Init+0x32c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d037      	beq.n	80011da <HAL_GPIO_Init+0x23e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a57      	ldr	r2, [pc, #348]	; (80012cc <HAL_GPIO_Init+0x330>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d031      	beq.n	80011d6 <HAL_GPIO_Init+0x23a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d02b      	beq.n	80011d2 <HAL_GPIO_Init+0x236>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a55      	ldr	r2, [pc, #340]	; (80012d4 <HAL_GPIO_Init+0x338>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d025      	beq.n	80011ce <HAL_GPIO_Init+0x232>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x33c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01f      	beq.n	80011ca <HAL_GPIO_Init+0x22e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a53      	ldr	r2, [pc, #332]	; (80012dc <HAL_GPIO_Init+0x340>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x22a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x344>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x348>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x34c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x350>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x21a>
 80011b2:	2309      	movs	r3, #9
 80011b4:	e012      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011b6:	230a      	movs	r3, #10
 80011b8:	e010      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011be:	2307      	movs	r3, #7
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_GPIO_Init+0x328>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <HAL_GPIO_Init+0x354>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121e:	4a34      	ldr	r2, [pc, #208]	; (80012f0 <HAL_GPIO_Init+0x354>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <HAL_GPIO_Init+0x354>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001248:	4a29      	ldr	r2, [pc, #164]	; (80012f0 <HAL_GPIO_Init+0x354>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_GPIO_Init+0x354>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_GPIO_Init+0x354>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_GPIO_Init+0x354>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_GPIO_Init+0x354>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae86 	bls.w	8000fbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40021400 	.word	0x40021400
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021c00 	.word	0x40021c00
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40022400 	.word	0x40022400
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001328:	b08f      	sub	sp, #60	; 0x3c
 800132a:	af0a      	add	r7, sp, #40	; 0x28
 800132c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e054      	b.n	80013e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f00a ff5a 	bl	800c20c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fbb1 	bl	8004ade <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	687e      	ldr	r6, [r7, #4]
 8001384:	466d      	mov	r5, sp
 8001386:	f106 0410 	add.w	r4, r6, #16
 800138a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001396:	e885 0003 	stmia.w	r5, {r0, r1}
 800139a:	1d33      	adds	r3, r6, #4
 800139c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139e:	6838      	ldr	r0, [r7, #0]
 80013a0:	f003 fb34 	bl	8004a0c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fba8 	bl	8004b00 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	687e      	ldr	r6, [r7, #4]
 80013b8:	466d      	mov	r5, sp
 80013ba:	f106 0410 	add.w	r4, r6, #16
 80013be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ce:	1d33      	adds	r3, r6, #4
 80013d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f003 fd50 	bl	8004e78 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ea <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80013ea:	b590      	push	{r4, r7, lr}
 80013ec:	b089      	sub	sp, #36	; 0x24
 80013ee:	af04      	add	r7, sp, #16
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	4608      	mov	r0, r1
 80013f4:	4611      	mov	r1, r2
 80013f6:	461a      	mov	r2, r3
 80013f8:	4603      	mov	r3, r0
 80013fa:	70fb      	strb	r3, [r7, #3]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70bb      	strb	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_HCD_HC_Init+0x28>
 800140e:	2302      	movs	r3, #2
 8001410:	e076      	b.n	8001500 <HAL_HCD_HC_Init+0x116>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	212c      	movs	r1, #44	; 0x2c
 8001420:	fb01 f303 	mul.w	r3, r1, r3
 8001424:	4413      	add	r3, r2
 8001426:	333d      	adds	r3, #61	; 0x3d
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	212c      	movs	r1, #44	; 0x2c
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	4413      	add	r3, r2
 8001438:	3338      	adds	r3, #56	; 0x38
 800143a:	787a      	ldrb	r2, [r7, #1]
 800143c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	212c      	movs	r1, #44	; 0x2c
 8001444:	fb01 f303 	mul.w	r3, r1, r3
 8001448:	4413      	add	r3, r2
 800144a:	3340      	adds	r3, #64	; 0x40
 800144c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800144e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	212c      	movs	r1, #44	; 0x2c
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	4413      	add	r3, r2
 800145c:	3339      	adds	r3, #57	; 0x39
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	212c      	movs	r1, #44	; 0x2c
 8001468:	fb01 f303 	mul.w	r3, r1, r3
 800146c:	4413      	add	r3, r2
 800146e:	333f      	adds	r3, #63	; 0x3f
 8001470:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001474:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	78ba      	ldrb	r2, [r7, #2]
 800147a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800147e:	b2d0      	uxtb	r0, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	212c      	movs	r1, #44	; 0x2c
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4413      	add	r3, r2
 800148a:	333a      	adds	r3, #58	; 0x3a
 800148c:	4602      	mov	r2, r0
 800148e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001490:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da09      	bge.n	80014ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	212c      	movs	r1, #44	; 0x2c
 800149e:	fb01 f303 	mul.w	r3, r1, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	333b      	adds	r3, #59	; 0x3b
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e008      	b.n	80014be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	212c      	movs	r1, #44	; 0x2c
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	333b      	adds	r3, #59	; 0x3b
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	333c      	adds	r3, #60	; 0x3c
 80014cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	787c      	ldrb	r4, [r7, #1]
 80014d8:	78ba      	ldrb	r2, [r7, #2]
 80014da:	78f9      	ldrb	r1, [r7, #3]
 80014dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	4623      	mov	r3, r4
 80014ee:	f003 fe3d 	bl	800516c <USB_HC_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}

08001508 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_HCD_HC_Halt+0x1e>
 8001522:	2302      	movs	r3, #2
 8001524:	e00f      	b.n	8001546 <HAL_HCD_HC_Halt+0x3e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	78fa      	ldrb	r2, [r7, #3]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f004 f88d 	bl	8005656 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	70fb      	strb	r3, [r7, #3]
 8001562:	460b      	mov	r3, r1
 8001564:	70bb      	strb	r3, [r7, #2]
 8001566:	4613      	mov	r3, r2
 8001568:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	333b      	adds	r3, #59	; 0x3b
 8001578:	78ba      	ldrb	r2, [r7, #2]
 800157a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	212c      	movs	r1, #44	; 0x2c
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	333f      	adds	r3, #63	; 0x3f
 800158a:	787a      	ldrb	r2, [r7, #1]
 800158c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800158e:	7c3b      	ldrb	r3, [r7, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d112      	bne.n	80015ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	212c      	movs	r1, #44	; 0x2c
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	3342      	adds	r3, #66	; 0x42
 80015a2:	2203      	movs	r2, #3
 80015a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	333d      	adds	r3, #61	; 0x3d
 80015b4:	7f3a      	ldrb	r2, [r7, #28]
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e008      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	212c      	movs	r1, #44	; 0x2c
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	3342      	adds	r3, #66	; 0x42
 80015c8:	2202      	movs	r2, #2
 80015ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	f200 80c6 	bhi.w	8001760 <HAL_HCD_HC_SubmitRequest+0x210>
 80015d4:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015da:	bf00      	nop
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	0800174d 	.word	0x0800174d
 80015e4:	08001651 	.word	0x08001651
 80015e8:	080016cf 	.word	0x080016cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80015ec:	7c3b      	ldrb	r3, [r7, #16]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f040 80b8 	bne.w	8001764 <HAL_HCD_HC_SubmitRequest+0x214>
 80015f4:	78bb      	ldrb	r3, [r7, #2]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 80b4 	bne.w	8001764 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80015fc:	8b3b      	ldrh	r3, [r7, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	212c      	movs	r1, #44	; 0x2c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	3355      	adds	r3, #85	; 0x55
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3355      	adds	r3, #85	; 0x55
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	212c      	movs	r1, #44	; 0x2c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3342      	adds	r3, #66	; 0x42
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800163a:	e093      	b.n	8001764 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3342      	adds	r3, #66	; 0x42
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
      break;
 800164e:	e089      	b.n	8001764 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001650:	78bb      	ldrb	r3, [r7, #2]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d11d      	bne.n	8001692 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	3355      	adds	r3, #85	; 0x55
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	212c      	movs	r1, #44	; 0x2c
 8001670:	fb01 f303 	mul.w	r3, r1, r3
 8001674:	4413      	add	r3, r2
 8001676:	3342      	adds	r3, #66	; 0x42
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800167c:	e073      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	212c      	movs	r1, #44	; 0x2c
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	3342      	adds	r3, #66	; 0x42
 800168c:	2202      	movs	r2, #2
 800168e:	701a      	strb	r2, [r3, #0]
      break;
 8001690:	e069      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	3354      	adds	r3, #84	; 0x54
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3342      	adds	r3, #66	; 0x42
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
      break;
 80016b8:	e055      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	3342      	adds	r3, #66	; 0x42
 80016c8:	2202      	movs	r2, #2
 80016ca:	701a      	strb	r2, [r3, #0]
      break;
 80016cc:	e04b      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80016ce:	78bb      	ldrb	r3, [r7, #2]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11d      	bne.n	8001710 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	212c      	movs	r1, #44	; 0x2c
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	3355      	adds	r3, #85	; 0x55
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	212c      	movs	r1, #44	; 0x2c
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	3342      	adds	r3, #66	; 0x42
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016fa:	e034      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3342      	adds	r3, #66	; 0x42
 800170a:	2202      	movs	r2, #2
 800170c:	701a      	strb	r2, [r3, #0]
      break;
 800170e:	e02a      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	212c      	movs	r1, #44	; 0x2c
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	3354      	adds	r3, #84	; 0x54
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d109      	bne.n	8001738 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3342      	adds	r3, #66	; 0x42
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
      break;
 8001736:	e016      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	3342      	adds	r3, #66	; 0x42
 8001746:	2202      	movs	r2, #2
 8001748:	701a      	strb	r2, [r3, #0]
      break;
 800174a:	e00c      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	3342      	adds	r3, #66	; 0x42
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
      break;
 800175e:	e002      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001760:	bf00      	nop
 8001762:	e000      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001764:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	212c      	movs	r1, #44	; 0x2c
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	3344      	adds	r3, #68	; 0x44
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	8b3a      	ldrh	r2, [r7, #24]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	202c      	movs	r0, #44	; 0x2c
 8001780:	fb00 f303 	mul.w	r3, r0, r3
 8001784:	440b      	add	r3, r1
 8001786:	334c      	adds	r3, #76	; 0x4c
 8001788:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3360      	adds	r3, #96	; 0x60
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3350      	adds	r3, #80	; 0x50
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3339      	adds	r3, #57	; 0x39
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	3361      	adds	r3, #97	; 0x61
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	222c      	movs	r2, #44	; 0x2c
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	3338      	adds	r3, #56	; 0x38
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	18d1      	adds	r1, r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	f003 fde0 	bl	80053b0 <USB_HC_StartXfer>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop

080017fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f003 faee 	bl	8004df4 <USB_GetMode>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	f040 80f6 	bne.w	8001a0c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f003 fab1 	bl	8004d8c <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80ec 	beq.w	8001a0a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 faa8 	bl	8004d8c <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001846:	d104      	bne.n	8001852 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001850:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fa98 	bl	8004d8c <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001866:	d104      	bne.n	8001872 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001870:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fa88 	bl	8004d8c <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001886:	d104      	bne.n	8001892 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001890:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fa78 	bl	8004d8c <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d103      	bne.n	80018ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2202      	movs	r2, #2
 80018ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fa6a 	bl	8004d8c <USB_ReadInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018c2:	d11c      	bne.n	80018fe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80018de:	2110      	movs	r1, #16
 80018e0:	6938      	ldr	r0, [r7, #16]
 80018e2:	f003 f959 	bl	8004b98 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80018e6:	6938      	ldr	r0, [r7, #16]
 80018e8:	f003 f98a 	bl	8004c00 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fb74 	bl	8004fe0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f00a fd25 	bl	800c348 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fa42 	bl	8004d8c <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001912:	d102      	bne.n	800191a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f001 f9ce 	bl	8002cb6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fa34 	bl	8004d8c <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b08      	cmp	r3, #8
 800192c:	d106      	bne.n	800193c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f00a fcee 	bl	800c310 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2208      	movs	r2, #8
 800193a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f003 fa23 	bl	8004d8c <USB_ReadInterrupts>
 8001946:	4603      	mov	r3, r0
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b10      	cmp	r3, #16
 800194e:	d101      	bne.n	8001954 <HAL_HCD_IRQHandler+0x158>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_HCD_IRQHandler+0x15a>
 8001954:	2300      	movs	r3, #0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d012      	beq.n	8001980 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699a      	ldr	r2, [r3, #24]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0210 	bic.w	r2, r2, #16
 8001968:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f001 f8d1 	bl	8002b12 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0210 	orr.w	r2, r2, #16
 800197e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fa01 	bl	8004d8c <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001994:	d13a      	bne.n	8001a0c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fe4a 	bl	8005634 <USB_HC_ReadInterrupt>
 80019a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e025      	b.n	80019f4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d018      	beq.n	80019ee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d2:	d106      	bne.n	80019e2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f8ab 	bl	8001b36 <HCD_HC_IN_IRQHandler>
 80019e0:	e005      	b.n	80019ee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fcc6 	bl	800237a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3d4      	bcc.n	80019a8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	e000      	b.n	8001a0c <HAL_HCD_IRQHandler+0x210>
      return;
 8001a0a:	bf00      	nop
    }
  }
}
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_HCD_Start+0x16>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e013      	b.n	8001a50 <HAL_HCD_Start+0x3e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fb36 	bl	80050a8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 f83b 	bl	8004abc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_HCD_Stop+0x16>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e00d      	b.n	8001a8a <HAL_HCD_Stop+0x32>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 ff24 	bl	80058c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fad8 	bl	8005054 <USB_ResetPort>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3360      	adds	r3, #96	; 0x60
 8001ac8:	781b      	ldrb	r3, [r3, #0]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3350      	adds	r3, #80	; 0x50
 8001af0:	681b      	ldr	r3, [r3, #0]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fb1c 	bl	8005148 <USB_GetCurrentFrame>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 faf7 	bl	800511a <USB_GetHostSpeed>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 f929 	bl	8004db2 <USB_ReadChInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d11a      	bne.n	8001ba0 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	461a      	mov	r2, r3
 8001b78:	2304      	movs	r3, #4
 8001b7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3361      	adds	r3, #97	; 0x61
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fd5c 	bl	8005656 <USB_HC_Halt>
 8001b9e:	e0a2      	b.n	8001ce6 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 f901 	bl	8004db2 <USB_ReadChInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bba:	d11b      	bne.n	8001bf4 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3361      	adds	r3, #97	; 0x61
 8001bde:	2208      	movs	r2, #8
 8001be0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fd32 	bl	8005656 <USB_HC_Halt>
 8001bf2:	e078      	b.n	8001ce6 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 f8d7 	bl	8004db2 <USB_ReadChInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11a      	bne.n	8001c44 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3361      	adds	r3, #97	; 0x61
 8001c2e:	2206      	movs	r2, #6
 8001c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fd0a 	bl	8005656 <USB_HC_Halt>
 8001c42:	e050      	b.n	8001ce6 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 f8af 	bl	8004db2 <USB_ReadChInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5e:	d11b      	bne.n	8001c98 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3361      	adds	r3, #97	; 0x61
 8001c82:	2209      	movs	r2, #9
 8001c84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fce0 	bl	8005656 <USB_HC_Halt>
 8001c96:	e026      	b.n	8001ce6 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 f885 	bl	8004db2 <USB_ReadChInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b80      	cmp	r3, #128	; 0x80
 8001cb0:	d119      	bne.n	8001ce6 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3361      	adds	r3, #97	; 0x61
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fcb8 	bl	8005656 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 f85e 	bl	8004db2 <USB_ReadChInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d00:	d112      	bne.n	8001d28 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fca2 	bl	8005656 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d24:	6093      	str	r3, [r2, #8]
 8001d26:	e325      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 f83d 	bl	8004db2 <USB_ReadChInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	f040 80e8 	bne.w	8001f14 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	461a      	mov	r2, r3
 8001d52:	2320      	movs	r3, #32
 8001d54:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d019      	beq.n	8001d92 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3348      	adds	r3, #72	; 0x48
 8001d6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	0159      	lsls	r1, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	440b      	add	r3, r1
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d80:	1ad2      	subs	r2, r2, r3
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	202c      	movs	r0, #44	; 0x2c
 8001d88:	fb00 f303 	mul.w	r3, r0, r3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3350      	adds	r3, #80	; 0x50
 8001d90:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3361      	adds	r3, #97	; 0x61
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	212c      	movs	r1, #44	; 0x2c
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	335c      	adds	r3, #92	; 0x5c
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	333f      	adds	r3, #63	; 0x3f
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	333f      	adds	r3, #63	; 0x3f
 8001dea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d111      	bne.n	8001e14 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fc2b 	bl	8005656 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2310      	movs	r3, #16
 8001e10:	6093      	str	r3, [r2, #8]
 8001e12:	e03a      	b.n	8001e8a <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	333f      	adds	r3, #63	; 0x3f
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d009      	beq.n	8001e3c <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	333f      	adds	r3, #63	; 0x3f
 8001e36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d126      	bne.n	8001e8a <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	0151      	lsls	r1, r2, #5
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	440a      	add	r2, r1
 8001e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e5a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	212c      	movs	r1, #44	; 0x2c
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	3360      	adds	r3, #96	; 0x60
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	b2d9      	uxtb	r1, r3
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	202c      	movs	r0, #44	; 0x2c
 8001e78:	fb00 f303 	mul.w	r3, r0, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3360      	adds	r3, #96	; 0x60
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f00a fa6d 	bl	800c364 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d12b      	bne.n	8001eea <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3348      	adds	r3, #72	; 0x48
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	fb00 f202 	mul.w	r2, r0, r2
 8001eac:	440a      	add	r2, r1
 8001eae:	3240      	adds	r2, #64	; 0x40
 8001eb0:	8812      	ldrh	r2, [r2, #0]
 8001eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 825a 	beq.w	8002374 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	3354      	adds	r3, #84	; 0x54
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2d8      	uxtb	r0, r3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3354      	adds	r3, #84	; 0x54
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e244      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	212c      	movs	r1, #44	; 0x2c
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3354      	adds	r3, #84	; 0x54
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2d8      	uxtb	r0, r3
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	212c      	movs	r1, #44	; 0x2c
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3354      	adds	r3, #84	; 0x54
 8001f0e:	4602      	mov	r2, r0
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	e22f      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 ff47 	bl	8004db2 <USB_ReadChInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d109      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	6093      	str	r3, [r2, #8]
 8001f40:	e218      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 ff30 	bl	8004db2 <USB_ReadChInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	f040 816b 	bne.w	8002234 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	212c      	movs	r1, #44	; 0x2c
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3361      	adds	r3, #97	; 0x61
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d112      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3361      	adds	r3, #97	; 0x61
 8001f92:	2202      	movs	r2, #2
 8001f94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3360      	adds	r3, #96	; 0x60
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e135      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3361      	adds	r3, #97	; 0x61
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d112      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3361      	adds	r3, #97	; 0x61
 8001fcc:	2202      	movs	r2, #2
 8001fce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3360      	adds	r3, #96	; 0x60
 8001fde:	2205      	movs	r2, #5
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e118      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	212c      	movs	r1, #44	; 0x2c
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	3361      	adds	r3, #97	; 0x61
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b07      	cmp	r3, #7
 8001ff6:	d009      	beq.n	800200c <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	3361      	adds	r3, #97	; 0x61
 8002006:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002008:	2b09      	cmp	r3, #9
 800200a:	d159      	bne.n	80020c0 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	3361      	adds	r3, #97	; 0x61
 800201a:	2202      	movs	r2, #2
 800201c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	335c      	adds	r3, #92	; 0x5c
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	202c      	movs	r0, #44	; 0x2c
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	440b      	add	r3, r1
 800203c:	335c      	adds	r3, #92	; 0x5c
 800203e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	335c      	adds	r3, #92	; 0x5c
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d912      	bls.n	800207a <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	335c      	adds	r3, #92	; 0x5c
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3360      	adds	r3, #96	; 0x60
 8002074:	2204      	movs	r2, #4
 8002076:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002078:	e0cd      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3360      	adds	r3, #96	; 0x60
 8002088:	2202      	movs	r2, #2
 800208a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020a2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020aa:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020be:	e0aa      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3361      	adds	r3, #97	; 0x61
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d109      	bne.n	80020e8 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3361      	adds	r3, #97	; 0x61
 80020e2:	2202      	movs	r2, #2
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e096      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3361      	adds	r3, #97	; 0x61
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d109      	bne.n	8002110 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3361      	adds	r3, #97	; 0x61
 800210a:	2202      	movs	r2, #2
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e082      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3361      	adds	r3, #97	; 0x61
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d13f      	bne.n	80021a4 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3361      	adds	r3, #97	; 0x61
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3360      	adds	r3, #96	; 0x60
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	333f      	adds	r3, #63	; 0x3f
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	333f      	adds	r3, #63	; 0x3f
 800216a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800216c:	2b02      	cmp	r3, #2
 800216e:	d152      	bne.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002186:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800218e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e038      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3361      	adds	r3, #97	; 0x61
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d123      	bne.n	8002200 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3361      	adds	r3, #97	; 0x61
 80021c6:	2202      	movs	r2, #2
 80021c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	335c      	adds	r3, #92	; 0x5c
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	202c      	movs	r0, #44	; 0x2c
 80021e2:	fb00 f303 	mul.w	r3, r0, r3
 80021e6:	440b      	add	r3, r1
 80021e8:	335c      	adds	r3, #92	; 0x5c
 80021ea:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e00a      	b.n	8002216 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3361      	adds	r3, #97	; 0x61
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	f000 80ae 	beq.w	8002372 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	b2d9      	uxtb	r1, r3
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	202c      	movs	r0, #44	; 0x2c
 8002220:	fb00 f303 	mul.w	r3, r0, r3
 8002224:	4413      	add	r3, r2
 8002226:	3360      	adds	r3, #96	; 0x60
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f00a f899 	bl	800c364 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002232:	e09f      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fdb7 	bl	8004db2 <USB_ReadChInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	d123      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225a:	461a      	mov	r2, r3
 800225c:	2340      	movs	r3, #64	; 0x40
 800225e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3361      	adds	r3, #97	; 0x61
 800226e:	2205      	movs	r2, #5
 8002270:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f003 f9e1 	bl	8005656 <USB_HC_Halt>
 8002294:	e06e      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fd86 	bl	8004db2 <USB_ReadChInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d161      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	333f      	adds	r3, #63	; 0x3f
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d11a      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	335c      	adds	r3, #92	; 0x5c
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3361      	adds	r3, #97	; 0x61
 80022e4:	2204      	movs	r2, #4
 80022e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 f9af 	bl	8005656 <USB_HC_Halt>
 80022f8:	e031      	b.n	800235e <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333f      	adds	r3, #63	; 0x3f
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	333f      	adds	r3, #63	; 0x3f
 800231c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800231e:	2b02      	cmp	r3, #2
 8002320:	d11d      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	335c      	adds	r3, #92	; 0x5c
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d110      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3361      	adds	r3, #97	; 0x61
 800234a:	2204      	movs	r2, #4
 800234c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f003 f97c 	bl	8005656 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	461a      	mov	r2, r3
 800236c:	2310      	movs	r3, #16
 800236e:	6093      	str	r3, [r2, #8]
 8002370:	e000      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8002372:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fd07 	bl	8004db2 <USB_ReadChInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d11a      	bne.n	80023e4 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	461a      	mov	r2, r3
 80023bc:	2304      	movs	r3, #4
 80023be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	2207      	movs	r2, #7
 80023d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 f93a 	bl	8005656 <USB_HC_Halt>
 80023e2:	e393      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fcdf 	bl	8004db2 <USB_ReadChInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d137      	bne.n	800246e <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	461a      	mov	r2, r3
 800240c:	2320      	movs	r3, #32
 800240e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	333d      	adds	r3, #61	; 0x3d
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	f040 8373 	bne.w	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	333d      	adds	r3, #61	; 0x3d
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3360      	adds	r3, #96	; 0x60
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3361      	adds	r3, #97	; 0x61
 8002458:	2203      	movs	r2, #3
 800245a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 f8f5 	bl	8005656 <USB_HC_Halt>
 800246c:	e34e      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fc9a 	bl	8004db2 <USB_ReadChInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d112      	bne.n	80024b0 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	461a      	mov	r2, r3
 8002498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 f8d4 	bl	8005656 <USB_HC_Halt>
 80024ae:	e32d      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 fc79 	bl	8004db2 <USB_ReadChInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d142      	bne.n	8002550 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	335c      	adds	r3, #92	; 0x5c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fc63 	bl	8004db2 <USB_ReadChInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d111      	bne.n	800251a <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	333d      	adds	r3, #61	; 0x3d
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2340      	movs	r3, #64	; 0x40
 8002518:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	2301      	movs	r3, #1
 800252a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3361      	adds	r3, #97	; 0x61
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f884 	bl	8005656 <USB_HC_Halt>
 800254e:	e2dd      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f002 fc29 	bl	8004db2 <USB_ReadChInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d12c      	bne.n	80025c4 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3361      	adds	r3, #97	; 0x61
 8002578:	2205      	movs	r2, #5
 800257a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	333d      	adds	r3, #61	; 0x3d
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	335c      	adds	r3, #92	; 0x5c
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 f853 	bl	8005656 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	461a      	mov	r2, r3
 80025be:	2340      	movs	r3, #64	; 0x40
 80025c0:	6093      	str	r3, [r2, #8]
 80025c2:	e2a3      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 fbef 	bl	8004db2 <USB_ReadChInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11a      	bne.n	8002614 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	461a      	mov	r2, r3
 80025ec:	2308      	movs	r3, #8
 80025ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3361      	adds	r3, #97	; 0x61
 80025fe:	2206      	movs	r2, #6
 8002600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f003 f822 	bl	8005656 <USB_HC_Halt>
 8002612:	e27b      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fbc7 	bl	8004db2 <USB_ReadChInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b10      	cmp	r3, #16
 800262c:	d140      	bne.n	80026b0 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	335c      	adds	r3, #92	; 0x5c
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	2204      	movs	r2, #4
 8002650:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	333d      	adds	r3, #61	; 0x3d
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d112      	bne.n	800268c <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	333c      	adds	r3, #60	; 0x3c
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	333d      	adds	r3, #61	; 0x3d
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f002 ffdd 	bl	8005656 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2310      	movs	r3, #16
 80026ac:	6093      	str	r3, [r2, #8]
 80026ae:	e22d      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 fb79 	bl	8004db2 <USB_ReadChInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b80      	cmp	r3, #128	; 0x80
 80026c8:	d164      	bne.n	8002794 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d111      	bne.n	80026f6 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3361      	adds	r3, #97	; 0x61
 80026e0:	2207      	movs	r2, #7
 80026e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 ffb1 	bl	8005656 <USB_HC_Halt>
 80026f4:	e044      	b.n	8002780 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	335c      	adds	r3, #92	; 0x5c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	202c      	movs	r0, #44	; 0x2c
 800270e:	fb00 f303 	mul.w	r3, r0, r3
 8002712:	440b      	add	r3, r1
 8002714:	335c      	adds	r3, #92	; 0x5c
 8002716:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	335c      	adds	r3, #92	; 0x5c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d920      	bls.n	800276e <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	335c      	adds	r3, #92	; 0x5c
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3360      	adds	r3, #96	; 0x60
 800274c:	2204      	movs	r2, #4
 800274e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	b2d9      	uxtb	r1, r3
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	202c      	movs	r0, #44	; 0x2c
 800275a:	fb00 f303 	mul.w	r3, r0, r3
 800275e:	4413      	add	r3, r2
 8002760:	3360      	adds	r3, #96	; 0x60
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f009 fdfc 	bl	800c364 <HAL_HCD_HC_NotifyURBChange_Callback>
 800276c:	e008      	b.n	8002780 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3360      	adds	r3, #96	; 0x60
 800277c:	2202      	movs	r2, #2
 800277e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	6093      	str	r3, [r2, #8]
 8002792:	e1bb      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fb07 	bl	8004db2 <USB_ReadChInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d11b      	bne.n	80027e8 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3361      	adds	r3, #97	; 0x61
 80027be:	2209      	movs	r2, #9
 80027c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 ff42 	bl	8005656 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	461a      	mov	r2, r3
 80027e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e4:	6093      	str	r3, [r2, #8]
 80027e6:	e191      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fadd 	bl	8004db2 <USB_ReadChInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	f040 8184 	bne.w	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2302      	movs	r3, #2
 8002814:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	3361      	adds	r3, #97	; 0x61
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	f040 8087 	bne.w	800293a <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3361      	adds	r3, #97	; 0x61
 800283a:	2202      	movs	r2, #2
 800283c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3360      	adds	r3, #96	; 0x60
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	333f      	adds	r3, #63	; 0x3f
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d00a      	beq.n	800287a <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	333f      	adds	r3, #63	; 0x3f
 8002872:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002874:	2b03      	cmp	r3, #3
 8002876:	f040 8139 	bne.w	8002aec <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3355      	adds	r3, #85	; 0x55
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f083 0301 	eor.w	r3, r3, #1
 8002896:	b2d8      	uxtb	r0, r3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3355      	adds	r3, #85	; 0x55
 80028a6:	4602      	mov	r2, r0
 80028a8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	f040 811c 	bne.w	8002aec <HCD_HC_OUT_IRQHandler+0x772>
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	334c      	adds	r3, #76	; 0x4c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8111 	beq.w	8002aec <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	334c      	adds	r3, #76	; 0x4c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	202c      	movs	r0, #44	; 0x2c
 80028e0:	fb00 f202 	mul.w	r2, r0, r2
 80028e4:	440a      	add	r2, r1
 80028e6:	3240      	adds	r2, #64	; 0x40
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	3b01      	subs	r3, #1
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	202c      	movs	r0, #44	; 0x2c
 80028f4:	fb00 f202 	mul.w	r2, r0, r2
 80028f8:	440a      	add	r2, r1
 80028fa:	3240      	adds	r2, #64	; 0x40
 80028fc:	8812      	ldrh	r2, [r2, #0]
 80028fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80ee 	beq.w	8002aec <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3355      	adds	r3, #85	; 0x55
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	f083 0301 	eor.w	r3, r3, #1
 8002924:	b2d8      	uxtb	r0, r3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	3355      	adds	r3, #85	; 0x55
 8002934:	4602      	mov	r2, r0
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e0d8      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3361      	adds	r3, #97	; 0x61
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d109      	bne.n	8002962 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3361      	adds	r3, #97	; 0x61
 800295c:	2202      	movs	r2, #2
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e0c4      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3361      	adds	r3, #97	; 0x61
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b04      	cmp	r3, #4
 8002974:	d112      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3361      	adds	r3, #97	; 0x61
 8002984:	2202      	movs	r2, #2
 8002986:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e0a7      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d112      	bne.n	80029d6 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3361      	adds	r3, #97	; 0x61
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3360      	adds	r3, #96	; 0x60
 80029d0:	2202      	movs	r2, #2
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	e08a      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3361      	adds	r3, #97	; 0x61
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d112      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3361      	adds	r3, #97	; 0x61
 80029f8:	2202      	movs	r2, #2
 80029fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3360      	adds	r3, #96	; 0x60
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e06d      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3361      	adds	r3, #97	; 0x61
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b07      	cmp	r3, #7
 8002a22:	d009      	beq.n	8002a38 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3361      	adds	r3, #97	; 0x61
 8002a32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d168      	bne.n	8002b0a <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3361      	adds	r3, #97	; 0x61
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	335c      	adds	r3, #92	; 0x5c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	202c      	movs	r0, #44	; 0x2c
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	440b      	add	r3, r1
 8002a68:	335c      	adds	r3, #92	; 0x5c
 8002a6a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	335c      	adds	r3, #92	; 0x5c
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d912      	bls.n	8002aa6 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	335c      	adds	r3, #92	; 0x5c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3360      	adds	r3, #96	; 0x60
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aa4:	e021      	b.n	8002aea <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3360      	adds	r3, #96	; 0x60
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ace:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	b2d9      	uxtb	r1, r3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	202c      	movs	r0, #44	; 0x2c
 8002af6:	fb00 f303 	mul.w	r3, r0, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3360      	adds	r3, #96	; 0x60
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f009 fc2e 	bl	800c364 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b08:	e000      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8002b0a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b08a      	sub	sp, #40	; 0x28
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	0c5b      	lsrs	r3, r3, #17
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b46:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d004      	beq.n	8002b58 <HCD_RXQLVL_IRQHandler+0x46>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	f000 80a9 	beq.w	8002ca8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b56:	e0aa      	b.n	8002cae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80a6 	beq.w	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3344      	adds	r3, #68	; 0x44
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 809b 	beq.w	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3350      	adds	r3, #80	; 0x50
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	441a      	add	r2, r3
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	202c      	movs	r0, #44	; 0x2c
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
 8002b94:	440b      	add	r3, r1
 8002b96:	334c      	adds	r3, #76	; 0x4c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d87a      	bhi.n	8002c94 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3344      	adds	r3, #68	; 0x44
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f002 f890 	bl	8004cdc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3344      	adds	r3, #68	; 0x44
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	441a      	add	r2, r3
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	202c      	movs	r0, #44	; 0x2c
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	440b      	add	r3, r1
 8002bdc:	3344      	adds	r3, #68	; 0x44
 8002bde:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3350      	adds	r3, #80	; 0x50
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	441a      	add	r2, r3
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	202c      	movs	r0, #44	; 0x2c
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	440b      	add	r3, r1
 8002c00:	3350      	adds	r3, #80	; 0x50
 8002c02:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	0cdb      	lsrs	r3, r3, #19
 8002c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c18:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3340      	adds	r3, #64	; 0x40
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d13c      	bne.n	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d039      	beq.n	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c4e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c56:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3354      	adds	r3, #84	; 0x54
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f083 0301 	eor.w	r3, r3, #1
 8002c7e:	b2d8      	uxtb	r0, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3354      	adds	r3, #84	; 0x54
 8002c8e:	4602      	mov	r2, r0
 8002c90:	701a      	strb	r2, [r3, #0]
      break;
 8002c92:	e00b      	b.n	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3360      	adds	r3, #96	; 0x60
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	701a      	strb	r2, [r3, #0]
      break;
 8002ca6:	e001      	b.n	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ca8:	bf00      	nop
 8002caa:	e000      	b.n	8002cae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cac:	bf00      	nop
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ce2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d10b      	bne.n	8002d06 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f009 fb17 	bl	800c32c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d132      	bne.n	8002d76 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d126      	bne.n	8002d70 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d113      	bne.n	8002d52 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d34:	d106      	bne.n	8002d44 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 f94f 	bl	8004fe0 <USB_InitFSLSPClkSel>
 8002d42:	e011      	b.n	8002d68 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 f948 	bl	8004fe0 <USB_InitFSLSPClkSel>
 8002d50:	e00a      	b.n	8002d68 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d106      	bne.n	8002d68 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d60:	461a      	mov	r2, r3
 8002d62:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d66:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f009 fb09 	bl	800c380 <HAL_HCD_PortEnabled_Callback>
 8002d6e:	e002      	b.n	8002d76 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f009 fb13 	bl	800c39c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d103      	bne.n	8002d88 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f043 0320 	orr.w	r3, r3, #32
 8002d86:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dca:	f7fd ff29 	bl	8000c20 <HAL_GetTick>
 8002dce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dd0:	e009      	b.n	8002de6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dd2:	f7fd ff25 	bl	8000c20 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de0:	d901      	bls.n	8002de6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e022      	b.n	8002e2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0f      	ldr	r2, [pc, #60]	; (8002e38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e00:	f7fd ff0e 	bl	8000c20 <HAL_GetTick>
 8002e04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e06:	e009      	b.n	8002e1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e08:	f7fd ff0a 	bl	8000c20 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e16:	d901      	bls.n	8002e1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e007      	b.n	8002e2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e28:	d1ee      	bne.n	8002e08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e29b      	b.n	800338a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8087 	beq.w	8002f6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e60:	4b96      	ldr	r3, [pc, #600]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d00c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6c:	4b93      	ldr	r3, [pc, #588]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d112      	bne.n	8002e9e <HAL_RCC_OscConfig+0x62>
 8002e78:	4b90      	ldr	r3, [pc, #576]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e84:	d10b      	bne.n	8002e9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	4b8d      	ldr	r3, [pc, #564]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d06c      	beq.n	8002f6c <HAL_RCC_OscConfig+0x130>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d168      	bne.n	8002f6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e275      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x7a>
 8002ea8:	4b84      	ldr	r3, [pc, #528]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a83      	ldr	r2, [pc, #524]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e02e      	b.n	8002f14 <HAL_RCC_OscConfig+0xd8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x9c>
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7e      	ldr	r2, [pc, #504]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b7c      	ldr	r3, [pc, #496]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7b      	ldr	r2, [pc, #492]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e01d      	b.n	8002f14 <HAL_RCC_OscConfig+0xd8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0xc0>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a72      	ldr	r2, [pc, #456]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e00b      	b.n	8002f14 <HAL_RCC_OscConfig+0xd8>
 8002efc:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a6e      	ldr	r2, [pc, #440]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b6c      	ldr	r3, [pc, #432]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6b      	ldr	r2, [pc, #428]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fd fe80 	bl	8000c20 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f24:	f7fd fe7c 	bl	8000c20 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e229      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0xe8>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fd fe6c 	bl	8000c20 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fd fe68 	bl	8000c20 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e215      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5e:	4b57      	ldr	r3, [pc, #348]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x110>
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d069      	beq.n	800304e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f7a:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b4d      	ldr	r3, [pc, #308]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d11c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x190>
 8002f92:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e1e9      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	493d      	ldr	r1, [pc, #244]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	e040      	b.n	800304e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d023      	beq.n	800301c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd4:	4b39      	ldr	r3, [pc, #228]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a38      	ldr	r2, [pc, #224]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fd fe1e 	bl	8000c20 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fd fe1a 	bl	8000c20 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1c7      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b30      	ldr	r3, [pc, #192]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4929      	ldr	r1, [pc, #164]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
 800301a:	e018      	b.n	800304e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a26      	ldr	r2, [pc, #152]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fd fdfa 	bl	8000c20 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fd fdf6 	bl	8000c20 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1a3      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d038      	beq.n	80030cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d019      	beq.n	8003096 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	4a15      	ldr	r2, [pc, #84]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fd fdd7 	bl	8000c20 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003076:	f7fd fdd3 	bl	8000c20 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e180      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 800308a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x23a>
 8003094:	e01a      	b.n	80030cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 8003098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <HAL_RCC_OscConfig+0x280>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fd fdbd 	bl	8000c20 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fd fdb9 	bl	8000c20 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d903      	bls.n	80030c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e166      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
 80030bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	4b92      	ldr	r3, [pc, #584]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ee      	bne.n	80030aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a4 	beq.w	8003222 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b8c      	ldr	r3, [pc, #560]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	4b89      	ldr	r3, [pc, #548]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a88      	ldr	r2, [pc, #544]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
 80030f2:	4b86      	ldr	r3, [pc, #536]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003102:	4b83      	ldr	r3, [pc, #524]	; (8003310 <HAL_RCC_OscConfig+0x4d4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800310e:	4b80      	ldr	r3, [pc, #512]	; (8003310 <HAL_RCC_OscConfig+0x4d4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7f      	ldr	r2, [pc, #508]	; (8003310 <HAL_RCC_OscConfig+0x4d4>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311a:	f7fd fd81 	bl	8000c20 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7fd fd7d 	bl	8000c20 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b64      	cmp	r3, #100	; 0x64
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e12a      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003134:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_RCC_OscConfig+0x4d4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x31a>
 8003148:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a6f      	ldr	r2, [pc, #444]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	e02d      	b.n	80031b2 <HAL_RCC_OscConfig+0x376>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x33c>
 800315e:	4b6b      	ldr	r3, [pc, #428]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a6a      	ldr	r2, [pc, #424]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	4a67      	ldr	r2, [pc, #412]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6713      	str	r3, [r2, #112]	; 0x70
 8003176:	e01c      	b.n	80031b2 <HAL_RCC_OscConfig+0x376>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d10c      	bne.n	800319a <HAL_RCC_OscConfig+0x35e>
 8003180:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003184:	4a61      	ldr	r2, [pc, #388]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6713      	str	r3, [r2, #112]	; 0x70
 800318c:	4b5f      	ldr	r3, [pc, #380]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a5e      	ldr	r2, [pc, #376]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	e00b      	b.n	80031b2 <HAL_RCC_OscConfig+0x376>
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	4a5b      	ldr	r2, [pc, #364]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d015      	beq.n	80031e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fd fd31 	bl	8000c20 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fd fd2d 	bl	8000c20 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0d8      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	4b4c      	ldr	r3, [pc, #304]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ee      	beq.n	80031c2 <HAL_RCC_OscConfig+0x386>
 80031e4:	e014      	b.n	8003210 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fd1b 	bl	8000c20 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd fd17 	bl	8000c20 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0c2      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ee      	bne.n	80031ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4b3d      	ldr	r3, [pc, #244]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a3c      	ldr	r2, [pc, #240]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80ae 	beq.w	8003388 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800322c:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b08      	cmp	r3, #8
 8003236:	d06d      	beq.n	8003314 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d14b      	bne.n	80032d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a31      	ldr	r2, [pc, #196]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fd fce8 	bl	8000c20 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fd fce4 	bl	8000c20 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e091      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	3b01      	subs	r3, #1
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	071b      	lsls	r3, r3, #28
 800329e:	491b      	ldr	r1, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd fcb6 	bl	8000c20 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fd fcb2 	bl	8000c20 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e05f      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x47c>
 80032d6:	e057      	b.n	8003388 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0b      	ldr	r2, [pc, #44]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd fc9c 	bl	8000c20 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fd fc98 	bl	8000c20 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e045      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x4b0>
 800330a:	e03d      	b.n	8003388 <HAL_RCC_OscConfig+0x54c>
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <HAL_RCC_OscConfig+0x558>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d030      	beq.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d129      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d122      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800334a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334c:	4293      	cmp	r3, r2
 800334e:	d119      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d10f      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800

08003398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0d0      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d910      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b67      	ldr	r3, [pc, #412]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 020f 	bic.w	r2, r3, #15
 80033c6:	4965      	ldr	r1, [pc, #404]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d040      	beq.n	80034bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d115      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e073      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06b      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b39      	ldr	r3, [pc, #228]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4936      	ldr	r1, [pc, #216]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	4313      	orrs	r3, r2
 800348a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348c:	f7fd fbc8 	bl	8000c20 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fd fbc4 	bl	8000c20 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e053      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d210      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	4922      	ldr	r1, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490a      	ldr	r1, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1cc>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1d0>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1d4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fb24 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00
 8003560:	40023800 	.word	0x40023800
 8003564:	0800e028 	.word	0x0800e028
 8003568:	20000000 	.word	0x20000000
 800356c:	20000004 	.word	0x20000004

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b094      	sub	sp, #80	; 0x50
 8003576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	647b      	str	r3, [r7, #68]	; 0x44
 800357c:	2300      	movs	r3, #0
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003580:	2300      	movs	r3, #0
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003588:	4b79      	ldr	r3, [pc, #484]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d00d      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003594:	2b08      	cmp	r3, #8
 8003596:	f200 80e1 	bhi.w	800375c <HAL_RCC_GetSysClockFreq+0x1ec>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x34>
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x3a>
 80035a2:	e0db      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b73      	ldr	r3, [pc, #460]	; (8003774 <HAL_RCC_GetSysClockFreq+0x204>)
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a8:	e0db      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035aa:	4b73      	ldr	r3, [pc, #460]	; (8003778 <HAL_RCC_GetSysClockFreq+0x208>)
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ae:	e0d8      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b6f      	ldr	r3, [pc, #444]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c6:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	2200      	movs	r2, #0
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
 80035da:	2300      	movs	r3, #0
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
 80035de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035e2:	4622      	mov	r2, r4
 80035e4:	462b      	mov	r3, r5
 80035e6:	f04f 0000 	mov.w	r0, #0
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	0159      	lsls	r1, r3, #5
 80035f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f4:	0150      	lsls	r0, r2, #5
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4621      	mov	r1, r4
 80035fc:	1a51      	subs	r1, r2, r1
 80035fe:	6139      	str	r1, [r7, #16]
 8003600:	4629      	mov	r1, r5
 8003602:	eb63 0301 	sbc.w	r3, r3, r1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003614:	4659      	mov	r1, fp
 8003616:	018b      	lsls	r3, r1, #6
 8003618:	4651      	mov	r1, sl
 800361a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800361e:	4651      	mov	r1, sl
 8003620:	018a      	lsls	r2, r1, #6
 8003622:	4651      	mov	r1, sl
 8003624:	ebb2 0801 	subs.w	r8, r2, r1
 8003628:	4659      	mov	r1, fp
 800362a:	eb63 0901 	sbc.w	r9, r3, r1
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800363e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003642:	4690      	mov	r8, r2
 8003644:	4699      	mov	r9, r3
 8003646:	4623      	mov	r3, r4
 8003648:	eb18 0303 	adds.w	r3, r8, r3
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	462b      	mov	r3, r5
 8003650:	eb49 0303 	adc.w	r3, r9, r3
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003662:	4629      	mov	r1, r5
 8003664:	024b      	lsls	r3, r1, #9
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800366c:	4621      	mov	r1, r4
 800366e:	024a      	lsls	r2, r1, #9
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003676:	2200      	movs	r2, #0
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
 800367a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800367c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003680:	f7fc fe2e 	bl	80002e0 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	e058      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b38      	ldr	r3, [pc, #224]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	2200      	movs	r2, #0
 8003696:	4618      	mov	r0, r3
 8003698:	4611      	mov	r1, r2
 800369a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
 80036a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036a8:	4642      	mov	r2, r8
 80036aa:	464b      	mov	r3, r9
 80036ac:	f04f 0000 	mov.w	r0, #0
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	0159      	lsls	r1, r3, #5
 80036b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ba:	0150      	lsls	r0, r2, #5
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4641      	mov	r1, r8
 80036c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e0:	ebb2 040a 	subs.w	r4, r2, sl
 80036e4:	eb63 050b 	sbc.w	r5, r3, fp
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	00eb      	lsls	r3, r5, #3
 80036f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	4614      	mov	r4, r2
 80036fa:	461d      	mov	r5, r3
 80036fc:	4643      	mov	r3, r8
 80036fe:	18e3      	adds	r3, r4, r3
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	464b      	mov	r3, r9
 8003704:	eb45 0303 	adc.w	r3, r5, r3
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003716:	4629      	mov	r1, r5
 8003718:	028b      	lsls	r3, r1, #10
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003720:	4621      	mov	r1, r4
 8003722:	028a      	lsls	r2, r1, #10
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	61fa      	str	r2, [r7, #28]
 8003730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003734:	f7fc fdd4 	bl	80002e0 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4613      	mov	r3, r2
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	3301      	adds	r3, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetSysClockFreq+0x204>)
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003764:	4618      	mov	r0, r3
 8003766:	3750      	adds	r7, #80	; 0x50
 8003768:	46bd      	mov	sp, r7
 800376a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200

0800377c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCC_GetHCLKFreq+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003798:	f7ff fff0 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	0800e038 	.word	0x0800e038

080037bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037c0:	f7ff ffdc 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	0800e038 	.word	0x0800e038

080037e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800380c:	4b69      	ldr	r3, [pc, #420]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a68      	ldr	r2, [pc, #416]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003812:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003816:	6093      	str	r3, [r2, #8]
 8003818:	4b66      	ldr	r3, [pc, #408]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003820:	4964      	ldr	r1, [pc, #400]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800382e:	2301      	movs	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d017      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800383e:	4b5d      	ldr	r3, [pc, #372]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003844:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	4959      	ldr	r1, [pc, #356]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385c:	d101      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800386a:	2301      	movs	r3, #1
 800386c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d017      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800387a:	4b4e      	ldr	r3, [pc, #312]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003880:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	494a      	ldr	r1, [pc, #296]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 808b 	beq.w	80039de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	4b3a      	ldr	r3, [pc, #232]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	4a39      	ldr	r2, [pc, #228]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6413      	str	r3, [r2, #64]	; 0x40
 80038d4:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a34      	ldr	r2, [pc, #208]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fd f998 	bl	8000c20 <HAL_GetTick>
 80038f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fd f994 	bl	8000c20 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e38f      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003906:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003912:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d035      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d02e      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003950:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003952:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003958:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d114      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd f95c 	bl	8000c20 <HAL_GetTick>
 8003968:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fd f958 	bl	8000c20 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e351      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ee      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800399a:	d111      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039aa:	400b      	ands	r3, r1
 80039ac:	4901      	ldr	r1, [pc, #4]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
 80039b2:	e00b      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40007000 	.word	0x40007000
 80039bc:	0ffffcff 	.word	0x0ffffcff
 80039c0:	4bac      	ldr	r3, [pc, #688]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4aab      	ldr	r2, [pc, #684]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039ca:	6093      	str	r3, [r2, #8]
 80039cc:	4ba9      	ldr	r3, [pc, #676]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	49a6      	ldr	r1, [pc, #664]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d010      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ea:	4ba2      	ldr	r3, [pc, #648]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f0:	4aa0      	ldr	r2, [pc, #640]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039fa:	4b9e      	ldr	r3, [pc, #632]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	499b      	ldr	r1, [pc, #620]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a18:	4b96      	ldr	r3, [pc, #600]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a26:	4993      	ldr	r1, [pc, #588]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a3a:	4b8e      	ldr	r3, [pc, #568]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a48:	498a      	ldr	r1, [pc, #552]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a5c:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6a:	4982      	ldr	r1, [pc, #520]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a7e:	4b7d      	ldr	r3, [pc, #500]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4979      	ldr	r1, [pc, #484]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa0:	4b74      	ldr	r3, [pc, #464]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f023 0203 	bic.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	4971      	ldr	r1, [pc, #452]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ac2:	4b6c      	ldr	r3, [pc, #432]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f023 020c 	bic.w	r2, r3, #12
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	4968      	ldr	r1, [pc, #416]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ae4:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	4960      	ldr	r1, [pc, #384]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b06:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	4957      	ldr	r1, [pc, #348]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b28:	4b52      	ldr	r3, [pc, #328]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	494f      	ldr	r1, [pc, #316]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	4946      	ldr	r1, [pc, #280]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b6c:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	493e      	ldr	r1, [pc, #248]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b8e:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	4935      	ldr	r1, [pc, #212]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bb0:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bbe:	492d      	ldr	r1, [pc, #180]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d011      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bd2:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be0:	4924      	ldr	r1, [pc, #144]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c20:	4914      	ldr	r1, [pc, #80]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c44:	490b      	ldr	r1, [pc, #44]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00f      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c68:	4902      	ldr	r1, [pc, #8]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c70:	e002      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c84:	4b8a      	ldr	r3, [pc, #552]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	4986      	ldr	r1, [pc, #536]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ca8:	4b81      	ldr	r3, [pc, #516]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb8:	497d      	ldr	r1, [pc, #500]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d006      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80d6 	beq.w	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cd4:	4b76      	ldr	r3, [pc, #472]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a75      	ldr	r2, [pc, #468]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce0:	f7fc ff9e 	bl	8000c20 <HAL_GetTick>
 8003ce4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ce8:	f7fc ff9a 	bl	8000c20 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e195      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cfa:	4b6d      	ldr	r3, [pc, #436]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d021      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11d      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d1a:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d20:	0c1b      	lsrs	r3, r3, #16
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d28:	4b61      	ldr	r3, [pc, #388]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2e:	0e1b      	lsrs	r3, r3, #24
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	019a      	lsls	r2, r3, #6
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	071b      	lsls	r3, r3, #28
 8003d4e:	4958      	ldr	r1, [pc, #352]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02e      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d80:	d129      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d82:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d90:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d96:	0f1b      	lsrs	r3, r3, #28
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	019a      	lsls	r2, r3, #6
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	061b      	lsls	r3, r3, #24
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	071b      	lsls	r3, r3, #28
 8003db6:	493e      	ldr	r1, [pc, #248]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dbe:	4b3c      	ldr	r3, [pc, #240]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc4:	f023 021f 	bic.w	r2, r3, #31
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	4938      	ldr	r1, [pc, #224]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01d      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003de2:	4b33      	ldr	r3, [pc, #204]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de8:	0e1b      	lsrs	r3, r3, #24
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003df0:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df6:	0f1b      	lsrs	r3, r3, #28
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	019a      	lsls	r2, r3, #6
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	061b      	lsls	r3, r3, #24
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	071b      	lsls	r3, r3, #28
 8003e16:	4926      	ldr	r1, [pc, #152]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d011      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	019a      	lsls	r2, r3, #6
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	491a      	ldr	r1, [pc, #104]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e4e:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e5a:	f7fc fee1 	bl	8000c20 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e62:	f7fc fedd 	bl	8000c20 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b64      	cmp	r3, #100	; 0x64
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e0d8      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	f040 80ce 	bne.w	8004024 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e94:	f7fc fec4 	bl	8000c20 <HAL_GetTick>
 8003e98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e9c:	f7fc fec0 	bl	8000c20 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d904      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0bb      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eb4:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec0:	d0ec      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d02e      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d12a      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eea:	4b51      	ldr	r3, [pc, #324]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ef8:	4b4d      	ldr	r3, [pc, #308]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	0f1b      	lsrs	r3, r3, #28
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	019a      	lsls	r2, r3, #6
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	061b      	lsls	r3, r3, #24
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	071b      	lsls	r3, r3, #28
 8003f1e:	4944      	ldr	r1, [pc, #272]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f26:	4b42      	ldr	r3, [pc, #264]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	493d      	ldr	r1, [pc, #244]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d022      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f54:	d11d      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	0e1b      	lsrs	r3, r3, #24
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f64:	4b32      	ldr	r3, [pc, #200]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	0f1b      	lsrs	r3, r3, #28
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	019a      	lsls	r2, r3, #6
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	071b      	lsls	r3, r3, #28
 8003f8a:	4929      	ldr	r1, [pc, #164]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d028      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	0e1b      	lsrs	r3, r3, #24
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	0c1b      	lsrs	r3, r3, #16
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	019a      	lsls	r2, r3, #6
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	4917      	ldr	r1, [pc, #92]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4911      	ldr	r1, [pc, #68]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a0e      	ldr	r2, [pc, #56]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffc:	f7fc fe10 	bl	8000c20 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004004:	f7fc fe0c 	bl	8000c20 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e007      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800401e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004022:	d1ef      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800

08004034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e040      	b.n	80040c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fc1e 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2224      	movs	r2, #36	; 0x24
 8004060:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8b0 	bl	80041d8 <UART_SetConfig>
 8004078:	4603      	mov	r3, r0
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e022      	b.n	80040c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fb08 	bl	80046a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800409e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fb8f 	bl	80047e4 <UART_CheckIdleState>
 80040c6:	4603      	mov	r3, r0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d171      	bne.n	80041cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_UART_Transmit+0x24>
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e06a      	b.n	80041ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2221      	movs	r2, #33	; 0x21
 8004104:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004106:	f7fc fd8b 	bl	8000c20 <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004124:	d108      	bne.n	8004138 <HAL_UART_Transmit+0x68>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d104      	bne.n	8004138 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e003      	b.n	8004140 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004140:	e02c      	b.n	800419c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fb96 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e038      	b.n	80041ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004170:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	3302      	adds	r3, #2
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e007      	b.n	800418a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	3301      	adds	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1cc      	bne.n	8004142 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2200      	movs	r2, #0
 80041b0:	2140      	movs	r1, #64	; 0x40
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fb63 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e005      	b.n	80041ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4ba6      	ldr	r3, [pc, #664]	; (800449c <UART_SetConfig+0x2c4>)
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6979      	ldr	r1, [r7, #20]
 800420c:	430b      	orrs	r3, r1
 800420e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a94      	ldr	r2, [pc, #592]	; (80044a0 <UART_SetConfig+0x2c8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d120      	bne.n	8004296 <UART_SetConfig+0xbe>
 8004254:	4b93      	ldr	r3, [pc, #588]	; (80044a4 <UART_SetConfig+0x2cc>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b03      	cmp	r3, #3
 8004260:	d816      	bhi.n	8004290 <UART_SetConfig+0xb8>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x90>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004279 	.word	0x08004279
 800426c:	08004285 	.word	0x08004285
 8004270:	0800427f 	.word	0x0800427f
 8004274:	0800428b 	.word	0x0800428b
 8004278:	2301      	movs	r3, #1
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e150      	b.n	8004520 <UART_SetConfig+0x348>
 800427e:	2302      	movs	r3, #2
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e14d      	b.n	8004520 <UART_SetConfig+0x348>
 8004284:	2304      	movs	r3, #4
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e14a      	b.n	8004520 <UART_SetConfig+0x348>
 800428a:	2308      	movs	r3, #8
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e147      	b.n	8004520 <UART_SetConfig+0x348>
 8004290:	2310      	movs	r3, #16
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e144      	b.n	8004520 <UART_SetConfig+0x348>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a83      	ldr	r2, [pc, #524]	; (80044a8 <UART_SetConfig+0x2d0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d132      	bne.n	8004306 <UART_SetConfig+0x12e>
 80042a0:	4b80      	ldr	r3, [pc, #512]	; (80044a4 <UART_SetConfig+0x2cc>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d828      	bhi.n	8004300 <UART_SetConfig+0x128>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0xdc>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	08004301 	.word	0x08004301
 80042bc:	08004301 	.word	0x08004301
 80042c0:	08004301 	.word	0x08004301
 80042c4:	080042f5 	.word	0x080042f5
 80042c8:	08004301 	.word	0x08004301
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004301 	.word	0x08004301
 80042d4:	080042ef 	.word	0x080042ef
 80042d8:	08004301 	.word	0x08004301
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004301 	.word	0x08004301
 80042e4:	080042fb 	.word	0x080042fb
 80042e8:	2300      	movs	r3, #0
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e118      	b.n	8004520 <UART_SetConfig+0x348>
 80042ee:	2302      	movs	r3, #2
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	e115      	b.n	8004520 <UART_SetConfig+0x348>
 80042f4:	2304      	movs	r3, #4
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e112      	b.n	8004520 <UART_SetConfig+0x348>
 80042fa:	2308      	movs	r3, #8
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e10f      	b.n	8004520 <UART_SetConfig+0x348>
 8004300:	2310      	movs	r3, #16
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e10c      	b.n	8004520 <UART_SetConfig+0x348>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a68      	ldr	r2, [pc, #416]	; (80044ac <UART_SetConfig+0x2d4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d120      	bne.n	8004352 <UART_SetConfig+0x17a>
 8004310:	4b64      	ldr	r3, [pc, #400]	; (80044a4 <UART_SetConfig+0x2cc>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800431a:	2b30      	cmp	r3, #48	; 0x30
 800431c:	d013      	beq.n	8004346 <UART_SetConfig+0x16e>
 800431e:	2b30      	cmp	r3, #48	; 0x30
 8004320:	d814      	bhi.n	800434c <UART_SetConfig+0x174>
 8004322:	2b20      	cmp	r3, #32
 8004324:	d009      	beq.n	800433a <UART_SetConfig+0x162>
 8004326:	2b20      	cmp	r3, #32
 8004328:	d810      	bhi.n	800434c <UART_SetConfig+0x174>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <UART_SetConfig+0x15c>
 800432e:	2b10      	cmp	r3, #16
 8004330:	d006      	beq.n	8004340 <UART_SetConfig+0x168>
 8004332:	e00b      	b.n	800434c <UART_SetConfig+0x174>
 8004334:	2300      	movs	r3, #0
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e0f2      	b.n	8004520 <UART_SetConfig+0x348>
 800433a:	2302      	movs	r3, #2
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e0ef      	b.n	8004520 <UART_SetConfig+0x348>
 8004340:	2304      	movs	r3, #4
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e0ec      	b.n	8004520 <UART_SetConfig+0x348>
 8004346:	2308      	movs	r3, #8
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e0e9      	b.n	8004520 <UART_SetConfig+0x348>
 800434c:	2310      	movs	r3, #16
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e0e6      	b.n	8004520 <UART_SetConfig+0x348>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a56      	ldr	r2, [pc, #344]	; (80044b0 <UART_SetConfig+0x2d8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d120      	bne.n	800439e <UART_SetConfig+0x1c6>
 800435c:	4b51      	ldr	r3, [pc, #324]	; (80044a4 <UART_SetConfig+0x2cc>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004366:	2bc0      	cmp	r3, #192	; 0xc0
 8004368:	d013      	beq.n	8004392 <UART_SetConfig+0x1ba>
 800436a:	2bc0      	cmp	r3, #192	; 0xc0
 800436c:	d814      	bhi.n	8004398 <UART_SetConfig+0x1c0>
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d009      	beq.n	8004386 <UART_SetConfig+0x1ae>
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d810      	bhi.n	8004398 <UART_SetConfig+0x1c0>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <UART_SetConfig+0x1a8>
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d006      	beq.n	800438c <UART_SetConfig+0x1b4>
 800437e:	e00b      	b.n	8004398 <UART_SetConfig+0x1c0>
 8004380:	2300      	movs	r3, #0
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e0cc      	b.n	8004520 <UART_SetConfig+0x348>
 8004386:	2302      	movs	r3, #2
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	e0c9      	b.n	8004520 <UART_SetConfig+0x348>
 800438c:	2304      	movs	r3, #4
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e0c6      	b.n	8004520 <UART_SetConfig+0x348>
 8004392:	2308      	movs	r3, #8
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e0c3      	b.n	8004520 <UART_SetConfig+0x348>
 8004398:	2310      	movs	r3, #16
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e0c0      	b.n	8004520 <UART_SetConfig+0x348>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a44      	ldr	r2, [pc, #272]	; (80044b4 <UART_SetConfig+0x2dc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d125      	bne.n	80043f4 <UART_SetConfig+0x21c>
 80043a8:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <UART_SetConfig+0x2cc>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b6:	d017      	beq.n	80043e8 <UART_SetConfig+0x210>
 80043b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043bc:	d817      	bhi.n	80043ee <UART_SetConfig+0x216>
 80043be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c2:	d00b      	beq.n	80043dc <UART_SetConfig+0x204>
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c8:	d811      	bhi.n	80043ee <UART_SetConfig+0x216>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <UART_SetConfig+0x1fe>
 80043ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d2:	d006      	beq.n	80043e2 <UART_SetConfig+0x20a>
 80043d4:	e00b      	b.n	80043ee <UART_SetConfig+0x216>
 80043d6:	2300      	movs	r3, #0
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e0a1      	b.n	8004520 <UART_SetConfig+0x348>
 80043dc:	2302      	movs	r3, #2
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e09e      	b.n	8004520 <UART_SetConfig+0x348>
 80043e2:	2304      	movs	r3, #4
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e09b      	b.n	8004520 <UART_SetConfig+0x348>
 80043e8:	2308      	movs	r3, #8
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e098      	b.n	8004520 <UART_SetConfig+0x348>
 80043ee:	2310      	movs	r3, #16
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e095      	b.n	8004520 <UART_SetConfig+0x348>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a2f      	ldr	r2, [pc, #188]	; (80044b8 <UART_SetConfig+0x2e0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d125      	bne.n	800444a <UART_SetConfig+0x272>
 80043fe:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <UART_SetConfig+0x2cc>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800440c:	d017      	beq.n	800443e <UART_SetConfig+0x266>
 800440e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004412:	d817      	bhi.n	8004444 <UART_SetConfig+0x26c>
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004418:	d00b      	beq.n	8004432 <UART_SetConfig+0x25a>
 800441a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441e:	d811      	bhi.n	8004444 <UART_SetConfig+0x26c>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <UART_SetConfig+0x254>
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004428:	d006      	beq.n	8004438 <UART_SetConfig+0x260>
 800442a:	e00b      	b.n	8004444 <UART_SetConfig+0x26c>
 800442c:	2301      	movs	r3, #1
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e076      	b.n	8004520 <UART_SetConfig+0x348>
 8004432:	2302      	movs	r3, #2
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e073      	b.n	8004520 <UART_SetConfig+0x348>
 8004438:	2304      	movs	r3, #4
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e070      	b.n	8004520 <UART_SetConfig+0x348>
 800443e:	2308      	movs	r3, #8
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e06d      	b.n	8004520 <UART_SetConfig+0x348>
 8004444:	2310      	movs	r3, #16
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e06a      	b.n	8004520 <UART_SetConfig+0x348>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <UART_SetConfig+0x2e4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d138      	bne.n	80044c6 <UART_SetConfig+0x2ee>
 8004454:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <UART_SetConfig+0x2cc>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800445e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004462:	d017      	beq.n	8004494 <UART_SetConfig+0x2bc>
 8004464:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004468:	d82a      	bhi.n	80044c0 <UART_SetConfig+0x2e8>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446e:	d00b      	beq.n	8004488 <UART_SetConfig+0x2b0>
 8004470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004474:	d824      	bhi.n	80044c0 <UART_SetConfig+0x2e8>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <UART_SetConfig+0x2aa>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	d006      	beq.n	800448e <UART_SetConfig+0x2b6>
 8004480:	e01e      	b.n	80044c0 <UART_SetConfig+0x2e8>
 8004482:	2300      	movs	r3, #0
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e04b      	b.n	8004520 <UART_SetConfig+0x348>
 8004488:	2302      	movs	r3, #2
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e048      	b.n	8004520 <UART_SetConfig+0x348>
 800448e:	2304      	movs	r3, #4
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e045      	b.n	8004520 <UART_SetConfig+0x348>
 8004494:	2308      	movs	r3, #8
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e042      	b.n	8004520 <UART_SetConfig+0x348>
 800449a:	bf00      	nop
 800449c:	efff69f3 	.word	0xefff69f3
 80044a0:	40011000 	.word	0x40011000
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40004400 	.word	0x40004400
 80044ac:	40004800 	.word	0x40004800
 80044b0:	40004c00 	.word	0x40004c00
 80044b4:	40005000 	.word	0x40005000
 80044b8:	40011400 	.word	0x40011400
 80044bc:	40007800 	.word	0x40007800
 80044c0:	2310      	movs	r3, #16
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e02c      	b.n	8004520 <UART_SetConfig+0x348>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a72      	ldr	r2, [pc, #456]	; (8004694 <UART_SetConfig+0x4bc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d125      	bne.n	800451c <UART_SetConfig+0x344>
 80044d0:	4b71      	ldr	r3, [pc, #452]	; (8004698 <UART_SetConfig+0x4c0>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044de:	d017      	beq.n	8004510 <UART_SetConfig+0x338>
 80044e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044e4:	d817      	bhi.n	8004516 <UART_SetConfig+0x33e>
 80044e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ea:	d00b      	beq.n	8004504 <UART_SetConfig+0x32c>
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	d811      	bhi.n	8004516 <UART_SetConfig+0x33e>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <UART_SetConfig+0x326>
 80044f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044fa:	d006      	beq.n	800450a <UART_SetConfig+0x332>
 80044fc:	e00b      	b.n	8004516 <UART_SetConfig+0x33e>
 80044fe:	2300      	movs	r3, #0
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e00d      	b.n	8004520 <UART_SetConfig+0x348>
 8004504:	2302      	movs	r3, #2
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e00a      	b.n	8004520 <UART_SetConfig+0x348>
 800450a:	2304      	movs	r3, #4
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e007      	b.n	8004520 <UART_SetConfig+0x348>
 8004510:	2308      	movs	r3, #8
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e004      	b.n	8004520 <UART_SetConfig+0x348>
 8004516:	2310      	movs	r3, #16
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e001      	b.n	8004520 <UART_SetConfig+0x348>
 800451c:	2310      	movs	r3, #16
 800451e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004528:	d15b      	bne.n	80045e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800452a:	7ffb      	ldrb	r3, [r7, #31]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d828      	bhi.n	8004582 <UART_SetConfig+0x3aa>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0x360>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004565 	.word	0x08004565
 8004540:	0800456d 	.word	0x0800456d
 8004544:	08004583 	.word	0x08004583
 8004548:	08004573 	.word	0x08004573
 800454c:	08004583 	.word	0x08004583
 8004550:	08004583 	.word	0x08004583
 8004554:	08004583 	.word	0x08004583
 8004558:	0800457b 	.word	0x0800457b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800455c:	f7ff f91a 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8004560:	61b8      	str	r0, [r7, #24]
        break;
 8004562:	e013      	b.n	800458c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7ff f92a 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8004568:	61b8      	str	r0, [r7, #24]
        break;
 800456a:	e00f      	b.n	800458c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <UART_SetConfig+0x4c4>)
 800456e:	61bb      	str	r3, [r7, #24]
        break;
 8004570:	e00c      	b.n	800458c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe fffd 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004576:	61b8      	str	r0, [r7, #24]
        break;
 8004578:	e008      	b.n	800458c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457e:	61bb      	str	r3, [r7, #24]
        break;
 8004580:	e004      	b.n	800458c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	77bb      	strb	r3, [r7, #30]
        break;
 800458a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d074      	beq.n	800467c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	005a      	lsls	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	d916      	bls.n	80045dc <UART_SetConfig+0x404>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d212      	bcs.n	80045dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f023 030f 	bic.w	r3, r3, #15
 80045be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	89fb      	ldrh	r3, [r7, #14]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	89fa      	ldrh	r2, [r7, #14]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e04f      	b.n	800467c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	77bb      	strb	r3, [r7, #30]
 80045e0:	e04c      	b.n	800467c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045e2:	7ffb      	ldrb	r3, [r7, #31]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d828      	bhi.n	800463a <UART_SetConfig+0x462>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x418>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004625 	.word	0x08004625
 80045fc:	0800463b 	.word	0x0800463b
 8004600:	0800462b 	.word	0x0800462b
 8004604:	0800463b 	.word	0x0800463b
 8004608:	0800463b 	.word	0x0800463b
 800460c:	0800463b 	.word	0x0800463b
 8004610:	08004633 	.word	0x08004633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004614:	f7ff f8be 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8004618:	61b8      	str	r0, [r7, #24]
        break;
 800461a:	e013      	b.n	8004644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7ff f8ce 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8004620:	61b8      	str	r0, [r7, #24]
        break;
 8004622:	e00f      	b.n	8004644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <UART_SetConfig+0x4c4>)
 8004626:	61bb      	str	r3, [r7, #24]
        break;
 8004628:	e00c      	b.n	8004644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462a:	f7fe ffa1 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800462e:	61b8      	str	r0, [r7, #24]
        break;
 8004630:	e008      	b.n	8004644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	61bb      	str	r3, [r7, #24]
        break;
 8004638:	e004      	b.n	8004644 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	77bb      	strb	r3, [r7, #30]
        break;
 8004642:	bf00      	nop
    }

    if (pclk != 0U)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	085a      	lsrs	r2, r3, #1
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	441a      	add	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b0f      	cmp	r3, #15
 8004662:	d909      	bls.n	8004678 <UART_SetConfig+0x4a0>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466a:	d205      	bcs.n	8004678 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	b29a      	uxth	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	e001      	b.n	800467c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004688:	7fbb      	ldrb	r3, [r7, #30]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40007c00 	.word	0x40007c00
 8004698:	40023800 	.word	0x40023800
 800469c:	00f42400 	.word	0x00f42400

080046a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01a      	beq.n	80047b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479e:	d10a      	bne.n	80047b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f4:	f7fc fa14 	bl	8000c20 <HAL_GetTick>
 80047f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b08      	cmp	r3, #8
 8004806:	d10e      	bne.n	8004826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f831 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e027      	b.n	8004876 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d10e      	bne.n	8004852 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f81b 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e011      	b.n	8004876 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b09c      	sub	sp, #112	; 0x70
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488e:	e0a7      	b.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	f000 80a3 	beq.w	80049e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489a:	f7fc f9c1 	bl	8000c20 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d13f      	bne.n	8004930 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c4:	667b      	str	r3, [r7, #100]	; 0x64
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e6      	bne.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	663b      	str	r3, [r7, #96]	; 0x60
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3308      	adds	r3, #8
 8004900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004902:	64ba      	str	r2, [r7, #72]	; 0x48
 8004904:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e068      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d050      	beq.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494c:	d148      	bne.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004956:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800496c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
 8004978:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800497c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	613b      	str	r3, [r7, #16]
   return(result);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049aa:	623a      	str	r2, [r7, #32]
 80049ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	69f9      	ldr	r1, [r7, #28]
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e010      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	f43f af48 	beq.w	8004890 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3770      	adds	r7, #112	; 0x70
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	f107 001c 	add.w	r0, r7, #28
 8004a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d120      	bne.n	8004a66 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <USB_CoreInit+0xac>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9d8 	bl	8004e10 <USB_CoreReset>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]
 8004a64:	e010      	b.n	8004a88 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9cc 	bl	8004e10 <USB_CoreReset>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10b      	bne.n	8004aa6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f043 0206 	orr.w	r2, r3, #6
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab2:	b004      	add	sp, #16
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	ffbdffbf 	.word	0xffbdffbf

08004abc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f043 0201 	orr.w	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 0201 	bic.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d115      	bne.n	8004b4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b2e:	2001      	movs	r0, #1
 8004b30:	f7fc f882 	bl	8000c38 <HAL_Delay>
      ms++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f95a 	bl	8004df4 <USB_GetMode>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d01e      	beq.n	8004b84 <USB_SetCurrentMode+0x84>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b31      	cmp	r3, #49	; 0x31
 8004b4a:	d9f0      	bls.n	8004b2e <USB_SetCurrentMode+0x2e>
 8004b4c:	e01a      	b.n	8004b84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d115      	bne.n	8004b80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b60:	2001      	movs	r0, #1
 8004b62:	f7fc f869 	bl	8000c38 <HAL_Delay>
      ms++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f941 	bl	8004df4 <USB_GetMode>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <USB_SetCurrentMode+0x84>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b31      	cmp	r3, #49	; 0x31
 8004b7c:	d9f0      	bls.n	8004b60 <USB_SetCurrentMode+0x60>
 8004b7e:	e001      	b.n	8004b84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e005      	b.n	8004b90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b32      	cmp	r3, #50	; 0x32
 8004b88:	d101      	bne.n	8004b8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <USB_FlushTxFifo+0x64>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e01b      	b.n	8004bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	daf2      	bge.n	8004ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	019b      	lsls	r3, r3, #6
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <USB_FlushTxFifo+0x64>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e006      	b.n	8004bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d0f0      	beq.n	8004bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	00030d40 	.word	0x00030d40

08004c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <USB_FlushRxFifo+0x5c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e018      	b.n	8004c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	daf2      	bge.n	8004c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <USB_FlushRxFifo+0x5c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e006      	b.n	8004c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	d0f0      	beq.n	8004c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	00030d40 	.word	0x00030d40

08004c60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	; 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	460b      	mov	r3, r1
 8004c70:	71fb      	strb	r3, [r7, #7]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d123      	bne.n	8004cce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c86:	88bb      	ldrh	r3, [r7, #4]
 8004c88:	3303      	adds	r3, #3
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e018      	b.n	8004cc6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	031a      	lsls	r2, r3, #12
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	3301      	adds	r3, #1
 8004cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d3e2      	bcc.n	8004c94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3724      	adds	r7, #36	; 0x24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b08b      	sub	sp, #44	; 0x2c
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	089b      	lsrs	r3, r3, #2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d02:	2300      	movs	r3, #0
 8004d04:	623b      	str	r3, [r7, #32]
 8004d06:	e014      	b.n	8004d32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	3301      	adds	r3, #1
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	3301      	adds	r3, #1
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	3301      	adds	r3, #1
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d3e6      	bcc.n	8004d08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d3a:	8bfb      	ldrh	r3, [r7, #30]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01e      	beq.n	8004d7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	701a      	strb	r2, [r3, #0]
      i++;
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	3301      	adds	r3, #1
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d72:	8bfb      	ldrh	r3, [r7, #30]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d78:	8bfb      	ldrh	r3, [r7, #30]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1ea      	bne.n	8004d54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	372c      	adds	r7, #44	; 0x2c
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4013      	ands	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004da4:	68fb      	ldr	r3, [r7, #12]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004de6:	68bb      	ldr	r3, [r7, #8]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f003 0301 	and.w	r3, r3, #1
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <USB_CoreReset+0x64>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e01b      	b.n	8004e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	daf2      	bge.n	8004e1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f043 0201 	orr.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <USB_CoreReset+0x64>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e006      	b.n	8004e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d0f0      	beq.n	8004e46 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	00030d40 	.word	0x00030d40

08004e78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e78:	b084      	sub	sp, #16
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d018      	beq.n	8004ee8 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10a      	bne.n	8004ed2 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eca:	f043 0304 	orr.w	r3, r3, #4
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e014      	b.n	8004efc <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ee0:	f023 0304 	bic.w	r3, r3, #4
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e009      	b.n	8004efc <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ef6:	f023 0304 	bic.w	r3, r3, #4
 8004efa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004efc:	2110      	movs	r1, #16
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fe4a 	bl	8004b98 <USB_FlushTxFifo>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fe76 	bl	8004c00 <USB_FlushRxFifo>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e015      	b.n	8004f50 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f30:	461a      	mov	r2, r3
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	461a      	mov	r2, r3
 8004f46:	2300      	movs	r3, #0
 8004f48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3e5      	bcc.n	8004f24 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <USB_HostInit+0x154>)
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <USB_HostInit+0x158>)
 8004f84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004f88:	e009      	b.n	8004f9e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2280      	movs	r2, #128	; 0x80
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <USB_HostInit+0x15c>)
 8004f94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a0f      	ldr	r2, [pc, #60]	; (8004fd8 <USB_HostInit+0x160>)
 8004f9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f043 0210 	orr.w	r2, r3, #16
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <USB_HostInit+0x164>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fc8:	b004      	add	sp, #16
 8004fca:	4770      	bx	lr
 8004fcc:	01000200 	.word	0x01000200
 8004fd0:	00e00300 	.word	0x00e00300
 8004fd4:	00600080 	.word	0x00600080
 8004fd8:	004000e0 	.word	0x004000e0
 8004fdc:	a3200008 	.word	0xa3200008

08004fe0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d107      	bne.n	8005032 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005028:	461a      	mov	r2, r3
 800502a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800502e:	6053      	str	r3, [r2, #4]
 8005030:	e009      	b.n	8005046 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d106      	bne.n	8005046 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503e:	461a      	mov	r2, r3
 8005040:	f241 7370 	movw	r3, #6000	; 0x1770
 8005044:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005074:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800507e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005082:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005084:	2064      	movs	r0, #100	; 0x64
 8005086:	f7fb fdd7 	bl	8000c38 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005096:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005098:	200a      	movs	r0, #10
 800509a:	f7fb fdcd 	bl	8000c38 <HAL_Delay>

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <USB_DriveVbus+0x44>
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d106      	bne.n	80050ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f6:	d109      	bne.n	800510c <USB_DriveVbus+0x64>
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800510a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	0c5b      	lsrs	r3, r3, #17
 8005138:	f003 0303 	and.w	r3, r3, #3
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	b29b      	uxth	r3, r3
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	4608      	mov	r0, r1
 8005176:	4611      	mov	r1, r2
 8005178:	461a      	mov	r2, r3
 800517a:	4603      	mov	r3, r0
 800517c:	70fb      	strb	r3, [r7, #3]
 800517e:	460b      	mov	r3, r1
 8005180:	70bb      	strb	r3, [r7, #2]
 8005182:	4613      	mov	r3, r2
 8005184:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519a:	461a      	mov	r2, r3
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80051a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d87e      	bhi.n	80052a8 <USB_HC_Init+0x13c>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <USB_HC_Init+0x44>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	0800526b 	.word	0x0800526b
 80051b8:	080051c1 	.word	0x080051c1
 80051bc:	0800522d 	.word	0x0800522d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	461a      	mov	r2, r3
 80051ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80051d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	da10      	bge.n	80051fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80051fc:	e057      	b.n	80052ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d051      	beq.n	80052ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	440a      	add	r2, r1
 8005220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005224:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005228:	60d3      	str	r3, [r2, #12]
      break;
 800522a:	e040      	b.n	80052ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	461a      	mov	r2, r3
 800523a:	f240 639d 	movw	r3, #1693	; 0x69d
 800523e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005240:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da34      	bge.n	80052b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	440a      	add	r2, r1
 800525e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005266:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005268:	e023      	b.n	80052b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	461a      	mov	r2, r3
 8005278:	f240 2325 	movw	r3, #549	; 0x225
 800527c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800527e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005282:	2b00      	cmp	r3, #0
 8005284:	da17      	bge.n	80052b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	78fa      	ldrb	r2, [r7, #3]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	440a      	add	r2, r1
 800529c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80052a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80052a6:	e006      	b.n	80052b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	77fb      	strb	r3, [r7, #31]
      break;
 80052ac:	e004      	b.n	80052b8 <USB_HC_Init+0x14c>
      break;
 80052ae:	bf00      	nop
 80052b0:	e002      	b.n	80052b8 <USB_HC_Init+0x14c>
      break;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <USB_HC_Init+0x14c>
      break;
 80052b6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d2:	f043 0302 	orr.w	r3, r3, #2
 80052d6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052de:	699a      	ldr	r2, [r3, #24]
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	2101      	movs	r1, #1
 80052e8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ec:	6939      	ldr	r1, [r7, #16]
 80052ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052f2:	4313      	orrs	r3, r2
 80052f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005302:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005306:	2b00      	cmp	r3, #0
 8005308:	da03      	bge.n	8005312 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800530a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e001      	b.n	8005316 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff feff 	bl	800511a <USB_GetHostSpeed>
 800531c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800531e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005322:	2b02      	cmp	r3, #2
 8005324:	d106      	bne.n	8005334 <USB_HC_Init+0x1c8>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d003      	beq.n	8005334 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800532c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e001      	b.n	8005338 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005338:	787b      	ldrb	r3, [r7, #1]
 800533a:	059b      	lsls	r3, r3, #22
 800533c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005340:	78bb      	ldrb	r3, [r7, #2]
 8005342:	02db      	lsls	r3, r3, #11
 8005344:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005348:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800534a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800534e:	049b      	lsls	r3, r3, #18
 8005350:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005354:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005356:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005358:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800535c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	0159      	lsls	r1, r3, #5
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	440b      	add	r3, r1
 800536a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005374:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005376:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800537a:	2b03      	cmp	r3, #3
 800537c:	d003      	beq.n	8005386 <USB_HC_Init+0x21a>
 800537e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10f      	bne.n	80053a6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	440a      	add	r2, r1
 800539c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80053a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	; 0x30
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80053c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02d      	beq.n	8005436 <USB_HC_StartXfer+0x86>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d129      	bne.n	8005436 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d117      	bne.n	8005418 <USB_HC_StartXfer+0x68>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	79db      	ldrb	r3, [r3, #7]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <USB_HC_StartXfer+0x48>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	79db      	ldrb	r3, [r3, #7]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d10f      	bne.n	8005418 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	6a3a      	ldr	r2, [r7, #32]
 800540c:	440a      	add	r2, r1
 800540e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <USB_HC_StartXfer+0x86>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	795b      	ldrb	r3, [r3, #5]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	4619      	mov	r1, r3
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fa0f 	bl	8005850 <USB_DoPing>
      return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e0f8      	b.n	8005628 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	8912      	ldrh	r2, [r2, #8]
 8005446:	4413      	add	r3, r2
 8005448:	3b01      	subs	r3, #1
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	8912      	ldrh	r2, [r2, #8]
 800544e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005452:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005454:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005456:	8b7b      	ldrh	r3, [r7, #26]
 8005458:	429a      	cmp	r2, r3
 800545a:	d90b      	bls.n	8005474 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800545c:	8b7b      	ldrh	r3, [r7, #26]
 800545e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	8912      	ldrh	r2, [r2, #8]
 8005466:	fb03 f202 	mul.w	r2, r3, r2
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	611a      	str	r2, [r3, #16]
 800546e:	e001      	b.n	8005474 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005470:	2301      	movs	r3, #1
 8005472:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800547c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	8912      	ldrh	r2, [r2, #8]
 8005482:	fb03 f202 	mul.w	r2, r3, r2
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	611a      	str	r2, [r3, #16]
 800548a:	e003      	b.n	8005494 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800549c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800549e:	04d9      	lsls	r1, r3, #19
 80054a0:	4b63      	ldr	r3, [pc, #396]	; (8005630 <USB_HC_StartXfer+0x280>)
 80054a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	7a9b      	ldrb	r3, [r3, #10]
 80054aa:	075b      	lsls	r3, r3, #29
 80054ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054b0:	69f9      	ldr	r1, [r7, #28]
 80054b2:	0148      	lsls	r0, r1, #5
 80054b4:	6a39      	ldr	r1, [r7, #32]
 80054b6:	4401      	add	r1, r0
 80054b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	68d9      	ldr	r1, [r3, #12]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d6:	460a      	mov	r2, r1
 80054d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bf0c      	ite	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	2300      	movne	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	0151      	lsls	r1, r2, #5
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	440a      	add	r2, r1
 8005508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800550c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005510:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	4413      	add	r3, r2
 800551a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	7e7b      	ldrb	r3, [r7, #25]
 8005522:	075b      	lsls	r3, r3, #29
 8005524:	69f9      	ldr	r1, [r7, #28]
 8005526:	0148      	lsls	r0, r1, #5
 8005528:	6a39      	ldr	r1, [r7, #32]
 800552a:	4401      	add	r1, r0
 800552c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005530:	4313      	orrs	r3, r2
 8005532:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800554a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	78db      	ldrb	r3, [r3, #3]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e003      	b.n	8005566 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005564:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800556c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	461a      	mov	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e04e      	b.n	8005628 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	78db      	ldrb	r3, [r3, #3]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d149      	bne.n	8005626 <USB_HC_StartXfer+0x276>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d045      	beq.n	8005626 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	79db      	ldrb	r3, [r3, #7]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d830      	bhi.n	8005604 <USB_HC_StartXfer+0x254>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <USB_HC_StartXfer+0x1f8>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055dd 	.word	0x080055dd
 80055b0:	080055b9 	.word	0x080055b9
 80055b4:	080055dd 	.word	0x080055dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	3303      	adds	r3, #3
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80055c2:	8afa      	ldrh	r2, [r7, #22]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d91c      	bls.n	8005608 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80055da:	e015      	b.n	8005608 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	3303      	adds	r3, #3
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80055e6:	8afa      	ldrh	r2, [r7, #22]
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d90a      	bls.n	800560c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]
        }
        break;
 8005602:	e003      	b.n	800560c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005604:	bf00      	nop
 8005606:	e002      	b.n	800560e <USB_HC_StartXfer+0x25e>
        break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <USB_HC_StartXfer+0x25e>
        break;
 800560c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	68d9      	ldr	r1, [r3, #12]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	785a      	ldrb	r2, [r3, #1]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	b29b      	uxth	r3, r3
 800561c:	2000      	movs	r0, #0
 800561e:	9000      	str	r0, [sp, #0]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fb1d 	bl	8004c60 <USB_WritePacket>
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3728      	adds	r7, #40	; 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	1ff80000 	.word	0x1ff80000

08005634 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	b29b      	uxth	r3, r3
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005656:	b480      	push	{r7}
 8005658:	b089      	sub	sp, #36	; 0x24
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	0c9b      	lsrs	r3, r3, #18
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	0fdb      	lsrs	r3, r3, #31
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d104      	bne.n	80056b0 <USB_HC_Halt+0x5a>
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e0c8      	b.n	8005842 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <USB_HC_Halt+0x66>
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d163      	bne.n	8005784 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f040 80ab 	bne.w	8005840 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d133      	bne.n	800575e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005714:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005734:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005742:	d81d      	bhi.n	8005780 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800575a:	d0ec      	beq.n	8005736 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800575c:	e070      	b.n	8005840 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800577c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800577e:	e05f      	b.n	8005840 <USB_HC_Halt+0x1ea>
            break;
 8005780:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005782:	e05d      	b.n	8005840 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	440a      	add	r2, r1
 800579a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d133      	bne.n	800581c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005800:	d81d      	bhi.n	800583e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005818:	d0ec      	beq.n	80057f4 <USB_HC_Halt+0x19e>
 800581a:	e011      	b.n	8005840 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	440a      	add	r2, r1
 8005832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	e000      	b.n	8005840 <USB_HC_Halt+0x1ea>
          break;
 800583e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3724      	adds	r7, #36	; 0x24
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	04da      	lsls	r2, r3, #19
 800586c:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <USB_DoPing+0x74>)
 800586e:	4013      	ands	r3, r2
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	440a      	add	r2, r1
 8005878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005880:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005898:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	461a      	mov	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	1ff80000 	.word	0x1ff80000

080058c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff f8fe 	bl	8004ade <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058e2:	2110      	movs	r1, #16
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff f957 	bl	8004b98 <USB_FlushTxFifo>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff f983 	bl	8004c00 <USB_FlushRxFifo>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005904:	2300      	movs	r3, #0
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	e01f      	b.n	800594a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005920:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005928:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005930:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	461a      	mov	r2, r3
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	3301      	adds	r3, #1
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b0f      	cmp	r3, #15
 800594e:	d9dc      	bls.n	800590a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005950:	2300      	movs	r3, #0
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	e034      	b.n	80059c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005974:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800597c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	461a      	mov	r2, r3
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800599c:	d80c      	bhi.n	80059b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b4:	d0ec      	beq.n	8005990 <USB_StopHost+0xc8>
 80059b6:	e000      	b.n	80059ba <USB_StopHost+0xf2>
        break;
 80059b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3301      	adds	r3, #1
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b0f      	cmp	r3, #15
 80059c4:	d9c7      	bls.n	8005956 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059cc:	461a      	mov	r2, r3
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295
 80059d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f04f 32ff 	mov.w	r2, #4294967295
 80059da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff f86d 	bl	8004abc <USB_EnableGlobalInt>

  return ret;
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80059f0:	4904      	ldr	r1, [pc, #16]	; (8005a04 <MX_FATFS_Init+0x18>)
 80059f2:	4805      	ldr	r0, [pc, #20]	; (8005a08 <MX_FATFS_Init+0x1c>)
 80059f4:	f006 f9d6 	bl	800bda4 <FATFS_LinkDriver>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	4b03      	ldr	r3, [pc, #12]	; (8005a0c <MX_FATFS_Init+0x20>)
 80059fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000138 	.word	0x20000138
 8005a08:	0800e040 	.word	0x0800e040
 8005a0c:	20000134 	.word	0x20000134

08005a10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4808      	ldr	r0, [pc, #32]	; (8005a6c <USBH_status+0x34>)
 8005a4c:	f000 ffb0 	bl	80069b0 <USBH_MSC_UnitIsReady>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <USBH_status+0x24>
  {
    res = RES_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
 8005a5a:	e001      	b.n	8005a60 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000170 	.word	0x20000170

08005a70 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b094      	sub	sp, #80	; 0x50
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005a86:	7bf9      	ldrb	r1, [r7, #15]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4818      	ldr	r0, [pc, #96]	; (8005af4 <USBH_read+0x84>)
 8005a92:	f000 ffd7 	bl	8006a44 <USBH_MSC_Read>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d103      	bne.n	8005aa4 <USBH_read+0x34>
  {
    res = RES_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005aa2:	e020      	b.n	8005ae6 <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005aa4:	f107 0210 	add.w	r2, r7, #16
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4811      	ldr	r0, [pc, #68]	; (8005af4 <USBH_read+0x84>)
 8005aae:	f000 ffa5 	bl	80069fc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005ab2:	7f7b      	ldrb	r3, [r7, #29]
 8005ab4:	2b3a      	cmp	r3, #58	; 0x3a
 8005ab6:	d005      	beq.n	8005ac4 <USBH_read+0x54>
 8005ab8:	2b3a      	cmp	r3, #58	; 0x3a
 8005aba:	dc10      	bgt.n	8005ade <USBH_read+0x6e>
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d001      	beq.n	8005ac4 <USBH_read+0x54>
 8005ac0:	2b28      	cmp	r3, #40	; 0x28
 8005ac2:	d10c      	bne.n	8005ade <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8005ac4:	480c      	ldr	r0, [pc, #48]	; (8005af8 <USBH_read+0x88>)
 8005ac6:	f007 f819 	bl	800cafc <iprintf>
 8005aca:	480c      	ldr	r0, [pc, #48]	; (8005afc <USBH_read+0x8c>)
 8005acc:	f007 f816 	bl	800cafc <iprintf>
 8005ad0:	200a      	movs	r0, #10
 8005ad2:	f007 f825 	bl	800cb20 <putchar>
      res = RES_NOTRDY;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005adc:	e003      	b.n	8005ae6 <USBH_read+0x76>

    default:
      res = RES_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005ae4:	bf00      	nop
    }
  }

  return res;
 8005ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3748      	adds	r7, #72	; 0x48
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000170 	.word	0x20000170
 8005af8:	0800d7f0 	.word	0x0800d7f0
 8005afc:	0800d7f8 	.word	0x0800d7f8

08005b00 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b094      	sub	sp, #80	; 0x50
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005b16:	7bf9      	ldrb	r1, [r7, #15]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4820      	ldr	r0, [pc, #128]	; (8005ba4 <USBH_write+0xa4>)
 8005b22:	f000 fff8 	bl	8006b16 <USBH_MSC_Write>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <USBH_write+0x34>
  {
    res = RES_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b32:	e031      	b.n	8005b98 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005b34:	f107 0210 	add.w	r2, r7, #16
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4819      	ldr	r0, [pc, #100]	; (8005ba4 <USBH_write+0xa4>)
 8005b3e:	f000 ff5d 	bl	80069fc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005b42:	7f7b      	ldrb	r3, [r7, #29]
 8005b44:	2b3a      	cmp	r3, #58	; 0x3a
 8005b46:	d016      	beq.n	8005b76 <USBH_write+0x76>
 8005b48:	2b3a      	cmp	r3, #58	; 0x3a
 8005b4a:	dc21      	bgt.n	8005b90 <USBH_write+0x90>
 8005b4c:	2b28      	cmp	r3, #40	; 0x28
 8005b4e:	d012      	beq.n	8005b76 <USBH_write+0x76>
 8005b50:	2b28      	cmp	r3, #40	; 0x28
 8005b52:	dc1d      	bgt.n	8005b90 <USBH_write+0x90>
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d00e      	beq.n	8005b76 <USBH_write+0x76>
 8005b58:	2b27      	cmp	r3, #39	; 0x27
 8005b5a:	d119      	bne.n	8005b90 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8005b5c:	4812      	ldr	r0, [pc, #72]	; (8005ba8 <USBH_write+0xa8>)
 8005b5e:	f006 ffcd 	bl	800cafc <iprintf>
 8005b62:	4812      	ldr	r0, [pc, #72]	; (8005bac <USBH_write+0xac>)
 8005b64:	f006 ffca 	bl	800cafc <iprintf>
 8005b68:	200a      	movs	r0, #10
 8005b6a:	f006 ffd9 	bl	800cb20 <putchar>
      res = RES_WRPRT;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b74:	e010      	b.n	8005b98 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 8005b76:	480c      	ldr	r0, [pc, #48]	; (8005ba8 <USBH_write+0xa8>)
 8005b78:	f006 ffc0 	bl	800cafc <iprintf>
 8005b7c:	480c      	ldr	r0, [pc, #48]	; (8005bb0 <USBH_write+0xb0>)
 8005b7e:	f006 ffbd 	bl	800cafc <iprintf>
 8005b82:	200a      	movs	r0, #10
 8005b84:	f006 ffcc 	bl	800cb20 <putchar>
      res = RES_NOTRDY;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b8e:	e003      	b.n	8005b98 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b96:	bf00      	nop
    }
  }

  return res;
 8005b98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3748      	adds	r7, #72	; 0x48
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000170 	.word	0x20000170
 8005ba8:	0800d7f0 	.word	0x0800d7f0
 8005bac:	0800d810 	.word	0x0800d810
 8005bb0:	0800d7f8 	.word	0x0800d7f8

08005bb4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b090      	sub	sp, #64	; 0x40
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	603a      	str	r2, [r7, #0]
 8005bbe:	71fb      	strb	r3, [r7, #7]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005bca:	79bb      	ldrb	r3, [r7, #6]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d852      	bhi.n	8005c76 <USBH_ioctl+0xc2>
 8005bd0:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <USBH_ioctl+0x24>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005be9 	.word	0x08005be9
 8005bdc:	08005bf1 	.word	0x08005bf1
 8005be0:	08005c1b 	.word	0x08005c1b
 8005be4:	08005c47 	.word	0x08005c47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005bee:	e045      	b.n	8005c7c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005bf0:	f107 0208 	add.w	r2, r7, #8
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4823      	ldr	r0, [pc, #140]	; (8005c88 <USBH_ioctl+0xd4>)
 8005bfa:	f000 feff 	bl	80069fc <USBH_MSC_GetLUNInfo>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c10:	e034      	b.n	8005c7c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c18:	e030      	b.n	8005c7c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005c1a:	f107 0208 	add.w	r2, r7, #8
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	4619      	mov	r1, r3
 8005c22:	4819      	ldr	r0, [pc, #100]	; (8005c88 <USBH_ioctl+0xd4>)
 8005c24:	f000 feea 	bl	80069fc <USBH_MSC_GetLUNInfo>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d107      	bne.n	8005c3e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005c2e:	8a3b      	ldrh	r3, [r7, #16]
 8005c30:	461a      	mov	r2, r3
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c3c:	e01e      	b.n	8005c7c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c44:	e01a      	b.n	8005c7c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005c46:	f107 0208 	add.w	r2, r7, #8
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	480e      	ldr	r0, [pc, #56]	; (8005c88 <USBH_ioctl+0xd4>)
 8005c50:	f000 fed4 	bl	80069fc <USBH_MSC_GetLUNInfo>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005c5a:	8a3b      	ldrh	r3, [r7, #16]
 8005c5c:	0a5b      	lsrs	r3, r3, #9
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c6c:	e006      	b.n	8005c7c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c74:	e002      	b.n	8005c7c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005c76:	2304      	movs	r3, #4
 8005c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005c7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3740      	adds	r7, #64	; 0x40
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000170 	.word	0x20000170

08005c8c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af04      	add	r7, sp, #16
 8005c92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c9a:	7919      	ldrb	r1, [r3, #4]
 8005c9c:	2350      	movs	r3, #80	; 0x50
 8005c9e:	2206      	movs	r2, #6
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fe53 	bl	800794c <USBH_FindInterface>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	2bff      	cmp	r3, #255	; 0xff
 8005cae:	d002      	beq.n	8005cb6 <USBH_MSC_InterfaceInit+0x2a>
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d90f      	bls.n	8005cd6 <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8005cb6:	4892      	ldr	r0, [pc, #584]	; (8005f00 <USBH_MSC_InterfaceInit+0x274>)
 8005cb8:	f006 ff20 	bl	800cafc <iprintf>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	488f      	ldr	r0, [pc, #572]	; (8005f04 <USBH_MSC_InterfaceInit+0x278>)
 8005cc8:	f006 ff18 	bl	800cafc <iprintf>
 8005ccc:	200a      	movs	r0, #10
 8005cce:	f006 ff27 	bl	800cb20 <putchar>
    return USBH_FAIL;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e10f      	b.n	8005ef6 <USBH_MSC_InterfaceInit+0x26a>
  }

  status = USBH_SelectInterface(phost, interface);
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fdce 	bl	800787c <USBH_SelectInterface>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005ce4:	7bbb      	ldrb	r3, [r7, #14]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 8005cea:	2302      	movs	r3, #2
 8005cec:	e103      	b.n	8005ef6 <USBH_MSC_InterfaceInit+0x26a>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cf4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005cf8:	f006 fd82 	bl	800c800 <malloc>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8005d10:	487b      	ldr	r0, [pc, #492]	; (8005f00 <USBH_MSC_InterfaceInit+0x274>)
 8005d12:	f006 fef3 	bl	800cafc <iprintf>
 8005d16:	487c      	ldr	r0, [pc, #496]	; (8005f08 <USBH_MSC_InterfaceInit+0x27c>)
 8005d18:	f006 fef0 	bl	800cafc <iprintf>
 8005d1c:	200a      	movs	r0, #10
 8005d1e:	f006 feff 	bl	800cb20 <putchar>
    return USBH_FAIL;
 8005d22:	2302      	movs	r3, #2
 8005d24:	e0e7      	b.n	8005ef6 <USBH_MSC_InterfaceInit+0x26a>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	68b8      	ldr	r0, [r7, #8]
 8005d2e:	f007 f833 	bl	800cd98 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	211a      	movs	r1, #26
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	da16      	bge.n	8005d78 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	211a      	movs	r1, #26
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d5a:	781a      	ldrb	r2, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	211a      	movs	r1, #26
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d70:	881a      	ldrh	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	815a      	strh	r2, [r3, #10]
 8005d76:	e015      	b.n	8005da4 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	211a      	movs	r1, #26
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	211a      	movs	r1, #26
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d9e:	881a      	ldrh	r2, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	211a      	movs	r1, #26
 8005daa:	fb01 f303 	mul.w	r3, r1, r3
 8005dae:	4413      	add	r3, r2
 8005db0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	b25b      	sxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da16      	bge.n	8005dea <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	211a      	movs	r1, #26
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	211a      	movs	r1, #26
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	815a      	strh	r2, [r3, #10]
 8005de8:	e015      	b.n	8005e16 <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	211a      	movs	r1, #26
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	211a      	movs	r1, #26
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2200      	movs	r2, #0
 8005e26:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	799b      	ldrb	r3, [r3, #6]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f003 fab3 	bl	800939a <USBH_AllocPipe>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	79db      	ldrb	r3, [r3, #7]
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f003 faa9 	bl	800939a <USBH_AllocPipe>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 ff05 	bl	8006c60 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	799b      	ldrb	r3, [r3, #6]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01e      	beq.n	8005e9c <USBH_MSC_InterfaceInit+0x210>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	891b      	ldrh	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01a      	beq.n	8005e9c <USBH_MSC_InterfaceInit+0x210>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	7959      	ldrb	r1, [r3, #5]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	7998      	ldrb	r0, [r3, #6]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	8912      	ldrh	r2, [r2, #8]
 8005e7e:	9202      	str	r2, [sp, #8]
 8005e80:	2202      	movs	r2, #2
 8005e82:	9201      	str	r2, [sp, #4]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	4623      	mov	r3, r4
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f003 fa56 	bl	800933c <USBH_OpenPipe>
 8005e90:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	79db      	ldrb	r3, [r3, #7]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d02c      	beq.n	8005ef4 <USBH_MSC_InterfaceInit+0x268>
 8005e9a:	e001      	b.n	8005ea0 <USBH_MSC_InterfaceInit+0x214>
    return USBH_NOT_SUPPORTED;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e02a      	b.n	8005ef6 <USBH_MSC_InterfaceInit+0x26a>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	895b      	ldrh	r3, [r3, #10]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d025      	beq.n	8005ef4 <USBH_MSC_InterfaceInit+0x268>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	7919      	ldrb	r1, [r3, #4]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	79d8      	ldrb	r0, [r3, #7]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	8952      	ldrh	r2, [r2, #10]
 8005ec0:	9202      	str	r2, [sp, #8]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	9201      	str	r2, [sp, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	4623      	mov	r3, r4
 8005eca:	4602      	mov	r2, r0
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f003 fa35 	bl	800933c <USBH_OpenPipe>
 8005ed2:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	791b      	ldrb	r3, [r3, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f006 fbdb 	bl	800c698 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	795b      	ldrb	r3, [r3, #5]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f006 fbd4 	bl	800c698 <USBH_LL_SetToggle>

  return USBH_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e000      	b.n	8005ef6 <USBH_MSC_InterfaceInit+0x26a>
    return USBH_NOT_SUPPORTED;
 8005ef4:	2303      	movs	r3, #3
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd90      	pop	{r4, r7, pc}
 8005efe:	bf00      	nop
 8005f00:	0800d834 	.word	0x0800d834
 8005f04:	0800d83c 	.word	0x0800d83c
 8005f08:	0800d864 	.word	0x0800d864

08005f0c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	795b      	ldrb	r3, [r3, #5]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	795b      	ldrb	r3, [r3, #5]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f003 fa24 	bl	800937a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	795b      	ldrb	r3, [r3, #5]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f003 fa4f 	bl	80093dc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	791b      	ldrb	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00e      	beq.n	8005f6a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	791b      	ldrb	r3, [r3, #4]
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f003 fa11 	bl	800937a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	791b      	ldrb	r3, [r3, #4]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f003 fa3c 	bl	80093dc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f006 fc46 	bl	800c810 <free>
    phost->pActiveClass->pData = 0U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005faa:	2301      	movs	r3, #1
 8005fac:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	7b9b      	ldrb	r3, [r3, #14]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d04a      	beq.n	800604c <USBH_MSC_ClassRequest+0xb4>
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	dc54      	bgt.n	8006064 <USBH_MSC_ClassRequest+0xcc>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <USBH_MSC_ClassRequest+0x2a>
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d150      	bne.n	8006064 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fe2b 	bl	8006c22 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d104      	bne.n	8005fe0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d140      	bne.n	8006068 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d804      	bhi.n	8005ff8 <USBH_MSC_ClassRequest+0x60>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	e000      	b.n	8005ffa <USBH_MSC_ClassRequest+0x62>
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	481c      	ldr	r0, [pc, #112]	; (8006078 <USBH_MSC_ClassRequest+0xe0>)
 8006006:	f006 fd79 	bl	800cafc <iprintf>
 800600a:	200a      	movs	r0, #10
 800600c:	f006 fd88 	bl	800cb20 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006010:	2300      	movs	r3, #0
 8006012:	73bb      	strb	r3, [r7, #14]
 8006014:	e014      	b.n	8006040 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	2134      	movs	r1, #52	; 0x34
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	4413      	add	r3, r2
 8006022:	3392      	adds	r3, #146	; 0x92
 8006024:	2202      	movs	r2, #2
 8006026:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	2134      	movs	r1, #52	; 0x34
 800602e:	fb01 f303 	mul.w	r3, r1, r3
 8006032:	4413      	add	r3, r2
 8006034:	33c1      	adds	r3, #193	; 0xc1
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	3301      	adds	r3, #1
 800603e:	73bb      	strb	r3, [r7, #14]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	7bba      	ldrb	r2, [r7, #14]
 8006046:	429a      	cmp	r2, r3
 8006048:	d3e5      	bcc.n	8006016 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 800604a:	e00d      	b.n	8006068 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800604c:	2100      	movs	r1, #0
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f002 fbd8 	bl	8008804 <USBH_ClrFeature>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	7bda      	ldrb	r2, [r3, #15]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	739a      	strb	r2, [r3, #14]
      }
      break;
 8006062:	e003      	b.n	800606c <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8006064:	bf00      	nop
 8006066:	e002      	b.n	800606e <USBH_MSC_ClassRequest+0xd6>
      break;
 8006068:	bf00      	nop
 800606a:	e000      	b.n	800606e <USBH_MSC_ClassRequest+0xd6>
      break;
 800606c:	bf00      	nop
  }

  return status;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	0800d88c 	.word	0x0800d88c

0800607c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006092:	2301      	movs	r3, #1
 8006094:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006096:	2301      	movs	r3, #1
 8006098:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	7b1b      	ldrb	r3, [r3, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <USBH_MSC_Process+0x2e>
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	f000 8355 	beq.w	8006752 <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80060a8:	e356      	b.n	8006758 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	429a      	cmp	r2, r3
 80060b8:	f080 8333 	bcs.w	8006722 <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060c2:	4619      	mov	r1, r3
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	2334      	movs	r3, #52	; 0x34
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	4413      	add	r3, r2
 80060ce:	3391      	adds	r3, #145	; 0x91
 80060d0:	2201      	movs	r2, #1
 80060d2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060da:	4619      	mov	r1, r3
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	2334      	movs	r3, #52	; 0x34
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	3390      	adds	r3, #144	; 0x90
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	f200 8327 	bhi.w	800673e <USBH_MSC_Process+0x6c2>
 80060f0:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <USBH_MSC_Process+0x7c>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	0800673f 	.word	0x0800673f
 8006100:	08006265 	.word	0x08006265
 8006104:	08006419 	.word	0x08006419
 8006108:	08006157 	.word	0x08006157
 800610c:	08006585 	.word	0x08006585
 8006110:	0800673f 	.word	0x0800673f
 8006114:	0800673f 	.word	0x0800673f
 8006118:	08006711 	.word	0x08006711
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006122:	4619      	mov	r1, r3
 8006124:	48b6      	ldr	r0, [pc, #728]	; (8006400 <USBH_MSC_Process+0x384>)
 8006126:	f006 fce9 	bl	800cafc <iprintf>
 800612a:	200a      	movs	r0, #10
 800612c:	f006 fcf8 	bl	800cb20 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006136:	4619      	mov	r1, r3
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	2334      	movs	r3, #52	; 0x34
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	4413      	add	r3, r2
 8006142:	3390      	adds	r3, #144	; 0x90
 8006144:	2204      	movs	r2, #4
 8006146:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006154:	e2fc      	b.n	8006750 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800615c:	b2d9      	uxtb	r1, r3
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006164:	461a      	mov	r2, r3
 8006166:	2334      	movs	r3, #52	; 0x34
 8006168:	fb02 f303 	mul.w	r3, r2, r3
 800616c:	3398      	adds	r3, #152	; 0x98
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	3307      	adds	r3, #7
 8006174:	461a      	mov	r2, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 f890 	bl	800729c <USBH_MSC_SCSI_Inquiry>
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d141      	bne.n	800620a <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800618c:	461a      	mov	r2, r3
 800618e:	2334      	movs	r3, #52	; 0x34
 8006190:	fb02 f303 	mul.w	r3, r2, r3
 8006194:	3398      	adds	r3, #152	; 0x98
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	330a      	adds	r3, #10
 800619c:	4619      	mov	r1, r3
 800619e:	4899      	ldr	r0, [pc, #612]	; (8006404 <USBH_MSC_Process+0x388>)
 80061a0:	f006 fcac 	bl	800cafc <iprintf>
 80061a4:	200a      	movs	r0, #10
 80061a6:	f006 fcbb 	bl	800cb20 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061b0:	461a      	mov	r2, r3
 80061b2:	2334      	movs	r3, #52	; 0x34
 80061b4:	fb02 f303 	mul.w	r3, r2, r3
 80061b8:	33a0      	adds	r3, #160	; 0xa0
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4413      	add	r3, r2
 80061be:	330b      	adds	r3, #11
 80061c0:	4619      	mov	r1, r3
 80061c2:	4891      	ldr	r0, [pc, #580]	; (8006408 <USBH_MSC_Process+0x38c>)
 80061c4:	f006 fc9a 	bl	800cafc <iprintf>
 80061c8:	200a      	movs	r0, #10
 80061ca:	f006 fca9 	bl	800cb20 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061d4:	461a      	mov	r2, r3
 80061d6:	2334      	movs	r3, #52	; 0x34
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	33b0      	adds	r3, #176	; 0xb0
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	330c      	adds	r3, #12
 80061e4:	4619      	mov	r1, r3
 80061e6:	4889      	ldr	r0, [pc, #548]	; (800640c <USBH_MSC_Process+0x390>)
 80061e8:	f006 fc88 	bl	800cafc <iprintf>
 80061ec:	200a      	movs	r0, #10
 80061ee:	f006 fc97 	bl	800cb20 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061f8:	4619      	mov	r1, r3
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	2334      	movs	r3, #52	; 0x34
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	3390      	adds	r3, #144	; 0x90
 8006206:	2202      	movs	r2, #2
 8006208:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d10c      	bne.n	800622a <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006216:	4619      	mov	r1, r3
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	2334      	movs	r3, #52	; 0x34
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	4413      	add	r3, r2
 8006222:	3390      	adds	r3, #144	; 0x90
 8006224:	2205      	movs	r2, #5
 8006226:	701a      	strb	r2, [r3, #0]
            break;
 8006228:	e28b      	b.n	8006742 <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	2b04      	cmp	r3, #4
 800622e:	f040 8288 	bne.w	8006742 <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006238:	4619      	mov	r1, r3
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	2334      	movs	r3, #52	; 0x34
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	3390      	adds	r3, #144	; 0x90
 8006246:	2201      	movs	r2, #1
 8006248:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006250:	4619      	mov	r1, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	2334      	movs	r3, #52	; 0x34
 8006256:	fb01 f303 	mul.w	r3, r1, r3
 800625a:	4413      	add	r3, r2
 800625c:	3391      	adds	r3, #145	; 0x91
 800625e:	2202      	movs	r2, #2
 8006260:	701a      	strb	r2, [r3, #0]
            break;
 8006262:	e26e      	b.n	8006742 <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800626a:	b2db      	uxtb	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 ff56 	bl	8007120 <USBH_MSC_SCSI_TestUnitReady>
 8006274:	4603      	mov	r3, r0
 8006276:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d14f      	bne.n	800631e <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006284:	4619      	mov	r1, r3
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	2334      	movs	r3, #52	; 0x34
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	3392      	adds	r3, #146	; 0x92
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d012      	beq.n	80062be <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800629e:	4619      	mov	r1, r3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	2334      	movs	r3, #52	; 0x34
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	4413      	add	r3, r2
 80062aa:	33c1      	adds	r3, #193	; 0xc1
 80062ac:	2201      	movs	r2, #1
 80062ae:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 80062b0:	4857      	ldr	r0, [pc, #348]	; (8006410 <USBH_MSC_Process+0x394>)
 80062b2:	f006 fc23 	bl	800cafc <iprintf>
 80062b6:	200a      	movs	r0, #10
 80062b8:	f006 fc32 	bl	800cb20 <putchar>
 80062bc:	e00b      	b.n	80062d6 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062c4:	4619      	mov	r1, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	2334      	movs	r3, #52	; 0x34
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	33c1      	adds	r3, #193	; 0xc1
 80062d2:	2200      	movs	r2, #0
 80062d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062dc:	4619      	mov	r1, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	2334      	movs	r3, #52	; 0x34
 80062e2:	fb01 f303 	mul.w	r3, r1, r3
 80062e6:	4413      	add	r3, r2
 80062e8:	3390      	adds	r3, #144	; 0x90
 80062ea:	2203      	movs	r2, #3
 80062ec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062f4:	4619      	mov	r1, r3
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	2334      	movs	r3, #52	; 0x34
 80062fa:	fb01 f303 	mul.w	r3, r1, r3
 80062fe:	4413      	add	r3, r2
 8006300:	3391      	adds	r3, #145	; 0x91
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800630c:	4619      	mov	r1, r3
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	2334      	movs	r3, #52	; 0x34
 8006312:	fb01 f303 	mul.w	r3, r1, r3
 8006316:	4413      	add	r3, r2
 8006318:	3392      	adds	r3, #146	; 0x92
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d150      	bne.n	80063c6 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800632a:	4619      	mov	r1, r3
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	2334      	movs	r3, #52	; 0x34
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	4413      	add	r3, r2
 8006336:	3392      	adds	r3, #146	; 0x92
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d012      	beq.n	8006364 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006344:	4619      	mov	r1, r3
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	2334      	movs	r3, #52	; 0x34
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	4413      	add	r3, r2
 8006350:	33c1      	adds	r3, #193	; 0xc1
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8006356:	482f      	ldr	r0, [pc, #188]	; (8006414 <USBH_MSC_Process+0x398>)
 8006358:	f006 fbd0 	bl	800cafc <iprintf>
 800635c:	200a      	movs	r0, #10
 800635e:	f006 fbdf 	bl	800cb20 <putchar>
 8006362:	e00b      	b.n	800637c <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800636a:	4619      	mov	r1, r3
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	2334      	movs	r3, #52	; 0x34
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	33c1      	adds	r3, #193	; 0xc1
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006382:	4619      	mov	r1, r3
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	2334      	movs	r3, #52	; 0x34
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	3390      	adds	r3, #144	; 0x90
 8006390:	2205      	movs	r2, #5
 8006392:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800639a:	4619      	mov	r1, r3
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	2334      	movs	r3, #52	; 0x34
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	3391      	adds	r3, #145	; 0x91
 80063a8:	2201      	movs	r2, #1
 80063aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063b2:	4619      	mov	r1, r3
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	2334      	movs	r3, #52	; 0x34
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	3392      	adds	r3, #146	; 0x92
 80063c0:	2202      	movs	r2, #2
 80063c2:	701a      	strb	r2, [r3, #0]
            break;
 80063c4:	e1bf      	b.n	8006746 <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	f040 81bc 	bne.w	8006746 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063d4:	4619      	mov	r1, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	2334      	movs	r3, #52	; 0x34
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	3390      	adds	r3, #144	; 0x90
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063ec:	4619      	mov	r1, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	2334      	movs	r3, #52	; 0x34
 80063f2:	fb01 f303 	mul.w	r3, r1, r3
 80063f6:	4413      	add	r3, r2
 80063f8:	3391      	adds	r3, #145	; 0x91
 80063fa:	2202      	movs	r2, #2
 80063fc:	701a      	strb	r2, [r3, #0]
            break;
 80063fe:	e1a2      	b.n	8006746 <USBH_MSC_Process+0x6ca>
 8006400:	0800d8a8 	.word	0x0800d8a8
 8006404:	0800d8b4 	.word	0x0800d8b4
 8006408:	0800d8cc 	.word	0x0800d8cc
 800640c:	0800d8e4 	.word	0x0800d8e4
 8006410:	0800d8fc 	.word	0x0800d8fc
 8006414:	0800d910 	.word	0x0800d910
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800641e:	b2d9      	uxtb	r1, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006426:	461a      	mov	r2, r3
 8006428:	2334      	movs	r3, #52	; 0x34
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	3390      	adds	r3, #144	; 0x90
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	3304      	adds	r3, #4
 8006436:	461a      	mov	r2, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 feb4 	bl	80071a6 <USBH_MSC_SCSI_ReadCapacity>
 800643e:	4603      	mov	r3, r0
 8006440:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d170      	bne.n	800652a <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800644e:	4619      	mov	r1, r3
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	2334      	movs	r3, #52	; 0x34
 8006454:	fb01 f303 	mul.w	r3, r1, r3
 8006458:	4413      	add	r3, r2
 800645a:	33c1      	adds	r3, #193	; 0xc1
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d142      	bne.n	80064e8 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %u Bytes", \
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006468:	4619      	mov	r1, r3
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	2334      	movs	r3, #52	; 0x34
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	3394      	adds	r3, #148	; 0x94
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800647e:	4610      	mov	r0, r2
 8006480:	6939      	ldr	r1, [r7, #16]
 8006482:	2234      	movs	r2, #52	; 0x34
 8006484:	fb00 f202 	mul.w	r2, r0, r2
 8006488:	440a      	add	r2, r1
 800648a:	3298      	adds	r2, #152	; 0x98
 800648c:	8812      	ldrh	r2, [r2, #0]
 800648e:	fb02 f303 	mul.w	r3, r2, r3
 8006492:	4619      	mov	r1, r3
 8006494:	48b3      	ldr	r0, [pc, #716]	; (8006764 <USBH_MSC_Process+0x6e8>)
 8006496:	f006 fb31 	bl	800cafc <iprintf>
 800649a:	200a      	movs	r0, #10
 800649c:	f006 fb40 	bl	800cb20 <putchar>
                USBH_UsrLog("Block number : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064a6:	4619      	mov	r1, r3
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	2334      	movs	r3, #52	; 0x34
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	4413      	add	r3, r2
 80064b2:	3394      	adds	r3, #148	; 0x94
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	48ab      	ldr	r0, [pc, #684]	; (8006768 <USBH_MSC_Process+0x6ec>)
 80064ba:	f006 fb1f 	bl	800cafc <iprintf>
 80064be:	200a      	movs	r0, #10
 80064c0:	f006 fb2e 	bl	800cb20 <putchar>
                USBH_UsrLog("Block Size   : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064ca:	4619      	mov	r1, r3
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	2334      	movs	r3, #52	; 0x34
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	4413      	add	r3, r2
 80064d6:	3398      	adds	r3, #152	; 0x98
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	4619      	mov	r1, r3
 80064dc:	48a3      	ldr	r0, [pc, #652]	; (800676c <USBH_MSC_Process+0x6f0>)
 80064de:	f006 fb0d 	bl	800cafc <iprintf>
 80064e2:	200a      	movs	r0, #10
 80064e4:	f006 fb1c 	bl	800cb20 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064ee:	4619      	mov	r1, r3
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	2334      	movs	r3, #52	; 0x34
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	4413      	add	r3, r2
 80064fa:	3390      	adds	r3, #144	; 0x90
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006506:	4619      	mov	r1, r3
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	2334      	movs	r3, #52	; 0x34
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	3391      	adds	r3, #145	; 0x91
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800651e:	3301      	adds	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006528:	e10f      	b.n	800674a <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d10c      	bne.n	800654a <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006536:	4619      	mov	r1, r3
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	2334      	movs	r3, #52	; 0x34
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	4413      	add	r3, r2
 8006542:	3390      	adds	r3, #144	; 0x90
 8006544:	2205      	movs	r2, #5
 8006546:	701a      	strb	r2, [r3, #0]
            break;
 8006548:	e0ff      	b.n	800674a <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	2b04      	cmp	r3, #4
 800654e:	f040 80fc 	bne.w	800674a <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006558:	4619      	mov	r1, r3
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	2334      	movs	r3, #52	; 0x34
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	3390      	adds	r3, #144	; 0x90
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006570:	4619      	mov	r1, r3
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	2334      	movs	r3, #52	; 0x34
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	4413      	add	r3, r2
 800657c:	3391      	adds	r3, #145	; 0x91
 800657e:	2202      	movs	r2, #2
 8006580:	701a      	strb	r2, [r3, #0]
            break;
 8006582:	e0e2      	b.n	800674a <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800658a:	b2d9      	uxtb	r1, r3
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006592:	461a      	mov	r2, r3
 8006594:	2334      	movs	r3, #52	; 0x34
 8006596:	fb02 f303 	mul.w	r3, r2, r3
 800659a:	3398      	adds	r3, #152	; 0x98
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	3304      	adds	r3, #4
 80065a2:	461a      	mov	r2, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 ff1e 	bl	80073e6 <USBH_MSC_SCSI_RequestSense>
 80065aa:	4603      	mov	r3, r0
 80065ac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d17b      	bne.n	80066ac <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065ba:	4619      	mov	r1, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	2334      	movs	r3, #52	; 0x34
 80065c0:	fb01 f303 	mul.w	r3, r1, r3
 80065c4:	4413      	add	r3, r2
 80065c6:	339c      	adds	r3, #156	; 0x9c
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b06      	cmp	r3, #6
 80065cc:	d00c      	beq.n	80065e8 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065d4:	4619      	mov	r1, r3
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	2334      	movs	r3, #52	; 0x34
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	4413      	add	r3, r2
 80065e0:	339c      	adds	r3, #156	; 0x9c
 80065e2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d117      	bne.n	8006618 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d80c      	bhi.n	8006618 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006604:	4619      	mov	r1, r3
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	2334      	movs	r3, #52	; 0x34
 800660a:	fb01 f303 	mul.w	r3, r1, r3
 800660e:	4413      	add	r3, r2
 8006610:	3390      	adds	r3, #144	; 0x90
 8006612:	2202      	movs	r2, #2
 8006614:	701a      	strb	r2, [r3, #0]
                  break;
 8006616:	e09b      	b.n	8006750 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800661e:	4619      	mov	r1, r3
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	2334      	movs	r3, #52	; 0x34
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	339c      	adds	r3, #156	; 0x9c
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	4619      	mov	r1, r3
 8006630:	484f      	ldr	r0, [pc, #316]	; (8006770 <USBH_MSC_Process+0x6f4>)
 8006632:	f006 fa63 	bl	800cafc <iprintf>
 8006636:	200a      	movs	r0, #10
 8006638:	f006 fa72 	bl	800cb20 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006642:	4619      	mov	r1, r3
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	2334      	movs	r3, #52	; 0x34
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	339d      	adds	r3, #157	; 0x9d
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	4847      	ldr	r0, [pc, #284]	; (8006774 <USBH_MSC_Process+0x6f8>)
 8006656:	f006 fa51 	bl	800cafc <iprintf>
 800665a:	200a      	movs	r0, #10
 800665c:	f006 fa60 	bl	800cb20 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006666:	4619      	mov	r1, r3
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	2334      	movs	r3, #52	; 0x34
 800666c:	fb01 f303 	mul.w	r3, r1, r3
 8006670:	4413      	add	r3, r2
 8006672:	339e      	adds	r3, #158	; 0x9e
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	4619      	mov	r1, r3
 8006678:	483f      	ldr	r0, [pc, #252]	; (8006778 <USBH_MSC_Process+0x6fc>)
 800667a:	f006 fa3f 	bl	800cafc <iprintf>
 800667e:	200a      	movs	r0, #10
 8006680:	f006 fa4e 	bl	800cb20 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800668a:	4619      	mov	r1, r3
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	2334      	movs	r3, #52	; 0x34
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	4413      	add	r3, r2
 8006696:	3390      	adds	r3, #144	; 0x90
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066a2:	3301      	adds	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d112      	bne.n	80066d8 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 80066b2:	4832      	ldr	r0, [pc, #200]	; (800677c <USBH_MSC_Process+0x700>)
 80066b4:	f006 fa22 	bl	800cafc <iprintf>
 80066b8:	200a      	movs	r0, #10
 80066ba:	f006 fa31 	bl	800cb20 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066c4:	4619      	mov	r1, r3
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	2334      	movs	r3, #52	; 0x34
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	3390      	adds	r3, #144	; 0x90
 80066d2:	2208      	movs	r2, #8
 80066d4:	701a      	strb	r2, [r3, #0]
            break;
 80066d6:	e03a      	b.n	800674e <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d137      	bne.n	800674e <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066e4:	4619      	mov	r1, r3
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	2334      	movs	r3, #52	; 0x34
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	4413      	add	r3, r2
 80066f0:	3390      	adds	r3, #144	; 0x90
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066fc:	4619      	mov	r1, r3
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	2334      	movs	r3, #52	; 0x34
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	4413      	add	r3, r2
 8006708:	3391      	adds	r3, #145	; 0x91
 800670a:	2202      	movs	r2, #2
 800670c:	701a      	strb	r2, [r3, #0]
            break;
 800670e:	e01e      	b.n	800674e <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006716:	3301      	adds	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006720:	e016      	b.n	8006750 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2200      	movs	r2, #0
 8006726:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2201      	movs	r2, #1
 800672e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006736:	2102      	movs	r1, #2
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
      break;
 800673c:	e00c      	b.n	8006758 <USBH_MSC_Process+0x6dc>
            break;
 800673e:	bf00      	nop
 8006740:	e00a      	b.n	8006758 <USBH_MSC_Process+0x6dc>
            break;
 8006742:	bf00      	nop
 8006744:	e008      	b.n	8006758 <USBH_MSC_Process+0x6dc>
            break;
 8006746:	bf00      	nop
 8006748:	e006      	b.n	8006758 <USBH_MSC_Process+0x6dc>
            break;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <USBH_MSC_Process+0x6dc>
            break;
 800674e:	bf00      	nop
      break;
 8006750:	e002      	b.n	8006758 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	75fb      	strb	r3, [r7, #23]
      break;
 8006756:	bf00      	nop
  }
  return error;
 8006758:	7dfb      	ldrb	r3, [r7, #23]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	0800d928 	.word	0x0800d928
 8006768:	0800d948 	.word	0x0800d948
 800676c:	0800d95c 	.word	0x0800d95c
 8006770:	0800d970 	.word	0x0800d970
 8006774:	0800d980 	.word	0x0800d980
 8006778:	0800d99c 	.word	0x0800d99c
 800677c:	0800d910 	.word	0x0800d910

08006780 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af02      	add	r7, sp, #8
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80067ae:	2301      	movs	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	2134      	movs	r1, #52	; 0x34
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	3390      	adds	r3, #144	; 0x90
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b07      	cmp	r3, #7
 80067c8:	d03d      	beq.n	8006846 <USBH_MSC_RdWrProcess+0xae>
 80067ca:	2b07      	cmp	r3, #7
 80067cc:	f300 80dc 	bgt.w	8006988 <USBH_MSC_RdWrProcess+0x1f0>
 80067d0:	2b05      	cmp	r3, #5
 80067d2:	d06d      	beq.n	80068b0 <USBH_MSC_RdWrProcess+0x118>
 80067d4:	2b06      	cmp	r3, #6
 80067d6:	f040 80d7 	bne.w	8006988 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80067da:	78f9      	ldrb	r1, [r7, #3]
 80067dc:	2300      	movs	r3, #0
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2300      	movs	r3, #0
 80067e2:	2200      	movs	r2, #0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fee2 	bl	80075ae <USBH_MSC_SCSI_Read>
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10b      	bne.n	800680c <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	2134      	movs	r1, #52	; 0x34
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	3390      	adds	r3, #144	; 0x90
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800680a:	e0bf      	b.n	800698c <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d109      	bne.n	8006826 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	2134      	movs	r1, #52	; 0x34
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	4413      	add	r3, r2
 800681e:	3390      	adds	r3, #144	; 0x90
 8006820:	2205      	movs	r2, #5
 8006822:	701a      	strb	r2, [r3, #0]
      break;
 8006824:	e0b2      	b.n	800698c <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b04      	cmp	r3, #4
 800682a:	f040 80af 	bne.w	800698c <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	2134      	movs	r1, #52	; 0x34
 8006834:	fb01 f303 	mul.w	r3, r1, r3
 8006838:	4413      	add	r3, r2
 800683a:	3390      	adds	r3, #144	; 0x90
 800683c:	2208      	movs	r2, #8
 800683e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006840:	2302      	movs	r3, #2
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	e0a2      	b.n	800698c <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006846:	78f9      	ldrb	r1, [r7, #3]
 8006848:	2300      	movs	r3, #0
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	2300      	movs	r3, #0
 800684e:	2200      	movs	r2, #0
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fe41 	bl	80074d8 <USBH_MSC_SCSI_Write>
 8006856:	4603      	mov	r3, r0
 8006858:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10b      	bne.n	8006878 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	2134      	movs	r1, #52	; 0x34
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	3390      	adds	r3, #144	; 0x90
 800686e:	2201      	movs	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006876:	e08b      	b.n	8006990 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d109      	bne.n	8006892 <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	2134      	movs	r1, #52	; 0x34
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	3390      	adds	r3, #144	; 0x90
 800688c:	2205      	movs	r2, #5
 800688e:	701a      	strb	r2, [r3, #0]
      break;
 8006890:	e07e      	b.n	8006990 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d17b      	bne.n	8006990 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	2134      	movs	r1, #52	; 0x34
 800689e:	fb01 f303 	mul.w	r3, r1, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	3390      	adds	r3, #144	; 0x90
 80068a6:	2208      	movs	r2, #8
 80068a8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80068aa:	2302      	movs	r3, #2
 80068ac:	75fb      	strb	r3, [r7, #23]
      break;
 80068ae:	e06f      	b.n	8006990 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	2234      	movs	r2, #52	; 0x34
 80068b4:	fb02 f303 	mul.w	r3, r2, r3
 80068b8:	3398      	adds	r3, #152	; 0x98
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4413      	add	r3, r2
 80068be:	1d1a      	adds	r2, r3, #4
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fd8e 	bl	80073e6 <USBH_MSC_SCSI_RequestSense>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d140      	bne.n	8006956 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	2134      	movs	r1, #52	; 0x34
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	4413      	add	r3, r2
 80068e0:	339c      	adds	r3, #156	; 0x9c
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	4619      	mov	r1, r3
 80068e6:	482e      	ldr	r0, [pc, #184]	; (80069a0 <USBH_MSC_RdWrProcess+0x208>)
 80068e8:	f006 f908 	bl	800cafc <iprintf>
 80068ec:	200a      	movs	r0, #10
 80068ee:	f006 f917 	bl	800cb20 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 80068f2:	78fb      	ldrb	r3, [r7, #3]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	2134      	movs	r1, #52	; 0x34
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	4413      	add	r3, r2
 80068fe:	339d      	adds	r3, #157	; 0x9d
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
 8006904:	4827      	ldr	r0, [pc, #156]	; (80069a4 <USBH_MSC_RdWrProcess+0x20c>)
 8006906:	f006 f8f9 	bl	800cafc <iprintf>
 800690a:	200a      	movs	r0, #10
 800690c:	f006 f908 	bl	800cb20 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	2134      	movs	r1, #52	; 0x34
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	4413      	add	r3, r2
 800691c:	339e      	adds	r3, #158	; 0x9e
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	4821      	ldr	r0, [pc, #132]	; (80069a8 <USBH_MSC_RdWrProcess+0x210>)
 8006924:	f006 f8ea 	bl	800cafc <iprintf>
 8006928:	200a      	movs	r0, #10
 800692a:	f006 f8f9 	bl	800cb20 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	2134      	movs	r1, #52	; 0x34
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	3390      	adds	r3, #144	; 0x90
 800693c:	2201      	movs	r2, #1
 800693e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	2134      	movs	r1, #52	; 0x34
 8006946:	fb01 f303 	mul.w	r3, r1, r3
 800694a:	4413      	add	r3, r2
 800694c:	3391      	adds	r3, #145	; 0x91
 800694e:	2202      	movs	r2, #2
 8006950:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8006952:	2302      	movs	r3, #2
 8006954:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d106      	bne.n	800696a <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 800695c:	4813      	ldr	r0, [pc, #76]	; (80069ac <USBH_MSC_RdWrProcess+0x214>)
 800695e:	f006 f8cd 	bl	800cafc <iprintf>
 8006962:	200a      	movs	r0, #10
 8006964:	f006 f8dc 	bl	800cb20 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006968:	e014      	b.n	8006994 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	2b04      	cmp	r3, #4
 800696e:	d111      	bne.n	8006994 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	2134      	movs	r1, #52	; 0x34
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	4413      	add	r3, r2
 800697c:	3390      	adds	r3, #144	; 0x90
 800697e:	2208      	movs	r2, #8
 8006980:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006982:	2302      	movs	r3, #2
 8006984:	75fb      	strb	r3, [r7, #23]
      break;
 8006986:	e005      	b.n	8006994 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 8006988:	bf00      	nop
 800698a:	e004      	b.n	8006996 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800698c:	bf00      	nop
 800698e:	e002      	b.n	8006996 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 8006990:	bf00      	nop
 8006992:	e000      	b.n	8006996 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 8006994:	bf00      	nop

  }
  return error;
 8006996:	7dfb      	ldrb	r3, [r7, #23]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	0800d970 	.word	0x0800d970
 80069a4:	0800d980 	.word	0x0800d980
 80069a8:	0800d99c 	.word	0x0800d99c
 80069ac:	0800d910 	.word	0x0800d910

080069b0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b0b      	cmp	r3, #11
 80069ce:	d10c      	bne.n	80069ea <USBH_MSC_UnitIsReady+0x3a>
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	2134      	movs	r1, #52	; 0x34
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	3391      	adds	r3, #145	; 0x91
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
 80069e8:	e001      	b.n	80069ee <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	460b      	mov	r3, r1
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b0b      	cmp	r3, #11
 8006a1c:	d10d      	bne.n	8006a3a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006a1e:	7afb      	ldrb	r3, [r7, #11]
 8006a20:	2234      	movs	r2, #52	; 0x34
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
 8006a26:	3390      	adds	r3, #144	; 0x90
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	2234      	movs	r2, #52	; 0x34
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f006 fa3c 	bl	800ceae <memcpy>
    return USBH_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	e000      	b.n	8006a3c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006a3a:	2302      	movs	r3, #2
  }
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	607a      	str	r2, [r7, #4]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	460b      	mov	r3, r1
 8006a52:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00e      	beq.n	8006a88 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006a70:	2b0b      	cmp	r3, #11
 8006a72:	d109      	bne.n	8006a88 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006a74:	7afb      	ldrb	r3, [r7, #11]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	2134      	movs	r1, #52	; 0x34
 8006a7a:	fb01 f303 	mul.w	r3, r1, r3
 8006a7e:	4413      	add	r3, r2
 8006a80:	3390      	adds	r3, #144	; 0x90
 8006a82:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d001      	beq.n	8006a8c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e040      	b.n	8006b0e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2206      	movs	r2, #6
 8006a90:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	2134      	movs	r1, #52	; 0x34
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3390      	adds	r3, #144	; 0x90
 8006aa0:	2206      	movs	r2, #6
 8006aa2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006aae:	7af9      	ldrb	r1, [r7, #11]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fd78 	bl	80075ae <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ac4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006ac6:	e016      	b.n	8006af6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	f242 7110 	movw	r1, #10000	; 0x2710
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d805      	bhi.n	8006aec <USBH_MSC_Read+0xa8>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2201      	movs	r2, #1
 8006af0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006af2:	2302      	movs	r3, #2
 8006af4:	e00b      	b.n	8006b0e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006af6:	7afb      	ldrb	r3, [r7, #11]
 8006af8:	4619      	mov	r1, r3
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7ff fe4c 	bl	8006798 <USBH_MSC_RdWrProcess>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d0e0      	beq.n	8006ac8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b088      	sub	sp, #32
 8006b1a:	af02      	add	r7, sp, #8
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
 8006b22:	460b      	mov	r3, r1
 8006b24:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006b42:	2b0b      	cmp	r3, #11
 8006b44:	d109      	bne.n	8006b5a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	2134      	movs	r1, #52	; 0x34
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	3390      	adds	r3, #144	; 0x90
 8006b54:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d001      	beq.n	8006b5e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e040      	b.n	8006be0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2207      	movs	r2, #7
 8006b62:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006b64:	7afb      	ldrb	r3, [r7, #11]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	2134      	movs	r1, #52	; 0x34
 8006b6a:	fb01 f303 	mul.w	r3, r1, r3
 8006b6e:	4413      	add	r3, r2
 8006b70:	3390      	adds	r3, #144	; 0x90
 8006b72:	2207      	movs	r2, #7
 8006b74:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006b80:	7af9      	ldrb	r1, [r7, #11]
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fca4 	bl	80074d8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b96:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006b98:	e016      	b.n	8006bc8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	f242 7110 	movw	r1, #10000	; 0x2710
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d805      	bhi.n	8006bbe <USBH_MSC_Write+0xa8>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e00b      	b.n	8006be0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fde3 	bl	8006798 <USBH_MSC_RdWrProcess>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d0e0      	beq.n	8006b9a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2221      	movs	r2, #33	; 0x21
 8006bf4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	22ff      	movs	r2, #255	; 0xff
 8006bfa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2100      	movs	r1, #0
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f002 f932 	bl	8008e7c <USBH_CtlReq>
 8006c18:	4603      	mov	r3, r0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	22a1      	movs	r2, #161	; 0xa1
 8006c30:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	22fe      	movs	r2, #254	; 0xfe
 8006c36:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f002 f914 	bl	8008e7c <USBH_CtlReq>
 8006c54:	4603      	mov	r3, r0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <USBH_MSC_BOT_Init+0x3c>)
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4a09      	ldr	r2, [pc, #36]	; (8006ca0 <USBH_MSC_BOT_Init+0x40>)
 8006c7c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	43425355 	.word	0x43425355
 8006ca0:	20304050 	.word	0x20304050

08006ca4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	2b0a      	cmp	r3, #10
 8006cd8:	f200 819e 	bhi.w	8007018 <USBH_MSC_BOT_Process+0x374>
 8006cdc:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <USBH_MSC_BOT_Process+0x40>)
 8006cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce2:	bf00      	nop
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	08006d39 	.word	0x08006d39
 8006cec:	08006da3 	.word	0x08006da3
 8006cf0:	08006dc1 	.word	0x08006dc1
 8006cf4:	08006e45 	.word	0x08006e45
 8006cf8:	08006e67 	.word	0x08006e67
 8006cfc:	08006eff 	.word	0x08006eff
 8006d00:	08006f1b 	.word	0x08006f1b
 8006d04:	08006f6d 	.word	0x08006f6d
 8006d08:	08006f9d 	.word	0x08006f9d
 8006d0c:	08006fff 	.word	0x08006fff
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	78fa      	ldrb	r2, [r7, #3]
 8006d14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	795b      	ldrb	r3, [r3, #5]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	9200      	str	r2, [sp, #0]
 8006d2e:	221f      	movs	r2, #31
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f002 fac0 	bl	80092b6 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006d36:	e17e      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	795b      	ldrb	r3, [r3, #5]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f005 fc80 	bl	800c644 <USBH_LL_GetURBState>
 8006d44:	4603      	mov	r3, r0
 8006d46:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006d48:	7d3b      	ldrb	r3, [r7, #20]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d118      	bne.n	8006d80 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00f      	beq.n	8006d76 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006d5c:	b25b      	sxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da04      	bge.n	8006d6c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2203      	movs	r2, #3
 8006d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d6a:	e157      	b.n	800701c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2205      	movs	r2, #5
 8006d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d74:	e152      	b.n	800701c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2207      	movs	r2, #7
 8006d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d7e:	e14d      	b.n	800701c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006d80:	7d3b      	ldrb	r3, [r7, #20]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d104      	bne.n	8006d90 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d8e:	e145      	b.n	800701c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8006d90:	7d3b      	ldrb	r3, [r7, #20]
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	f040 8142 	bne.w	800701c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	220a      	movs	r2, #10
 8006d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006da0:	e13c      	b.n	800701c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	895a      	ldrh	r2, [r3, #10]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	791b      	ldrb	r3, [r3, #4]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f002 faa5 	bl	8009300 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2204      	movs	r2, #4
 8006dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006dbe:	e13a      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	791b      	ldrb	r3, [r3, #4]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f005 fc3c 	bl	800c644 <USBH_LL_GetURBState>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006dd0:	7d3b      	ldrb	r3, [r7, #20]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d12d      	bne.n	8006e32 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	8952      	ldrh	r2, [r2, #10]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d910      	bls.n	8006e04 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	8952      	ldrh	r2, [r2, #10]
 8006dec:	441a      	add	r2, r3
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	8952      	ldrh	r2, [r2, #10]
 8006dfc:	1a9a      	subs	r2, r3, r2
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e02:	e002      	b.n	8006e0a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2200      	movs	r2, #0
 8006e08:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	895a      	ldrh	r2, [r3, #10]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	791b      	ldrb	r3, [r3, #4]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 fa6d 	bl	8009300 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006e26:	e0fb      	b.n	8007020 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2207      	movs	r2, #7
 8006e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e30:	e0f6      	b.n	8007020 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8006e32:	7d3b      	ldrb	r3, [r7, #20]
 8006e34:	2b05      	cmp	r3, #5
 8006e36:	f040 80f3 	bne.w	8007020 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2209      	movs	r2, #9
 8006e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e42:	e0ed      	b.n	8007020 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	891a      	ldrh	r2, [r3, #8]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	795b      	ldrb	r3, [r3, #5]
 8006e52:	2001      	movs	r0, #1
 8006e54:	9000      	str	r0, [sp, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f002 fa2d 	bl	80092b6 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2206      	movs	r2, #6
 8006e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e64:	e0e7      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	795b      	ldrb	r3, [r3, #5]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f005 fbe9 	bl	800c644 <USBH_LL_GetURBState>
 8006e72:	4603      	mov	r3, r0
 8006e74:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006e76:	7d3b      	ldrb	r3, [r7, #20]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d12f      	bne.n	8006edc <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	8912      	ldrh	r2, [r2, #8]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d910      	bls.n	8006eaa <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	8912      	ldrh	r2, [r2, #8]
 8006e92:	441a      	add	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	8912      	ldrh	r2, [r2, #8]
 8006ea2:	1a9a      	subs	r2, r3, r2
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ea8:	e002      	b.n	8006eb0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2200      	movs	r2, #0
 8006eae:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00c      	beq.n	8006ed2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	891a      	ldrh	r2, [r3, #8]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	795b      	ldrb	r3, [r3, #5]
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	9000      	str	r0, [sp, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f002 f9f3 	bl	80092b6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006ed0:	e0a8      	b.n	8007024 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2207      	movs	r2, #7
 8006ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006eda:	e0a3      	b.n	8007024 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006edc:	7d3b      	ldrb	r3, [r7, #20]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d104      	bne.n	8006eec <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2205      	movs	r2, #5
 8006ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006eea:	e09b      	b.n	8007024 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006eec:	7d3b      	ldrb	r3, [r7, #20]
 8006eee:	2b05      	cmp	r3, #5
 8006ef0:	f040 8098 	bne.w	8007024 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	220a      	movs	r2, #10
 8006ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006efc:	e092      	b.n	8007024 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	791b      	ldrb	r3, [r3, #4]
 8006f08:	220d      	movs	r2, #13
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f002 f9f8 	bl	8009300 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2208      	movs	r2, #8
 8006f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f18:	e08d      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	791b      	ldrb	r3, [r3, #4]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f005 fb8f 	bl	800c644 <USBH_LL_GetURBState>
 8006f26:	4603      	mov	r3, r0
 8006f28:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006f2a:	7d3b      	ldrb	r3, [r7, #20]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d115      	bne.n	8006f5c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f8a9 	bl	8007098 <USBH_MSC_DecodeCSW>
 8006f46:	4603      	mov	r3, r0
 8006f48:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006f4a:	7d7b      	ldrb	r3, [r7, #21]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006f54:	e068      	b.n	8007028 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006f56:	2302      	movs	r3, #2
 8006f58:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5a:	e065      	b.n	8007028 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006f5c:	7d3b      	ldrb	r3, [r7, #20]
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	d162      	bne.n	8007028 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2209      	movs	r2, #9
 8006f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f6a:	e05d      	b.n	8007028 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f864 	bl	8007040 <USBH_MSC_BOT_Abort>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006f7c:	7dbb      	ldrb	r3, [r7, #22]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d104      	bne.n	8006f8c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2207      	movs	r2, #7
 8006f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006f8a:	e04f      	b.n	800702c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006f8c:	7dbb      	ldrb	r3, [r7, #22]
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d14c      	bne.n	800702c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	220b      	movs	r2, #11
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f9a:	e047      	b.n	800702c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f84c 	bl	8007040 <USBH_MSC_BOT_Abort>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006fac:	7dbb      	ldrb	r3, [r7, #22]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d11d      	bne.n	8006fee <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	795b      	ldrb	r3, [r3, #5]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f005 fb9d 	bl	800c6f8 <USBH_LL_GetToggle>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	7959      	ldrb	r1, [r3, #5]
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	f1c3 0301 	rsb	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f005 fb61 	bl	800c698 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	791b      	ldrb	r3, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f005 fb5a 	bl	800c698 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2209      	movs	r2, #9
 8006fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006fec:	e020      	b.n	8007030 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006fee:	7dbb      	ldrb	r3, [r7, #22]
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d11d      	bne.n	8007030 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	220b      	movs	r2, #11
 8006ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ffc:	e018      	b.n	8007030 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fdf2 	bl	8006be8 <USBH_MSC_BOT_REQ_Reset>
 8007004:	4603      	mov	r3, r0
 8007006:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d112      	bne.n	8007034 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007016:	e00d      	b.n	8007034 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007018:	bf00      	nop
 800701a:	e00c      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>
      break;
 800701c:	bf00      	nop
 800701e:	e00a      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>
      break;
 8007020:	bf00      	nop
 8007022:	e008      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>
      break;
 8007024:	bf00      	nop
 8007026:	e006      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>
      break;
 8007028:	bf00      	nop
 800702a:	e004      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>
      break;
 800702c:	bf00      	nop
 800702e:	e002      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>
      break;
 8007030:	bf00      	nop
 8007032:	e000      	b.n	8007036 <USBH_MSC_BOT_Process+0x392>
      break;
 8007034:	bf00      	nop
  }
  return status;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
 800704c:	4613      	mov	r3, r2
 800704e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800705e:	78bb      	ldrb	r3, [r7, #2]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <USBH_MSC_BOT_Abort+0x2a>
 8007064:	2b01      	cmp	r3, #1
 8007066:	d009      	beq.n	800707c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007068:	e011      	b.n	800708e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	79db      	ldrb	r3, [r3, #7]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fbc7 	bl	8008804 <USBH_ClrFeature>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
      break;
 800707a:	e008      	b.n	800708e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	799b      	ldrb	r3, [r3, #6]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 fbbe 	bl	8008804 <USBH_ClrFeature>
 8007088:	4603      	mov	r3, r0
 800708a:	73fb      	strb	r3, [r7, #15]
      break;
 800708c:	bf00      	nop
  }
  return status;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80070aa:	2301      	movs	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	791b      	ldrb	r3, [r3, #4]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f005 fa33 	bl	800c520 <USBH_LL_GetLastXferSize>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b0d      	cmp	r3, #13
 80070be:	d002      	beq.n	80070c6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80070c0:	2302      	movs	r3, #2
 80070c2:	73fb      	strb	r3, [r7, #15]
 80070c4:	e024      	b.n	8007110 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ca:	4a14      	ldr	r2, [pc, #80]	; (800711c <USBH_MSC_DecodeCSW+0x84>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d11d      	bne.n	800710c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d8:	429a      	cmp	r2, r3
 80070da:	d119      	bne.n	8007110 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]
 80070ea:	e011      	b.n	8007110 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d102      	bne.n	80070fc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80070f6:	2301      	movs	r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	e009      	b.n	8007110 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007102:	2b02      	cmp	r3, #2
 8007104:	d104      	bne.n	8007110 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007106:	2302      	movs	r3, #2
 8007108:	73fb      	strb	r3, [r7, #15]
 800710a:	e001      	b.n	8007110 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800710c:	2302      	movs	r3, #2
 800710e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007110:	7bfb      	ldrb	r3, [r7, #15]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	53425355 	.word	0x53425355

08007120 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800712c:	2302      	movs	r3, #2
 800712e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007140:	2b01      	cmp	r3, #1
 8007142:	d002      	beq.n	800714a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007144:	2b02      	cmp	r3, #2
 8007146:	d021      	beq.n	800718c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007148:	e028      	b.n	800719c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2200      	movs	r2, #0
 800714e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	220a      	movs	r2, #10
 800715c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	3363      	adds	r3, #99	; 0x63
 8007164:	2210      	movs	r2, #16
 8007166:	2100      	movs	r1, #0
 8007168:	4618      	mov	r0, r3
 800716a:	f005 fe15 	bl	800cd98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
      break;
 800718a:	e007      	b.n	800719c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fd87 	bl	8006ca4 <USBH_MSC_BOT_Process>
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
      break;
 800719a:	bf00      	nop
  }

  return error;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b086      	sub	sp, #24
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	460b      	mov	r3, r1
 80071b0:	607a      	str	r2, [r7, #4]
 80071b2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 80071b4:	2301      	movs	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d002      	beq.n	80071d2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d027      	beq.n	8007220 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80071d0:	e05f      	b.n	8007292 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2208      	movs	r2, #8
 80071d6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	220a      	movs	r2, #10
 80071e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	3363      	adds	r3, #99	; 0x63
 80071ec:	2210      	movs	r2, #16
 80071ee:	2100      	movs	r1, #0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f005 fdd1 	bl	800cd98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2225      	movs	r2, #37	; 0x25
 80071fa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f103 0210 	add.w	r2, r3, #16
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800721a:	2301      	movs	r3, #1
 800721c:	75fb      	strb	r3, [r7, #23]
      break;
 800721e:	e038      	b.n	8007292 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff fd3d 	bl	8006ca4 <USBH_MSC_BOT_Process>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d12d      	bne.n	8007290 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800723a:	3303      	adds	r3, #3
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007246:	3302      	adds	r3, #2
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007254:	3301      	adds	r3, #1
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800725a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	061b      	lsls	r3, r3, #24
 8007266:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007272:	3307      	adds	r3, #7
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	b29a      	uxth	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800727e:	3306      	adds	r3, #6
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	b29b      	uxth	r3, r3
 8007288:	4313      	orrs	r3, r2
 800728a:	b29a      	uxth	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	809a      	strh	r2, [r3, #4]
      break;
 8007290:	bf00      	nop
  }

  return error;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	460b      	mov	r3, r1
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80072aa:	2302      	movs	r3, #2
 80072ac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d002      	beq.n	80072c8 <USBH_MSC_SCSI_Inquiry+0x2c>
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d03d      	beq.n	8007342 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80072c6:	e089      	b.n	80073dc <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2224      	movs	r2, #36	; 0x24
 80072cc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	220a      	movs	r2, #10
 80072da:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	3363      	adds	r3, #99	; 0x63
 80072e2:	220a      	movs	r2, #10
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f005 fd56 	bl	800cd98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2212      	movs	r2, #18
 80072f0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	015b      	lsls	r3, r3, #5
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2224      	movs	r2, #36	; 0x24
 8007314:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f103 0210 	add.w	r2, r3, #16
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800733c:	2301      	movs	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
      break;
 8007340:	e04c      	b.n	80073dc <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007342:	7afb      	ldrb	r3, [r7, #11]
 8007344:	4619      	mov	r1, r3
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fcac 	bl	8006ca4 <USBH_MSC_BOT_Process>
 800734c:	4603      	mov	r3, r0
 800734e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d141      	bne.n	80073da <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007356:	2222      	movs	r2, #34	; 0x22
 8007358:	2100      	movs	r1, #0
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f005 fd1c 	bl	800cd98 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	b2da      	uxtb	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	b2da      	uxtb	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007388:	3301      	adds	r3, #1
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b25b      	sxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	da03      	bge.n	800739a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	709a      	strb	r2, [r3, #2]
 8007398:	e002      	b.n	80073a0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	1cd8      	adds	r0, r3, #3
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073aa:	3308      	adds	r3, #8
 80073ac:	2208      	movs	r2, #8
 80073ae:	4619      	mov	r1, r3
 80073b0:	f005 fd7d 	bl	800ceae <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f103 000c 	add.w	r0, r3, #12
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c0:	3310      	adds	r3, #16
 80073c2:	2210      	movs	r2, #16
 80073c4:	4619      	mov	r1, r3
 80073c6:	f005 fd72 	bl	800ceae <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	331d      	adds	r3, #29
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80073d4:	3220      	adds	r2, #32
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	601a      	str	r2, [r3, #0]
      break;
 80073da:	bf00      	nop
  }

  return error;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b086      	sub	sp, #24
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	460b      	mov	r3, r1
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80073f4:	2302      	movs	r3, #2
 80073f6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007408:	2b01      	cmp	r3, #1
 800740a:	d002      	beq.n	8007412 <USBH_MSC_SCSI_RequestSense+0x2c>
 800740c:	2b02      	cmp	r3, #2
 800740e:	d03d      	beq.n	800748c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007410:	e05d      	b.n	80074ce <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	220e      	movs	r2, #14
 8007416:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2280      	movs	r2, #128	; 0x80
 800741c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	220a      	movs	r2, #10
 8007424:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3363      	adds	r3, #99	; 0x63
 800742c:	2210      	movs	r2, #16
 800742e:	2100      	movs	r1, #0
 8007430:	4618      	mov	r0, r3
 8007432:	f005 fcb1 	bl	800cd98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2203      	movs	r2, #3
 800743a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	015b      	lsls	r3, r3, #5
 8007442:	b2da      	uxtb	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	220e      	movs	r2, #14
 800745e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2202      	movs	r2, #2
 8007476:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f103 0210 	add.w	r2, r3, #16
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
      break;
 800748a:	e020      	b.n	80074ce <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	4619      	mov	r1, r3
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7ff fc07 	bl	8006ca4 <USBH_MSC_BOT_Process>
 8007496:	4603      	mov	r3, r0
 8007498:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d115      	bne.n	80074cc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a6:	3302      	adds	r3, #2
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	f003 030f 	and.w	r3, r3, #15
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ba:	7b1a      	ldrb	r2, [r3, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074c6:	7b5a      	ldrb	r2, [r3, #13]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	709a      	strb	r2, [r3, #2]
      break;
 80074cc:	bf00      	nop
  }

  return error;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	460b      	mov	r3, r1
 80074e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80074e8:	2302      	movs	r3, #2
 80074ea:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d002      	beq.n	8007506 <USBH_MSC_SCSI_Write+0x2e>
 8007500:	2b02      	cmp	r3, #2
 8007502:	d047      	beq.n	8007594 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007504:	e04e      	b.n	80075a4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800750c:	461a      	mov	r2, r3
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	fb03 f202 	mul.w	r2, r3, r2
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	220a      	movs	r2, #10
 8007524:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	3363      	adds	r3, #99	; 0x63
 800752c:	2210      	movs	r2, #16
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f005 fc31 	bl	800cd98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	222a      	movs	r2, #42	; 0x2a
 800753a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800753e:	79fa      	ldrb	r2, [r7, #7]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007546:	79ba      	ldrb	r2, [r7, #6]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800754e:	797a      	ldrb	r2, [r7, #5]
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007556:	1d3b      	adds	r3, r7, #4
 8007558:	781a      	ldrb	r2, [r3, #0]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8007560:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800756a:	f107 0320 	add.w	r3, r7, #32
 800756e:	781a      	ldrb	r2, [r3, #0]
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]
      break;
 8007592:	e007      	b.n	80075a4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	4619      	mov	r1, r3
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff fb83 	bl	8006ca4 <USBH_MSC_BOT_Process>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]
      break;
 80075a2:	bf00      	nop
  }

  return error;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b086      	sub	sp, #24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	460b      	mov	r3, r1
 80075bc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80075be:	2302      	movs	r3, #2
 80075c0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d002      	beq.n	80075dc <USBH_MSC_SCSI_Read+0x2e>
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d047      	beq.n	800766a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80075da:	e04e      	b.n	800767a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80075e2:	461a      	mov	r2, r3
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	fb03 f202 	mul.w	r2, r3, r2
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2280      	movs	r2, #128	; 0x80
 80075f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	220a      	movs	r2, #10
 80075fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3363      	adds	r3, #99	; 0x63
 8007602:	2210      	movs	r2, #16
 8007604:	2100      	movs	r1, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f005 fbc6 	bl	800cd98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2228      	movs	r2, #40	; 0x28
 8007610:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007614:	79fa      	ldrb	r2, [r7, #7]
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800761c:	79ba      	ldrb	r2, [r7, #6]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007624:	797a      	ldrb	r2, [r7, #5]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800762c:	1d3b      	adds	r3, r7, #4
 800762e:	781a      	ldrb	r2, [r3, #0]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8007636:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8007640:	f107 0320 	add.w	r3, r7, #32
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007664:	2301      	movs	r3, #1
 8007666:	75fb      	strb	r3, [r7, #23]
      break;
 8007668:	e007      	b.n	800767a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	4619      	mov	r1, r3
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff fb18 	bl	8006ca4 <USBH_MSC_BOT_Process>
 8007674:	4603      	mov	r3, r0
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	bf00      	nop
  }

  return error;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8007698:	481c      	ldr	r0, [pc, #112]	; (800770c <USBH_Init+0x88>)
 800769a:	f005 fa2f 	bl	800cafc <iprintf>
 800769e:	481c      	ldr	r0, [pc, #112]	; (8007710 <USBH_Init+0x8c>)
 80076a0:	f005 fa2c 	bl	800cafc <iprintf>
 80076a4:	200a      	movs	r0, #10
 80076a6:	f005 fa3b 	bl	800cb20 <putchar>
    return USBH_FAIL;
 80076aa:	2302      	movs	r3, #2
 80076ac:	e029      	b.n	8007702 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	79fa      	ldrb	r2, [r7, #7]
 80076b2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f824 	bl	8007714 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f004 fe5c 	bl	800c3b8 <USBH_LL_Init>

  return USBH_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	0800d9c0 	.word	0x0800d9c0
 8007710:	0800d9c8 	.word	0x0800d9c8

08007714 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e009      	b.n	800773a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	33e0      	adds	r3, #224	; 0xe0
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	2200      	movs	r2, #0
 8007732:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b0f      	cmp	r3, #15
 800773e:	d9f2      	bls.n	8007726 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e009      	b.n	800775a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007750:	2200      	movs	r2, #0
 8007752:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007760:	d3f1      	bcc.n	8007746 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2240      	movs	r2, #64	; 0x40
 8007786:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	331c      	adds	r3, #28
 80077b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077b6:	2100      	movs	r1, #0
 80077b8:	4618      	mov	r0, r3
 80077ba:	f005 faed 	bl	800cd98 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f005 fae4 	bl	800cd98 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f203 3326 	addw	r3, r3, #806	; 0x326
 80077d6:	2212      	movs	r2, #18
 80077d8:	2100      	movs	r1, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	f005 fadc 	bl	800cd98 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80077e6:	223e      	movs	r2, #62	; 0x3e
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f005 fad4 	bl	800cd98 <memset>

  return USBH_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01f      	beq.n	8007850 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10e      	bne.n	8007838 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007820:	1c59      	adds	r1, r3, #1
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	33de      	adds	r3, #222	; 0xde
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
 8007836:	e016      	b.n	8007866 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8007838:	480d      	ldr	r0, [pc, #52]	; (8007870 <USBH_RegisterClass+0x74>)
 800783a:	f005 f95f 	bl	800cafc <iprintf>
 800783e:	480d      	ldr	r0, [pc, #52]	; (8007874 <USBH_RegisterClass+0x78>)
 8007840:	f005 f95c 	bl	800cafc <iprintf>
 8007844:	200a      	movs	r0, #10
 8007846:	f005 f96b 	bl	800cb20 <putchar>
      status = USBH_FAIL;
 800784a:	2302      	movs	r3, #2
 800784c:	73fb      	strb	r3, [r7, #15]
 800784e:	e00a      	b.n	8007866 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8007850:	4807      	ldr	r0, [pc, #28]	; (8007870 <USBH_RegisterClass+0x74>)
 8007852:	f005 f953 	bl	800cafc <iprintf>
 8007856:	4808      	ldr	r0, [pc, #32]	; (8007878 <USBH_RegisterClass+0x7c>)
 8007858:	f005 f950 	bl	800cafc <iprintf>
 800785c:	200a      	movs	r0, #10
 800785e:	f005 f95f 	bl	800cb20 <putchar>
    status = USBH_FAIL;
 8007862:	2302      	movs	r3, #2
 8007864:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007866:	7bfb      	ldrb	r3, [r7, #15]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	0800d9c0 	.word	0x0800d9c0
 8007874:	0800d9dc 	.word	0x0800d9dc
 8007878:	0800d9f8 	.word	0x0800d9f8

0800787c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007892:	78fa      	ldrb	r2, [r7, #3]
 8007894:	429a      	cmp	r2, r3
 8007896:	d23c      	bcs.n	8007912 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	4619      	mov	r1, r3
 80078a4:	4823      	ldr	r0, [pc, #140]	; (8007934 <USBH_SelectInterface+0xb8>)
 80078a6:	f005 f929 	bl	800cafc <iprintf>
 80078aa:	200a      	movs	r0, #10
 80078ac:	f005 f938 	bl	800cb20 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	211a      	movs	r1, #26
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	4413      	add	r3, r2
 80078bc:	f203 3347 	addw	r3, r3, #839	; 0x347
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	4619      	mov	r1, r3
 80078c4:	481c      	ldr	r0, [pc, #112]	; (8007938 <USBH_SelectInterface+0xbc>)
 80078c6:	f005 f919 	bl	800cafc <iprintf>
 80078ca:	200a      	movs	r0, #10
 80078cc:	f005 f928 	bl	800cb20 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	211a      	movs	r1, #26
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	4413      	add	r3, r2
 80078dc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	4815      	ldr	r0, [pc, #84]	; (800793c <USBH_SelectInterface+0xc0>)
 80078e6:	f005 f909 	bl	800cafc <iprintf>
 80078ea:	200a      	movs	r0, #10
 80078ec:	f005 f918 	bl	800cb20 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	211a      	movs	r1, #26
 80078f6:	fb01 f303 	mul.w	r3, r1, r3
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	4619      	mov	r1, r3
 8007904:	480e      	ldr	r0, [pc, #56]	; (8007940 <USBH_SelectInterface+0xc4>)
 8007906:	f005 f8f9 	bl	800cafc <iprintf>
 800790a:	200a      	movs	r0, #10
 800790c:	f005 f908 	bl	800cb20 <putchar>
 8007910:	e00a      	b.n	8007928 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8007912:	480c      	ldr	r0, [pc, #48]	; (8007944 <USBH_SelectInterface+0xc8>)
 8007914:	f005 f8f2 	bl	800cafc <iprintf>
 8007918:	480b      	ldr	r0, [pc, #44]	; (8007948 <USBH_SelectInterface+0xcc>)
 800791a:	f005 f8ef 	bl	800cafc <iprintf>
 800791e:	200a      	movs	r0, #10
 8007920:	f005 f8fe 	bl	800cb20 <putchar>
    status = USBH_FAIL;
 8007924:	2302      	movs	r3, #2
 8007926:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	0800da10 	.word	0x0800da10
 8007938:	0800da30 	.word	0x0800da30
 800793c:	0800da40 	.word	0x0800da40
 8007940:	0800da50 	.word	0x0800da50
 8007944:	0800d9c0 	.word	0x0800d9c0
 8007948:	0800da60 	.word	0x0800da60

0800794c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	461a      	mov	r2, r3
 800795a:	4603      	mov	r3, r0
 800795c:	70fb      	strb	r3, [r7, #3]
 800795e:	460b      	mov	r3, r1
 8007960:	70bb      	strb	r3, [r7, #2]
 8007962:	4613      	mov	r3, r2
 8007964:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007974:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007976:	e025      	b.n	80079c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	221a      	movs	r2, #26
 800797c:	fb02 f303 	mul.w	r3, r2, r3
 8007980:	3308      	adds	r3, #8
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4413      	add	r3, r2
 8007986:	3302      	adds	r3, #2
 8007988:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	795b      	ldrb	r3, [r3, #5]
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	429a      	cmp	r2, r3
 8007992:	d002      	beq.n	800799a <USBH_FindInterface+0x4e>
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	2bff      	cmp	r3, #255	; 0xff
 8007998:	d111      	bne.n	80079be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800799e:	78ba      	ldrb	r2, [r7, #2]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d002      	beq.n	80079aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079a4:	78bb      	ldrb	r3, [r7, #2]
 80079a6:	2bff      	cmp	r3, #255	; 0xff
 80079a8:	d109      	bne.n	80079be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079ae:	787a      	ldrb	r2, [r7, #1]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d002      	beq.n	80079ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079b4:	787b      	ldrb	r3, [r7, #1]
 80079b6:	2bff      	cmp	r3, #255	; 0xff
 80079b8:	d101      	bne.n	80079be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	e006      	b.n	80079cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	3301      	adds	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d9d6      	bls.n	8007978 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80079ca:	23ff      	movs	r3, #255	; 0xff
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f004 fd25 	bl	800c430 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80079e6:	2101      	movs	r1, #1
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f004 fe3e 	bl	800c66a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af04      	add	r7, sp, #16
 80079fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a00:	2302      	movs	r3, #2
 8007a02:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d102      	bne.n	8007a1a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2203      	movs	r2, #3
 8007a18:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b0b      	cmp	r3, #11
 8007a22:	f200 823b 	bhi.w	8007e9c <USBH_Process+0x4a4>
 8007a26:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <USBH_Process+0x34>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a5d 	.word	0x08007a5d
 8007a30:	08007a9b 	.word	0x08007a9b
 8007a34:	08007b1b 	.word	0x08007b1b
 8007a38:	08007e2b 	.word	0x08007e2b
 8007a3c:	08007e9d 	.word	0x08007e9d
 8007a40:	08007bbf 	.word	0x08007bbf
 8007a44:	08007dad 	.word	0x08007dad
 8007a48:	08007c0d 	.word	0x08007c0d
 8007a4c:	08007c2d 	.word	0x08007c2d
 8007a50:	08007c59 	.word	0x08007c59
 8007a54:	08007cb5 	.word	0x08007cb5
 8007a58:	08007e13 	.word	0x08007e13
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 821b 	beq.w	8007ea0 <USBH_Process+0x4a8>
      {
        USBH_UsrLog("USB Device Connected");
 8007a6a:	48a6      	ldr	r0, [pc, #664]	; (8007d04 <USBH_Process+0x30c>)
 8007a6c:	f005 f846 	bl	800cafc <iprintf>
 8007a70:	200a      	movs	r0, #10
 8007a72:	f005 f855 	bl	800cb20 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a7c:	20c8      	movs	r0, #200	; 0xc8
 8007a7e:	f004 fe6b 	bl	800c758 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f004 fd31 	bl	800c4ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a98:	e202      	b.n	8007ea0 <USBH_Process+0x4a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d10d      	bne.n	8007ac0 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8007aa4:	4898      	ldr	r0, [pc, #608]	; (8007d08 <USBH_Process+0x310>)
 8007aa6:	f005 f829 	bl	800cafc <iprintf>
 8007aaa:	200a      	movs	r0, #10
 8007aac:	f005 f838 	bl	800cb20 <putchar>
        phost->device.RstCnt = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007abe:	e1fc      	b.n	8007eba <USBH_Process+0x4c2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aca:	d91a      	bls.n	8007b02 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d909      	bls.n	8007afa <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8007ae6:	4889      	ldr	r0, [pc, #548]	; (8007d0c <USBH_Process+0x314>)
 8007ae8:	f005 f808 	bl	800cafc <iprintf>
 8007aec:	200a      	movs	r0, #10
 8007aee:	f005 f817 	bl	800cb20 <putchar>
            phost->gState = HOST_ABORT_STATE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	220d      	movs	r2, #13
 8007af6:	701a      	strb	r2, [r3, #0]
      break;
 8007af8:	e1df      	b.n	8007eba <USBH_Process+0x4c2>
            phost->gState = HOST_IDLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	701a      	strb	r2, [r3, #0]
      break;
 8007b00:	e1db      	b.n	8007eba <USBH_Process+0x4c2>
          phost->Timeout += 10U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b08:	f103 020a 	add.w	r2, r3, #10
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007b12:	200a      	movs	r0, #10
 8007b14:	f004 fe20 	bl	800c758 <USBH_Delay>
      break;
 8007b18:	e1cf      	b.n	8007eba <USBH_Process+0x4c2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b2a:	2104      	movs	r1, #4
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b30:	2064      	movs	r0, #100	; 0x64
 8007b32:	f004 fe11 	bl	800c758 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f004 fcb0 	bl	800c49c <USBH_LL_GetSpeed>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2205      	movs	r2, #5
 8007b4a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 fc23 	bl	800939a <USBH_AllocPipe>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b5c:	2180      	movs	r1, #128	; 0x80
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fc1b 	bl	800939a <USBH_AllocPipe>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7919      	ldrb	r1, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b80:	b292      	uxth	r2, r2
 8007b82:	9202      	str	r2, [sp, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	9201      	str	r2, [sp, #4]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2280      	movs	r2, #128	; 0x80
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fbd4 	bl	800933c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7959      	ldrb	r1, [r3, #5]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ba8:	b292      	uxth	r2, r2
 8007baa:	9202      	str	r2, [sp, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	9201      	str	r2, [sp, #4]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fbc0 	bl	800933c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bbc:	e17d      	b.n	8007eba <USBH_Process+0x4c2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f98e 	bl	8007ee0 <USBH_HandleEnum>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f040 8169 	bne.w	8007ea4 <USBH_Process+0x4ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 8007bd2:	484f      	ldr	r0, [pc, #316]	; (8007d10 <USBH_Process+0x318>)
 8007bd4:	f004 ff92 	bl	800cafc <iprintf>
 8007bd8:	200a      	movs	r0, #10
 8007bda:	f004 ffa1 	bl	800cb20 <putchar>

        phost->device.current_interface = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d109      	bne.n	8007c04 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 8007bf0:	4848      	ldr	r0, [pc, #288]	; (8007d14 <USBH_Process+0x31c>)
 8007bf2:	f004 ff83 	bl	800cafc <iprintf>
 8007bf6:	200a      	movs	r0, #10
 8007bf8:	f004 ff92 	bl	800cb20 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2208      	movs	r2, #8
 8007c00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c02:	e14f      	b.n	8007ea4 <USBH_Process+0x4ac>
          phost->gState = HOST_INPUT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2207      	movs	r2, #7
 8007c08:	701a      	strb	r2, [r3, #0]
      break;
 8007c0a:	e14b      	b.n	8007ea4 <USBH_Process+0x4ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8148 	beq.w	8007ea8 <USBH_Process+0x4b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c1e:	2101      	movs	r1, #1
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2208      	movs	r2, #8
 8007c28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c2a:	e13d      	b.n	8007ea8 <USBH_Process+0x4b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fd9d 	bl	8008776 <USBH_SetCfg>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 8134 	bne.w	8007eac <USBH_Process+0x4b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2209      	movs	r2, #9
 8007c48:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8007c4a:	4833      	ldr	r0, [pc, #204]	; (8007d18 <USBH_Process+0x320>)
 8007c4c:	f004 ff56 	bl	800cafc <iprintf>
 8007c50:	200a      	movs	r0, #10
 8007c52:	f004 ff65 	bl	800cb20 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c56:	e129      	b.n	8007eac <USBH_Process+0x4b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d022      	beq.n	8007cac <USBH_Process+0x2b4>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007c66:	2101      	movs	r1, #1
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fda7 	bl	80087bc <USBH_SetFeature>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <USBH_Process+0x296>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8007c7a:	4828      	ldr	r0, [pc, #160]	; (8007d1c <USBH_Process+0x324>)
 8007c7c:	f004 ff3e 	bl	800cafc <iprintf>
 8007c80:	200a      	movs	r0, #10
 8007c82:	f004 ff4d 	bl	800cb20 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	220a      	movs	r2, #10
 8007c8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c8c:	e110      	b.n	8007eb0 <USBH_Process+0x4b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	f040 810c 	bne.w	8007eb0 <USBH_Process+0x4b8>
          USBH_UsrLog("Remote wakeup not supported by the device");
 8007c98:	4821      	ldr	r0, [pc, #132]	; (8007d20 <USBH_Process+0x328>)
 8007c9a:	f004 ff2f 	bl	800cafc <iprintf>
 8007c9e:	200a      	movs	r0, #10
 8007ca0:	f004 ff3e 	bl	800cb20 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	220a      	movs	r2, #10
 8007ca8:	701a      	strb	r2, [r3, #0]
      break;
 8007caa:	e101      	b.n	8007eb0 <USBH_Process+0x4b8>
        phost->gState = HOST_CHECK_CLASS;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	220a      	movs	r2, #10
 8007cb0:	701a      	strb	r2, [r3, #0]
      break;
 8007cb2:	e0fd      	b.n	8007eb0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <USBH_Process+0x2d4>
      {
        USBH_UsrLog("No Class has been registered.");
 8007cbe:	4819      	ldr	r0, [pc, #100]	; (8007d24 <USBH_Process+0x32c>)
 8007cc0:	f004 ff1c 	bl	800cafc <iprintf>
 8007cc4:	200a      	movs	r0, #10
 8007cc6:	f004 ff2b 	bl	800cb20 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cca:	e0f6      	b.n	8007eba <USBH_Process+0x4c2>
        phost->pActiveClass = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
 8007cd8:	e029      	b.n	8007d2e <USBH_Process+0x336>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007cda:	7bfa      	ldrb	r2, [r7, #15]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	32de      	adds	r2, #222	; 0xde
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	791a      	ldrb	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d11b      	bne.n	8007d28 <USBH_Process+0x330>
            phost->pActiveClass = phost->pClass[idx];
 8007cf0:	7bfa      	ldrb	r2, [r7, #15]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	32de      	adds	r2, #222	; 0xde
 8007cf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007d00:	e018      	b.n	8007d34 <USBH_Process+0x33c>
 8007d02:	bf00      	nop
 8007d04:	0800da80 	.word	0x0800da80
 8007d08:	0800da98 	.word	0x0800da98
 8007d0c:	0800dab4 	.word	0x0800dab4
 8007d10:	0800dae0 	.word	0x0800dae0
 8007d14:	0800daf4 	.word	0x0800daf4
 8007d18:	0800db1c 	.word	0x0800db1c
 8007d1c:	0800db38 	.word	0x0800db38
 8007d20:	0800db58 	.word	0x0800db58
 8007d24:	0800db84 	.word	0x0800db84
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0d2      	beq.n	8007cda <USBH_Process+0x2e2>
        if (phost->pActiveClass != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d02c      	beq.n	8007d98 <USBH_Process+0x3a0>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d114      	bne.n	8007d7a <USBH_Process+0x382>
            phost->gState = HOST_CLASS_REQUEST;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2206      	movs	r2, #6
 8007d54:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4858      	ldr	r0, [pc, #352]	; (8007ec4 <USBH_Process+0x4cc>)
 8007d62:	f004 fecb 	bl	800cafc <iprintf>
 8007d66:	200a      	movs	r0, #10
 8007d68:	f004 feda 	bl	800cb20 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d72:	2103      	movs	r1, #3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
      break;
 8007d78:	e09f      	b.n	8007eba <USBH_Process+0x4c2>
            phost->gState = HOST_ABORT_STATE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	220d      	movs	r2, #13
 8007d7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	484f      	ldr	r0, [pc, #316]	; (8007ec8 <USBH_Process+0x4d0>)
 8007d8c:	f004 feb6 	bl	800cafc <iprintf>
 8007d90:	200a      	movs	r0, #10
 8007d92:	f004 fec5 	bl	800cb20 <putchar>
      break;
 8007d96:	e090      	b.n	8007eba <USBH_Process+0x4c2>
          phost->gState = HOST_ABORT_STATE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	220d      	movs	r2, #13
 8007d9c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8007d9e:	484b      	ldr	r0, [pc, #300]	; (8007ecc <USBH_Process+0x4d4>)
 8007da0:	f004 feac 	bl	800cafc <iprintf>
 8007da4:	200a      	movs	r0, #10
 8007da6:	f004 febb 	bl	800cb20 <putchar>
      break;
 8007daa:	e086      	b.n	8007eba <USBH_Process+0x4c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d020      	beq.n	8007df8 <USBH_Process+0x400>
      {
        status = phost->pActiveClass->Requests(phost);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <USBH_Process+0x3de>
        {
          phost->gState = HOST_CLASS;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	220b      	movs	r2, #11
 8007dd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dd4:	e06e      	b.n	8007eb4 <USBH_Process+0x4bc>
        else if (status == USBH_FAIL)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d16a      	bne.n	8007eb4 <USBH_Process+0x4bc>
          phost->gState = HOST_ABORT_STATE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	220d      	movs	r2, #13
 8007de2:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8007de4:	483a      	ldr	r0, [pc, #232]	; (8007ed0 <USBH_Process+0x4d8>)
 8007de6:	f004 fe89 	bl	800cafc <iprintf>
 8007dea:	483a      	ldr	r0, [pc, #232]	; (8007ed4 <USBH_Process+0x4dc>)
 8007dec:	f004 fe86 	bl	800cafc <iprintf>
 8007df0:	200a      	movs	r0, #10
 8007df2:	f004 fe95 	bl	800cb20 <putchar>
      break;
 8007df6:	e05d      	b.n	8007eb4 <USBH_Process+0x4bc>
        phost->gState = HOST_ABORT_STATE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	220d      	movs	r2, #13
 8007dfc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8007dfe:	4834      	ldr	r0, [pc, #208]	; (8007ed0 <USBH_Process+0x4d8>)
 8007e00:	f004 fe7c 	bl	800cafc <iprintf>
 8007e04:	4834      	ldr	r0, [pc, #208]	; (8007ed8 <USBH_Process+0x4e0>)
 8007e06:	f004 fe79 	bl	800cafc <iprintf>
 8007e0a:	200a      	movs	r0, #10
 8007e0c:	f004 fe88 	bl	800cb20 <putchar>
      break;
 8007e10:	e050      	b.n	8007eb4 <USBH_Process+0x4bc>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d04d      	beq.n	8007eb8 <USBH_Process+0x4c0>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	4798      	blx	r3
      }
      break;
 8007e28:	e046      	b.n	8007eb8 <USBH_Process+0x4c0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff fc6e 	bl	8007714 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <USBH_Process+0x45e>
      {
        phost->pActiveClass->DeInit(phost);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <USBH_Process+0x474>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e66:	2105      	movs	r1, #5
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8007e6c:	481b      	ldr	r0, [pc, #108]	; (8007edc <USBH_Process+0x4e4>)
 8007e6e:	f004 fe45 	bl	800cafc <iprintf>
 8007e72:	200a      	movs	r0, #10
 8007e74:	f004 fe54 	bl	800cb20 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d107      	bne.n	8007e94 <USBH_Process+0x49c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff fda3 	bl	80079d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e92:	e012      	b.n	8007eba <USBH_Process+0x4c2>
        (void)USBH_LL_Start(phost);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f004 facb 	bl	800c430 <USBH_LL_Start>
      break;
 8007e9a:	e00e      	b.n	8007eba <USBH_Process+0x4c2>

    case HOST_ABORT_STATE:
    default :
      break;
 8007e9c:	bf00      	nop
 8007e9e:	e00c      	b.n	8007eba <USBH_Process+0x4c2>
      break;
 8007ea0:	bf00      	nop
 8007ea2:	e00a      	b.n	8007eba <USBH_Process+0x4c2>
      break;
 8007ea4:	bf00      	nop
 8007ea6:	e008      	b.n	8007eba <USBH_Process+0x4c2>
    break;
 8007ea8:	bf00      	nop
 8007eaa:	e006      	b.n	8007eba <USBH_Process+0x4c2>
      break;
 8007eac:	bf00      	nop
 8007eae:	e004      	b.n	8007eba <USBH_Process+0x4c2>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e002      	b.n	8007eba <USBH_Process+0x4c2>
      break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <USBH_Process+0x4c2>
      break;
 8007eb8:	bf00      	nop
  }
  return USBH_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	0800dba4 	.word	0x0800dba4
 8007ec8:	0800dbb8 	.word	0x0800dbb8
 8007ecc:	0800dbd8 	.word	0x0800dbd8
 8007ed0:	0800d9c0 	.word	0x0800d9c0
 8007ed4:	0800dc00 	.word	0x0800dc00
 8007ed8:	0800dc28 	.word	0x0800dc28
 8007edc:	0800dc40 	.word	0x0800dc40

08007ee0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007eec:	2301      	movs	r3, #1
 8007eee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	2b07      	cmp	r3, #7
 8007ef6:	f200 827f 	bhi.w	80083f8 <USBH_HandleEnum+0x518>
 8007efa:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <USBH_HandleEnum+0x20>)
 8007efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007ffd 	.word	0x08007ffd
 8007f08:	080080ad 	.word	0x080080ad
 8007f0c:	0800816d 	.word	0x0800816d
 8007f10:	080081f5 	.word	0x080081f5
 8007f14:	080082a7 	.word	0x080082a7
 8007f18:	0800831b 	.word	0x0800831b
 8007f1c:	0800838d 	.word	0x0800838d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f20:	2108      	movs	r1, #8
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fb1a 	bl	800855c <USBH_Get_DevDesc>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d130      	bne.n	8007f94 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7919      	ldrb	r1, [r3, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f56:	b292      	uxth	r2, r2
 8007f58:	9202      	str	r2, [sp, #8]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	9201      	str	r2, [sp, #4]
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	4603      	mov	r3, r0
 8007f62:	2280      	movs	r2, #128	; 0x80
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 f9e9 	bl	800933c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7959      	ldrb	r1, [r3, #5]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	9202      	str	r2, [sp, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	9201      	str	r2, [sp, #4]
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f9d5 	bl	800933c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f92:	e233      	b.n	80083fc <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	f040 8230 	bne.w	80083fc <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8007f9c:	48af      	ldr	r0, [pc, #700]	; (800825c <USBH_HandleEnum+0x37c>)
 8007f9e:	f004 fdad 	bl	800cafc <iprintf>
 8007fa2:	48af      	ldr	r0, [pc, #700]	; (8008260 <USBH_HandleEnum+0x380>)
 8007fa4:	f004 fdaa 	bl	800cafc <iprintf>
 8007fa8:	200a      	movs	r0, #10
 8007faa:	f004 fdb9 	bl	800cb20 <putchar>
        phost->device.EnumCnt++;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d909      	bls.n	8007fdc <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007fc8:	48a6      	ldr	r0, [pc, #664]	; (8008264 <USBH_HandleEnum+0x384>)
 8007fca:	f004 fd97 	bl	800cafc <iprintf>
 8007fce:	200a      	movs	r0, #10
 8007fd0:	f004 fda6 	bl	800cb20 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	220d      	movs	r2, #13
 8007fd8:	701a      	strb	r2, [r3, #0]
      break;
 8007fda:	e20f      	b.n	80083fc <USBH_HandleEnum+0x51c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	795b      	ldrb	r3, [r3, #5]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 f9fa 	bl	80093dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	791b      	ldrb	r3, [r3, #4]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 f9f4 	bl	80093dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
      break;
 8007ffa:	e1ff      	b.n	80083fc <USBH_HandleEnum+0x51c>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ffc:	2112      	movs	r1, #18
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 faac 	bl	800855c <USBH_Get_DevDesc>
 8008004:	4603      	mov	r3, r0
 8008006:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d117      	bne.n	800803e <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8008014:	4619      	mov	r1, r3
 8008016:	4894      	ldr	r0, [pc, #592]	; (8008268 <USBH_HandleEnum+0x388>)
 8008018:	f004 fd70 	bl	800cafc <iprintf>
 800801c:	200a      	movs	r0, #10
 800801e:	f004 fd7f 	bl	800cb20 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 8008028:	4619      	mov	r1, r3
 800802a:	4890      	ldr	r0, [pc, #576]	; (800826c <USBH_HandleEnum+0x38c>)
 800802c:	f004 fd66 	bl	800cafc <iprintf>
 8008030:	200a      	movs	r0, #10
 8008032:	f004 fd75 	bl	800cb20 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800803c:	e1e0      	b.n	8008400 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b03      	cmp	r3, #3
 8008042:	f040 81dd 	bne.w	8008400 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 8008046:	4885      	ldr	r0, [pc, #532]	; (800825c <USBH_HandleEnum+0x37c>)
 8008048:	f004 fd58 	bl	800cafc <iprintf>
 800804c:	4888      	ldr	r0, [pc, #544]	; (8008270 <USBH_HandleEnum+0x390>)
 800804e:	f004 fd55 	bl	800cafc <iprintf>
 8008052:	200a      	movs	r0, #10
 8008054:	f004 fd64 	bl	800cb20 <putchar>
        phost->device.EnumCnt++;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800805e:	3301      	adds	r3, #1
 8008060:	b2da      	uxtb	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800806e:	2b03      	cmp	r3, #3
 8008070:	d909      	bls.n	8008086 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8008072:	487c      	ldr	r0, [pc, #496]	; (8008264 <USBH_HandleEnum+0x384>)
 8008074:	f004 fd42 	bl	800cafc <iprintf>
 8008078:	200a      	movs	r0, #10
 800807a:	f004 fd51 	bl	800cb20 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	220d      	movs	r2, #13
 8008082:	701a      	strb	r2, [r3, #0]
      break;
 8008084:	e1bc      	b.n	8008400 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	795b      	ldrb	r3, [r3, #5]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 f9a5 	bl	80093dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	791b      	ldrb	r3, [r3, #4]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f99f 	bl	80093dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	701a      	strb	r2, [r3, #0]
      break;
 80080aa:	e1a9      	b.n	8008400 <USBH_HandleEnum+0x520>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80080ac:	2101      	movs	r1, #1
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fb3d 	bl	800872e <USBH_SetAddress>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d13c      	bne.n	8008138 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 80080be:	2002      	movs	r0, #2
 80080c0:	f004 fb4a 	bl	800c758 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 80080d2:	4619      	mov	r1, r3
 80080d4:	4867      	ldr	r0, [pc, #412]	; (8008274 <USBH_HandleEnum+0x394>)
 80080d6:	f004 fd11 	bl	800cafc <iprintf>
 80080da:	200a      	movs	r0, #10
 80080dc:	f004 fd20 	bl	800cb20 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2203      	movs	r2, #3
 80080e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7919      	ldrb	r1, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080fa:	b292      	uxth	r2, r2
 80080fc:	9202      	str	r2, [sp, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	9201      	str	r2, [sp, #4]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	4603      	mov	r3, r0
 8008106:	2280      	movs	r2, #128	; 0x80
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f917 	bl	800933c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7959      	ldrb	r1, [r3, #5]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008122:	b292      	uxth	r2, r2
 8008124:	9202      	str	r2, [sp, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	9201      	str	r2, [sp, #4]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	4603      	mov	r3, r0
 800812e:	2200      	movs	r2, #0
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 f903 	bl	800933c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008136:	e165      	b.n	8008404 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b03      	cmp	r3, #3
 800813c:	f040 8162 	bne.w	8008404 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Device Set Address request failed");
 8008140:	4846      	ldr	r0, [pc, #280]	; (800825c <USBH_HandleEnum+0x37c>)
 8008142:	f004 fcdb 	bl	800cafc <iprintf>
 8008146:	484c      	ldr	r0, [pc, #304]	; (8008278 <USBH_HandleEnum+0x398>)
 8008148:	f004 fcd8 	bl	800cafc <iprintf>
 800814c:	200a      	movs	r0, #10
 800814e:	f004 fce7 	bl	800cb20 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8008152:	4844      	ldr	r0, [pc, #272]	; (8008264 <USBH_HandleEnum+0x384>)
 8008154:	f004 fcd2 	bl	800cafc <iprintf>
 8008158:	200a      	movs	r0, #10
 800815a:	f004 fce1 	bl	800cb20 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	220d      	movs	r2, #13
 8008162:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	705a      	strb	r2, [r3, #1]
      break;
 800816a:	e14b      	b.n	8008404 <USBH_HandleEnum+0x524>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800816c:	2109      	movs	r1, #9
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa2e 	bl	80085d0 <USBH_Get_CfgDesc>
 8008174:	4603      	mov	r3, r0
 8008176:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d103      	bne.n	8008186 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2204      	movs	r2, #4
 8008182:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008184:	e140      	b.n	8008408 <USBH_HandleEnum+0x528>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b03      	cmp	r3, #3
 800818a:	f040 813d 	bne.w	8008408 <USBH_HandleEnum+0x528>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800818e:	4833      	ldr	r0, [pc, #204]	; (800825c <USBH_HandleEnum+0x37c>)
 8008190:	f004 fcb4 	bl	800cafc <iprintf>
 8008194:	4839      	ldr	r0, [pc, #228]	; (800827c <USBH_HandleEnum+0x39c>)
 8008196:	f004 fcb1 	bl	800cafc <iprintf>
 800819a:	200a      	movs	r0, #10
 800819c:	f004 fcc0 	bl	800cb20 <putchar>
        phost->device.EnumCnt++;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081a6:	3301      	adds	r3, #1
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d909      	bls.n	80081ce <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80081ba:	482a      	ldr	r0, [pc, #168]	; (8008264 <USBH_HandleEnum+0x384>)
 80081bc:	f004 fc9e 	bl	800cafc <iprintf>
 80081c0:	200a      	movs	r0, #10
 80081c2:	f004 fcad 	bl	800cb20 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	220d      	movs	r2, #13
 80081ca:	701a      	strb	r2, [r3, #0]
      break;
 80081cc:	e11c      	b.n	8008408 <USBH_HandleEnum+0x528>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	795b      	ldrb	r3, [r3, #5]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 f901 	bl	80093dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	791b      	ldrb	r3, [r3, #4]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f8fb 	bl	80093dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	701a      	strb	r2, [r3, #0]
      break;
 80081f2:	e109      	b.n	8008408 <USBH_HandleEnum+0x528>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f9e7 	bl	80085d0 <USBH_Get_CfgDesc>
 8008202:	4603      	mov	r3, r0
 8008204:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d103      	bne.n	8008214 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2205      	movs	r2, #5
 8008210:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008212:	e0fb      	b.n	800840c <USBH_HandleEnum+0x52c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b03      	cmp	r3, #3
 8008218:	f040 80f8 	bne.w	800840c <USBH_HandleEnum+0x52c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800821c:	480f      	ldr	r0, [pc, #60]	; (800825c <USBH_HandleEnum+0x37c>)
 800821e:	f004 fc6d 	bl	800cafc <iprintf>
 8008222:	4816      	ldr	r0, [pc, #88]	; (800827c <USBH_HandleEnum+0x39c>)
 8008224:	f004 fc6a 	bl	800cafc <iprintf>
 8008228:	200a      	movs	r0, #10
 800822a:	f004 fc79 	bl	800cb20 <putchar>
        phost->device.EnumCnt++;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008234:	3301      	adds	r3, #1
 8008236:	b2da      	uxtb	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008244:	2b03      	cmp	r3, #3
 8008246:	d91b      	bls.n	8008280 <USBH_HandleEnum+0x3a0>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8008248:	4806      	ldr	r0, [pc, #24]	; (8008264 <USBH_HandleEnum+0x384>)
 800824a:	f004 fc57 	bl	800cafc <iprintf>
 800824e:	200a      	movs	r0, #10
 8008250:	f004 fc66 	bl	800cb20 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	220d      	movs	r2, #13
 8008258:	701a      	strb	r2, [r3, #0]
      break;
 800825a:	e0d7      	b.n	800840c <USBH_HandleEnum+0x52c>
 800825c:	0800d9c0 	.word	0x0800d9c0
 8008260:	0800dc58 	.word	0x0800dc58
 8008264:	0800dc8c 	.word	0x0800dc8c
 8008268:	0800dccc 	.word	0x0800dccc
 800826c:	0800dcd8 	.word	0x0800dcd8
 8008270:	0800dce4 	.word	0x0800dce4
 8008274:	0800dd20 	.word	0x0800dd20
 8008278:	0800dd38 	.word	0x0800dd38
 800827c:	0800dd6c 	.word	0x0800dd6c
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	795b      	ldrb	r3, [r3, #5]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f8a8 	bl	80093dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	791b      	ldrb	r3, [r3, #4]
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 f8a2 	bl	80093dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
      break;
 80082a4:	e0b2      	b.n	800840c <USBH_HandleEnum+0x52c>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d02a      	beq.n	8008306 <USBH_HandleEnum+0x426>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082bc:	23ff      	movs	r3, #255	; 0xff
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f9be 	bl	8008640 <USBH_Get_StringDesc>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10d      	bne.n	80082ea <USBH_HandleEnum+0x40a>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082d4:	4619      	mov	r1, r3
 80082d6:	4853      	ldr	r0, [pc, #332]	; (8008424 <USBH_HandleEnum+0x544>)
 80082d8:	f004 fc10 	bl	800cafc <iprintf>
 80082dc:	200a      	movs	r0, #10
 80082de:	f004 fc1f 	bl	800cb20 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2206      	movs	r2, #6
 80082e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082e8:	e092      	b.n	8008410 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	f040 808f 	bne.w	8008410 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Manufacturer : N/A");
 80082f2:	484d      	ldr	r0, [pc, #308]	; (8008428 <USBH_HandleEnum+0x548>)
 80082f4:	f004 fc02 	bl	800cafc <iprintf>
 80082f8:	200a      	movs	r0, #10
 80082fa:	f004 fc11 	bl	800cb20 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2206      	movs	r2, #6
 8008302:	705a      	strb	r2, [r3, #1]
      break;
 8008304:	e084      	b.n	8008410 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Manufacturer : N/A");
 8008306:	4848      	ldr	r0, [pc, #288]	; (8008428 <USBH_HandleEnum+0x548>)
 8008308:	f004 fbf8 	bl	800cafc <iprintf>
 800830c:	200a      	movs	r0, #10
 800830e:	f004 fc07 	bl	800cb20 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2206      	movs	r2, #6
 8008316:	705a      	strb	r2, [r3, #1]
      break;
 8008318:	e07a      	b.n	8008410 <USBH_HandleEnum+0x530>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008320:	2b00      	cmp	r3, #0
 8008322:	d029      	beq.n	8008378 <USBH_HandleEnum+0x498>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008330:	23ff      	movs	r3, #255	; 0xff
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f984 	bl	8008640 <USBH_Get_StringDesc>
 8008338:	4603      	mov	r3, r0
 800833a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10d      	bne.n	800835e <USBH_HandleEnum+0x47e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008348:	4619      	mov	r1, r3
 800834a:	4838      	ldr	r0, [pc, #224]	; (800842c <USBH_HandleEnum+0x54c>)
 800834c:	f004 fbd6 	bl	800cafc <iprintf>
 8008350:	200a      	movs	r0, #10
 8008352:	f004 fbe5 	bl	800cb20 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2207      	movs	r2, #7
 800835a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800835c:	e05a      	b.n	8008414 <USBH_HandleEnum+0x534>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d157      	bne.n	8008414 <USBH_HandleEnum+0x534>
          USBH_UsrLog("Product : N/A");
 8008364:	4832      	ldr	r0, [pc, #200]	; (8008430 <USBH_HandleEnum+0x550>)
 8008366:	f004 fbc9 	bl	800cafc <iprintf>
 800836a:	200a      	movs	r0, #10
 800836c:	f004 fbd8 	bl	800cb20 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2207      	movs	r2, #7
 8008374:	705a      	strb	r2, [r3, #1]
      break;
 8008376:	e04d      	b.n	8008414 <USBH_HandleEnum+0x534>
        USBH_UsrLog("Product : N/A");
 8008378:	482d      	ldr	r0, [pc, #180]	; (8008430 <USBH_HandleEnum+0x550>)
 800837a:	f004 fbbf 	bl	800cafc <iprintf>
 800837e:	200a      	movs	r0, #10
 8008380:	f004 fbce 	bl	800cb20 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2207      	movs	r2, #7
 8008388:	705a      	strb	r2, [r3, #1]
      break;
 800838a:	e043      	b.n	8008414 <USBH_HandleEnum+0x534>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008392:	2b00      	cmp	r3, #0
 8008394:	d027      	beq.n	80083e6 <USBH_HandleEnum+0x506>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083a2:	23ff      	movs	r3, #255	; 0xff
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f94b 	bl	8008640 <USBH_Get_StringDesc>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10c      	bne.n	80083ce <USBH_HandleEnum+0x4ee>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80083ba:	4619      	mov	r1, r3
 80083bc:	481d      	ldr	r0, [pc, #116]	; (8008434 <USBH_HandleEnum+0x554>)
 80083be:	f004 fb9d 	bl	800cafc <iprintf>
 80083c2:	200a      	movs	r0, #10
 80083c4:	f004 fbac 	bl	800cb20 <putchar>
          Status = USBH_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80083cc:	e024      	b.n	8008418 <USBH_HandleEnum+0x538>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d121      	bne.n	8008418 <USBH_HandleEnum+0x538>
          USBH_UsrLog("Serial Number : N/A");
 80083d4:	4818      	ldr	r0, [pc, #96]	; (8008438 <USBH_HandleEnum+0x558>)
 80083d6:	f004 fb91 	bl	800cafc <iprintf>
 80083da:	200a      	movs	r0, #10
 80083dc:	f004 fba0 	bl	800cb20 <putchar>
          Status = USBH_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
      break;
 80083e4:	e018      	b.n	8008418 <USBH_HandleEnum+0x538>
        USBH_UsrLog("Serial Number : N/A");
 80083e6:	4814      	ldr	r0, [pc, #80]	; (8008438 <USBH_HandleEnum+0x558>)
 80083e8:	f004 fb88 	bl	800cafc <iprintf>
 80083ec:	200a      	movs	r0, #10
 80083ee:	f004 fb97 	bl	800cb20 <putchar>
        Status = USBH_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
      break;
 80083f6:	e00f      	b.n	8008418 <USBH_HandleEnum+0x538>

    default:
      break;
 80083f8:	bf00      	nop
 80083fa:	e00e      	b.n	800841a <USBH_HandleEnum+0x53a>
      break;
 80083fc:	bf00      	nop
 80083fe:	e00c      	b.n	800841a <USBH_HandleEnum+0x53a>
      break;
 8008400:	bf00      	nop
 8008402:	e00a      	b.n	800841a <USBH_HandleEnum+0x53a>
      break;
 8008404:	bf00      	nop
 8008406:	e008      	b.n	800841a <USBH_HandleEnum+0x53a>
      break;
 8008408:	bf00      	nop
 800840a:	e006      	b.n	800841a <USBH_HandleEnum+0x53a>
      break;
 800840c:	bf00      	nop
 800840e:	e004      	b.n	800841a <USBH_HandleEnum+0x53a>
      break;
 8008410:	bf00      	nop
 8008412:	e002      	b.n	800841a <USBH_HandleEnum+0x53a>
      break;
 8008414:	bf00      	nop
 8008416:	e000      	b.n	800841a <USBH_HandleEnum+0x53a>
      break;
 8008418:	bf00      	nop
  }
  return Status;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	0800ddb0 	.word	0x0800ddb0
 8008428:	0800ddc4 	.word	0x0800ddc4
 800842c:	0800ddd8 	.word	0x0800ddd8
 8008430:	0800dde8 	.word	0x0800dde8
 8008434:	0800ddf8 	.word	0x0800ddf8
 8008438:	0800de0c 	.word	0x0800de0c

0800843c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f804 	bl	800847e <USBH_HandleSof>
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b0b      	cmp	r3, #11
 800848e:	d10a      	bne.n	80084a6 <USBH_HandleSof+0x28>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
  }
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80084be:	bf00      	nop
}
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80084da:	bf00      	nop
}
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f003 ff96 	bl	800c466 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	791b      	ldrb	r3, [r3, #4]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 ff4b 	bl	80093dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	795b      	ldrb	r3, [r3, #5]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 ff45 	bl	80093dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af02      	add	r7, sp, #8
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008568:	887b      	ldrh	r3, [r7, #2]
 800856a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800856e:	d90a      	bls.n	8008586 <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 8008570:	4815      	ldr	r0, [pc, #84]	; (80085c8 <USBH_Get_DevDesc+0x6c>)
 8008572:	f004 fac3 	bl	800cafc <iprintf>
 8008576:	4815      	ldr	r0, [pc, #84]	; (80085cc <USBH_Get_DevDesc+0x70>)
 8008578:	f004 fac0 	bl	800cafc <iprintf>
 800857c:	200a      	movs	r0, #10
 800857e:	f004 facf 	bl	800cb20 <putchar>
    return USBH_NOT_SUPPORTED;
 8008582:	2303      	movs	r3, #3
 8008584:	e01b      	b.n	80085be <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800858c:	887b      	ldrh	r3, [r7, #2]
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4613      	mov	r3, r2
 8008592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008596:	2100      	movs	r1, #0
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f893 	bl	80086c4 <USBH_GetDescriptor>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d109      	bne.n	80085bc <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085ae:	887a      	ldrh	r2, [r7, #2]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f94a 	bl	800884c <USBH_ParseDevDesc>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	0800de20 	.word	0x0800de20
 80085cc:	0800de28 	.word	0x0800de28

080085d0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	331c      	adds	r3, #28
 80085e0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80085e2:	887b      	ldrh	r3, [r7, #2]
 80085e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e8:	d90a      	bls.n	8008600 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 80085ea:	4813      	ldr	r0, [pc, #76]	; (8008638 <USBH_Get_CfgDesc+0x68>)
 80085ec:	f004 fa86 	bl	800cafc <iprintf>
 80085f0:	4812      	ldr	r0, [pc, #72]	; (800863c <USBH_Get_CfgDesc+0x6c>)
 80085f2:	f004 fa83 	bl	800cafc <iprintf>
 80085f6:	200a      	movs	r0, #10
 80085f8:	f004 fa92 	bl	800cb20 <putchar>
    return USBH_NOT_SUPPORTED;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e016      	b.n	800862e <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008600:	887b      	ldrh	r3, [r7, #2]
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800860a:	2100      	movs	r1, #0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f859 	bl	80086c4 <USBH_GetDescriptor>
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d107      	bne.n	800862c <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800861c:	887b      	ldrh	r3, [r7, #2]
 800861e:	461a      	mov	r2, r3
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f9c6 	bl	80089b4 <USBH_ParseCfgDesc>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	0800de20 	.word	0x0800de20
 800863c:	0800de6c 	.word	0x0800de6c

08008640 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af02      	add	r7, sp, #8
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	607a      	str	r2, [r7, #4]
 800864a:	461a      	mov	r2, r3
 800864c:	460b      	mov	r3, r1
 800864e:	72fb      	strb	r3, [r7, #11]
 8008650:	4613      	mov	r3, r2
 8008652:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008654:	893b      	ldrh	r3, [r7, #8]
 8008656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800865a:	d802      	bhi.n	8008662 <USBH_Get_StringDesc+0x22>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 8008662:	4816      	ldr	r0, [pc, #88]	; (80086bc <USBH_Get_StringDesc+0x7c>)
 8008664:	f004 fa4a 	bl	800cafc <iprintf>
 8008668:	4815      	ldr	r0, [pc, #84]	; (80086c0 <USBH_Get_StringDesc+0x80>)
 800866a:	f004 fa47 	bl	800cafc <iprintf>
 800866e:	200a      	movs	r0, #10
 8008670:	f004 fa56 	bl	800cb20 <putchar>
    return USBH_NOT_SUPPORTED;
 8008674:	2303      	movs	r3, #3
 8008676:	e01c      	b.n	80086b2 <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008680:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008688:	893b      	ldrh	r3, [r7, #8]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	460b      	mov	r3, r1
 800868e:	2100      	movs	r1, #0
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 f817 	bl	80086c4 <USBH_GetDescriptor>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d107      	bne.n	80086b0 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086a6:	893a      	ldrh	r2, [r7, #8]
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fb98 	bl	8008de0 <USBH_ParseStringDesc>
  }

  return status;
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	0800de20 	.word	0x0800de20
 80086c0:	0800deb8 	.word	0x0800deb8

080086c4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	607b      	str	r3, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	72fb      	strb	r3, [r7, #11]
 80086d2:	4613      	mov	r3, r2
 80086d4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	789b      	ldrb	r3, [r3, #2]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d11c      	bne.n	8008718 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80086de:	7afb      	ldrb	r3, [r7, #11]
 80086e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2206      	movs	r2, #6
 80086ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	893a      	ldrh	r2, [r7, #8]
 80086f4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80086f6:	893b      	ldrh	r3, [r7, #8]
 80086f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80086fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008700:	d104      	bne.n	800870c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f240 4209 	movw	r2, #1033	; 0x409
 8008708:	829a      	strh	r2, [r3, #20]
 800870a:	e002      	b.n	8008712 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8b3a      	ldrh	r2, [r7, #24]
 8008716:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008718:	8b3b      	ldrh	r3, [r7, #24]
 800871a:	461a      	mov	r2, r3
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fbac 	bl	8008e7c <USBH_CtlReq>
 8008724:	4603      	mov	r3, r0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	460b      	mov	r3, r1
 8008738:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	789b      	ldrb	r3, [r3, #2]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10f      	bne.n	8008762 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2205      	movs	r2, #5
 800874c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	b29a      	uxth	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008762:	2200      	movs	r2, #0
 8008764:	2100      	movs	r1, #0
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fb88 	bl	8008e7c <USBH_CtlReq>
 800876c:	4603      	mov	r3, r0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	789b      	ldrb	r3, [r3, #2]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d10e      	bne.n	80087a8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2209      	movs	r2, #9
 8008794:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	887a      	ldrh	r2, [r7, #2]
 800879a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087a8:	2200      	movs	r2, #0
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fb65 	bl	8008e7c <USBH_CtlReq>
 80087b2:	4603      	mov	r3, r0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	789b      	ldrb	r3, [r3, #2]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d10f      	bne.n	80087f0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2203      	movs	r2, #3
 80087da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	b29a      	uxth	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087f0:	2200      	movs	r2, #0
 80087f2:	2100      	movs	r1, #0
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fb41 	bl	8008e7c <USBH_CtlReq>
 80087fa:	4603      	mov	r3, r0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	789b      	ldrb	r3, [r3, #2]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d10f      	bne.n	8008838 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008838:	2200      	movs	r2, #0
 800883a:	2100      	movs	r1, #0
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fb1d 	bl	8008e7c <USBH_CtlReq>
 8008842:	4603      	mov	r3, r0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	4613      	mov	r3, r2
 8008858:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008860:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800886c:	2302      	movs	r3, #2
 800886e:	e098      	b.n	80089a2 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	781a      	ldrb	r2, [r3, #0]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	785a      	ldrb	r2, [r3, #1]
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	3302      	adds	r3, #2
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	b29a      	uxth	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	3303      	adds	r3, #3
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	021b      	lsls	r3, r3, #8
 8008892:	b29b      	uxth	r3, r3
 8008894:	4313      	orrs	r3, r2
 8008896:	b29a      	uxth	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	791a      	ldrb	r2, [r3, #4]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	795a      	ldrb	r2, [r3, #5]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	799a      	ldrb	r2, [r3, #6]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	79da      	ldrb	r2, [r3, #7]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d004      	beq.n	80088d0 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d11b      	bne.n	8008908 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	79db      	ldrb	r3, [r3, #7]
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	dc0f      	bgt.n	80088f8 <USBH_ParseDevDesc+0xac>
 80088d8:	2b08      	cmp	r3, #8
 80088da:	db0f      	blt.n	80088fc <USBH_ParseDevDesc+0xb0>
 80088dc:	3b08      	subs	r3, #8
 80088de:	4a34      	ldr	r2, [pc, #208]	; (80089b0 <USBH_ParseDevDesc+0x164>)
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bf14      	ite	ne
 80088ec:	2301      	movne	r3, #1
 80088ee:	2300      	moveq	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <USBH_ParseDevDesc+0xb8>
 80088f6:	e001      	b.n	80088fc <USBH_ParseDevDesc+0xb0>
 80088f8:	2b40      	cmp	r3, #64	; 0x40
 80088fa:	d003      	beq.n	8008904 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2208      	movs	r2, #8
 8008900:	71da      	strb	r2, [r3, #7]
        break;
 8008902:	e000      	b.n	8008906 <USBH_ParseDevDesc+0xba>
        break;
 8008904:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008906:	e00e      	b.n	8008926 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800890e:	2b02      	cmp	r3, #2
 8008910:	d107      	bne.n	8008922 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	79db      	ldrb	r3, [r3, #7]
 8008916:	2b08      	cmp	r3, #8
 8008918:	d005      	beq.n	8008926 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2208      	movs	r2, #8
 800891e:	71da      	strb	r2, [r3, #7]
 8008920:	e001      	b.n	8008926 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008922:	2303      	movs	r3, #3
 8008924:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	2b08      	cmp	r3, #8
 800892a:	d939      	bls.n	80089a0 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	3308      	adds	r3, #8
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	b29a      	uxth	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	3309      	adds	r3, #9
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	b29b      	uxth	r3, r3
 8008940:	4313      	orrs	r3, r2
 8008942:	b29a      	uxth	r2, r3
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	330a      	adds	r3, #10
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	b29a      	uxth	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	330b      	adds	r3, #11
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	b29b      	uxth	r3, r3
 800895c:	4313      	orrs	r3, r2
 800895e:	b29a      	uxth	r2, r3
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	330c      	adds	r3, #12
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b29a      	uxth	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	330d      	adds	r3, #13
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	b29b      	uxth	r3, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	b29a      	uxth	r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	7b9a      	ldrb	r2, [r3, #14]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	7bda      	ldrb	r2, [r3, #15]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	7c1a      	ldrb	r2, [r3, #16]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	7c5a      	ldrb	r2, [r3, #17]
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	01000101 	.word	0x01000101

080089b4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08c      	sub	sp, #48	; 0x30
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80089c8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80089e2:	2302      	movs	r3, #2
 80089e4:	e0db      	b.n	8008b9e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	781a      	ldrb	r2, [r3, #0]
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	785a      	ldrb	r2, [r3, #1]
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	3302      	adds	r3, #2
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	3303      	adds	r3, #3
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a16:	bf28      	it	cs
 8008a18:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	791a      	ldrb	r2, [r3, #4]
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	795a      	ldrb	r2, [r3, #5]
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	799a      	ldrb	r2, [r3, #6]
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	79da      	ldrb	r2, [r3, #7]
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	7a1a      	ldrb	r2, [r3, #8]
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b09      	cmp	r3, #9
 8008a50:	d002      	beq.n	8008a58 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	2209      	movs	r2, #9
 8008a56:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a58:	88fb      	ldrh	r3, [r7, #6]
 8008a5a:	2b09      	cmp	r3, #9
 8008a5c:	f240 809d 	bls.w	8008b9a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a60:	2309      	movs	r3, #9
 8008a62:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a68:	e081      	b.n	8008b6e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a6a:	f107 0316 	add.w	r3, r7, #22
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a72:	f000 f9e8 	bl	8008e46 <USBH_GetNextDesc>
 8008a76:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	785b      	ldrb	r3, [r3, #1]
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d176      	bne.n	8008b6e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	d002      	beq.n	8008a8e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	2209      	movs	r2, #9
 8008a8c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a92:	221a      	movs	r2, #26
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	3308      	adds	r3, #8
 8008a9a:	6a3a      	ldr	r2, [r7, #32]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3302      	adds	r3, #2
 8008aa0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa4:	69f8      	ldr	r0, [r7, #28]
 8008aa6:	f000 f87e 	bl	8008ba6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ab4:	e043      	b.n	8008b3e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ab6:	f107 0316 	add.w	r3, r7, #22
 8008aba:	4619      	mov	r1, r3
 8008abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008abe:	f000 f9c2 	bl	8008e46 <USBH_GetNextDesc>
 8008ac2:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	785b      	ldrb	r3, [r3, #1]
 8008ac8:	2b05      	cmp	r3, #5
 8008aca:	d138      	bne.n	8008b3e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	795b      	ldrb	r3, [r3, #5]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d113      	bne.n	8008afc <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d003      	beq.n	8008ae4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	799b      	ldrb	r3, [r3, #6]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d10b      	bne.n	8008afc <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	79db      	ldrb	r3, [r3, #7]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10b      	bne.n	8008b04 <USBH_ParseCfgDesc+0x150>
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b09      	cmp	r3, #9
 8008af2:	d007      	beq.n	8008b04 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af6:	2209      	movs	r2, #9
 8008af8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008afa:	e003      	b.n	8008b04 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	2207      	movs	r2, #7
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	e000      	b.n	8008b06 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b04:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b0e:	3201      	adds	r2, #1
 8008b10:	00d2      	lsls	r2, r2, #3
 8008b12:	211a      	movs	r1, #26
 8008b14:	fb01 f303 	mul.w	r3, r1, r3
 8008b18:	4413      	add	r3, r2
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	6a3a      	ldr	r2, [r7, #32]
 8008b1e:	4413      	add	r3, r2
 8008b20:	3304      	adds	r3, #4
 8008b22:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f870 	bl	8008c0e <USBH_ParseEPDesc>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b38:	3301      	adds	r3, #1
 8008b3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	791b      	ldrb	r3, [r3, #4]
 8008b42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d204      	bcs.n	8008b54 <USBH_ParseCfgDesc+0x1a0>
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	885a      	ldrh	r2, [r3, #2]
 8008b4e:	8afb      	ldrh	r3, [r7, #22]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d8b0      	bhi.n	8008ab6 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	791b      	ldrb	r3, [r3, #4]
 8008b58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d201      	bcs.n	8008b64 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e01c      	b.n	8008b9e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b68:	3301      	adds	r3, #1
 8008b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d805      	bhi.n	8008b82 <USBH_ParseCfgDesc+0x1ce>
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	885a      	ldrh	r2, [r3, #2]
 8008b7a:	8afb      	ldrh	r3, [r7, #22]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	f63f af74 	bhi.w	8008a6a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	791b      	ldrb	r3, [r3, #4]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	bf28      	it	cs
 8008b8a:	2302      	movcs	r3, #2
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d201      	bcs.n	8008b9a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e001      	b.n	8008b9e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3730      	adds	r7, #48	; 0x30
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781a      	ldrb	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	785a      	ldrb	r2, [r3, #1]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	789a      	ldrb	r2, [r3, #2]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	78da      	ldrb	r2, [r3, #3]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	bf28      	it	cs
 8008bda:	2302      	movcs	r3, #2
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	795a      	ldrb	r2, [r3, #5]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	799a      	ldrb	r2, [r3, #6]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	79da      	ldrb	r2, [r3, #7]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	7a1a      	ldrb	r2, [r3, #8]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	721a      	strb	r2, [r3, #8]
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b087      	sub	sp, #28
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	781a      	ldrb	r2, [r3, #0]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	785a      	ldrb	r2, [r3, #1]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	789a      	ldrb	r2, [r3, #2]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	78da      	ldrb	r2, [r3, #3]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3304      	adds	r3, #4
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3305      	adds	r3, #5
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	4313      	orrs	r3, r2
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	799a      	ldrb	r2, [r3, #6]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	889b      	ldrh	r3, [r3, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d009      	beq.n	8008c7e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c72:	d804      	bhi.n	8008c7e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c7c:	d901      	bls.n	8008c82 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d136      	bne.n	8008cfa <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	78db      	ldrb	r3, [r3, #3]
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d108      	bne.n	8008caa <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	889b      	ldrh	r3, [r3, #4]
 8008c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca0:	f240 8097 	bls.w	8008dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	75fb      	strb	r3, [r7, #23]
 8008ca8:	e093      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	78db      	ldrb	r3, [r3, #3]
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d107      	bne.n	8008cc6 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	889b      	ldrh	r3, [r3, #4]
 8008cba:	2b40      	cmp	r3, #64	; 0x40
 8008cbc:	f240 8089 	bls.w	8008dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	75fb      	strb	r3, [r7, #23]
 8008cc4:	e085      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	78db      	ldrb	r3, [r3, #3]
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d005      	beq.n	8008cde <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	78db      	ldrb	r3, [r3, #3]
 8008cd6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d10a      	bne.n	8008cf4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	799b      	ldrb	r3, [r3, #6]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <USBH_ParseEPDesc+0xe0>
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	799b      	ldrb	r3, [r3, #6]
 8008cea:	2b10      	cmp	r3, #16
 8008cec:	d970      	bls.n	8008dd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cf2:	e06d      	b.n	8008dd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	75fb      	strb	r3, [r7, #23]
 8008cf8:	e06b      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d13c      	bne.n	8008d7e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	78db      	ldrb	r3, [r3, #3]
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d005      	beq.n	8008d1c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	78db      	ldrb	r3, [r3, #3]
 8008d14:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	889b      	ldrh	r3, [r3, #4]
 8008d20:	2b40      	cmp	r3, #64	; 0x40
 8008d22:	d956      	bls.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008d24:	2303      	movs	r3, #3
 8008d26:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008d28:	e053      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	78db      	ldrb	r3, [r3, #3]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d10e      	bne.n	8008d54 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	799b      	ldrb	r3, [r3, #6]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008d42:	2b10      	cmp	r3, #16
 8008d44:	d803      	bhi.n	8008d4e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008d4a:	2b40      	cmp	r3, #64	; 0x40
 8008d4c:	d941      	bls.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	75fb      	strb	r3, [r7, #23]
 8008d52:	e03e      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	78db      	ldrb	r3, [r3, #3]
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d10b      	bne.n	8008d78 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	799b      	ldrb	r3, [r3, #6]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <USBH_ParseEPDesc+0x164>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	889b      	ldrh	r3, [r3, #4]
 8008d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d70:	d32f      	bcc.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008d72:	2303      	movs	r3, #3
 8008d74:	75fb      	strb	r3, [r7, #23]
 8008d76:	e02c      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
 8008d7c:	e029      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d120      	bne.n	8008dca <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	78db      	ldrb	r3, [r3, #3]
 8008d8c:	f003 0303 	and.w	r3, r3, #3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d106      	bne.n	8008da2 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	889b      	ldrh	r3, [r3, #4]
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d01a      	beq.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	75fb      	strb	r3, [r7, #23]
 8008da0:	e017      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	78db      	ldrb	r3, [r3, #3]
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d10a      	bne.n	8008dc4 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	799b      	ldrb	r3, [r3, #6]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <USBH_ParseEPDesc+0x1b0>
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	889b      	ldrh	r3, [r3, #4]
 8008dba:	2b08      	cmp	r3, #8
 8008dbc:	d909      	bls.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	75fb      	strb	r3, [r7, #23]
 8008dc2:	e006      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	75fb      	strb	r3, [r7, #23]
 8008dc8:	e003      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	75fb      	strb	r3, [r7, #23]
 8008dce:	e000      	b.n	8008dd2 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008dd0:	bf00      	nop
  }

  return status;
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	371c      	adds	r7, #28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	d120      	bne.n	8008e3a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	1e9a      	subs	r2, r3, #2
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	4293      	cmp	r3, r2
 8008e02:	bf28      	it	cs
 8008e04:	4613      	movcs	r3, r2
 8008e06:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3302      	adds	r3, #2
 8008e0c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e0e:	2300      	movs	r3, #0
 8008e10:	82fb      	strh	r3, [r7, #22]
 8008e12:	e00b      	b.n	8008e2c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e14:	8afb      	ldrh	r3, [r7, #22]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4413      	add	r3, r2
 8008e1a:	781a      	ldrb	r2, [r3, #0]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e26:	8afb      	ldrh	r3, [r7, #22]
 8008e28:	3302      	adds	r3, #2
 8008e2a:	82fb      	strh	r3, [r7, #22]
 8008e2c:	8afa      	ldrh	r2, [r7, #22]
 8008e2e:	8abb      	ldrh	r3, [r7, #20]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d3ef      	bcc.n	8008e14 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	881a      	ldrh	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	789b      	ldrb	r3, [r3, #2]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d002      	beq.n	8008e9c <USBH_CtlReq+0x20>
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d00f      	beq.n	8008eba <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e9a:	e027      	b.n	8008eec <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	88fa      	ldrh	r2, [r7, #6]
 8008ea6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb8:	e018      	b.n	8008eec <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 f81c 	bl	8008ef8 <USBH_HandleControl>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <USBH_CtlReq+0x54>
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d106      	bne.n	8008ede <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	761a      	strb	r2, [r3, #24]
      break;
 8008edc:	e005      	b.n	8008eea <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d102      	bne.n	8008eea <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	709a      	strb	r2, [r3, #2]
      break;
 8008eea:	bf00      	nop
  }
  return status;
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af02      	add	r7, sp, #8
 8008efe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7e1b      	ldrb	r3, [r3, #24]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	2b0a      	cmp	r3, #10
 8008f10:	f200 815f 	bhi.w	80091d2 <USBH_HandleControl+0x2da>
 8008f14:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <USBH_HandleControl+0x24>)
 8008f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1a:	bf00      	nop
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	08008f63 	.word	0x08008f63
 8008f24:	08008fcd 	.word	0x08008fcd
 8008f28:	08008ff3 	.word	0x08008ff3
 8008f2c:	0800902b 	.word	0x0800902b
 8008f30:	08009055 	.word	0x08009055
 8008f34:	080090a7 	.word	0x080090a7
 8008f38:	080090c9 	.word	0x080090c9
 8008f3c:	08009105 	.word	0x08009105
 8008f40:	0800912b 	.word	0x0800912b
 8008f44:	08009169 	.word	0x08009169
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f103 0110 	add.w	r1, r3, #16
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	795b      	ldrb	r3, [r3, #5]
 8008f52:	461a      	mov	r2, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f951 	bl	80091fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	761a      	strb	r2, [r3, #24]
      break;
 8008f60:	e142      	b.n	80091e8 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	795b      	ldrb	r3, [r3, #5]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f003 fb6b 	bl	800c644 <USBH_LL_GetURBState>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d11e      	bne.n	8008fb6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	7c1b      	ldrb	r3, [r3, #16]
 8008f7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8adb      	ldrh	r3, [r3, #22]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f8a:	7b7b      	ldrb	r3, [r7, #13]
 8008f8c:	2b80      	cmp	r3, #128	; 0x80
 8008f8e:	d103      	bne.n	8008f98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2203      	movs	r2, #3
 8008f94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f96:	e11e      	b.n	80091d6 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2205      	movs	r2, #5
 8008f9c:	761a      	strb	r2, [r3, #24]
      break;
 8008f9e:	e11a      	b.n	80091d6 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 8008fa0:	7b7b      	ldrb	r3, [r7, #13]
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d103      	bne.n	8008fae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2209      	movs	r2, #9
 8008faa:	761a      	strb	r2, [r3, #24]
      break;
 8008fac:	e113      	b.n	80091d6 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2207      	movs	r2, #7
 8008fb2:	761a      	strb	r2, [r3, #24]
      break;
 8008fb4:	e10f      	b.n	80091d6 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fb6:	7bbb      	ldrb	r3, [r7, #14]
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d003      	beq.n	8008fc4 <USBH_HandleControl+0xcc>
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	f040 8109 	bne.w	80091d6 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	220b      	movs	r2, #11
 8008fc8:	761a      	strb	r2, [r3, #24]
      break;
 8008fca:	e104      	b.n	80091d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6899      	ldr	r1, [r3, #8]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	899a      	ldrh	r2, [r3, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	791b      	ldrb	r3, [r3, #4]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f948 	bl	800927a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2204      	movs	r2, #4
 8008fee:	761a      	strb	r2, [r3, #24]
      break;
 8008ff0:	e0fa      	b.n	80091e8 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	791b      	ldrb	r3, [r3, #4]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f003 fb23 	bl	800c644 <USBH_LL_GetURBState>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d102      	bne.n	800900e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2209      	movs	r2, #9
 800900c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	2b05      	cmp	r3, #5
 8009012:	d102      	bne.n	800901a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009014:	2303      	movs	r3, #3
 8009016:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009018:	e0df      	b.n	80091da <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b04      	cmp	r3, #4
 800901e:	f040 80dc 	bne.w	80091da <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	220b      	movs	r2, #11
 8009026:	761a      	strb	r2, [r3, #24]
      break;
 8009028:	e0d7      	b.n	80091da <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6899      	ldr	r1, [r3, #8]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	899a      	ldrh	r2, [r3, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	795b      	ldrb	r3, [r3, #5]
 8009036:	2001      	movs	r0, #1
 8009038:	9000      	str	r0, [sp, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f8f8 	bl	8009230 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009046:	b29a      	uxth	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2206      	movs	r2, #6
 8009050:	761a      	strb	r2, [r3, #24]
      break;
 8009052:	e0c9      	b.n	80091e8 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	795b      	ldrb	r3, [r3, #5]
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f003 faf2 	bl	800c644 <USBH_LL_GetURBState>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d103      	bne.n	8009072 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2207      	movs	r2, #7
 800906e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009070:	e0b5      	b.n	80091de <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b05      	cmp	r3, #5
 8009076:	d105      	bne.n	8009084 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	220c      	movs	r2, #12
 800907c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800907e:	2303      	movs	r3, #3
 8009080:	73fb      	strb	r3, [r7, #15]
      break;
 8009082:	e0ac      	b.n	80091de <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d103      	bne.n	8009092 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2205      	movs	r2, #5
 800908e:	761a      	strb	r2, [r3, #24]
      break;
 8009090:	e0a5      	b.n	80091de <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	2b04      	cmp	r3, #4
 8009096:	f040 80a2 	bne.w	80091de <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	220b      	movs	r2, #11
 800909e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80090a0:	2302      	movs	r3, #2
 80090a2:	73fb      	strb	r3, [r7, #15]
      break;
 80090a4:	e09b      	b.n	80091de <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	791b      	ldrb	r3, [r3, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	2100      	movs	r1, #0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f8e3 	bl	800927a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2208      	movs	r2, #8
 80090c4:	761a      	strb	r2, [r3, #24]

      break;
 80090c6:	e08f      	b.n	80091e8 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	791b      	ldrb	r3, [r3, #4]
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f003 fab8 	bl	800c644 <USBH_LL_GetURBState>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d105      	bne.n	80090ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	220d      	movs	r2, #13
 80090e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090e8:	e07b      	b.n	80091e2 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d103      	bne.n	80090f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	220b      	movs	r2, #11
 80090f4:	761a      	strb	r2, [r3, #24]
      break;
 80090f6:	e074      	b.n	80091e2 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	2b05      	cmp	r3, #5
 80090fc:	d171      	bne.n	80091e2 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 80090fe:	2303      	movs	r3, #3
 8009100:	73fb      	strb	r3, [r7, #15]
      break;
 8009102:	e06e      	b.n	80091e2 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	795b      	ldrb	r3, [r3, #5]
 8009108:	2201      	movs	r2, #1
 800910a:	9200      	str	r2, [sp, #0]
 800910c:	2200      	movs	r2, #0
 800910e:	2100      	movs	r1, #0
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f88d 	bl	8009230 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800911c:	b29a      	uxth	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	220a      	movs	r2, #10
 8009126:	761a      	strb	r2, [r3, #24]
      break;
 8009128:	e05e      	b.n	80091e8 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	795b      	ldrb	r3, [r3, #5]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f003 fa87 	bl	800c644 <USBH_LL_GetURBState>
 8009136:	4603      	mov	r3, r0
 8009138:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d105      	bne.n	800914c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	220d      	movs	r2, #13
 8009148:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800914a:	e04c      	b.n	80091e6 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b02      	cmp	r3, #2
 8009150:	d103      	bne.n	800915a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2209      	movs	r2, #9
 8009156:	761a      	strb	r2, [r3, #24]
      break;
 8009158:	e045      	b.n	80091e6 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b04      	cmp	r3, #4
 800915e:	d142      	bne.n	80091e6 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	220b      	movs	r2, #11
 8009164:	761a      	strb	r2, [r3, #24]
      break;
 8009166:	e03e      	b.n	80091e6 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	7e5b      	ldrb	r3, [r3, #25]
 800916c:	3301      	adds	r3, #1
 800916e:	b2da      	uxtb	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	765a      	strb	r2, [r3, #25]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	7e5b      	ldrb	r3, [r3, #25]
 8009178:	2b02      	cmp	r3, #2
 800917a:	d806      	bhi.n	800918a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009188:	e02e      	b.n	80091e8 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009190:	2106      	movs	r1, #6
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800919c:	4815      	ldr	r0, [pc, #84]	; (80091f4 <USBH_HandleControl+0x2fc>)
 800919e:	f003 fcad 	bl	800cafc <iprintf>
 80091a2:	4815      	ldr	r0, [pc, #84]	; (80091f8 <USBH_HandleControl+0x300>)
 80091a4:	f003 fcaa 	bl	800cafc <iprintf>
 80091a8:	200a      	movs	r0, #10
 80091aa:	f003 fcb9 	bl	800cb20 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	795b      	ldrb	r3, [r3, #5]
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f911 	bl	80093dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	791b      	ldrb	r3, [r3, #4]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f90b 	bl	80093dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091cc:	2302      	movs	r3, #2
 80091ce:	73fb      	strb	r3, [r7, #15]
      break;
 80091d0:	e00a      	b.n	80091e8 <USBH_HandleControl+0x2f0>

    default:
      break;
 80091d2:	bf00      	nop
 80091d4:	e008      	b.n	80091e8 <USBH_HandleControl+0x2f0>
      break;
 80091d6:	bf00      	nop
 80091d8:	e006      	b.n	80091e8 <USBH_HandleControl+0x2f0>
      break;
 80091da:	bf00      	nop
 80091dc:	e004      	b.n	80091e8 <USBH_HandleControl+0x2f0>
      break;
 80091de:	bf00      	nop
 80091e0:	e002      	b.n	80091e8 <USBH_HandleControl+0x2f0>
      break;
 80091e2:	bf00      	nop
 80091e4:	e000      	b.n	80091e8 <USBH_HandleControl+0x2f0>
      break;
 80091e6:	bf00      	nop
  }

  return status;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	0800de20 	.word	0x0800de20
 80091f8:	0800defc 	.word	0x0800defc

080091fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af04      	add	r7, sp, #16
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800920a:	79f9      	ldrb	r1, [r7, #7]
 800920c:	2300      	movs	r3, #0
 800920e:	9303      	str	r3, [sp, #12]
 8009210:	2308      	movs	r3, #8
 8009212:	9302      	str	r3, [sp, #8]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	2300      	movs	r3, #0
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	2300      	movs	r3, #0
 800921e:	2200      	movs	r2, #0
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f003 f9de 	bl	800c5e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af04      	add	r7, sp, #16
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4611      	mov	r1, r2
 800923c:	461a      	mov	r2, r3
 800923e:	460b      	mov	r3, r1
 8009240:	80fb      	strh	r3, [r7, #6]
 8009242:	4613      	mov	r3, r2
 8009244:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009254:	7979      	ldrb	r1, [r7, #5]
 8009256:	7e3b      	ldrb	r3, [r7, #24]
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	9302      	str	r3, [sp, #8]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	2301      	movs	r3, #1
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2300      	movs	r3, #0
 8009268:	2200      	movs	r2, #0
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f003 f9b9 	bl	800c5e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b088      	sub	sp, #32
 800927e:	af04      	add	r7, sp, #16
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	4611      	mov	r1, r2
 8009286:	461a      	mov	r2, r3
 8009288:	460b      	mov	r3, r1
 800928a:	80fb      	strh	r3, [r7, #6]
 800928c:	4613      	mov	r3, r2
 800928e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009290:	7979      	ldrb	r1, [r7, #5]
 8009292:	2300      	movs	r3, #0
 8009294:	9303      	str	r3, [sp, #12]
 8009296:	88fb      	ldrh	r3, [r7, #6]
 8009298:	9302      	str	r3, [sp, #8]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	2301      	movs	r3, #1
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	2300      	movs	r3, #0
 80092a4:	2201      	movs	r2, #1
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f003 f99b 	bl	800c5e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80092ac:	2300      	movs	r3, #0

}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b088      	sub	sp, #32
 80092ba:	af04      	add	r7, sp, #16
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	4611      	mov	r1, r2
 80092c2:	461a      	mov	r2, r3
 80092c4:	460b      	mov	r3, r1
 80092c6:	80fb      	strh	r3, [r7, #6]
 80092c8:	4613      	mov	r3, r2
 80092ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092da:	7979      	ldrb	r1, [r7, #5]
 80092dc:	7e3b      	ldrb	r3, [r7, #24]
 80092de:	9303      	str	r3, [sp, #12]
 80092e0:	88fb      	ldrh	r3, [r7, #6]
 80092e2:	9302      	str	r3, [sp, #8]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	2301      	movs	r3, #1
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	2302      	movs	r3, #2
 80092ee:	2200      	movs	r2, #0
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f003 f976 	bl	800c5e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af04      	add	r7, sp, #16
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4611      	mov	r1, r2
 800930c:	461a      	mov	r2, r3
 800930e:	460b      	mov	r3, r1
 8009310:	80fb      	strh	r3, [r7, #6]
 8009312:	4613      	mov	r3, r2
 8009314:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009316:	7979      	ldrb	r1, [r7, #5]
 8009318:	2300      	movs	r3, #0
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	9302      	str	r3, [sp, #8]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	2301      	movs	r3, #1
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2302      	movs	r3, #2
 800932a:	2201      	movs	r2, #1
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f003 f958 	bl	800c5e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af04      	add	r7, sp, #16
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	4608      	mov	r0, r1
 8009346:	4611      	mov	r1, r2
 8009348:	461a      	mov	r2, r3
 800934a:	4603      	mov	r3, r0
 800934c:	70fb      	strb	r3, [r7, #3]
 800934e:	460b      	mov	r3, r1
 8009350:	70bb      	strb	r3, [r7, #2]
 8009352:	4613      	mov	r3, r2
 8009354:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009356:	7878      	ldrb	r0, [r7, #1]
 8009358:	78ba      	ldrb	r2, [r7, #2]
 800935a:	78f9      	ldrb	r1, [r7, #3]
 800935c:	8b3b      	ldrh	r3, [r7, #24]
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	7d3b      	ldrb	r3, [r7, #20]
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	7c3b      	ldrb	r3, [r7, #16]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	4603      	mov	r3, r0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f003 f8eb 	bl	800c546 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f003 f90a 	bl	800c5a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f836 	bl	8009418 <USBH_GetFreePipe>
 80093ac:	4603      	mov	r3, r0
 80093ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80093b0:	89fb      	ldrh	r3, [r7, #14]
 80093b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00a      	beq.n	80093d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	89fb      	ldrh	r3, [r7, #14]
 80093be:	f003 030f 	and.w	r3, r3, #15
 80093c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	33e0      	adds	r3, #224	; 0xe0
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093d0:	89fb      	ldrh	r3, [r7, #14]
 80093d2:	b2db      	uxtb	r3, r3
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	2b0f      	cmp	r3, #15
 80093ec:	d80d      	bhi.n	800940a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	33e0      	adds	r3, #224	; 0xe0
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	33e0      	adds	r3, #224	; 0xe0
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
 8009428:	e00f      	b.n	800944a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	33e0      	adds	r3, #224	; 0xe0
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	b29b      	uxth	r3, r3
 8009442:	e007      	b.n	8009454 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	3301      	adds	r3, #1
 8009448:	73fb      	strb	r3, [r7, #15]
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b0f      	cmp	r3, #15
 800944e:	d9ec      	bls.n	800942a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009450:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	4a08      	ldr	r2, [pc, #32]	; (8009490 <disk_status+0x30>)
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	79fa      	ldrb	r2, [r7, #7]
 8009478:	4905      	ldr	r1, [pc, #20]	; (8009490 <disk_status+0x30>)
 800947a:	440a      	add	r2, r1
 800947c:	7a12      	ldrb	r2, [r2, #8]
 800947e:	4610      	mov	r0, r2
 8009480:	4798      	blx	r3
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	20000164 	.word	0x20000164

08009494 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	4a0d      	ldr	r2, [pc, #52]	; (80094dc <disk_initialize+0x48>)
 80094a6:	5cd3      	ldrb	r3, [r2, r3]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d111      	bne.n	80094d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	4a0b      	ldr	r2, [pc, #44]	; (80094dc <disk_initialize+0x48>)
 80094b0:	2101      	movs	r1, #1
 80094b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <disk_initialize+0x48>)
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	79fa      	ldrb	r2, [r7, #7]
 80094c2:	4906      	ldr	r1, [pc, #24]	; (80094dc <disk_initialize+0x48>)
 80094c4:	440a      	add	r2, r1
 80094c6:	7a12      	ldrb	r2, [r2, #8]
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000164 	.word	0x20000164

080094e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4a0a      	ldr	r2, [pc, #40]	; (800951c <disk_read+0x3c>)
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	689c      	ldr	r4, [r3, #8]
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	4a07      	ldr	r2, [pc, #28]	; (800951c <disk_read+0x3c>)
 8009500:	4413      	add	r3, r2
 8009502:	7a18      	ldrb	r0, [r3, #8]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	47a0      	blx	r4
 800950c:	4603      	mov	r3, r0
 800950e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
}
 8009512:	4618      	mov	r0, r3
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	bd90      	pop	{r4, r7, pc}
 800951a:	bf00      	nop
 800951c:	20000164 	.word	0x20000164

08009520 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009520:	b590      	push	{r4, r7, lr}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	4a0a      	ldr	r2, [pc, #40]	; (800955c <disk_write+0x3c>)
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	68dc      	ldr	r4, [r3, #12]
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	4a07      	ldr	r2, [pc, #28]	; (800955c <disk_write+0x3c>)
 8009540:	4413      	add	r3, r2
 8009542:	7a18      	ldrb	r0, [r3, #8]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	47a0      	blx	r4
 800954c:	4603      	mov	r3, r0
 800954e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
}
 8009552:	4618      	mov	r0, r3
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	bd90      	pop	{r4, r7, pc}
 800955a:	bf00      	nop
 800955c:	20000164 	.word	0x20000164

08009560 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	603a      	str	r2, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
 800956c:	460b      	mov	r3, r1
 800956e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	4a09      	ldr	r2, [pc, #36]	; (8009598 <disk_ioctl+0x38>)
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	79fa      	ldrb	r2, [r7, #7]
 800957e:	4906      	ldr	r1, [pc, #24]	; (8009598 <disk_ioctl+0x38>)
 8009580:	440a      	add	r2, r1
 8009582:	7a10      	ldrb	r0, [r2, #8]
 8009584:	79b9      	ldrb	r1, [r7, #6]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4798      	blx	r3
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]
  return res;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20000164 	.word	0x20000164

0800959c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3301      	adds	r3, #1
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80095ac:	89fb      	ldrh	r3, [r7, #14]
 80095ae:	021b      	lsls	r3, r3, #8
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	b21b      	sxth	r3, r3
 80095b8:	4313      	orrs	r3, r2
 80095ba:	b21b      	sxth	r3, r3
 80095bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80095be:	89fb      	ldrh	r3, [r7, #14]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3303      	adds	r3, #3
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	3202      	adds	r2, #2
 80095e4:	7812      	ldrb	r2, [r2, #0]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	3201      	adds	r2, #1
 80095f2:	7812      	ldrb	r2, [r2, #0]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7812      	ldrb	r2, [r2, #0]
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]
	return rv;
 8009604:	68fb      	ldr	r3, [r7, #12]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	887a      	ldrh	r2, [r7, #2]
 8009626:	b2d2      	uxtb	r2, r2
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	887b      	ldrh	r3, [r7, #2]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	607a      	str	r2, [r7, #4]
 8009636:	887a      	ldrh	r2, [r7, #2]
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	701a      	strb	r2, [r3, #0]
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	b2d2      	uxtb	r2, r2
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	0a1b      	lsrs	r3, r3, #8
 8009662:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	607a      	str	r2, [r7, #4]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	0a1b      	lsrs	r3, r3, #8
 8009686:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	b2d2      	uxtb	r2, r2
 8009692:	701a      	strb	r2, [r3, #0]
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00d      	beq.n	80096d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	1c53      	adds	r3, r2, #1
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	1c59      	adds	r1, r3, #1
 80096c4:	6179      	str	r1, [r7, #20]
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	607b      	str	r3, [r7, #4]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1f1      	bne.n	80096ba <mem_cpy+0x1a>
	}
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80096e2:	b480      	push	{r7}
 80096e4:	b087      	sub	sp, #28
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	617a      	str	r2, [r7, #20]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3b01      	subs	r3, #1
 8009702:	607b      	str	r3, [r7, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f3      	bne.n	80096f2 <mem_set+0x10>
}
 800970a:	bf00      	nop
 800970c:	bf00      	nop
 800970e:	371c      	adds	r7, #28
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009718:	b480      	push	{r7}
 800971a:	b089      	sub	sp, #36	; 0x24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	61fa      	str	r2, [r7, #28]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	4619      	mov	r1, r3
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	61ba      	str	r2, [r7, #24]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	1acb      	subs	r3, r1, r3
 8009744:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3b01      	subs	r3, #1
 800974a:	607b      	str	r3, [r7, #4]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <mem_cmp+0x40>
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0eb      	beq.n	8009730 <mem_cmp+0x18>

	return r;
 8009758:	697b      	ldr	r3, [r7, #20]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3724      	adds	r7, #36	; 0x24
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009766:	b480      	push	{r7}
 8009768:	b083      	sub	sp, #12
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009770:	e002      	b.n	8009778 <chk_chr+0x12>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3301      	adds	r3, #1
 8009776:	607b      	str	r3, [r7, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <chk_chr+0x26>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	4293      	cmp	r3, r2
 800978a:	d1f2      	bne.n	8009772 <chk_chr+0xc>
	return *str;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	781b      	ldrb	r3, [r3, #0]
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097a6:	2300      	movs	r3, #0
 80097a8:	60bb      	str	r3, [r7, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	60fb      	str	r3, [r7, #12]
 80097ae:	e029      	b.n	8009804 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80097b0:	4a27      	ldr	r2, [pc, #156]	; (8009850 <chk_lock+0xb4>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	4413      	add	r3, r2
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01d      	beq.n	80097fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097be:	4a24      	ldr	r2, [pc, #144]	; (8009850 <chk_lock+0xb4>)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	4413      	add	r3, r2
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d116      	bne.n	80097fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80097d0:	4a1f      	ldr	r2, [pc, #124]	; (8009850 <chk_lock+0xb4>)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	4413      	add	r3, r2
 80097d8:	3304      	adds	r3, #4
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d10c      	bne.n	80097fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097e4:	4a1a      	ldr	r2, [pc, #104]	; (8009850 <chk_lock+0xb4>)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	4413      	add	r3, r2
 80097ec:	3308      	adds	r3, #8
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d102      	bne.n	80097fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097f8:	e007      	b.n	800980a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80097fa:	2301      	movs	r3, #1
 80097fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d9d2      	bls.n	80097b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d109      	bne.n	8009824 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <chk_lock+0x80>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b02      	cmp	r3, #2
 800981a:	d101      	bne.n	8009820 <chk_lock+0x84>
 800981c:	2300      	movs	r3, #0
 800981e:	e010      	b.n	8009842 <chk_lock+0xa6>
 8009820:	2312      	movs	r3, #18
 8009822:	e00e      	b.n	8009842 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d108      	bne.n	800983c <chk_lock+0xa0>
 800982a:	4a09      	ldr	r2, [pc, #36]	; (8009850 <chk_lock+0xb4>)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	4413      	add	r3, r2
 8009832:	330c      	adds	r3, #12
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800983a:	d101      	bne.n	8009840 <chk_lock+0xa4>
 800983c:	2310      	movs	r3, #16
 800983e:	e000      	b.n	8009842 <chk_lock+0xa6>
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	20000144 	.word	0x20000144

08009854 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800985a:	2300      	movs	r3, #0
 800985c:	607b      	str	r3, [r7, #4]
 800985e:	e002      	b.n	8009866 <enq_lock+0x12>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3301      	adds	r3, #1
 8009864:	607b      	str	r3, [r7, #4]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d806      	bhi.n	800987a <enq_lock+0x26>
 800986c:	4a09      	ldr	r2, [pc, #36]	; (8009894 <enq_lock+0x40>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	4413      	add	r3, r2
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f2      	bne.n	8009860 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b02      	cmp	r3, #2
 800987e:	bf14      	ite	ne
 8009880:	2301      	movne	r3, #1
 8009882:	2300      	moveq	r3, #0
 8009884:	b2db      	uxtb	r3, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20000144 	.word	0x20000144

08009898 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
 80098a6:	e01f      	b.n	80098e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80098a8:	4a41      	ldr	r2, [pc, #260]	; (80099b0 <inc_lock+0x118>)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	4413      	add	r3, r2
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d113      	bne.n	80098e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80098ba:	4a3d      	ldr	r2, [pc, #244]	; (80099b0 <inc_lock+0x118>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	4413      	add	r3, r2
 80098c2:	3304      	adds	r3, #4
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d109      	bne.n	80098e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80098ce:	4a38      	ldr	r2, [pc, #224]	; (80099b0 <inc_lock+0x118>)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	011b      	lsls	r3, r3, #4
 80098d4:	4413      	add	r3, r2
 80098d6:	3308      	adds	r3, #8
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80098de:	429a      	cmp	r2, r3
 80098e0:	d006      	beq.n	80098f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d9dc      	bls.n	80098a8 <inc_lock+0x10>
 80098ee:	e000      	b.n	80098f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80098f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d132      	bne.n	800995e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	e002      	b.n	8009904 <inc_lock+0x6c>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3301      	adds	r3, #1
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d806      	bhi.n	8009918 <inc_lock+0x80>
 800990a:	4a29      	ldr	r2, [pc, #164]	; (80099b0 <inc_lock+0x118>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	4413      	add	r3, r2
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1f2      	bne.n	80098fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d101      	bne.n	8009922 <inc_lock+0x8a>
 800991e:	2300      	movs	r3, #0
 8009920:	e040      	b.n	80099a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	4922      	ldr	r1, [pc, #136]	; (80099b0 <inc_lock+0x118>)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	011b      	lsls	r3, r3, #4
 800992c:	440b      	add	r3, r1
 800992e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	491e      	ldr	r1, [pc, #120]	; (80099b0 <inc_lock+0x118>)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	440b      	add	r3, r1
 800993c:	3304      	adds	r3, #4
 800993e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	695a      	ldr	r2, [r3, #20]
 8009944:	491a      	ldr	r1, [pc, #104]	; (80099b0 <inc_lock+0x118>)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	440b      	add	r3, r1
 800994c:	3308      	adds	r3, #8
 800994e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009950:	4a17      	ldr	r2, [pc, #92]	; (80099b0 <inc_lock+0x118>)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	011b      	lsls	r3, r3, #4
 8009956:	4413      	add	r3, r2
 8009958:	330c      	adds	r3, #12
 800995a:	2200      	movs	r2, #0
 800995c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d009      	beq.n	8009978 <inc_lock+0xe0>
 8009964:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <inc_lock+0x118>)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	4413      	add	r3, r2
 800996c:	330c      	adds	r3, #12
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <inc_lock+0xe0>
 8009974:	2300      	movs	r3, #0
 8009976:	e015      	b.n	80099a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d108      	bne.n	8009990 <inc_lock+0xf8>
 800997e:	4a0c      	ldr	r2, [pc, #48]	; (80099b0 <inc_lock+0x118>)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	011b      	lsls	r3, r3, #4
 8009984:	4413      	add	r3, r2
 8009986:	330c      	adds	r3, #12
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	3301      	adds	r3, #1
 800998c:	b29a      	uxth	r2, r3
 800998e:	e001      	b.n	8009994 <inc_lock+0xfc>
 8009990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009994:	4906      	ldr	r1, [pc, #24]	; (80099b0 <inc_lock+0x118>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	440b      	add	r3, r1
 800999c:	330c      	adds	r3, #12
 800999e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	20000144 	.word	0x20000144

080099b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3b01      	subs	r3, #1
 80099c0:	607b      	str	r3, [r7, #4]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d825      	bhi.n	8009a14 <dec_lock+0x60>
		n = Files[i].ctr;
 80099c8:	4a17      	ldr	r2, [pc, #92]	; (8009a28 <dec_lock+0x74>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	4413      	add	r3, r2
 80099d0:	330c      	adds	r3, #12
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80099d6:	89fb      	ldrh	r3, [r7, #14]
 80099d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099dc:	d101      	bne.n	80099e2 <dec_lock+0x2e>
 80099de:	2300      	movs	r3, #0
 80099e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80099e2:	89fb      	ldrh	r3, [r7, #14]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <dec_lock+0x3a>
 80099e8:	89fb      	ldrh	r3, [r7, #14]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80099ee:	4a0e      	ldr	r2, [pc, #56]	; (8009a28 <dec_lock+0x74>)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	011b      	lsls	r3, r3, #4
 80099f4:	4413      	add	r3, r2
 80099f6:	330c      	adds	r3, #12
 80099f8:	89fa      	ldrh	r2, [r7, #14]
 80099fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80099fc:	89fb      	ldrh	r3, [r7, #14]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <dec_lock+0x5a>
 8009a02:	4a09      	ldr	r2, [pc, #36]	; (8009a28 <dec_lock+0x74>)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	4413      	add	r3, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	737b      	strb	r3, [r7, #13]
 8009a12:	e001      	b.n	8009a18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009a14:	2302      	movs	r3, #2
 8009a16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009a18:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20000144 	.word	0x20000144

08009a2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	e010      	b.n	8009a5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a3a:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <clear_lock+0x44>)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	011b      	lsls	r3, r3, #4
 8009a40:	4413      	add	r3, r2
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d105      	bne.n	8009a56 <clear_lock+0x2a>
 8009a4a:	4a09      	ldr	r2, [pc, #36]	; (8009a70 <clear_lock+0x44>)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	011b      	lsls	r3, r3, #4
 8009a50:	4413      	add	r3, r2
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d9eb      	bls.n	8009a3a <clear_lock+0xe>
	}
}
 8009a62:	bf00      	nop
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	20000144 	.word	0x20000144

08009a74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	78db      	ldrb	r3, [r3, #3]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d034      	beq.n	8009af2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7858      	ldrb	r0, [r3, #1]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009a98:	2301      	movs	r3, #1
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	f7ff fd40 	bl	8009520 <disk_write>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <sync_window+0x38>
			res = FR_DISK_ERR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	73fb      	strb	r3, [r7, #15]
 8009aaa:	e022      	b.n	8009af2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	1ad2      	subs	r2, r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d217      	bcs.n	8009af2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	789b      	ldrb	r3, [r3, #2]
 8009ac6:	613b      	str	r3, [r7, #16]
 8009ac8:	e010      	b.n	8009aec <sync_window+0x78>
					wsect += fs->fsize;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	7858      	ldrb	r0, [r3, #1]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009ade:	2301      	movs	r3, #1
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	f7ff fd1d 	bl	8009520 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d8eb      	bhi.n	8009aca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d01b      	beq.n	8009b4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff ffad 	bl	8009a74 <sync_window>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d113      	bne.n	8009b4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7858      	ldrb	r0, [r3, #1]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b2e:	2301      	movs	r3, #1
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	f7ff fcd5 	bl	80094e0 <disk_read>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff ff87 	bl	8009a74 <sync_window>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d159      	bne.n	8009c24 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d149      	bne.n	8009c0c <sync_fs+0xb4>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	791b      	ldrb	r3, [r3, #4]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d145      	bne.n	8009c0c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	899b      	ldrh	r3, [r3, #12]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	f7ff fda8 	bl	80096e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3334      	adds	r3, #52	; 0x34
 8009b96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b9a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff fd37 	bl	8009612 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3334      	adds	r3, #52	; 0x34
 8009ba8:	4921      	ldr	r1, [pc, #132]	; (8009c30 <sync_fs+0xd8>)
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff fd4c 	bl	8009648 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3334      	adds	r3, #52	; 0x34
 8009bb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009bb8:	491e      	ldr	r1, [pc, #120]	; (8009c34 <sync_fs+0xdc>)
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff fd44 	bl	8009648 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3334      	adds	r3, #52	; 0x34
 8009bc4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f7ff fd3a 	bl	8009648 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3334      	adds	r3, #52	; 0x34
 8009bd8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7ff fd30 	bl	8009648 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	7858      	ldrb	r0, [r3, #1]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c00:	2301      	movs	r3, #1
 8009c02:	f7ff fc8d 	bl	8009520 <disk_write>
			fs->fsi_flag = 0;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	785b      	ldrb	r3, [r3, #1]
 8009c10:	2200      	movs	r2, #0
 8009c12:	2100      	movs	r1, #0
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fca3 	bl	8009560 <disk_ioctl>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <sync_fs+0xcc>
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	41615252 	.word	0x41615252
 8009c34:	61417272 	.word	0x61417272

08009c38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	3b02      	subs	r3, #2
 8009c46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	3b02      	subs	r3, #2
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d301      	bcc.n	8009c58 <clust2sect+0x20>
 8009c54:	2300      	movs	r3, #0
 8009c56:	e008      	b.n	8009c6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	895b      	ldrh	r3, [r3, #10]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	fb03 f202 	mul.w	r2, r3, r2
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	4413      	add	r3, r2
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d904      	bls.n	8009c96 <get_fat+0x20>
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c96:	2301      	movs	r3, #1
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e0bb      	b.n	8009e14 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	f000 8083 	beq.w	8009db2 <get_fat+0x13c>
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	f300 80a7 	bgt.w	8009e00 <get_fat+0x18a>
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d002      	beq.n	8009cbc <get_fat+0x46>
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d056      	beq.n	8009d68 <get_fat+0xf2>
 8009cba:	e0a1      	b.n	8009e00 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	899b      	ldrh	r3, [r3, #12]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cda:	4413      	add	r3, r2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6938      	ldr	r0, [r7, #16]
 8009ce0:	f7ff ff0c 	bl	8009afc <move_window>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f040 808d 	bne.w	8009e06 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	60fa      	str	r2, [r7, #12]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	8992      	ldrh	r2, [r2, #12]
 8009cf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cfa:	fb01 f202 	mul.w	r2, r1, r2
 8009cfe:	1a9b      	subs	r3, r3, r2
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	4413      	add	r3, r2
 8009d04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	899b      	ldrh	r3, [r3, #12]
 8009d12:	4619      	mov	r1, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d1a:	4413      	add	r3, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6938      	ldr	r0, [r7, #16]
 8009d20:	f7ff feec 	bl	8009afc <move_window>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d16f      	bne.n	8009e0a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	899b      	ldrh	r3, [r3, #12]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d36:	fb01 f202 	mul.w	r2, r1, r2
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	461a      	mov	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <get_fat+0xe8>
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	091b      	lsrs	r3, r3, #4
 8009d5c:	e002      	b.n	8009d64 <get_fat+0xee>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d64:	617b      	str	r3, [r7, #20]
			break;
 8009d66:	e055      	b.n	8009e14 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	899b      	ldrh	r3, [r3, #12]
 8009d70:	085b      	lsrs	r3, r3, #1
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4619      	mov	r1, r3
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d7c:	4413      	add	r3, r2
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6938      	ldr	r0, [r7, #16]
 8009d82:	f7ff febb 	bl	8009afc <move_window>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d140      	bne.n	8009e0e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	8992      	ldrh	r2, [r2, #12]
 8009d9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d9e:	fb00 f202 	mul.w	r2, r0, r2
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	440b      	add	r3, r1
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fbf8 	bl	800959c <ld_word>
 8009dac:	4603      	mov	r3, r0
 8009dae:	617b      	str	r3, [r7, #20]
			break;
 8009db0:	e030      	b.n	8009e14 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	899b      	ldrh	r3, [r3, #12]
 8009dba:	089b      	lsrs	r3, r3, #2
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dc6:	4413      	add	r3, r2
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6938      	ldr	r0, [r7, #16]
 8009dcc:	f7ff fe96 	bl	8009afc <move_window>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d11d      	bne.n	8009e12 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	8992      	ldrh	r2, [r2, #12]
 8009de4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009de8:	fb00 f202 	mul.w	r2, r0, r2
 8009dec:	1a9b      	subs	r3, r3, r2
 8009dee:	440b      	add	r3, r1
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fbeb 	bl	80095cc <ld_dword>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009dfc:	617b      	str	r3, [r7, #20]
			break;
 8009dfe:	e009      	b.n	8009e14 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009e00:	2301      	movs	r3, #1
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	e006      	b.n	8009e14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e06:	bf00      	nop
 8009e08:	e004      	b.n	8009e14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e0a:	bf00      	nop
 8009e0c:	e002      	b.n	8009e14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e0e:	bf00      	nop
 8009e10:	e000      	b.n	8009e14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e12:	bf00      	nop
		}
	}

	return val;
 8009e14:	697b      	ldr	r3, [r7, #20]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009e1e:	b590      	push	{r4, r7, lr}
 8009e20:	b089      	sub	sp, #36	; 0x24
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	f240 8109 	bls.w	800a048 <put_fat+0x22a>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	f080 8103 	bcs.w	800a048 <put_fat+0x22a>
		switch (fs->fs_type) {
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	f000 80b6 	beq.w	8009fb8 <put_fat+0x19a>
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	f300 80fb 	bgt.w	800a048 <put_fat+0x22a>
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d003      	beq.n	8009e5e <put_fat+0x40>
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	f000 8083 	beq.w	8009f62 <put_fat+0x144>
 8009e5c:	e0f4      	b.n	800a048 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	61bb      	str	r3, [r7, #24]
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	085b      	lsrs	r3, r3, #1
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	4413      	add	r3, r2
 8009e6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	899b      	ldrh	r3, [r3, #12]
 8009e74:	4619      	mov	r1, r3
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e7c:	4413      	add	r3, r2
 8009e7e:	4619      	mov	r1, r3
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff fe3b 	bl	8009afc <move_window>
 8009e86:	4603      	mov	r3, r0
 8009e88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e8a:	7ffb      	ldrb	r3, [r7, #31]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f040 80d4 	bne.w	800a03a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	61ba      	str	r2, [r7, #24]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	8992      	ldrh	r2, [r2, #12]
 8009ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ea6:	fb00 f202 	mul.w	r2, r0, r2
 8009eaa:	1a9b      	subs	r3, r3, r2
 8009eac:	440b      	add	r3, r1
 8009eae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00d      	beq.n	8009ed6 <put_fat+0xb8>
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b25b      	sxtb	r3, r3
 8009ec0:	f003 030f 	and.w	r3, r3, #15
 8009ec4:	b25a      	sxtb	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	011b      	lsls	r3, r3, #4
 8009ecc:	b25b      	sxtb	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	b25b      	sxtb	r3, r3
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	e001      	b.n	8009eda <put_fat+0xbc>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	899b      	ldrh	r3, [r3, #12]
 8009eec:	4619      	mov	r1, r3
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ef4:	4413      	add	r3, r2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7ff fdff 	bl	8009afc <move_window>
 8009efe:	4603      	mov	r3, r0
 8009f00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f02:	7ffb      	ldrb	r3, [r7, #31]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 809a 	bne.w	800a03e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	899b      	ldrh	r3, [r3, #12]
 8009f14:	461a      	mov	r2, r3
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f1c:	fb00 f202 	mul.w	r2, r0, r2
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	440b      	add	r3, r1
 8009f24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <put_fat+0x11a>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	091b      	lsrs	r3, r3, #4
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	e00e      	b.n	8009f56 <put_fat+0x138>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	b25b      	sxtb	r3, r3
 8009f3e:	f023 030f 	bic.w	r3, r3, #15
 8009f42:	b25a      	sxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	0a1b      	lsrs	r3, r3, #8
 8009f48:	b25b      	sxtb	r3, r3
 8009f4a:	f003 030f 	and.w	r3, r3, #15
 8009f4e:	b25b      	sxtb	r3, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b25b      	sxtb	r3, r3
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	70da      	strb	r2, [r3, #3]
			break;
 8009f60:	e072      	b.n	800a048 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	899b      	ldrh	r3, [r3, #12]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f76:	4413      	add	r3, r2
 8009f78:	4619      	mov	r1, r3
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f7ff fdbe 	bl	8009afc <move_window>
 8009f80:	4603      	mov	r3, r0
 8009f82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f84:	7ffb      	ldrb	r3, [r7, #31]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d15b      	bne.n	800a042 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	8992      	ldrh	r2, [r2, #12]
 8009f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f9c:	fb00 f202 	mul.w	r2, r0, r2
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff fb31 	bl	8009612 <st_word>
			fs->wflag = 1;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	70da      	strb	r2, [r3, #3]
			break;
 8009fb6:	e047      	b.n	800a048 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	899b      	ldrh	r3, [r3, #12]
 8009fc0:	089b      	lsrs	r3, r3, #2
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fcc:	4413      	add	r3, r2
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fd93 	bl	8009afc <move_window>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009fda:	7ffb      	ldrb	r3, [r7, #31]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d132      	bne.n	800a046 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	8992      	ldrh	r2, [r2, #12]
 8009ff4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ff8:	fb00 f202 	mul.w	r2, r0, r2
 8009ffc:	1a9b      	subs	r3, r3, r2
 8009ffe:	440b      	add	r3, r1
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff fae3 	bl	80095cc <ld_dword>
 800a006:	4603      	mov	r3, r0
 800a008:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a00c:	4323      	orrs	r3, r4
 800a00e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	8992      	ldrh	r2, [r2, #12]
 800a01e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a022:	fb00 f202 	mul.w	r2, r0, r2
 800a026:	1a9b      	subs	r3, r3, r2
 800a028:	440b      	add	r3, r1
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff fb0b 	bl	8009648 <st_dword>
			fs->wflag = 1;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	70da      	strb	r2, [r3, #3]
			break;
 800a038:	e006      	b.n	800a048 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a03a:	bf00      	nop
 800a03c:	e004      	b.n	800a048 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a03e:	bf00      	nop
 800a040:	e002      	b.n	800a048 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a042:	bf00      	nop
 800a044:	e000      	b.n	800a048 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a046:	bf00      	nop
		}
	}
	return res;
 800a048:	7ffb      	ldrb	r3, [r7, #31]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3724      	adds	r7, #36	; 0x24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd90      	pop	{r4, r7, pc}

0800a052 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b088      	sub	sp, #32
 800a056:	af00      	add	r7, sp, #0
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d904      	bls.n	800a078 <remove_chain+0x26>
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	429a      	cmp	r2, r3
 800a076:	d301      	bcc.n	800a07c <remove_chain+0x2a>
 800a078:	2302      	movs	r3, #2
 800a07a:	e04b      	b.n	800a114 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00c      	beq.n	800a09c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a082:	f04f 32ff 	mov.w	r2, #4294967295
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	69b8      	ldr	r0, [r7, #24]
 800a08a:	f7ff fec8 	bl	8009e1e <put_fat>
 800a08e:	4603      	mov	r3, r0
 800a090:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a092:	7ffb      	ldrb	r3, [r7, #31]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <remove_chain+0x4a>
 800a098:	7ffb      	ldrb	r3, [r7, #31]
 800a09a:	e03b      	b.n	800a114 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7ff fde9 	bl	8009c76 <get_fat>
 800a0a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d031      	beq.n	800a110 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d101      	bne.n	800a0b6 <remove_chain+0x64>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e02e      	b.n	800a114 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d101      	bne.n	800a0c2 <remove_chain+0x70>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e028      	b.n	800a114 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	69b8      	ldr	r0, [r7, #24]
 800a0c8:	f7ff fea9 	bl	8009e1e <put_fat>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a0d0:	7ffb      	ldrb	r3, [r7, #31]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <remove_chain+0x88>
 800a0d6:	7ffb      	ldrb	r3, [r7, #31]
 800a0d8:	e01c      	b.n	800a114 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	695a      	ldr	r2, [r3, #20]
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	3b02      	subs	r3, #2
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d20b      	bcs.n	800a100 <remove_chain+0xae>
			fs->free_clst++;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	791b      	ldrb	r3, [r3, #4]
 800a0f6:	f043 0301 	orr.w	r3, r3, #1
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d3c6      	bcc.n	800a09c <remove_chain+0x4a>
 800a10e:	e000      	b.n	800a112 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a110:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3720      	adds	r7, #32
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10d      	bne.n	800a14e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d004      	beq.n	800a148 <create_chain+0x2c>
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	429a      	cmp	r2, r3
 800a146:	d31b      	bcc.n	800a180 <create_chain+0x64>
 800a148:	2301      	movs	r3, #1
 800a14a:	61bb      	str	r3, [r7, #24]
 800a14c:	e018      	b.n	800a180 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fd90 	bl	8009c76 <get_fat>
 800a156:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d801      	bhi.n	800a162 <create_chain+0x46>
 800a15e:	2301      	movs	r3, #1
 800a160:	e070      	b.n	800a244 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a168:	d101      	bne.n	800a16e <create_chain+0x52>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	e06a      	b.n	800a244 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	429a      	cmp	r2, r3
 800a176:	d201      	bcs.n	800a17c <create_chain+0x60>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	e063      	b.n	800a244 <create_chain+0x128>
		scl = clst;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	3301      	adds	r3, #1
 800a188:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	429a      	cmp	r2, r3
 800a192:	d307      	bcc.n	800a1a4 <create_chain+0x88>
				ncl = 2;
 800a194:	2302      	movs	r3, #2
 800a196:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a198:	69fa      	ldr	r2, [r7, #28]
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d901      	bls.n	800a1a4 <create_chain+0x88>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e04f      	b.n	800a244 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a1a4:	69f9      	ldr	r1, [r7, #28]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff fd65 	bl	8009c76 <get_fat>
 800a1ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00e      	beq.n	800a1d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d003      	beq.n	800a1c2 <create_chain+0xa6>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c0:	d101      	bne.n	800a1c6 <create_chain+0xaa>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	e03e      	b.n	800a244 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a1c6:	69fa      	ldr	r2, [r7, #28]
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d1da      	bne.n	800a184 <create_chain+0x68>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e038      	b.n	800a244 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a1d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d8:	69f9      	ldr	r1, [r7, #28]
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f7ff fe1f 	bl	8009e1e <put_fat>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d109      	bne.n	800a1fe <create_chain+0xe2>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d006      	beq.n	800a1fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6938      	ldr	r0, [r7, #16]
 800a1f6:	f7ff fe12 	bl	8009e1e <put_fat>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d116      	bne.n	800a232 <create_chain+0x116>
		fs->last_clst = ncl;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	695a      	ldr	r2, [r3, #20]
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	3b02      	subs	r3, #2
 800a214:	429a      	cmp	r2, r3
 800a216:	d804      	bhi.n	800a222 <create_chain+0x106>
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	1e5a      	subs	r2, r3, #1
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	791b      	ldrb	r3, [r3, #4]
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	711a      	strb	r2, [r3, #4]
 800a230:	e007      	b.n	800a242 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d102      	bne.n	800a23e <create_chain+0x122>
 800a238:	f04f 33ff 	mov.w	r3, #4294967295
 800a23c:	e000      	b.n	800a240 <create_chain+0x124>
 800a23e:	2301      	movs	r3, #1
 800a240:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a242:	69fb      	ldr	r3, [r7, #28]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a260:	3304      	adds	r3, #4
 800a262:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	899b      	ldrh	r3, [r3, #12]
 800a268:	461a      	mov	r2, r3
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	8952      	ldrh	r2, [r2, #10]
 800a274:	fbb3 f3f2 	udiv	r3, r3, r2
 800a278:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	1d1a      	adds	r2, r3, #4
 800a27e:	613a      	str	r2, [r7, #16]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <clmt_clust+0x42>
 800a28a:	2300      	movs	r3, #0
 800a28c:	e010      	b.n	800a2b0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	429a      	cmp	r2, r3
 800a294:	d307      	bcc.n	800a2a6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a2a4:	e7e9      	b.n	800a27a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a2a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	4413      	add	r3, r2
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	371c      	adds	r7, #28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2d2:	d204      	bcs.n	800a2de <dir_sdi+0x22>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	f003 031f 	and.w	r3, r3, #31
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e071      	b.n	800a3c6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <dir_sdi+0x46>
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d902      	bls.n	800a302 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a300:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10c      	bne.n	800a322 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	095b      	lsrs	r3, r3, #5
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	8912      	ldrh	r2, [r2, #8]
 800a310:	4293      	cmp	r3, r2
 800a312:	d301      	bcc.n	800a318 <dir_sdi+0x5c>
 800a314:	2302      	movs	r3, #2
 800a316:	e056      	b.n	800a3c6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	61da      	str	r2, [r3, #28]
 800a320:	e02d      	b.n	800a37e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	895b      	ldrh	r3, [r3, #10]
 800a326:	461a      	mov	r2, r3
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	899b      	ldrh	r3, [r3, #12]
 800a32c:	fb02 f303 	mul.w	r3, r2, r3
 800a330:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a332:	e019      	b.n	800a368 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6979      	ldr	r1, [r7, #20]
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff fc9c 	bl	8009c76 <get_fat>
 800a33e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a346:	d101      	bne.n	800a34c <dir_sdi+0x90>
 800a348:	2301      	movs	r3, #1
 800a34a:	e03c      	b.n	800a3c6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d904      	bls.n	800a35c <dir_sdi+0xa0>
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d301      	bcc.n	800a360 <dir_sdi+0xa4>
 800a35c:	2302      	movs	r3, #2
 800a35e:	e032      	b.n	800a3c6 <dir_sdi+0x10a>
			ofs -= csz;
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d2e1      	bcs.n	800a334 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a370:	6979      	ldr	r1, [r7, #20]
 800a372:	6938      	ldr	r0, [r7, #16]
 800a374:	f7ff fc60 	bl	8009c38 <clust2sect>
 800a378:	4602      	mov	r2, r0
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d101      	bne.n	800a390 <dir_sdi+0xd4>
 800a38c:	2302      	movs	r3, #2
 800a38e:	e01a      	b.n	800a3c6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	69da      	ldr	r2, [r3, #28]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	899b      	ldrh	r3, [r3, #12]
 800a398:	4619      	mov	r1, r3
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3a0:	441a      	add	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	899b      	ldrh	r3, [r3, #12]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3b8:	fb00 f202 	mul.w	r2, r0, r2
 800a3bc:	1a9b      	subs	r3, r3, r2
 800a3be:	18ca      	adds	r2, r1, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b086      	sub	sp, #24
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	3320      	adds	r3, #32
 800a3e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <dir_next+0x28>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3f4:	d301      	bcc.n	800a3fa <dir_next+0x2c>
 800a3f6:	2304      	movs	r3, #4
 800a3f8:	e0bb      	b.n	800a572 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	899b      	ldrh	r3, [r3, #12]
 800a3fe:	461a      	mov	r2, r3
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	fbb3 f1f2 	udiv	r1, r3, r2
 800a406:	fb01 f202 	mul.w	r2, r1, r2
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f040 809d 	bne.w	800a54c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10b      	bne.n	800a43c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	095b      	lsrs	r3, r3, #5
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	8912      	ldrh	r2, [r2, #8]
 800a42c:	4293      	cmp	r3, r2
 800a42e:	f0c0 808d 	bcc.w	800a54c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	61da      	str	r2, [r3, #28]
 800a438:	2304      	movs	r3, #4
 800a43a:	e09a      	b.n	800a572 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	899b      	ldrh	r3, [r3, #12]
 800a440:	461a      	mov	r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	fbb3 f3f2 	udiv	r3, r3, r2
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	8952      	ldrh	r2, [r2, #10]
 800a44c:	3a01      	subs	r2, #1
 800a44e:	4013      	ands	r3, r2
 800a450:	2b00      	cmp	r3, #0
 800a452:	d17b      	bne.n	800a54c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	4619      	mov	r1, r3
 800a45c:	4610      	mov	r0, r2
 800a45e:	f7ff fc0a 	bl	8009c76 <get_fat>
 800a462:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d801      	bhi.n	800a46e <dir_next+0xa0>
 800a46a:	2302      	movs	r3, #2
 800a46c:	e081      	b.n	800a572 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a474:	d101      	bne.n	800a47a <dir_next+0xac>
 800a476:	2301      	movs	r3, #1
 800a478:	e07b      	b.n	800a572 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	429a      	cmp	r2, r3
 800a482:	d359      	bcc.n	800a538 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d104      	bne.n	800a494 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	61da      	str	r2, [r3, #28]
 800a490:	2304      	movs	r3, #4
 800a492:	e06e      	b.n	800a572 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	4619      	mov	r1, r3
 800a49c:	4610      	mov	r0, r2
 800a49e:	f7ff fe3d 	bl	800a11c <create_chain>
 800a4a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <dir_next+0xe0>
 800a4aa:	2307      	movs	r3, #7
 800a4ac:	e061      	b.n	800a572 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d101      	bne.n	800a4b8 <dir_next+0xea>
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	e05c      	b.n	800a572 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4be:	d101      	bne.n	800a4c4 <dir_next+0xf6>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e056      	b.n	800a572 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff fad5 	bl	8009a74 <sync_window>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <dir_next+0x106>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e04e      	b.n	800a572 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	899b      	ldrh	r3, [r3, #12]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	f7ff f8fe 	bl	80096e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	613b      	str	r3, [r7, #16]
 800a4ea:	6979      	ldr	r1, [r7, #20]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7ff fba3 	bl	8009c38 <clust2sect>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	631a      	str	r2, [r3, #48]	; 0x30
 800a4f8:	e012      	b.n	800a520 <dir_next+0x152>
						fs->wflag = 1;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fab7 	bl	8009a74 <sync_window>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <dir_next+0x142>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e030      	b.n	800a572 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	3301      	adds	r3, #1
 800a514:	613b      	str	r3, [r7, #16]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	895b      	ldrh	r3, [r3, #10]
 800a524:	461a      	mov	r2, r3
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	4293      	cmp	r3, r2
 800a52a:	d3e6      	bcc.n	800a4fa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a53e:	6979      	ldr	r1, [r7, #20]
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f7ff fb79 	bl	8009c38 <clust2sect>
 800a546:	4602      	mov	r2, r0
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	899b      	ldrh	r3, [r3, #12]
 800a55c:	461a      	mov	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	fbb3 f0f2 	udiv	r0, r3, r2
 800a564:	fb00 f202 	mul.w	r2, r0, r2
 800a568:	1a9b      	subs	r3, r3, r2
 800a56a:	18ca      	adds	r2, r1, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b086      	sub	sp, #24
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a58a:	2100      	movs	r1, #0
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff fe95 	bl	800a2bc <dir_sdi>
 800a592:	4603      	mov	r3, r0
 800a594:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d12b      	bne.n	800a5f4 <dir_alloc+0x7a>
		n = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7ff faa8 	bl	8009afc <move_window>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d11d      	bne.n	800a5f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2be5      	cmp	r3, #229	; 0xe5
 800a5be:	d004      	beq.n	800a5ca <dir_alloc+0x50>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d107      	bne.n	800a5da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d102      	bne.n	800a5de <dir_alloc+0x64>
 800a5d8:	e00c      	b.n	800a5f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a5da:	2300      	movs	r3, #0
 800a5dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a5de:	2101      	movs	r1, #1
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7ff fef4 	bl	800a3ce <dir_next>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0d7      	beq.n	800a5a0 <dir_alloc+0x26>
 800a5f0:	e000      	b.n	800a5f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a5f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	d101      	bne.n	800a5fe <dir_alloc+0x84>
 800a5fa:	2307      	movs	r3, #7
 800a5fc:	75fb      	strb	r3, [r7, #23]
	return res;
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	331a      	adds	r3, #26
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe ffc0 	bl	800959c <ld_word>
 800a61c:	4603      	mov	r3, r0
 800a61e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b03      	cmp	r3, #3
 800a626:	d109      	bne.n	800a63c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	3314      	adds	r3, #20
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe ffb5 	bl	800959c <ld_word>
 800a632:	4603      	mov	r3, r0
 800a634:	041b      	lsls	r3, r3, #16
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a63c:	68fb      	ldr	r3, [r7, #12]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	60f8      	str	r0, [r7, #12]
 800a64e:	60b9      	str	r1, [r7, #8]
 800a650:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	331a      	adds	r3, #26
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	b292      	uxth	r2, r2
 800a65a:	4611      	mov	r1, r2
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe ffd8 	bl	8009612 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b03      	cmp	r3, #3
 800a668:	d109      	bne.n	800a67e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	f103 0214 	add.w	r2, r3, #20
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	0c1b      	lsrs	r3, r3, #16
 800a674:	b29b      	uxth	r3, r3
 800a676:	4619      	mov	r1, r3
 800a678:	4610      	mov	r0, r2
 800a67a:	f7fe ffca 	bl	8009612 <st_word>
	}
}
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a694:	2100      	movs	r1, #0
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff fe10 	bl	800a2bc <dir_sdi>
 800a69c:	4603      	mov	r3, r0
 800a69e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <dir_find+0x24>
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	e03e      	b.n	800a728 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6938      	ldr	r0, [r7, #16]
 800a6b2:	f7ff fa23 	bl	8009afc <move_window>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d12f      	bne.n	800a720 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a1b      	ldr	r3, [r3, #32]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <dir_find+0x4e>
 800a6ce:	2304      	movs	r3, #4
 800a6d0:	75fb      	strb	r3, [r7, #23]
 800a6d2:	e028      	b.n	800a726 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	330b      	adds	r3, #11
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	330b      	adds	r3, #11
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	f003 0308 	and.w	r3, r3, #8
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10a      	bne.n	800a70c <dir_find+0x86>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a18      	ldr	r0, [r3, #32]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	3324      	adds	r3, #36	; 0x24
 800a6fe:	220b      	movs	r2, #11
 800a700:	4619      	mov	r1, r3
 800a702:	f7ff f809 	bl	8009718 <mem_cmp>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00b      	beq.n	800a724 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a70c:	2100      	movs	r1, #0
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff fe5d 	bl	800a3ce <dir_next>
 800a714:	4603      	mov	r3, r0
 800a716:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a718:	7dfb      	ldrb	r3, [r7, #23]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0c5      	beq.n	800a6aa <dir_find+0x24>
 800a71e:	e002      	b.n	800a726 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a720:	bf00      	nop
 800a722:	e000      	b.n	800a726 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a724:	bf00      	nop

	return res;
 800a726:	7dfb      	ldrb	r3, [r7, #23]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a73e:	2101      	movs	r1, #1
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff ff1a 	bl	800a57a <dir_alloc>
 800a746:	4603      	mov	r3, r0
 800a748:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d11c      	bne.n	800a78a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	4619      	mov	r1, r3
 800a756:	68b8      	ldr	r0, [r7, #8]
 800a758:	f7ff f9d0 	bl	8009afc <move_window>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d111      	bne.n	800a78a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	2220      	movs	r2, #32
 800a76c:	2100      	movs	r1, #0
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe ffb7 	bl	80096e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a18      	ldr	r0, [r3, #32]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3324      	adds	r3, #36	; 0x24
 800a77c:	220b      	movs	r2, #11
 800a77e:	4619      	mov	r1, r3
 800a780:	f7fe ff8e 	bl	80096a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2201      	movs	r2, #1
 800a788:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3324      	adds	r3, #36	; 0x24
 800a7a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a7aa:	220b      	movs	r2, #11
 800a7ac:	2120      	movs	r1, #32
 800a7ae:	68b8      	ldr	r0, [r7, #8]
 800a7b0:	f7fe ff97 	bl	80096e2 <mem_set>
	si = i = 0; ni = 8;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	613b      	str	r3, [r7, #16]
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	61fb      	str	r3, [r7, #28]
 800a7bc:	2308      	movs	r3, #8
 800a7be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	61fa      	str	r2, [r7, #28]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a7ce:	7efb      	ldrb	r3, [r7, #27]
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	d94e      	bls.n	800a872 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a7d4:	7efb      	ldrb	r3, [r7, #27]
 800a7d6:	2b2f      	cmp	r3, #47	; 0x2f
 800a7d8:	d006      	beq.n	800a7e8 <create_name+0x54>
 800a7da:	7efb      	ldrb	r3, [r7, #27]
 800a7dc:	2b5c      	cmp	r3, #92	; 0x5c
 800a7de:	d110      	bne.n	800a802 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a7e0:	e002      	b.n	800a7e8 <create_name+0x54>
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	61fb      	str	r3, [r7, #28]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b2f      	cmp	r3, #47	; 0x2f
 800a7f2:	d0f6      	beq.n	800a7e2 <create_name+0x4e>
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b5c      	cmp	r3, #92	; 0x5c
 800a7fe:	d0f0      	beq.n	800a7e2 <create_name+0x4e>
			break;
 800a800:	e038      	b.n	800a874 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a802:	7efb      	ldrb	r3, [r7, #27]
 800a804:	2b2e      	cmp	r3, #46	; 0x2e
 800a806:	d003      	beq.n	800a810 <create_name+0x7c>
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d30c      	bcc.n	800a82a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2b0b      	cmp	r3, #11
 800a814:	d002      	beq.n	800a81c <create_name+0x88>
 800a816:	7efb      	ldrb	r3, [r7, #27]
 800a818:	2b2e      	cmp	r3, #46	; 0x2e
 800a81a:	d001      	beq.n	800a820 <create_name+0x8c>
 800a81c:	2306      	movs	r3, #6
 800a81e:	e044      	b.n	800a8aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a820:	2308      	movs	r3, #8
 800a822:	613b      	str	r3, [r7, #16]
 800a824:	230b      	movs	r3, #11
 800a826:	617b      	str	r3, [r7, #20]
			continue;
 800a828:	e022      	b.n	800a870 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a82a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	da04      	bge.n	800a83c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a832:	7efb      	ldrb	r3, [r7, #27]
 800a834:	3b80      	subs	r3, #128	; 0x80
 800a836:	4a1f      	ldr	r2, [pc, #124]	; (800a8b4 <create_name+0x120>)
 800a838:	5cd3      	ldrb	r3, [r2, r3]
 800a83a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a83c:	7efb      	ldrb	r3, [r7, #27]
 800a83e:	4619      	mov	r1, r3
 800a840:	481d      	ldr	r0, [pc, #116]	; (800a8b8 <create_name+0x124>)
 800a842:	f7fe ff90 	bl	8009766 <chk_chr>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <create_name+0xbc>
 800a84c:	2306      	movs	r3, #6
 800a84e:	e02c      	b.n	800a8aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a850:	7efb      	ldrb	r3, [r7, #27]
 800a852:	2b60      	cmp	r3, #96	; 0x60
 800a854:	d905      	bls.n	800a862 <create_name+0xce>
 800a856:	7efb      	ldrb	r3, [r7, #27]
 800a858:	2b7a      	cmp	r3, #122	; 0x7a
 800a85a:	d802      	bhi.n	800a862 <create_name+0xce>
 800a85c:	7efb      	ldrb	r3, [r7, #27]
 800a85e:	3b20      	subs	r3, #32
 800a860:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	613a      	str	r2, [r7, #16]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	4413      	add	r3, r2
 800a86c:	7efa      	ldrb	r2, [r7, #27]
 800a86e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a870:	e7a6      	b.n	800a7c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a872:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	441a      	add	r2, r3
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <create_name+0xf4>
 800a884:	2306      	movs	r3, #6
 800a886:	e010      	b.n	800a8aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2be5      	cmp	r3, #229	; 0xe5
 800a88e:	d102      	bne.n	800a896 <create_name+0x102>
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	2205      	movs	r2, #5
 800a894:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a896:	7efb      	ldrb	r3, [r7, #27]
 800a898:	2b20      	cmp	r3, #32
 800a89a:	d801      	bhi.n	800a8a0 <create_name+0x10c>
 800a89c:	2204      	movs	r2, #4
 800a89e:	e000      	b.n	800a8a2 <create_name+0x10e>
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	330b      	adds	r3, #11
 800a8a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a8a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3720      	adds	r7, #32
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	0800e054 	.word	0x0800e054
 800a8b8:	0800df24 	.word	0x0800df24

0800a8bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a8d0:	e002      	b.n	800a8d8 <follow_path+0x1c>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b2f      	cmp	r3, #47	; 0x2f
 800a8de:	d0f8      	beq.n	800a8d2 <follow_path+0x16>
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b5c      	cmp	r3, #92	; 0x5c
 800a8e6:	d0f4      	beq.n	800a8d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	2b1f      	cmp	r3, #31
 800a8f4:	d80a      	bhi.n	800a90c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2280      	movs	r2, #128	; 0x80
 800a8fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a8fe:	2100      	movs	r1, #0
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff fcdb 	bl	800a2bc <dir_sdi>
 800a906:	4603      	mov	r3, r0
 800a908:	75fb      	strb	r3, [r7, #23]
 800a90a:	e048      	b.n	800a99e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a90c:	463b      	mov	r3, r7
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff3f 	bl	800a794 <create_name>
 800a916:	4603      	mov	r3, r0
 800a918:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d139      	bne.n	800a994 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff feb0 	bl	800a686 <dir_find>
 800a926:	4603      	mov	r3, r0
 800a928:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a930:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00a      	beq.n	800a94e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	2b04      	cmp	r3, #4
 800a93c:	d12c      	bne.n	800a998 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a93e:	7afb      	ldrb	r3, [r7, #11]
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b00      	cmp	r3, #0
 800a946:	d127      	bne.n	800a998 <follow_path+0xdc>
 800a948:	2305      	movs	r3, #5
 800a94a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a94c:	e024      	b.n	800a998 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a94e:	7afb      	ldrb	r3, [r7, #11]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d121      	bne.n	800a99c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	799b      	ldrb	r3, [r3, #6]
 800a95c:	f003 0310 	and.w	r3, r3, #16
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a964:	2305      	movs	r3, #5
 800a966:	75fb      	strb	r3, [r7, #23]
 800a968:	e019      	b.n	800a99e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	695b      	ldr	r3, [r3, #20]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	8992      	ldrh	r2, [r2, #12]
 800a978:	fbb3 f0f2 	udiv	r0, r3, r2
 800a97c:	fb00 f202 	mul.w	r2, r0, r2
 800a980:	1a9b      	subs	r3, r3, r2
 800a982:	440b      	add	r3, r1
 800a984:	4619      	mov	r1, r3
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fe3e 	bl	800a608 <ld_clust>
 800a98c:	4602      	mov	r2, r0
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a992:	e7bb      	b.n	800a90c <follow_path+0x50>
			if (res != FR_OK) break;
 800a994:	bf00      	nop
 800a996:	e002      	b.n	800a99e <follow_path+0xe2>
				break;
 800a998:	bf00      	nop
 800a99a:	e000      	b.n	800a99e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a99c:	bf00      	nop
			}
		}
	}

	return res;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3718      	adds	r7, #24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b087      	sub	sp, #28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d031      	beq.n	800aa22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	617b      	str	r3, [r7, #20]
 800a9c4:	e002      	b.n	800a9cc <get_ldnumber+0x24>
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	617b      	str	r3, [r7, #20]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b20      	cmp	r3, #32
 800a9d2:	d903      	bls.n	800a9dc <get_ldnumber+0x34>
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b3a      	cmp	r3, #58	; 0x3a
 800a9da:	d1f4      	bne.n	800a9c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b3a      	cmp	r3, #58	; 0x3a
 800a9e2:	d11c      	bne.n	800aa1e <get_ldnumber+0x76>
			tp = *path;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	1c5a      	adds	r2, r3, #1
 800a9ee:	60fa      	str	r2, [r7, #12]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	3b30      	subs	r3, #48	; 0x30
 800a9f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b09      	cmp	r3, #9
 800a9fa:	d80e      	bhi.n	800aa1a <get_ldnumber+0x72>
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d10a      	bne.n	800aa1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d107      	bne.n	800aa1a <get_ldnumber+0x72>
					vol = (int)i;
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	3301      	adds	r3, #1
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	e002      	b.n	800aa24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aa1e:	2300      	movs	r3, #0
 800aa20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aa22:	693b      	ldr	r3, [r7, #16]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	371c      	adds	r7, #28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	70da      	strb	r2, [r3, #3]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f04f 32ff 	mov.w	r2, #4294967295
 800aa46:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff f856 	bl	8009afc <move_window>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <check_fs+0x2a>
 800aa56:	2304      	movs	r3, #4
 800aa58:	e038      	b.n	800aacc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	3334      	adds	r3, #52	; 0x34
 800aa5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe fd9a 	bl	800959c <ld_word>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d001      	beq.n	800aa78 <check_fs+0x48>
 800aa74:	2303      	movs	r3, #3
 800aa76:	e029      	b.n	800aacc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa7e:	2be9      	cmp	r3, #233	; 0xe9
 800aa80:	d009      	beq.n	800aa96 <check_fs+0x66>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa88:	2beb      	cmp	r3, #235	; 0xeb
 800aa8a:	d11e      	bne.n	800aaca <check_fs+0x9a>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aa92:	2b90      	cmp	r3, #144	; 0x90
 800aa94:	d119      	bne.n	800aaca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3334      	adds	r3, #52	; 0x34
 800aa9a:	3336      	adds	r3, #54	; 0x36
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe fd95 	bl	80095cc <ld_dword>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aaa8:	4a0a      	ldr	r2, [pc, #40]	; (800aad4 <check_fs+0xa4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d101      	bne.n	800aab2 <check_fs+0x82>
 800aaae:	2300      	movs	r3, #0
 800aab0:	e00c      	b.n	800aacc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	3334      	adds	r3, #52	; 0x34
 800aab6:	3352      	adds	r3, #82	; 0x52
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fd87 	bl	80095cc <ld_dword>
 800aabe:	4603      	mov	r3, r0
 800aac0:	4a05      	ldr	r2, [pc, #20]	; (800aad8 <check_fs+0xa8>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d101      	bne.n	800aaca <check_fs+0x9a>
 800aac6:	2300      	movs	r3, #0
 800aac8:	e000      	b.n	800aacc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aaca:	2302      	movs	r3, #2
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	00544146 	.word	0x00544146
 800aad8:	33544146 	.word	0x33544146

0800aadc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b096      	sub	sp, #88	; 0x58
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	4613      	mov	r3, r2
 800aae8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7ff ff59 	bl	800a9a8 <get_ldnumber>
 800aaf6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aaf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	da01      	bge.n	800ab02 <find_volume+0x26>
 800aafe:	230b      	movs	r3, #11
 800ab00:	e262      	b.n	800afc8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ab02:	4a9f      	ldr	r2, [pc, #636]	; (800ad80 <find_volume+0x2a4>)
 800ab04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <find_volume+0x3a>
 800ab12:	230c      	movs	r3, #12
 800ab14:	e258      	b.n	800afc8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	f023 0301 	bic.w	r3, r3, #1
 800ab22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d01a      	beq.n	800ab62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	785b      	ldrb	r3, [r3, #1]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fe fc95 	bl	8009460 <disk_status>
 800ab36:	4603      	mov	r3, r0
 800ab38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ab3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10c      	bne.n	800ab62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ab48:	79fb      	ldrb	r3, [r7, #7]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d007      	beq.n	800ab5e <find_volume+0x82>
 800ab4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab52:	f003 0304 	and.w	r3, r3, #4
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ab5a:	230a      	movs	r3, #10
 800ab5c:	e234      	b.n	800afc8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e232      	b.n	800afc8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ab62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab64:	2200      	movs	r2, #0
 800ab66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ab68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ab70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab72:	785b      	ldrb	r3, [r3, #1]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe fc8d 	bl	8009494 <disk_initialize>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ab80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e21b      	b.n	800afc8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ab90:	79fb      	ldrb	r3, [r7, #7]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d007      	beq.n	800aba6 <find_volume+0xca>
 800ab96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab9a:	f003 0304 	and.w	r3, r3, #4
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800aba2:	230a      	movs	r3, #10
 800aba4:	e210      	b.n	800afc8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	7858      	ldrb	r0, [r3, #1]
 800abaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abac:	330c      	adds	r3, #12
 800abae:	461a      	mov	r2, r3
 800abb0:	2102      	movs	r1, #2
 800abb2:	f7fe fcd5 	bl	8009560 <disk_ioctl>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <find_volume+0xe4>
 800abbc:	2301      	movs	r3, #1
 800abbe:	e203      	b.n	800afc8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800abc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc2:	899b      	ldrh	r3, [r3, #12]
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc8:	d80d      	bhi.n	800abe6 <find_volume+0x10a>
 800abca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abcc:	899b      	ldrh	r3, [r3, #12]
 800abce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abd2:	d308      	bcc.n	800abe6 <find_volume+0x10a>
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	899b      	ldrh	r3, [r3, #12]
 800abd8:	461a      	mov	r2, r3
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	899b      	ldrh	r3, [r3, #12]
 800abde:	3b01      	subs	r3, #1
 800abe0:	4013      	ands	r3, r2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <find_volume+0x10e>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e1ee      	b.n	800afc8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800abee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800abf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abf2:	f7ff ff1d 	bl	800aa30 <check_fs>
 800abf6:	4603      	mov	r3, r0
 800abf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800abfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d149      	bne.n	800ac98 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac04:	2300      	movs	r3, #0
 800ac06:	643b      	str	r3, [r7, #64]	; 0x40
 800ac08:	e01e      	b.n	800ac48 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac12:	011b      	lsls	r3, r3, #4
 800ac14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ac18:	4413      	add	r3, r2
 800ac1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	3304      	adds	r3, #4
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d006      	beq.n	800ac34 <find_volume+0x158>
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	3308      	adds	r3, #8
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fe fcce 	bl	80095cc <ld_dword>
 800ac30:	4602      	mov	r2, r0
 800ac32:	e000      	b.n	800ac36 <find_volume+0x15a>
 800ac34:	2200      	movs	r2, #0
 800ac36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	3358      	adds	r3, #88	; 0x58
 800ac3c:	443b      	add	r3, r7
 800ac3e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac44:	3301      	adds	r3, #1
 800ac46:	643b      	str	r3, [r7, #64]	; 0x40
 800ac48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d9dd      	bls.n	800ac0a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ac4e:	2300      	movs	r3, #0
 800ac50:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ac52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <find_volume+0x182>
 800ac58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ac5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	3358      	adds	r3, #88	; 0x58
 800ac64:	443b      	add	r3, r7
 800ac66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ac6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ac6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d005      	beq.n	800ac7e <find_volume+0x1a2>
 800ac72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac76:	f7ff fedb 	bl	800aa30 <check_fs>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	e000      	b.n	800ac80 <find_volume+0x1a4>
 800ac7e:	2303      	movs	r3, #3
 800ac80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ac84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d905      	bls.n	800ac98 <find_volume+0x1bc>
 800ac8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac8e:	3301      	adds	r3, #1
 800ac90:	643b      	str	r3, [r7, #64]	; 0x40
 800ac92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d9e2      	bls.n	800ac5e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ac98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d101      	bne.n	800aca4 <find_volume+0x1c8>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e191      	b.n	800afc8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800aca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d901      	bls.n	800acb0 <find_volume+0x1d4>
 800acac:	230d      	movs	r3, #13
 800acae:	e18b      	b.n	800afc8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	3334      	adds	r3, #52	; 0x34
 800acb4:	330b      	adds	r3, #11
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fc70 	bl	800959c <ld_word>
 800acbc:	4603      	mov	r3, r0
 800acbe:	461a      	mov	r2, r3
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	899b      	ldrh	r3, [r3, #12]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d001      	beq.n	800accc <find_volume+0x1f0>
 800acc8:	230d      	movs	r3, #13
 800acca:	e17d      	b.n	800afc8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	3334      	adds	r3, #52	; 0x34
 800acd0:	3316      	adds	r3, #22
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe fc62 	bl	800959c <ld_word>
 800acd8:	4603      	mov	r3, r0
 800acda:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800acdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <find_volume+0x214>
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	3334      	adds	r3, #52	; 0x34
 800ace6:	3324      	adds	r3, #36	; 0x24
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fe fc6f 	bl	80095cc <ld_dword>
 800acee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800acf4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ad00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad02:	789b      	ldrb	r3, [r3, #2]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d005      	beq.n	800ad14 <find_volume+0x238>
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	789b      	ldrb	r3, [r3, #2]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d001      	beq.n	800ad14 <find_volume+0x238>
 800ad10:	230d      	movs	r3, #13
 800ad12:	e159      	b.n	800afc8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	789b      	ldrb	r3, [r3, #2]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad1c:	fb02 f303 	mul.w	r3, r2, r3
 800ad20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad30:	895b      	ldrh	r3, [r3, #10]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d008      	beq.n	800ad48 <find_volume+0x26c>
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	895b      	ldrh	r3, [r3, #10]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	895b      	ldrh	r3, [r3, #10]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	4013      	ands	r3, r2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <find_volume+0x270>
 800ad48:	230d      	movs	r3, #13
 800ad4a:	e13d      	b.n	800afc8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	3334      	adds	r3, #52	; 0x34
 800ad50:	3311      	adds	r3, #17
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe fc22 	bl	800959c <ld_word>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	891b      	ldrh	r3, [r3, #8]
 800ad64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad66:	8992      	ldrh	r2, [r2, #12]
 800ad68:	0952      	lsrs	r2, r2, #5
 800ad6a:	b292      	uxth	r2, r2
 800ad6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad70:	fb01 f202 	mul.w	r2, r1, r2
 800ad74:	1a9b      	subs	r3, r3, r2
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <find_volume+0x2a8>
 800ad7c:	230d      	movs	r3, #13
 800ad7e:	e123      	b.n	800afc8 <find_volume+0x4ec>
 800ad80:	2000013c 	.word	0x2000013c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	3334      	adds	r3, #52	; 0x34
 800ad88:	3313      	adds	r3, #19
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe fc06 	bl	800959c <ld_word>
 800ad90:	4603      	mov	r3, r0
 800ad92:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ad94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d106      	bne.n	800ada8 <find_volume+0x2cc>
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	3334      	adds	r3, #52	; 0x34
 800ad9e:	3320      	adds	r3, #32
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe fc13 	bl	80095cc <ld_dword>
 800ada6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ada8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adaa:	3334      	adds	r3, #52	; 0x34
 800adac:	330e      	adds	r3, #14
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe fbf4 	bl	800959c <ld_word>
 800adb4:	4603      	mov	r3, r0
 800adb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800adb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <find_volume+0x2e6>
 800adbe:	230d      	movs	r3, #13
 800adc0:	e102      	b.n	800afc8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800adc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800adc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc6:	4413      	add	r3, r2
 800adc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adca:	8911      	ldrh	r1, [r2, #8]
 800adcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adce:	8992      	ldrh	r2, [r2, #12]
 800add0:	0952      	lsrs	r2, r2, #5
 800add2:	b292      	uxth	r2, r2
 800add4:	fbb1 f2f2 	udiv	r2, r1, r2
 800add8:	b292      	uxth	r2, r2
 800adda:	4413      	add	r3, r2
 800addc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800adde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d201      	bcs.n	800adea <find_volume+0x30e>
 800ade6:	230d      	movs	r3, #13
 800ade8:	e0ee      	b.n	800afc8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800adea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adf2:	8952      	ldrh	r2, [r2, #10]
 800adf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <find_volume+0x328>
 800ae00:	230d      	movs	r3, #13
 800ae02:	e0e1      	b.n	800afc8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800ae04:	2303      	movs	r3, #3
 800ae06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d802      	bhi.n	800ae1a <find_volume+0x33e>
 800ae14:	2302      	movs	r3, #2
 800ae16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d802      	bhi.n	800ae2a <find_volume+0x34e>
 800ae24:	2301      	movs	r3, #1
 800ae26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	1c9a      	adds	r2, r3, #2
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae30:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae36:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ae38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae3c:	441a      	add	r2, r3
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ae42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	441a      	add	r2, r3
 800ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ae4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d11e      	bne.n	800ae92 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ae54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae56:	3334      	adds	r3, #52	; 0x34
 800ae58:	332a      	adds	r3, #42	; 0x2a
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fb9e 	bl	800959c <ld_word>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <find_volume+0x38e>
 800ae66:	230d      	movs	r3, #13
 800ae68:	e0ae      	b.n	800afc8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6c:	891b      	ldrh	r3, [r3, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <find_volume+0x39a>
 800ae72:	230d      	movs	r3, #13
 800ae74:	e0a8      	b.n	800afc8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	3334      	adds	r3, #52	; 0x34
 800ae7a:	332c      	adds	r3, #44	; 0x2c
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fba5 	bl	80095cc <ld_dword>
 800ae82:	4602      	mov	r2, r0
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ae90:	e01f      	b.n	800aed2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ae92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae94:	891b      	ldrh	r3, [r3, #8]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <find_volume+0x3c2>
 800ae9a:	230d      	movs	r3, #13
 800ae9c:	e094      	b.n	800afc8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea4:	441a      	add	r2, r3
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aeaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d103      	bne.n	800aeba <find_volume+0x3de>
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	005b      	lsls	r3, r3, #1
 800aeb8:	e00a      	b.n	800aed0 <find_volume+0x3f4>
 800aeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebc:	699a      	ldr	r2, [r3, #24]
 800aebe:	4613      	mov	r3, r2
 800aec0:	005b      	lsls	r3, r3, #1
 800aec2:	4413      	add	r3, r2
 800aec4:	085a      	lsrs	r2, r3, #1
 800aec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aed0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	69da      	ldr	r2, [r3, #28]
 800aed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed8:	899b      	ldrh	r3, [r3, #12]
 800aeda:	4619      	mov	r1, r3
 800aedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aede:	440b      	add	r3, r1
 800aee0:	3b01      	subs	r3, #1
 800aee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aee4:	8989      	ldrh	r1, [r1, #12]
 800aee6:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d201      	bcs.n	800aef2 <find_volume+0x416>
 800aeee:	230d      	movs	r3, #13
 800aef0:	e06a      	b.n	800afc8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	f04f 32ff 	mov.w	r2, #4294967295
 800aef8:	615a      	str	r2, [r3, #20]
 800aefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefc:	695a      	ldr	r2, [r3, #20]
 800aefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af00:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	2280      	movs	r2, #128	; 0x80
 800af06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800af08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af0c:	2b03      	cmp	r3, #3
 800af0e:	d149      	bne.n	800afa4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	3334      	adds	r3, #52	; 0x34
 800af14:	3330      	adds	r3, #48	; 0x30
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe fb40 	bl	800959c <ld_word>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d140      	bne.n	800afa4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800af22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af24:	3301      	adds	r3, #1
 800af26:	4619      	mov	r1, r3
 800af28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af2a:	f7fe fde7 	bl	8009afc <move_window>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d137      	bne.n	800afa4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	2200      	movs	r2, #0
 800af38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	3334      	adds	r3, #52	; 0x34
 800af3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe fb2a 	bl	800959c <ld_word>
 800af48:	4603      	mov	r3, r0
 800af4a:	461a      	mov	r2, r3
 800af4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af50:	429a      	cmp	r2, r3
 800af52:	d127      	bne.n	800afa4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800af54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af56:	3334      	adds	r3, #52	; 0x34
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fb37 	bl	80095cc <ld_dword>
 800af5e:	4603      	mov	r3, r0
 800af60:	4a1b      	ldr	r2, [pc, #108]	; (800afd0 <find_volume+0x4f4>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d11e      	bne.n	800afa4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	3334      	adds	r3, #52	; 0x34
 800af6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe fb2c 	bl	80095cc <ld_dword>
 800af74:	4603      	mov	r3, r0
 800af76:	4a17      	ldr	r2, [pc, #92]	; (800afd4 <find_volume+0x4f8>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d113      	bne.n	800afa4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800af7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7e:	3334      	adds	r3, #52	; 0x34
 800af80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800af84:	4618      	mov	r0, r3
 800af86:	f7fe fb21 	bl	80095cc <ld_dword>
 800af8a:	4602      	mov	r2, r0
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	3334      	adds	r3, #52	; 0x34
 800af94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe fb17 	bl	80095cc <ld_dword>
 800af9e:	4602      	mov	r2, r0
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800afaa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800afac:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <find_volume+0x4fc>)
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	3301      	adds	r3, #1
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <find_volume+0x4fc>)
 800afb6:	801a      	strh	r2, [r3, #0]
 800afb8:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <find_volume+0x4fc>)
 800afba:	881a      	ldrh	r2, [r3, #0]
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800afc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afc2:	f7fe fd33 	bl	8009a2c <clear_lock>
#endif
	return FR_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3758      	adds	r7, #88	; 0x58
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	41615252 	.word	0x41615252
 800afd4:	61417272 	.word	0x61417272
 800afd8:	20000140 	.word	0x20000140

0800afdc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800afe6:	2309      	movs	r3, #9
 800afe8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01c      	beq.n	800b02a <validate+0x4e>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d018      	beq.n	800b02a <validate+0x4e>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d013      	beq.n	800b02a <validate+0x4e>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	889a      	ldrh	r2, [r3, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	88db      	ldrh	r3, [r3, #6]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d10c      	bne.n	800b02a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fa22 	bl	8009460 <disk_status>
 800b01c:	4603      	mov	r3, r0
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <validate+0x4e>
			res = FR_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <validate+0x5a>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	e000      	b.n	800b038 <validate+0x5c>
 800b036:	2300      	movs	r3, #0
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	6013      	str	r3, [r2, #0]
	return res;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	4613      	mov	r3, r2
 800b054:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b05a:	f107 0310 	add.w	r3, r7, #16
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff fca2 	bl	800a9a8 <get_ldnumber>
 800b064:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	da01      	bge.n	800b070 <f_mount+0x28>
 800b06c:	230b      	movs	r3, #11
 800b06e:	e02b      	b.n	800b0c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b070:	4a17      	ldr	r2, [pc, #92]	; (800b0d0 <f_mount+0x88>)
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b078:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d005      	beq.n	800b08c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b080:	69b8      	ldr	r0, [r7, #24]
 800b082:	f7fe fcd3 	bl	8009a2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	2200      	movs	r2, #0
 800b08a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	490d      	ldr	r1, [pc, #52]	; (800b0d0 <f_mount+0x88>)
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <f_mount+0x66>
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d001      	beq.n	800b0b2 <f_mount+0x6a>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e00a      	b.n	800b0c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b0b2:	f107 010c 	add.w	r1, r7, #12
 800b0b6:	f107 0308 	add.w	r3, r7, #8
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff fd0d 	bl	800aadc <find_volume>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3720      	adds	r7, #32
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	2000013c 	.word	0x2000013c

0800b0d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b098      	sub	sp, #96	; 0x60
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <f_open+0x18>
 800b0e8:	2309      	movs	r3, #9
 800b0ea:	e1bb      	b.n	800b464 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b0ec:	79fb      	ldrb	r3, [r7, #7]
 800b0ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b0f4:	79fa      	ldrb	r2, [r7, #7]
 800b0f6:	f107 0110 	add.w	r1, r7, #16
 800b0fa:	f107 0308 	add.w	r3, r7, #8
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fcec 	bl	800aadc <find_volume>
 800b104:	4603      	mov	r3, r0
 800b106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b10a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f040 819f 	bne.w	800b452 <f_open+0x37e>
		dj.obj.fs = fs;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	f107 0314 	add.w	r3, r7, #20
 800b11e:	4611      	mov	r1, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff fbcb 	bl	800a8bc <follow_path>
 800b126:	4603      	mov	r3, r0
 800b128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b12c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b130:	2b00      	cmp	r3, #0
 800b132:	d11a      	bne.n	800b16a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b134:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b138:	b25b      	sxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	da03      	bge.n	800b146 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b13e:	2306      	movs	r3, #6
 800b140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b144:	e011      	b.n	800b16a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	f023 0301 	bic.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bf14      	ite	ne
 800b150:	2301      	movne	r3, #1
 800b152:	2300      	moveq	r3, #0
 800b154:	b2db      	uxtb	r3, r3
 800b156:	461a      	mov	r2, r3
 800b158:	f107 0314 	add.w	r3, r7, #20
 800b15c:	4611      	mov	r1, r2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe fb1c 	bl	800979c <chk_lock>
 800b164:	4603      	mov	r3, r0
 800b166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	f003 031c 	and.w	r3, r3, #28
 800b170:	2b00      	cmp	r3, #0
 800b172:	d07f      	beq.n	800b274 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d017      	beq.n	800b1ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b17c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b180:	2b04      	cmp	r3, #4
 800b182:	d10e      	bne.n	800b1a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b184:	f7fe fb66 	bl	8009854 <enq_lock>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d006      	beq.n	800b19c <f_open+0xc8>
 800b18e:	f107 0314 	add.w	r3, r7, #20
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff facc 	bl	800a730 <dir_register>
 800b198:	4603      	mov	r3, r0
 800b19a:	e000      	b.n	800b19e <f_open+0xca>
 800b19c:	2312      	movs	r3, #18
 800b19e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	f043 0308 	orr.w	r3, r3, #8
 800b1a8:	71fb      	strb	r3, [r7, #7]
 800b1aa:	e010      	b.n	800b1ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b1ac:	7ebb      	ldrb	r3, [r7, #26]
 800b1ae:	f003 0311 	and.w	r3, r3, #17
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <f_open+0xea>
					res = FR_DENIED;
 800b1b6:	2307      	movs	r3, #7
 800b1b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b1bc:	e007      	b.n	800b1ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	f003 0304 	and.w	r3, r3, #4
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <f_open+0xfa>
 800b1c8:	2308      	movs	r3, #8
 800b1ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b1ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d168      	bne.n	800b2a8 <f_open+0x1d4>
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	f003 0308 	and.w	r3, r3, #8
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d063      	beq.n	800b2a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b1e0:	f7fa fc16 	bl	8005a10 <get_fattime>
 800b1e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e8:	330e      	adds	r3, #14
 800b1ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe fa2b 	bl	8009648 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f4:	3316      	adds	r3, #22
 800b1f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fe fa25 	bl	8009648 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b200:	330b      	adds	r3, #11
 800b202:	2220      	movs	r2, #32
 800b204:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff f9fb 	bl	800a608 <ld_clust>
 800b212:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b218:	2200      	movs	r2, #0
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff fa13 	bl	800a646 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b222:	331c      	adds	r3, #28
 800b224:	2100      	movs	r1, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe fa0e 	bl	8009648 <st_dword>
					fs->wflag = 1;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	2201      	movs	r2, #1
 800b230:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b234:	2b00      	cmp	r3, #0
 800b236:	d037      	beq.n	800b2a8 <f_open+0x1d4>
						dw = fs->winsect;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b23e:	f107 0314 	add.w	r3, r7, #20
 800b242:	2200      	movs	r2, #0
 800b244:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b246:	4618      	mov	r0, r3
 800b248:	f7fe ff03 	bl	800a052 <remove_chain>
 800b24c:	4603      	mov	r3, r0
 800b24e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b256:	2b00      	cmp	r3, #0
 800b258:	d126      	bne.n	800b2a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fc4c 	bl	8009afc <move_window>
 800b264:	4603      	mov	r3, r0
 800b266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b26e:	3a01      	subs	r2, #1
 800b270:	611a      	str	r2, [r3, #16]
 800b272:	e019      	b.n	800b2a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d115      	bne.n	800b2a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b27c:	7ebb      	ldrb	r3, [r7, #26]
 800b27e:	f003 0310 	and.w	r3, r3, #16
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <f_open+0x1ba>
					res = FR_NO_FILE;
 800b286:	2304      	movs	r3, #4
 800b288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b28c:	e00c      	b.n	800b2a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	f003 0302 	and.w	r3, r3, #2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d007      	beq.n	800b2a8 <f_open+0x1d4>
 800b298:	7ebb      	ldrb	r3, [r7, #26]
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <f_open+0x1d4>
						res = FR_DENIED;
 800b2a2:	2307      	movs	r3, #7
 800b2a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b2a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d128      	bne.n	800b302 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
 800b2b2:	f003 0308 	and.w	r3, r3, #8
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b2d0:	79fb      	ldrb	r3, [r7, #7]
 800b2d2:	f023 0301 	bic.w	r3, r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bf14      	ite	ne
 800b2da:	2301      	movne	r3, #1
 800b2dc:	2300      	moveq	r3, #0
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	f107 0314 	add.w	r3, r7, #20
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe fad5 	bl	8009898 <inc_lock>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d102      	bne.n	800b302 <f_open+0x22e>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 80a3 	bne.w	800b452 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b310:	4611      	mov	r1, r2
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff f978 	bl	800a608 <ld_clust>
 800b318:	4602      	mov	r2, r0
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b320:	331c      	adds	r3, #28
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe f952 	bl	80095cc <ld_dword>
 800b328:	4602      	mov	r2, r0
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	88da      	ldrh	r2, [r3, #6]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	79fa      	ldrb	r2, [r7, #7]
 800b346:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3330      	adds	r3, #48	; 0x30
 800b35e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b362:	2100      	movs	r1, #0
 800b364:	4618      	mov	r0, r3
 800b366:	f7fe f9bc 	bl	80096e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b36a:	79fb      	ldrb	r3, [r7, #7]
 800b36c:	f003 0320 	and.w	r3, r3, #32
 800b370:	2b00      	cmp	r3, #0
 800b372:	d06e      	beq.n	800b452 <f_open+0x37e>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d06a      	beq.n	800b452 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	895b      	ldrh	r3, [r3, #10]
 800b388:	461a      	mov	r2, r3
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	899b      	ldrh	r3, [r3, #12]
 800b38e:	fb02 f303 	mul.w	r3, r2, r3
 800b392:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	657b      	str	r3, [r7, #84]	; 0x54
 800b3a0:	e016      	b.n	800b3d0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fc65 	bl	8009c76 <get_fat>
 800b3ac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b3ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d802      	bhi.n	800b3ba <f_open+0x2e6>
 800b3b4:	2302      	movs	r3, #2
 800b3b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b3ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c0:	d102      	bne.n	800b3c8 <f_open+0x2f4>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b3c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	657b      	str	r3, [r7, #84]	; 0x54
 800b3d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d103      	bne.n	800b3e0 <f_open+0x30c>
 800b3d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d8e0      	bhi.n	800b3a2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b3e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d131      	bne.n	800b452 <f_open+0x37e>
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	899b      	ldrh	r3, [r3, #12]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3fa:	fb01 f202 	mul.w	r2, r1, r2
 800b3fe:	1a9b      	subs	r3, r3, r2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d026      	beq.n	800b452 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fe fc15 	bl	8009c38 <clust2sect>
 800b40e:	6478      	str	r0, [r7, #68]	; 0x44
 800b410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b412:	2b00      	cmp	r3, #0
 800b414:	d103      	bne.n	800b41e <f_open+0x34a>
						res = FR_INT_ERR;
 800b416:	2302      	movs	r3, #2
 800b418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b41c:	e019      	b.n	800b452 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	899b      	ldrh	r3, [r3, #12]
 800b422:	461a      	mov	r2, r3
 800b424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b426:	fbb3 f2f2 	udiv	r2, r3, r2
 800b42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b42c:	441a      	add	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	7858      	ldrb	r0, [r3, #1]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6a1a      	ldr	r2, [r3, #32]
 800b440:	2301      	movs	r3, #1
 800b442:	f7fe f84d 	bl	80094e0 <disk_read>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <f_open+0x37e>
 800b44c:	2301      	movs	r3, #1
 800b44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <f_open+0x38c>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b464:	4618      	mov	r0, r3
 800b466:	3760      	adds	r7, #96	; 0x60
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08e      	sub	sp, #56	; 0x38
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f107 0214 	add.w	r2, r7, #20
 800b48a:	4611      	mov	r1, r2
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7ff fda5 	bl	800afdc <validate>
 800b492:	4603      	mov	r3, r0
 800b494:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b498:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d107      	bne.n	800b4b0 <f_read+0x44>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	7d5b      	ldrb	r3, [r3, #21]
 800b4a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b4a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <f_read+0x4a>
 800b4b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4b4:	e135      	b.n	800b722 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	7d1b      	ldrb	r3, [r3, #20]
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d101      	bne.n	800b4c6 <f_read+0x5a>
 800b4c2:	2307      	movs	r3, #7
 800b4c4:	e12d      	b.n	800b722 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	68da      	ldr	r2, [r3, #12]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	699b      	ldr	r3, [r3, #24]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	f240 811e 	bls.w	800b718 <f_read+0x2ac>
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b4e0:	e11a      	b.n	800b718 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	8992      	ldrh	r2, [r2, #12]
 800b4ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4ee:	fb01 f202 	mul.w	r2, r1, r2
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f040 80d5 	bne.w	800b6a4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	8992      	ldrh	r2, [r2, #12]
 800b502:	fbb3 f3f2 	udiv	r3, r3, r2
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	8952      	ldrh	r2, [r2, #10]
 800b50a:	3a01      	subs	r2, #1
 800b50c:	4013      	ands	r3, r2
 800b50e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d12f      	bne.n	800b576 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d103      	bne.n	800b526 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	633b      	str	r3, [r7, #48]	; 0x30
 800b524:	e013      	b.n	800b54e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d007      	beq.n	800b53e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	4619      	mov	r1, r3
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7fe fe89 	bl	800a24c <clmt_clust>
 800b53a:	6338      	str	r0, [r7, #48]	; 0x30
 800b53c:	e007      	b.n	800b54e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	69db      	ldr	r3, [r3, #28]
 800b544:	4619      	mov	r1, r3
 800b546:	4610      	mov	r0, r2
 800b548:	f7fe fb95 	bl	8009c76 <get_fat>
 800b54c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	2b01      	cmp	r3, #1
 800b552:	d804      	bhi.n	800b55e <f_read+0xf2>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2202      	movs	r2, #2
 800b558:	755a      	strb	r2, [r3, #21]
 800b55a:	2302      	movs	r3, #2
 800b55c:	e0e1      	b.n	800b722 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d104      	bne.n	800b570 <f_read+0x104>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2201      	movs	r2, #1
 800b56a:	755a      	strb	r2, [r3, #21]
 800b56c:	2301      	movs	r3, #1
 800b56e:	e0d8      	b.n	800b722 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b574:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	69db      	ldr	r3, [r3, #28]
 800b57c:	4619      	mov	r1, r3
 800b57e:	4610      	mov	r0, r2
 800b580:	f7fe fb5a 	bl	8009c38 <clust2sect>
 800b584:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d104      	bne.n	800b596 <f_read+0x12a>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2202      	movs	r2, #2
 800b590:	755a      	strb	r2, [r3, #21]
 800b592:	2302      	movs	r3, #2
 800b594:	e0c5      	b.n	800b722 <f_read+0x2b6>
			sect += csect;
 800b596:	69ba      	ldr	r2, [r7, #24]
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	4413      	add	r3, r2
 800b59c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	899b      	ldrh	r3, [r3, #12]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d041      	beq.n	800b636 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b5b2:	69fa      	ldr	r2, [r7, #28]
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	4413      	add	r3, r2
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	8952      	ldrh	r2, [r2, #10]
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d905      	bls.n	800b5cc <f_read+0x160>
					cc = fs->csize - csect;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	895b      	ldrh	r3, [r3, #10]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	7858      	ldrb	r0, [r3, #1]
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	69ba      	ldr	r2, [r7, #24]
 800b5d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5d6:	f7fd ff83 	bl	80094e0 <disk_read>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d004      	beq.n	800b5ea <f_read+0x17e>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	755a      	strb	r2, [r3, #21]
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e09b      	b.n	800b722 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	7d1b      	ldrb	r3, [r3, #20]
 800b5ee:	b25b      	sxtb	r3, r3
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	da18      	bge.n	800b626 <f_read+0x1ba>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a1a      	ldr	r2, [r3, #32]
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d911      	bls.n	800b626 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6a1a      	ldr	r2, [r3, #32]
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	8992      	ldrh	r2, [r2, #12]
 800b60e:	fb02 f303 	mul.w	r3, r2, r3
 800b612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b614:	18d0      	adds	r0, r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	899b      	ldrh	r3, [r3, #12]
 800b620:	461a      	mov	r2, r3
 800b622:	f7fe f83d 	bl	80096a0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	899b      	ldrh	r3, [r3, #12]
 800b62a:	461a      	mov	r2, r3
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	fb02 f303 	mul.w	r3, r2, r3
 800b632:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b634:	e05c      	b.n	800b6f0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	69ba      	ldr	r2, [r7, #24]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d02e      	beq.n	800b69e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	7d1b      	ldrb	r3, [r3, #20]
 800b644:	b25b      	sxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	da18      	bge.n	800b67c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	7858      	ldrb	r0, [r3, #1]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6a1a      	ldr	r2, [r3, #32]
 800b658:	2301      	movs	r3, #1
 800b65a:	f7fd ff61 	bl	8009520 <disk_write>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d004      	beq.n	800b66e <f_read+0x202>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2201      	movs	r2, #1
 800b668:	755a      	strb	r2, [r3, #21]
 800b66a:	2301      	movs	r3, #1
 800b66c:	e059      	b.n	800b722 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	7d1b      	ldrb	r3, [r3, #20]
 800b672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b676:	b2da      	uxtb	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	7858      	ldrb	r0, [r3, #1]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b686:	2301      	movs	r3, #1
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	f7fd ff29 	bl	80094e0 <disk_read>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d004      	beq.n	800b69e <f_read+0x232>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2201      	movs	r2, #1
 800b698:	755a      	strb	r2, [r3, #21]
 800b69a:	2301      	movs	r3, #1
 800b69c:	e041      	b.n	800b722 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	899b      	ldrh	r3, [r3, #12]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	699b      	ldr	r3, [r3, #24]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	8992      	ldrh	r2, [r2, #12]
 800b6b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6b6:	fb01 f202 	mul.w	r2, r1, r2
 800b6ba:	1a9b      	subs	r3, r3, r2
 800b6bc:	1ac3      	subs	r3, r0, r3
 800b6be:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d901      	bls.n	800b6cc <f_read+0x260>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	8992      	ldrh	r2, [r2, #12]
 800b6da:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6de:	fb00 f202 	mul.w	r2, r0, r2
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	440b      	add	r3, r1
 800b6e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6ec:	f7fd ffd8 	bl	80096a0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	4413      	add	r3, r2
 800b6f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	699a      	ldr	r2, [r3, #24]
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	441a      	add	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	619a      	str	r2, [r3, #24]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	441a      	add	r2, r3
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f47f aee1 	bne.w	800b4e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3738      	adds	r7, #56	; 0x38
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b08c      	sub	sp, #48	; 0x30
 800b72e:	af00      	add	r7, sp, #0
 800b730:	60f8      	str	r0, [r7, #12]
 800b732:	60b9      	str	r1, [r7, #8]
 800b734:	607a      	str	r2, [r7, #4]
 800b736:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f107 0210 	add.w	r2, r7, #16
 800b748:	4611      	mov	r1, r2
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff fc46 	bl	800afdc <validate>
 800b750:	4603      	mov	r3, r0
 800b752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d107      	bne.n	800b76e <f_write+0x44>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	7d5b      	ldrb	r3, [r3, #21]
 800b762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <f_write+0x4a>
 800b76e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b772:	e16a      	b.n	800ba4a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	7d1b      	ldrb	r3, [r3, #20]
 800b778:	f003 0302 	and.w	r3, r3, #2
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <f_write+0x5a>
 800b780:	2307      	movs	r3, #7
 800b782:	e162      	b.n	800ba4a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	699a      	ldr	r2, [r3, #24]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	441a      	add	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	429a      	cmp	r2, r3
 800b792:	f080 814c 	bcs.w	800ba2e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	43db      	mvns	r3, r3
 800b79c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b79e:	e146      	b.n	800ba2e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	8992      	ldrh	r2, [r2, #12]
 800b7a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7ac:	fb01 f202 	mul.w	r2, r1, r2
 800b7b0:	1a9b      	subs	r3, r3, r2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f040 80f1 	bne.w	800b99a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	693a      	ldr	r2, [r7, #16]
 800b7be:	8992      	ldrh	r2, [r2, #12]
 800b7c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	8952      	ldrh	r2, [r2, #10]
 800b7c8:	3a01      	subs	r2, #1
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d143      	bne.n	800b85c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10c      	bne.n	800b7f6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d11a      	bne.n	800b81e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fe fc95 	bl	800a11c <create_chain>
 800b7f2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b7f4:	e013      	b.n	800b81e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d007      	beq.n	800b80e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	4619      	mov	r1, r3
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f7fe fd21 	bl	800a24c <clmt_clust>
 800b80a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b80c:	e007      	b.n	800b81e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	f7fe fc80 	bl	800a11c <create_chain>
 800b81c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 8109 	beq.w	800ba38 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d104      	bne.n	800b836 <f_write+0x10c>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2202      	movs	r2, #2
 800b830:	755a      	strb	r2, [r3, #21]
 800b832:	2302      	movs	r3, #2
 800b834:	e109      	b.n	800ba4a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83c:	d104      	bne.n	800b848 <f_write+0x11e>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2201      	movs	r2, #1
 800b842:	755a      	strb	r2, [r3, #21]
 800b844:	2301      	movs	r3, #1
 800b846:	e100      	b.n	800ba4a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b84c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d102      	bne.n	800b85c <f_write+0x132>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b85a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	7d1b      	ldrb	r3, [r3, #20]
 800b860:	b25b      	sxtb	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	da18      	bge.n	800b898 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	7858      	ldrb	r0, [r3, #1]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6a1a      	ldr	r2, [r3, #32]
 800b874:	2301      	movs	r3, #1
 800b876:	f7fd fe53 	bl	8009520 <disk_write>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d004      	beq.n	800b88a <f_write+0x160>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2201      	movs	r2, #1
 800b884:	755a      	strb	r2, [r3, #21]
 800b886:	2301      	movs	r3, #1
 800b888:	e0df      	b.n	800ba4a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	7d1b      	ldrb	r3, [r3, #20]
 800b88e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b892:	b2da      	uxtb	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	f7fe f9c9 	bl	8009c38 <clust2sect>
 800b8a6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d104      	bne.n	800b8b8 <f_write+0x18e>
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	755a      	strb	r2, [r3, #21]
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	e0c8      	b.n	800ba4a <f_write+0x320>
			sect += csect;
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	4413      	add	r3, r2
 800b8be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	899b      	ldrh	r3, [r3, #12]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8cc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d043      	beq.n	800b95c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	4413      	add	r3, r2
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	8952      	ldrh	r2, [r2, #10]
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d905      	bls.n	800b8ee <f_write+0x1c4>
					cc = fs->csize - csect;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	895b      	ldrh	r3, [r3, #10]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	7858      	ldrb	r0, [r3, #1]
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	69f9      	ldr	r1, [r7, #28]
 800b8f8:	f7fd fe12 	bl	8009520 <disk_write>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d004      	beq.n	800b90c <f_write+0x1e2>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	755a      	strb	r2, [r3, #21]
 800b908:	2301      	movs	r3, #1
 800b90a:	e09e      	b.n	800ba4a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6a1a      	ldr	r2, [r3, #32]
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	6a3a      	ldr	r2, [r7, #32]
 800b916:	429a      	cmp	r2, r3
 800b918:	d918      	bls.n	800b94c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6a1a      	ldr	r2, [r3, #32]
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	8992      	ldrh	r2, [r2, #12]
 800b92c:	fb02 f303 	mul.w	r3, r2, r3
 800b930:	69fa      	ldr	r2, [r7, #28]
 800b932:	18d1      	adds	r1, r2, r3
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	899b      	ldrh	r3, [r3, #12]
 800b938:	461a      	mov	r2, r3
 800b93a:	f7fd feb1 	bl	80096a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	7d1b      	ldrb	r3, [r3, #20]
 800b942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b946:	b2da      	uxtb	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	899b      	ldrh	r3, [r3, #12]
 800b950:	461a      	mov	r2, r3
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b95a:	e04b      	b.n	800b9f4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6a1b      	ldr	r3, [r3, #32]
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	429a      	cmp	r2, r3
 800b964:	d016      	beq.n	800b994 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b96e:	429a      	cmp	r2, r3
 800b970:	d210      	bcs.n	800b994 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	7858      	ldrb	r0, [r3, #1]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b97c:	2301      	movs	r3, #1
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	f7fd fdae 	bl	80094e0 <disk_read>
 800b984:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b986:	2b00      	cmp	r3, #0
 800b988:	d004      	beq.n	800b994 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2201      	movs	r2, #1
 800b98e:	755a      	strb	r2, [r3, #21]
 800b990:	2301      	movs	r3, #1
 800b992:	e05a      	b.n	800ba4a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	899b      	ldrh	r3, [r3, #12]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	8992      	ldrh	r2, [r2, #12]
 800b9a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9ac:	fb01 f202 	mul.w	r2, r1, r2
 800b9b0:	1a9b      	subs	r3, r3, r2
 800b9b2:	1ac3      	subs	r3, r0, r3
 800b9b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d901      	bls.n	800b9c2 <f_write+0x298>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	8992      	ldrh	r2, [r2, #12]
 800b9d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9d4:	fb00 f202 	mul.w	r2, r0, r2
 800b9d8:	1a9b      	subs	r3, r3, r2
 800b9da:	440b      	add	r3, r1
 800b9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9de:	69f9      	ldr	r1, [r7, #28]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7fd fe5d 	bl	80096a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	7d1b      	ldrb	r3, [r3, #20]
 800b9ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b9f4:	69fa      	ldr	r2, [r7, #28]
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	4413      	add	r3, r2
 800b9fa:	61fb      	str	r3, [r7, #28]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	699a      	ldr	r2, [r3, #24]
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	441a      	add	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	619a      	str	r2, [r3, #24]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	68da      	ldr	r2, [r3, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	bf38      	it	cc
 800ba14:	461a      	movcc	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	60da      	str	r2, [r3, #12]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	441a      	add	r2, r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f47f aeb5 	bne.w	800b7a0 <f_write+0x76>
 800ba36:	e000      	b.n	800ba3a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba38:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	7d1b      	ldrb	r3, [r3, #20]
 800ba3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3730      	adds	r7, #48	; 0x30
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b086      	sub	sp, #24
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f107 0208 	add.w	r2, r7, #8
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff faba 	bl	800afdc <validate>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d168      	bne.n	800bb44 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	7d1b      	ldrb	r3, [r3, #20]
 800ba76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d062      	beq.n	800bb44 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	7d1b      	ldrb	r3, [r3, #20]
 800ba82:	b25b      	sxtb	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	da15      	bge.n	800bab4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	7858      	ldrb	r0, [r3, #1]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1a      	ldr	r2, [r3, #32]
 800ba96:	2301      	movs	r3, #1
 800ba98:	f7fd fd42 	bl	8009520 <disk_write>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <f_sync+0x54>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e04f      	b.n	800bb46 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	7d1b      	ldrb	r3, [r3, #20]
 800baaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bab4:	f7f9 ffac 	bl	8005a10 <get_fattime>
 800bab8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	4619      	mov	r1, r3
 800bac2:	4610      	mov	r0, r2
 800bac4:	f7fe f81a 	bl	8009afc <move_window>
 800bac8:	4603      	mov	r3, r0
 800baca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d138      	bne.n	800bb44 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	330b      	adds	r3, #11
 800badc:	781a      	ldrb	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	330b      	adds	r3, #11
 800bae2:	f042 0220 	orr.w	r2, r2, #32
 800bae6:	b2d2      	uxtb	r2, r2
 800bae8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6818      	ldr	r0, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	461a      	mov	r2, r3
 800baf4:	68f9      	ldr	r1, [r7, #12]
 800baf6:	f7fe fda6 	bl	800a646 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f103 021c 	add.w	r2, r3, #28
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	4619      	mov	r1, r3
 800bb06:	4610      	mov	r0, r2
 800bb08:	f7fd fd9e 	bl	8009648 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3316      	adds	r3, #22
 800bb10:	6939      	ldr	r1, [r7, #16]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fd fd98 	bl	8009648 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	3312      	adds	r3, #18
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fd fd77 	bl	8009612 <st_word>
					fs->wflag = 1;
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2201      	movs	r2, #1
 800bb28:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe f813 	bl	8009b58 <sync_fs>
 800bb32:	4603      	mov	r3, r0
 800bb34:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	7d1b      	ldrb	r3, [r3, #20]
 800bb3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff ff7b 	bl	800ba52 <f_sync>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d118      	bne.n	800bb98 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f107 0208 	add.w	r2, r7, #8
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff fa34 	bl	800afdc <validate>
 800bb74:	4603      	mov	r3, r0
 800bb76:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10c      	bne.n	800bb98 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fd ff16 	bl	80099b4 <dec_lock>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d102      	bne.n	800bb98 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b092      	sub	sp, #72	; 0x48
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bbae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bbb2:	f107 030c 	add.w	r3, r7, #12
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe ff8f 	bl	800aadc <find_volume>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800bbc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f040 8099 	bne.w	800bd00 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bbce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	695a      	ldr	r2, [r3, #20]
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	3b02      	subs	r3, #2
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d804      	bhi.n	800bbec <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe4:	695a      	ldr	r2, [r3, #20]
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	e089      	b.n	800bd00 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d128      	bne.n	800bc4a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bc00:	f107 0314 	add.w	r3, r7, #20
 800bc04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fe f835 	bl	8009c76 <get_fat>
 800bc0c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc14:	d103      	bne.n	800bc1e <f_getfree+0x7c>
 800bc16:	2301      	movs	r3, #1
 800bc18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bc1c:	e063      	b.n	800bce6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d103      	bne.n	800bc2c <f_getfree+0x8a>
 800bc24:	2302      	movs	r3, #2
 800bc26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bc2a:	e05c      	b.n	800bce6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d102      	bne.n	800bc38 <f_getfree+0x96>
 800bc32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc34:	3301      	adds	r3, #1
 800bc36:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800bc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d3db      	bcc.n	800bc00 <f_getfree+0x5e>
 800bc48:	e04d      	b.n	800bce6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800bc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	637b      	str	r3, [r7, #52]	; 0x34
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800bc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d113      	bne.n	800bc8c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800bc64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	63ba      	str	r2, [r7, #56]	; 0x38
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	f7fd ff45 	bl	8009afc <move_window>
 800bc72:	4603      	mov	r3, r0
 800bc74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800bc78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d131      	bne.n	800bce4 <f_getfree+0x142>
							p = fs->win;
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	3334      	adds	r3, #52	; 0x34
 800bc84:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800bc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc88:	899b      	ldrh	r3, [r3, #12]
 800bc8a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d10f      	bne.n	800bcb4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800bc94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc96:	f7fd fc81 	bl	800959c <ld_word>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <f_getfree+0x104>
 800bca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bca2:	3301      	adds	r3, #1
 800bca4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	3302      	adds	r3, #2
 800bcaa:	633b      	str	r3, [r7, #48]	; 0x30
 800bcac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcae:	3b02      	subs	r3, #2
 800bcb0:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb2:	e010      	b.n	800bcd6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800bcb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcb6:	f7fd fc89 	bl	80095cc <ld_dword>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d102      	bne.n	800bcca <f_getfree+0x128>
 800bcc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	3304      	adds	r3, #4
 800bcce:	633b      	str	r3, [r7, #48]	; 0x30
 800bcd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd2:	3b04      	subs	r3, #4
 800bcd4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800bcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1bd      	bne.n	800bc5e <f_getfree+0xbc>
 800bce2:	e000      	b.n	800bce6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800bce4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcea:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800bcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcf0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	791a      	ldrb	r2, [r3, #4]
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	f042 0201 	orr.w	r2, r2, #1
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800bd00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3748      	adds	r7, #72	; 0x48
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4613      	mov	r3, r2
 800bd18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bd22:	4b1f      	ldr	r3, [pc, #124]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd24:	7a5b      	ldrb	r3, [r3, #9]
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d131      	bne.n	800bd90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bd2c:	4b1c      	ldr	r3, [pc, #112]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd2e:	7a5b      	ldrb	r3, [r3, #9]
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	461a      	mov	r2, r3
 800bd34:	4b1a      	ldr	r3, [pc, #104]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd36:	2100      	movs	r1, #0
 800bd38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bd3a:	4b19      	ldr	r3, [pc, #100]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd3c:	7a5b      	ldrb	r3, [r3, #9]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	4a17      	ldr	r2, [pc, #92]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bd4a:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd4c:	7a5b      	ldrb	r3, [r3, #9]
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	461a      	mov	r2, r3
 800bd52:	4b13      	ldr	r3, [pc, #76]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd54:	4413      	add	r3, r2
 800bd56:	79fa      	ldrb	r2, [r7, #7]
 800bd58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bd5a:	4b11      	ldr	r3, [pc, #68]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd5c:	7a5b      	ldrb	r3, [r3, #9]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	b2d1      	uxtb	r1, r2
 800bd64:	4a0e      	ldr	r2, [pc, #56]	; (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd66:	7251      	strb	r1, [r2, #9]
 800bd68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bd6a:	7dbb      	ldrb	r3, [r7, #22]
 800bd6c:	3330      	adds	r3, #48	; 0x30
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	3301      	adds	r3, #1
 800bd78:	223a      	movs	r2, #58	; 0x3a
 800bd7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	3302      	adds	r3, #2
 800bd80:	222f      	movs	r2, #47	; 0x2f
 800bd82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	3303      	adds	r3, #3
 800bd88:	2200      	movs	r2, #0
 800bd8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	371c      	adds	r7, #28
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	20000164 	.word	0x20000164

0800bda4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bdae:	2200      	movs	r2, #0
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7ff ffaa 	bl	800bd0c <FATFS_LinkDriverEx>
 800bdb8:	4603      	mov	r3, r0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
	...

0800bdc4 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800bdd8:	4b15      	ldr	r3, [pc, #84]	; (800be30 <FATFS_UnLinkDriverEx+0x6c>)
 800bdda:	7a5b      	ldrb	r3, [r3, #9]
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d01e      	beq.n	800be20 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	3b30      	subs	r3, #48	; 0x30
 800bde8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800bdea:	7bbb      	ldrb	r3, [r7, #14]
 800bdec:	4a10      	ldr	r2, [pc, #64]	; (800be30 <FATFS_UnLinkDriverEx+0x6c>)
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d013      	beq.n	800be20 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
 800bdfa:	4a0d      	ldr	r2, [pc, #52]	; (800be30 <FATFS_UnLinkDriverEx+0x6c>)
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	2200      	movs	r2, #0
 800be02:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	4a0a      	ldr	r2, [pc, #40]	; (800be30 <FATFS_UnLinkDriverEx+0x6c>)
 800be08:	4413      	add	r3, r2
 800be0a:	2200      	movs	r2, #0
 800be0c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800be0e:	4b08      	ldr	r3, [pc, #32]	; (800be30 <FATFS_UnLinkDriverEx+0x6c>)
 800be10:	7a5b      	ldrb	r3, [r3, #9]
 800be12:	b2db      	uxtb	r3, r3
 800be14:	3b01      	subs	r3, #1
 800be16:	b2da      	uxtb	r2, r3
 800be18:	4b05      	ldr	r3, [pc, #20]	; (800be30 <FATFS_UnLinkDriverEx+0x6c>)
 800be1a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800be20:	7bfb      	ldrb	r3, [r7, #15]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	20000164 	.word	0x20000164

0800be34 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800be3c:	2100      	movs	r1, #0
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff ffc0 	bl	800bdc4 <FATFS_UnLinkDriverEx>
 800be44:	4603      	mov	r3, r0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800be58:	1d39      	adds	r1, r7, #4
 800be5a:	f04f 33ff 	mov.w	r3, #4294967295
 800be5e:	2201      	movs	r2, #1
 800be60:	4803      	ldr	r0, [pc, #12]	; (800be70 <__io_putchar+0x20>)
 800be62:	f7f8 f935 	bl	80040d0 <HAL_UART_Transmit>
  return ch;
 800be66:	687b      	ldr	r3, [r7, #4]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	200000a4 	.word	0x200000a4

0800be74 <ETX_MSC_ProcessUsbDevice>:

static FRESULT ETX_MSC_ProcessUsbDevice(void)
{
 800be74:	b5b0      	push	{r4, r5, r7, lr}
 800be76:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
  FATFS     UsbDiskFatFs;                                 /* File system object for USB disk logical drive */
  char      UsbDiskPath[4] = {0};                         /* USB Host logical drive path */
 800be7e:	f241 1310 	movw	r3, #4368	; 0x1110
 800be82:	443b      	add	r3, r7
 800be84:	461a      	mov	r2, r3
 800be86:	2300      	movs	r3, #0
 800be88:	f842 3c44 	str.w	r3, [r2, #-68]
  FIL       file;                                         /* File object */
  FRESULT   res;                                          /* FatFs function common result code */
  uint32_t  total_space, free_space;                      /* Total Space and Free Space */
  DWORD     fre_clust;                                    /* Freee Cluster */
  uint32_t  byteswritten, bytesread;                      /* File write/read counts */
  uint8_t   wr_data[] = "Welcome to EmbeTronicX!!!";      /* Data buffer */
 800be8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800be90:	4a9c      	ldr	r2, [pc, #624]	; (800c104 <ETX_MSC_ProcessUsbDevice+0x290>)
 800be92:	f1a3 049c 	sub.w	r4, r3, #156	; 0x9c
 800be96:	4615      	mov	r5, r2
 800be98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bea0:	c403      	stmia	r4!, {r0, r1}
 800bea2:	8022      	strh	r2, [r4, #0]
  uint8_t   rd_data[100];                                 /* Read buffer */
  char      file_name[] = "temp.txt";                     /* File name */
 800bea4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bea8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800beac:	4a96      	ldr	r2, [pc, #600]	; (800c108 <ETX_MSC_ProcessUsbDevice+0x294>)
 800beae:	ca07      	ldmia	r2, {r0, r1, r2}
 800beb0:	c303      	stmia	r3!, {r0, r1}
 800beb2:	701a      	strb	r2, [r3, #0]

  do
  {
    /* Register the file system object to the FatFs module */
    res = f_mount( &UsbDiskFatFs, (TCHAR const*)UsbDiskPath, 0 );
 800beb4:	4b95      	ldr	r3, [pc, #596]	; (800c10c <ETX_MSC_ProcessUsbDevice+0x298>)
 800beb6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800beba:	f103 0310 	add.w	r3, r3, #16
 800bebe:	443b      	add	r3, r7
 800bec0:	f241 00d0 	movw	r0, #4304	; 0x10d0
 800bec4:	4438      	add	r0, r7
 800bec6:	2200      	movs	r2, #0
 800bec8:	4619      	mov	r1, r3
 800beca:	f7ff f8bd 	bl	800b048 <f_mount>
 800bece:	4603      	mov	r3, r0
 800bed0:	f242 120f 	movw	r2, #8463	; 0x210f
 800bed4:	443a      	add	r2, r7
 800bed6:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK )
 800bed8:	f242 130f 	movw	r3, #8463	; 0x210f
 800bedc:	443b      	add	r3, r7
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f040 80e7 	bne.w	800c0b4 <ETX_MSC_ProcessUsbDevice+0x240>
      /* FatFs Init Error */
      break;
    }

    /* Check the Free Space */
    FATFS *fatFs = &UsbDiskFatFs;
 800bee6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800beea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800beee:	f241 02d0 	movw	r2, #4304	; 0x10d0
 800bef2:	443a      	add	r2, r7
 800bef4:	601a      	str	r2, [r3, #0]
    f_getfree("", &fre_clust, &fatFs);
 800bef6:	4a86      	ldr	r2, [pc, #536]	; (800c110 <ETX_MSC_ProcessUsbDevice+0x29c>)
 800bef8:	f242 1310 	movw	r3, #8464	; 0x2110
 800befc:	4413      	add	r3, r2
 800befe:	19da      	adds	r2, r3, r7
 800bf00:	4b84      	ldr	r3, [pc, #528]	; (800c114 <ETX_MSC_ProcessUsbDevice+0x2a0>)
 800bf02:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800bf06:	f103 0310 	add.w	r3, r3, #16
 800bf0a:	443b      	add	r3, r7
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4882      	ldr	r0, [pc, #520]	; (800c118 <ETX_MSC_ProcessUsbDevice+0x2a4>)
 800bf10:	f7ff fe47 	bl	800bba2 <f_getfree>
    total_space = (uint32_t)((UsbDiskFatFs.n_fatent - 2) * UsbDiskFatFs.csize * 0.5);
 800bf14:	f241 1310 	movw	r3, #4368	; 0x1110
 800bf18:	443b      	add	r3, r7
 800bf1a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800bf1e:	3b02      	subs	r3, #2
 800bf20:	f241 1210 	movw	r2, #4368	; 0x1110
 800bf24:	443a      	add	r2, r7
 800bf26:	f832 2c36 	ldrh.w	r2, [r2, #-54]
 800bf2a:	fb02 f303 	mul.w	r3, r2, r3
 800bf2e:	ee07 3a90 	vmov	s15, r3
 800bf32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bf36:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800bf3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bf42:	ee17 3a90 	vmov	r3, s15
 800bf46:	f242 1208 	movw	r2, #8456	; 0x2108
 800bf4a:	443a      	add	r2, r7
 800bf4c:	6013      	str	r3, [r2, #0]
    free_space = (uint32_t)(fre_clust * UsbDiskFatFs.csize * 0.5);
 800bf4e:	f241 1310 	movw	r3, #4368	; 0x1110
 800bf52:	443b      	add	r3, r7
 800bf54:	f833 3c36 	ldrh.w	r3, [r3, #-54]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bf5e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800bf62:	fb02 f303 	mul.w	r3, r2, r3
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bf6e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800bf72:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf76:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bf7a:	ee17 3a90 	vmov	r3, s15
 800bf7e:	f242 1204 	movw	r2, #8452	; 0x2104
 800bf82:	443a      	add	r2, r7
 800bf84:	6013      	str	r3, [r2, #0]
    printf("USB Device Total Space = %lu MB\n", total_space/1024);
 800bf86:	f242 1308 	movw	r3, #8456	; 0x2108
 800bf8a:	443b      	add	r3, r7
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	0a9b      	lsrs	r3, r3, #10
 800bf90:	4619      	mov	r1, r3
 800bf92:	4862      	ldr	r0, [pc, #392]	; (800c11c <ETX_MSC_ProcessUsbDevice+0x2a8>)
 800bf94:	f000 fdb2 	bl	800cafc <iprintf>
    printf("USB Device Free Space  = %lu MB\n", free_space/1024);
 800bf98:	f242 1304 	movw	r3, #8452	; 0x2104
 800bf9c:	443b      	add	r3, r7
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	0a9b      	lsrs	r3, r3, #10
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	485e      	ldr	r0, [pc, #376]	; (800c120 <ETX_MSC_ProcessUsbDevice+0x2ac>)
 800bfa6:	f000 fda9 	bl	800cafc <iprintf>

    /* Create a new text file with write access */
    res = f_open( &file, file_name, ( FA_CREATE_ALWAYS | FA_WRITE ) );
 800bfaa:	495e      	ldr	r1, [pc, #376]	; (800c124 <ETX_MSC_ProcessUsbDevice+0x2b0>)
 800bfac:	f242 1310 	movw	r3, #8464	; 0x2110
 800bfb0:	440b      	add	r3, r1
 800bfb2:	19d9      	adds	r1, r3, r7
 800bfb4:	4b5c      	ldr	r3, [pc, #368]	; (800c128 <ETX_MSC_ProcessUsbDevice+0x2b4>)
 800bfb6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800bfba:	f103 0310 	add.w	r3, r3, #16
 800bfbe:	443b      	add	r3, r7
 800bfc0:	220a      	movs	r2, #10
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7ff f886 	bl	800b0d4 <f_open>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	f242 120f 	movw	r2, #8463	; 0x210f
 800bfce:	443a      	add	r2, r7
 800bfd0:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK )
 800bfd2:	f242 130f 	movw	r3, #8463	; 0x210f
 800bfd6:	443b      	add	r3, r7
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d16c      	bne.n	800c0b8 <ETX_MSC_ProcessUsbDevice+0x244>
      /* File Open Error */
      break;
    }

    /* Write the data to the text file */
    res = f_write( &file, wr_data, sizeof(wr_data), (void *)&byteswritten );
 800bfde:	4b53      	ldr	r3, [pc, #332]	; (800c12c <ETX_MSC_ProcessUsbDevice+0x2b8>)
 800bfe0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800bfe4:	f103 0310 	add.w	r3, r3, #16
 800bfe8:	443b      	add	r3, r7
 800bfea:	4951      	ldr	r1, [pc, #324]	; (800c130 <ETX_MSC_ProcessUsbDevice+0x2bc>)
 800bfec:	f242 1210 	movw	r2, #8464	; 0x2110
 800bff0:	440a      	add	r2, r1
 800bff2:	19d1      	adds	r1, r2, r7
 800bff4:	484c      	ldr	r0, [pc, #304]	; (800c128 <ETX_MSC_ProcessUsbDevice+0x2b4>)
 800bff6:	f242 1210 	movw	r2, #8464	; 0x2110
 800bffa:	4402      	add	r2, r0
 800bffc:	19d0      	adds	r0, r2, r7
 800bffe:	221a      	movs	r2, #26
 800c000:	f7ff fb93 	bl	800b72a <f_write>
 800c004:	4603      	mov	r3, r0
 800c006:	f242 120f 	movw	r2, #8463	; 0x210f
 800c00a:	443a      	add	r2, r7
 800c00c:	7013      	strb	r3, [r2, #0]

    /* Close the opened file */
    f_close( &file );
 800c00e:	4b46      	ldr	r3, [pc, #280]	; (800c128 <ETX_MSC_ProcessUsbDevice+0x2b4>)
 800c010:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800c014:	f103 0310 	add.w	r3, r3, #16
 800c018:	443b      	add	r3, r7
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7ff fd97 	bl	800bb4e <f_close>

    if( res != FR_OK )
 800c020:	f242 130f 	movw	r3, #8463	; 0x210f
 800c024:	443b      	add	r3, r7
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d147      	bne.n	800c0bc <ETX_MSC_ProcessUsbDevice+0x248>
    {
      /* File write Error */
      break;
    }

    printf("Data written to the USD Device\n");
 800c02c:	4841      	ldr	r0, [pc, #260]	; (800c134 <ETX_MSC_ProcessUsbDevice+0x2c0>)
 800c02e:	f000 fdd3 	bl	800cbd8 <puts>

    /* Open the text file object with read access */
    res = f_open( &file, file_name, FA_READ );
 800c032:	493c      	ldr	r1, [pc, #240]	; (800c124 <ETX_MSC_ProcessUsbDevice+0x2b0>)
 800c034:	f242 1310 	movw	r3, #8464	; 0x2110
 800c038:	440b      	add	r3, r1
 800c03a:	19d9      	adds	r1, r3, r7
 800c03c:	4b3a      	ldr	r3, [pc, #232]	; (800c128 <ETX_MSC_ProcessUsbDevice+0x2b4>)
 800c03e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800c042:	f103 0310 	add.w	r3, r3, #16
 800c046:	443b      	add	r3, r7
 800c048:	2201      	movs	r2, #1
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff f842 	bl	800b0d4 <f_open>
 800c050:	4603      	mov	r3, r0
 800c052:	f242 120f 	movw	r2, #8463	; 0x210f
 800c056:	443a      	add	r2, r7
 800c058:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK )
 800c05a:	f242 130f 	movw	r3, #8463	; 0x210f
 800c05e:	443b      	add	r3, r7
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d12c      	bne.n	800c0c0 <ETX_MSC_ProcessUsbDevice+0x24c>
      /* File Open Error */
      break;
    }

    /* Read data from the file */
    res = f_read( &file, rd_data, sizeof(wr_data), (void *)&bytesread);
 800c066:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c06a:	f107 0110 	add.w	r1, r7, #16
 800c06e:	482e      	ldr	r0, [pc, #184]	; (800c128 <ETX_MSC_ProcessUsbDevice+0x2b4>)
 800c070:	f242 1210 	movw	r2, #8464	; 0x2110
 800c074:	4402      	add	r2, r0
 800c076:	19d0      	adds	r0, r2, r7
 800c078:	221a      	movs	r2, #26
 800c07a:	f7ff f9f7 	bl	800b46c <f_read>
 800c07e:	4603      	mov	r3, r0
 800c080:	f242 120f 	movw	r2, #8463	; 0x210f
 800c084:	443a      	add	r2, r7
 800c086:	7013      	strb	r3, [r2, #0]

    /* Close the file */
    f_close(&file);
 800c088:	4b27      	ldr	r3, [pc, #156]	; (800c128 <ETX_MSC_ProcessUsbDevice+0x2b4>)
 800c08a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800c08e:	f103 0310 	add.w	r3, r3, #16
 800c092:	443b      	add	r3, r7
 800c094:	4618      	mov	r0, r3
 800c096:	f7ff fd5a 	bl	800bb4e <f_close>

    if(res != FR_OK)
 800c09a:	f242 130f 	movw	r3, #8463	; 0x210f
 800c09e:	443b      	add	r3, r7
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10e      	bne.n	800c0c4 <ETX_MSC_ProcessUsbDevice+0x250>
      /* File Read Error */
      break;
    }

    /* Print the data */
    printf("Read Data : %s\n", rd_data);
 800c0a6:	f107 0310 	add.w	r3, r7, #16
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	4822      	ldr	r0, [pc, #136]	; (800c138 <ETX_MSC_ProcessUsbDevice+0x2c4>)
 800c0ae:	f000 fd25 	bl	800cafc <iprintf>
 800c0b2:	e008      	b.n	800c0c6 <ETX_MSC_ProcessUsbDevice+0x252>
      break;
 800c0b4:	bf00      	nop
 800c0b6:	e006      	b.n	800c0c6 <ETX_MSC_ProcessUsbDevice+0x252>
      break;
 800c0b8:	bf00      	nop
 800c0ba:	e004      	b.n	800c0c6 <ETX_MSC_ProcessUsbDevice+0x252>
      break;
 800c0bc:	bf00      	nop
 800c0be:	e002      	b.n	800c0c6 <ETX_MSC_ProcessUsbDevice+0x252>
      break;
 800c0c0:	bf00      	nop
 800c0c2:	e000      	b.n	800c0c6 <ETX_MSC_ProcessUsbDevice+0x252>
      break;
 800c0c4:	bf00      	nop

  } while ( 0 );

  /* Unmount the device */
  f_mount(NULL, UsbDiskPath, 0);
 800c0c6:	4b11      	ldr	r3, [pc, #68]	; (800c10c <ETX_MSC_ProcessUsbDevice+0x298>)
 800c0c8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800c0cc:	f103 0310 	add.w	r3, r3, #16
 800c0d0:	443b      	add	r3, r7
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	f7fe ffb6 	bl	800b048 <f_mount>

  /* Unlink the USB disk driver */
  FATFS_UnLinkDriver(UsbDiskPath);
 800c0dc:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <ETX_MSC_ProcessUsbDevice+0x298>)
 800c0de:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800c0e2:	f103 0310 	add.w	r3, r3, #16
 800c0e6:	443b      	add	r3, r7
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7ff fea3 	bl	800be34 <FATFS_UnLinkDriver>

  return res;
 800c0ee:	f242 130f 	movw	r3, #8463	; 0x210f
 800c0f2:	443b      	add	r3, r7
 800c0f4:	781b      	ldrb	r3, [r3, #0]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bdb0      	pop	{r4, r5, r7, pc}
 800c102:	bf00      	nop
 800c104:	0800dfe4 	.word	0x0800dfe4
 800c108:	0800e000 	.word	0x0800e000
 800c10c:	ffffefbc 	.word	0xffffefbc
 800c110:	ffffdef0 	.word	0xffffdef0
 800c114:	ffffdf88 	.word	0xffffdf88
 800c118:	0800df68 	.word	0x0800df68
 800c11c:	0800df6c 	.word	0x0800df6c
 800c120:	0800df90 	.word	0x0800df90
 800c124:	ffffdef4 	.word	0xffffdef4
 800c128:	ffffdf8c 	.word	0xffffdf8c
 800c12c:	ffffdf84 	.word	0xffffdf84
 800c130:	ffffdf64 	.word	0xffffdf64
 800c134:	0800dfb4 	.word	0x0800dfb4
 800c138:	0800dfd4 	.word	0x0800dfd4

0800c13c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c140:	2201      	movs	r2, #1
 800c142:	490e      	ldr	r1, [pc, #56]	; (800c17c <MX_USB_HOST_Init+0x40>)
 800c144:	480e      	ldr	r0, [pc, #56]	; (800c180 <MX_USB_HOST_Init+0x44>)
 800c146:	f7fb fa9d 	bl	8007684 <USBH_Init>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c150:	f7f4 fb78 	bl	8000844 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c154:	490b      	ldr	r1, [pc, #44]	; (800c184 <MX_USB_HOST_Init+0x48>)
 800c156:	480a      	ldr	r0, [pc, #40]	; (800c180 <MX_USB_HOST_Init+0x44>)
 800c158:	f7fb fb50 	bl	80077fc <USBH_RegisterClass>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c162:	f7f4 fb6f 	bl	8000844 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c166:	4806      	ldr	r0, [pc, #24]	; (800c180 <MX_USB_HOST_Init+0x44>)
 800c168:	f7fb fc36 	bl	80079d8 <USBH_Start>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d001      	beq.n	800c176 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c172:	f7f4 fb67 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c176:	bf00      	nop
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	0800c19d 	.word	0x0800c19d
 800c180:	20000170 	.word	0x20000170
 800c184:	2000000c 	.word	0x2000000c

0800c188 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c18c:	4802      	ldr	r0, [pc, #8]	; (800c198 <MX_USB_HOST_Process+0x10>)
 800c18e:	f7fb fc33 	bl	80079f8 <USBH_Process>
}
 800c192:	bf00      	nop
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20000170 	.word	0x20000170

0800c19c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c1a8:	78fb      	ldrb	r3, [r7, #3]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d821      	bhi.n	800c1f4 <USBH_UserProcess+0x58>
 800c1b0:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <USBH_UserProcess+0x1c>)
 800c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b6:	bf00      	nop
 800c1b8:	0800c1f5 	.word	0x0800c1f5
 800c1bc:	0800c1d5 	.word	0x0800c1d5
 800c1c0:	0800c1f5 	.word	0x0800c1f5
 800c1c4:	0800c1ed 	.word	0x0800c1ed
 800c1c8:	0800c1cd 	.word	0x0800c1cd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c1cc:	4b0d      	ldr	r3, [pc, #52]	; (800c204 <USBH_UserProcess+0x68>)
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	701a      	strb	r2, [r3, #0]
  break;
 800c1d2:	e012      	b.n	800c1fa <USBH_UserProcess+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c1d4:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <USBH_UserProcess+0x68>)
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	701a      	strb	r2, [r3, #0]
  if( ETX_MSC_ProcessUsbDevice() != FR_OK )
 800c1da:	f7ff fe4b 	bl	800be74 <ETX_MSC_ProcessUsbDevice>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d009      	beq.n	800c1f8 <USBH_UserProcess+0x5c>
  {
    printf("USB Device Process Error\n");
 800c1e4:	4808      	ldr	r0, [pc, #32]	; (800c208 <USBH_UserProcess+0x6c>)
 800c1e6:	f000 fcf7 	bl	800cbd8 <puts>
    /* Error : Hang Here */
    while(1);
 800c1ea:	e7fe      	b.n	800c1ea <USBH_UserProcess+0x4e>
  }
  break;

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c1ec:	4b05      	ldr	r3, [pc, #20]	; (800c204 <USBH_UserProcess+0x68>)
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	701a      	strb	r2, [r3, #0]
  break;
 800c1f2:	e002      	b.n	800c1fa <USBH_UserProcess+0x5e>

  default:
  break;
 800c1f4:	bf00      	nop
 800c1f6:	e000      	b.n	800c1fa <USBH_UserProcess+0x5e>
  break;
 800c1f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c1fa:	bf00      	nop
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20000548 	.word	0x20000548
 800c208:	0800e00c 	.word	0x0800e00c

0800c20c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b0ae      	sub	sp, #184	; 0xb8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c214:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	605a      	str	r2, [r3, #4]
 800c21e:	609a      	str	r2, [r3, #8]
 800c220:	60da      	str	r2, [r3, #12]
 800c222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c224:	f107 0314 	add.w	r3, r7, #20
 800c228:	2290      	movs	r2, #144	; 0x90
 800c22a:	2100      	movs	r1, #0
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fdb3 	bl	800cd98 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c23a:	d161      	bne.n	800c300 <HAL_HCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c23c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c240:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800c242:	2300      	movs	r3, #0
 800c244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c248:	f107 0314 	add.w	r3, r7, #20
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7f7 fac9 	bl	80037e4 <HAL_RCCEx_PeriphCLKConfig>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d001      	beq.n	800c25c <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 800c258:	f7f4 faf4 	bl	8000844 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c25c:	4b2a      	ldr	r3, [pc, #168]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c260:	4a29      	ldr	r2, [pc, #164]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c262:	f043 0301 	orr.w	r3, r3, #1
 800c266:	6313      	str	r3, [r2, #48]	; 0x30
 800c268:	4b27      	ldr	r3, [pc, #156]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26c:	f003 0301 	and.w	r3, r3, #1
 800c270:	613b      	str	r3, [r7, #16]
 800c272:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c274:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c278:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c27c:	2300      	movs	r3, #0
 800c27e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c282:	2300      	movs	r3, #0
 800c284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c288:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c28c:	4619      	mov	r1, r3
 800c28e:	481f      	ldr	r0, [pc, #124]	; (800c30c <HAL_HCD_MspInit+0x100>)
 800c290:	f7f4 fe84 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c294:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c298:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c29c:	2302      	movs	r3, #2
 800c29e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2ae:	230a      	movs	r3, #10
 800c2b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4814      	ldr	r0, [pc, #80]	; (800c30c <HAL_HCD_MspInit+0x100>)
 800c2bc:	f7f4 fe6e 	bl	8000f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c2c0:	4b11      	ldr	r3, [pc, #68]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2c4:	4a10      	ldr	r2, [pc, #64]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ca:	6353      	str	r3, [r2, #52]	; 0x34
 800c2cc:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2dc:	4a0a      	ldr	r2, [pc, #40]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c2de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2e2:	6453      	str	r3, [r2, #68]	; 0x44
 800c2e4:	4b08      	ldr	r3, [pc, #32]	; (800c308 <HAL_HCD_MspInit+0xfc>)
 800c2e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2ec:	60bb      	str	r3, [r7, #8]
 800c2ee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	2043      	movs	r0, #67	; 0x43
 800c2f6:	f7f4 fd9e 	bl	8000e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c2fa:	2043      	movs	r0, #67	; 0x43
 800c2fc:	f7f4 fdb7 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c300:	bf00      	nop
 800c302:	37b8      	adds	r7, #184	; 0xb8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	40023800 	.word	0x40023800
 800c30c:	40020000 	.word	0x40020000

0800c310 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fc f89b 	bl	800845a <USBH_LL_IncTimer>
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fc f8d3 	bl	80084e6 <USBH_LL_Connect>
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c356:	4618      	mov	r0, r3
 800c358:	f7fc f8dc 	bl	8008514 <USBH_LL_Disconnect>
}
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
 800c370:	4613      	mov	r3, r2
 800c372:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fc f88d 	bl	80084ae <USBH_LL_PortEnabled>
}
 800c394:	bf00      	nop
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fc f88d 	bl	80084ca <USBH_LL_PortDisabled>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d12a      	bne.n	800c420 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c3ca:	4a18      	ldr	r2, [pc, #96]	; (800c42c <USBH_LL_Init+0x74>)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4a15      	ldr	r2, [pc, #84]	; (800c42c <USBH_LL_Init+0x74>)
 800c3d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c3da:	4b14      	ldr	r3, [pc, #80]	; (800c42c <USBH_LL_Init+0x74>)
 800c3dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c3e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c3e2:	4b12      	ldr	r3, [pc, #72]	; (800c42c <USBH_LL_Init+0x74>)
 800c3e4:	2208      	movs	r2, #8
 800c3e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c3e8:	4b10      	ldr	r3, [pc, #64]	; (800c42c <USBH_LL_Init+0x74>)
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <USBH_LL_Init+0x74>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c3f4:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <USBH_LL_Init+0x74>)
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c3fa:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <USBH_LL_Init+0x74>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c400:	480a      	ldr	r0, [pc, #40]	; (800c42c <USBH_LL_Init+0x74>)
 800c402:	f7f4 ff90 	bl	8001326 <HAL_HCD_Init>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c40c:	f7f4 fa1a 	bl	8000844 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c410:	4806      	ldr	r0, [pc, #24]	; (800c42c <USBH_LL_Init+0x74>)
 800c412:	f7f5 fb74 	bl	8001afe <HAL_HCD_GetCurrentFrame>
 800c416:	4603      	mov	r3, r0
 800c418:	4619      	mov	r1, r3
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7fc f80e 	bl	800843c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	2000054c 	.word	0x2000054c

0800c430 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c438:	2300      	movs	r3, #0
 800c43a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c446:	4618      	mov	r0, r3
 800c448:	f7f5 fae3 	bl	8001a12 <HAL_HCD_Start>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	4618      	mov	r0, r3
 800c454:	f000 f98c 	bl	800c770 <USBH_Get_USB_Status>
 800c458:	4603      	mov	r3, r0
 800c45a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c45c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b084      	sub	sp, #16
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c472:	2300      	movs	r3, #0
 800c474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f5 faeb 	bl	8001a58 <HAL_HCD_Stop>
 800c482:	4603      	mov	r3, r0
 800c484:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	4618      	mov	r0, r3
 800c48a:	f000 f971 	bl	800c770 <USBH_Get_USB_Status>
 800c48e:	4603      	mov	r3, r0
 800c490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c492:	7bbb      	ldrb	r3, [r7, #14]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7f5 fb33 	bl	8001b1a <HAL_HCD_GetCurrentSpeed>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d00c      	beq.n	800c4d4 <USBH_LL_GetSpeed+0x38>
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d80d      	bhi.n	800c4da <USBH_LL_GetSpeed+0x3e>
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d002      	beq.n	800c4c8 <USBH_LL_GetSpeed+0x2c>
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d003      	beq.n	800c4ce <USBH_LL_GetSpeed+0x32>
 800c4c6:	e008      	b.n	800c4da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c4cc:	e008      	b.n	800c4e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d2:	e005      	b.n	800c4e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d8:	e002      	b.n	800c4e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4de:	bf00      	nop
  }
  return  speed;
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c500:	4618      	mov	r0, r3
 800c502:	f7f5 fac6 	bl	8001a92 <HAL_HCD_ResetPort>
 800c506:	4603      	mov	r3, r0
 800c508:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 f92f 	bl	800c770 <USBH_Get_USB_Status>
 800c512:	4603      	mov	r3, r0
 800c514:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c516:	7bbb      	ldrb	r3, [r7, #14]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	460b      	mov	r3, r1
 800c52a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c532:	78fa      	ldrb	r2, [r7, #3]
 800c534:	4611      	mov	r1, r2
 800c536:	4618      	mov	r0, r3
 800c538:	f7f5 facd 	bl	8001ad6 <HAL_HCD_HC_GetXferCount>
 800c53c:	4603      	mov	r3, r0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c546:	b590      	push	{r4, r7, lr}
 800c548:	b089      	sub	sp, #36	; 0x24
 800c54a:	af04      	add	r7, sp, #16
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	4608      	mov	r0, r1
 800c550:	4611      	mov	r1, r2
 800c552:	461a      	mov	r2, r3
 800c554:	4603      	mov	r3, r0
 800c556:	70fb      	strb	r3, [r7, #3]
 800c558:	460b      	mov	r3, r1
 800c55a:	70bb      	strb	r3, [r7, #2]
 800c55c:	4613      	mov	r3, r2
 800c55e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c56e:	787c      	ldrb	r4, [r7, #1]
 800c570:	78ba      	ldrb	r2, [r7, #2]
 800c572:	78f9      	ldrb	r1, [r7, #3]
 800c574:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c576:	9302      	str	r3, [sp, #8]
 800c578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	4623      	mov	r3, r4
 800c586:	f7f4 ff30 	bl	80013ea <HAL_HCD_HC_Init>
 800c58a:	4603      	mov	r3, r0
 800c58c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	4618      	mov	r0, r3
 800c592:	f000 f8ed 	bl	800c770 <USBH_Get_USB_Status>
 800c596:	4603      	mov	r3, r0
 800c598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd90      	pop	{r4, r7, pc}

0800c5a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5be:	78fa      	ldrb	r2, [r7, #3]
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f4 ffa0 	bl	8001508 <HAL_HCD_HC_Halt>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 f8ce 	bl	800c770 <USBH_Get_USB_Status>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c5e2:	b590      	push	{r4, r7, lr}
 800c5e4:	b089      	sub	sp, #36	; 0x24
 800c5e6:	af04      	add	r7, sp, #16
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	70fb      	strb	r3, [r7, #3]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70bb      	strb	r3, [r7, #2]
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c60a:	787c      	ldrb	r4, [r7, #1]
 800c60c:	78ba      	ldrb	r2, [r7, #2]
 800c60e:	78f9      	ldrb	r1, [r7, #3]
 800c610:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c614:	9303      	str	r3, [sp, #12]
 800c616:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c618:	9302      	str	r3, [sp, #8]
 800c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61c:	9301      	str	r3, [sp, #4]
 800c61e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	4623      	mov	r3, r4
 800c626:	f7f4 ff93 	bl	8001550 <HAL_HCD_HC_SubmitRequest>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	4618      	mov	r0, r3
 800c632:	f000 f89d 	bl	800c770 <USBH_Get_USB_Status>
 800c636:	4603      	mov	r3, r0
 800c638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	bd90      	pop	{r4, r7, pc}

0800c644 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	460b      	mov	r3, r1
 800c64e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c656:	78fa      	ldrb	r2, [r7, #3]
 800c658:	4611      	mov	r1, r2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7f5 fa27 	bl	8001aae <HAL_HCD_HC_GetURBState>
 800c660:	4603      	mov	r3, r0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b082      	sub	sp, #8
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	460b      	mov	r3, r1
 800c674:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d103      	bne.n	800c688 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	4618      	mov	r0, r3
 800c684:	f000 f8a0 	bl	800c7c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c688:	20c8      	movs	r0, #200	; 0xc8
 800c68a:	f7f4 fad5 	bl	8000c38 <HAL_Delay>
  return USBH_OK;
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70fb      	strb	r3, [r7, #3]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c6b0:	78fb      	ldrb	r3, [r7, #3]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	212c      	movs	r1, #44	; 0x2c
 800c6b6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ba:	4413      	add	r3, r2
 800c6bc:	333b      	adds	r3, #59	; 0x3b
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d009      	beq.n	800c6d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c6c4:	78fb      	ldrb	r3, [r7, #3]
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	212c      	movs	r1, #44	; 0x2c
 800c6ca:	fb01 f303 	mul.w	r3, r1, r3
 800c6ce:	4413      	add	r3, r2
 800c6d0:	3354      	adds	r3, #84	; 0x54
 800c6d2:	78ba      	ldrb	r2, [r7, #2]
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	e008      	b.n	800c6ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c6d8:	78fb      	ldrb	r3, [r7, #3]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	212c      	movs	r1, #44	; 0x2c
 800c6de:	fb01 f303 	mul.w	r3, r1, r3
 800c6e2:	4413      	add	r3, r2
 800c6e4:	3355      	adds	r3, #85	; 0x55
 800c6e6:	78ba      	ldrb	r2, [r7, #2]
 800c6e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	460b      	mov	r3, r1
 800c702:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c70e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c710:	78fb      	ldrb	r3, [r7, #3]
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	212c      	movs	r1, #44	; 0x2c
 800c716:	fb01 f303 	mul.w	r3, r1, r3
 800c71a:	4413      	add	r3, r2
 800c71c:	333b      	adds	r3, #59	; 0x3b
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d009      	beq.n	800c738 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c724:	78fb      	ldrb	r3, [r7, #3]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	212c      	movs	r1, #44	; 0x2c
 800c72a:	fb01 f303 	mul.w	r3, r1, r3
 800c72e:	4413      	add	r3, r2
 800c730:	3354      	adds	r3, #84	; 0x54
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	73fb      	strb	r3, [r7, #15]
 800c736:	e008      	b.n	800c74a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c738:	78fb      	ldrb	r3, [r7, #3]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	212c      	movs	r1, #44	; 0x2c
 800c73e:	fb01 f303 	mul.w	r3, r1, r3
 800c742:	4413      	add	r3, r2
 800c744:	3355      	adds	r3, #85	; 0x55
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7f4 fa69 	bl	8000c38 <HAL_Delay>
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	2b03      	cmp	r3, #3
 800c782:	d817      	bhi.n	800c7b4 <USBH_Get_USB_Status+0x44>
 800c784:	a201      	add	r2, pc, #4	; (adr r2, 800c78c <USBH_Get_USB_Status+0x1c>)
 800c786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78a:	bf00      	nop
 800c78c:	0800c79d 	.word	0x0800c79d
 800c790:	0800c7a3 	.word	0x0800c7a3
 800c794:	0800c7a9 	.word	0x0800c7a9
 800c798:	0800c7af 	.word	0x0800c7af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a0:	e00b      	b.n	800c7ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a6:	e008      	b.n	800c7ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ac:	e005      	b.n	800c7ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b2:	e002      	b.n	800c7ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b8:	bf00      	nop
  }
  return usb_status;
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c7d2:	79fb      	ldrb	r3, [r7, #7]
 800c7d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c7d6:	79fb      	ldrb	r3, [r7, #7]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d102      	bne.n	800c7e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	73fb      	strb	r3, [r7, #15]
 800c7e0:	e001      	b.n	800c7e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	2140      	movs	r1, #64	; 0x40
 800c7ec:	4803      	ldr	r0, [pc, #12]	; (800c7fc <MX_DriverVbusFS+0x34>)
 800c7ee:	f7f4 fd81 	bl	80012f4 <HAL_GPIO_WritePin>
}
 800c7f2:	bf00      	nop
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	40021800 	.word	0x40021800

0800c800 <malloc>:
 800c800:	4b02      	ldr	r3, [pc, #8]	; (800c80c <malloc+0xc>)
 800c802:	4601      	mov	r1, r0
 800c804:	6818      	ldr	r0, [r3, #0]
 800c806:	f000 b82b 	b.w	800c860 <_malloc_r>
 800c80a:	bf00      	nop
 800c80c:	20000084 	.word	0x20000084

0800c810 <free>:
 800c810:	4b02      	ldr	r3, [pc, #8]	; (800c81c <free+0xc>)
 800c812:	4601      	mov	r1, r0
 800c814:	6818      	ldr	r0, [r3, #0]
 800c816:	f000 bb59 	b.w	800cecc <_free_r>
 800c81a:	bf00      	nop
 800c81c:	20000084 	.word	0x20000084

0800c820 <sbrk_aligned>:
 800c820:	b570      	push	{r4, r5, r6, lr}
 800c822:	4e0e      	ldr	r6, [pc, #56]	; (800c85c <sbrk_aligned+0x3c>)
 800c824:	460c      	mov	r4, r1
 800c826:	6831      	ldr	r1, [r6, #0]
 800c828:	4605      	mov	r5, r0
 800c82a:	b911      	cbnz	r1, 800c832 <sbrk_aligned+0x12>
 800c82c:	f000 faf0 	bl	800ce10 <_sbrk_r>
 800c830:	6030      	str	r0, [r6, #0]
 800c832:	4621      	mov	r1, r4
 800c834:	4628      	mov	r0, r5
 800c836:	f000 faeb 	bl	800ce10 <_sbrk_r>
 800c83a:	1c43      	adds	r3, r0, #1
 800c83c:	d00a      	beq.n	800c854 <sbrk_aligned+0x34>
 800c83e:	1cc4      	adds	r4, r0, #3
 800c840:	f024 0403 	bic.w	r4, r4, #3
 800c844:	42a0      	cmp	r0, r4
 800c846:	d007      	beq.n	800c858 <sbrk_aligned+0x38>
 800c848:	1a21      	subs	r1, r4, r0
 800c84a:	4628      	mov	r0, r5
 800c84c:	f000 fae0 	bl	800ce10 <_sbrk_r>
 800c850:	3001      	adds	r0, #1
 800c852:	d101      	bne.n	800c858 <sbrk_aligned+0x38>
 800c854:	f04f 34ff 	mov.w	r4, #4294967295
 800c858:	4620      	mov	r0, r4
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	20000854 	.word	0x20000854

0800c860 <_malloc_r>:
 800c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c864:	1ccd      	adds	r5, r1, #3
 800c866:	f025 0503 	bic.w	r5, r5, #3
 800c86a:	3508      	adds	r5, #8
 800c86c:	2d0c      	cmp	r5, #12
 800c86e:	bf38      	it	cc
 800c870:	250c      	movcc	r5, #12
 800c872:	2d00      	cmp	r5, #0
 800c874:	4607      	mov	r7, r0
 800c876:	db01      	blt.n	800c87c <_malloc_r+0x1c>
 800c878:	42a9      	cmp	r1, r5
 800c87a:	d905      	bls.n	800c888 <_malloc_r+0x28>
 800c87c:	230c      	movs	r3, #12
 800c87e:	603b      	str	r3, [r7, #0]
 800c880:	2600      	movs	r6, #0
 800c882:	4630      	mov	r0, r6
 800c884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c888:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c95c <_malloc_r+0xfc>
 800c88c:	f000 f868 	bl	800c960 <__malloc_lock>
 800c890:	f8d8 3000 	ldr.w	r3, [r8]
 800c894:	461c      	mov	r4, r3
 800c896:	bb5c      	cbnz	r4, 800c8f0 <_malloc_r+0x90>
 800c898:	4629      	mov	r1, r5
 800c89a:	4638      	mov	r0, r7
 800c89c:	f7ff ffc0 	bl	800c820 <sbrk_aligned>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	d155      	bne.n	800c952 <_malloc_r+0xf2>
 800c8a6:	f8d8 4000 	ldr.w	r4, [r8]
 800c8aa:	4626      	mov	r6, r4
 800c8ac:	2e00      	cmp	r6, #0
 800c8ae:	d145      	bne.n	800c93c <_malloc_r+0xdc>
 800c8b0:	2c00      	cmp	r4, #0
 800c8b2:	d048      	beq.n	800c946 <_malloc_r+0xe6>
 800c8b4:	6823      	ldr	r3, [r4, #0]
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	eb04 0903 	add.w	r9, r4, r3
 800c8be:	f000 faa7 	bl	800ce10 <_sbrk_r>
 800c8c2:	4581      	cmp	r9, r0
 800c8c4:	d13f      	bne.n	800c946 <_malloc_r+0xe6>
 800c8c6:	6821      	ldr	r1, [r4, #0]
 800c8c8:	1a6d      	subs	r5, r5, r1
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	4638      	mov	r0, r7
 800c8ce:	f7ff ffa7 	bl	800c820 <sbrk_aligned>
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	d037      	beq.n	800c946 <_malloc_r+0xe6>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	442b      	add	r3, r5
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d038      	beq.n	800c956 <_malloc_r+0xf6>
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	42a2      	cmp	r2, r4
 800c8e8:	d12b      	bne.n	800c942 <_malloc_r+0xe2>
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	605a      	str	r2, [r3, #4]
 800c8ee:	e00f      	b.n	800c910 <_malloc_r+0xb0>
 800c8f0:	6822      	ldr	r2, [r4, #0]
 800c8f2:	1b52      	subs	r2, r2, r5
 800c8f4:	d41f      	bmi.n	800c936 <_malloc_r+0xd6>
 800c8f6:	2a0b      	cmp	r2, #11
 800c8f8:	d917      	bls.n	800c92a <_malloc_r+0xca>
 800c8fa:	1961      	adds	r1, r4, r5
 800c8fc:	42a3      	cmp	r3, r4
 800c8fe:	6025      	str	r5, [r4, #0]
 800c900:	bf18      	it	ne
 800c902:	6059      	strne	r1, [r3, #4]
 800c904:	6863      	ldr	r3, [r4, #4]
 800c906:	bf08      	it	eq
 800c908:	f8c8 1000 	streq.w	r1, [r8]
 800c90c:	5162      	str	r2, [r4, r5]
 800c90e:	604b      	str	r3, [r1, #4]
 800c910:	4638      	mov	r0, r7
 800c912:	f104 060b 	add.w	r6, r4, #11
 800c916:	f000 f829 	bl	800c96c <__malloc_unlock>
 800c91a:	f026 0607 	bic.w	r6, r6, #7
 800c91e:	1d23      	adds	r3, r4, #4
 800c920:	1af2      	subs	r2, r6, r3
 800c922:	d0ae      	beq.n	800c882 <_malloc_r+0x22>
 800c924:	1b9b      	subs	r3, r3, r6
 800c926:	50a3      	str	r3, [r4, r2]
 800c928:	e7ab      	b.n	800c882 <_malloc_r+0x22>
 800c92a:	42a3      	cmp	r3, r4
 800c92c:	6862      	ldr	r2, [r4, #4]
 800c92e:	d1dd      	bne.n	800c8ec <_malloc_r+0x8c>
 800c930:	f8c8 2000 	str.w	r2, [r8]
 800c934:	e7ec      	b.n	800c910 <_malloc_r+0xb0>
 800c936:	4623      	mov	r3, r4
 800c938:	6864      	ldr	r4, [r4, #4]
 800c93a:	e7ac      	b.n	800c896 <_malloc_r+0x36>
 800c93c:	4634      	mov	r4, r6
 800c93e:	6876      	ldr	r6, [r6, #4]
 800c940:	e7b4      	b.n	800c8ac <_malloc_r+0x4c>
 800c942:	4613      	mov	r3, r2
 800c944:	e7cc      	b.n	800c8e0 <_malloc_r+0x80>
 800c946:	230c      	movs	r3, #12
 800c948:	603b      	str	r3, [r7, #0]
 800c94a:	4638      	mov	r0, r7
 800c94c:	f000 f80e 	bl	800c96c <__malloc_unlock>
 800c950:	e797      	b.n	800c882 <_malloc_r+0x22>
 800c952:	6025      	str	r5, [r4, #0]
 800c954:	e7dc      	b.n	800c910 <_malloc_r+0xb0>
 800c956:	605b      	str	r3, [r3, #4]
 800c958:	deff      	udf	#255	; 0xff
 800c95a:	bf00      	nop
 800c95c:	20000850 	.word	0x20000850

0800c960 <__malloc_lock>:
 800c960:	4801      	ldr	r0, [pc, #4]	; (800c968 <__malloc_lock+0x8>)
 800c962:	f000 baa2 	b.w	800ceaa <__retarget_lock_acquire_recursive>
 800c966:	bf00      	nop
 800c968:	20000998 	.word	0x20000998

0800c96c <__malloc_unlock>:
 800c96c:	4801      	ldr	r0, [pc, #4]	; (800c974 <__malloc_unlock+0x8>)
 800c96e:	f000 ba9d 	b.w	800ceac <__retarget_lock_release_recursive>
 800c972:	bf00      	nop
 800c974:	20000998 	.word	0x20000998

0800c978 <std>:
 800c978:	2300      	movs	r3, #0
 800c97a:	b510      	push	{r4, lr}
 800c97c:	4604      	mov	r4, r0
 800c97e:	e9c0 3300 	strd	r3, r3, [r0]
 800c982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c986:	6083      	str	r3, [r0, #8]
 800c988:	8181      	strh	r1, [r0, #12]
 800c98a:	6643      	str	r3, [r0, #100]	; 0x64
 800c98c:	81c2      	strh	r2, [r0, #14]
 800c98e:	6183      	str	r3, [r0, #24]
 800c990:	4619      	mov	r1, r3
 800c992:	2208      	movs	r2, #8
 800c994:	305c      	adds	r0, #92	; 0x5c
 800c996:	f000 f9ff 	bl	800cd98 <memset>
 800c99a:	4b0d      	ldr	r3, [pc, #52]	; (800c9d0 <std+0x58>)
 800c99c:	6263      	str	r3, [r4, #36]	; 0x24
 800c99e:	4b0d      	ldr	r3, [pc, #52]	; (800c9d4 <std+0x5c>)
 800c9a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9a2:	4b0d      	ldr	r3, [pc, #52]	; (800c9d8 <std+0x60>)
 800c9a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9a6:	4b0d      	ldr	r3, [pc, #52]	; (800c9dc <std+0x64>)
 800c9a8:	6323      	str	r3, [r4, #48]	; 0x30
 800c9aa:	4b0d      	ldr	r3, [pc, #52]	; (800c9e0 <std+0x68>)
 800c9ac:	6224      	str	r4, [r4, #32]
 800c9ae:	429c      	cmp	r4, r3
 800c9b0:	d006      	beq.n	800c9c0 <std+0x48>
 800c9b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c9b6:	4294      	cmp	r4, r2
 800c9b8:	d002      	beq.n	800c9c0 <std+0x48>
 800c9ba:	33d0      	adds	r3, #208	; 0xd0
 800c9bc:	429c      	cmp	r4, r3
 800c9be:	d105      	bne.n	800c9cc <std+0x54>
 800c9c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9c8:	f000 ba6e 	b.w	800cea8 <__retarget_lock_init_recursive>
 800c9cc:	bd10      	pop	{r4, pc}
 800c9ce:	bf00      	nop
 800c9d0:	0800cbe9 	.word	0x0800cbe9
 800c9d4:	0800cc0b 	.word	0x0800cc0b
 800c9d8:	0800cc43 	.word	0x0800cc43
 800c9dc:	0800cc67 	.word	0x0800cc67
 800c9e0:	20000858 	.word	0x20000858

0800c9e4 <stdio_exit_handler>:
 800c9e4:	4a02      	ldr	r2, [pc, #8]	; (800c9f0 <stdio_exit_handler+0xc>)
 800c9e6:	4903      	ldr	r1, [pc, #12]	; (800c9f4 <stdio_exit_handler+0x10>)
 800c9e8:	4803      	ldr	r0, [pc, #12]	; (800c9f8 <stdio_exit_handler+0x14>)
 800c9ea:	f000 b869 	b.w	800cac0 <_fwalk_sglue>
 800c9ee:	bf00      	nop
 800c9f0:	2000002c 	.word	0x2000002c
 800c9f4:	0800d619 	.word	0x0800d619
 800c9f8:	20000038 	.word	0x20000038

0800c9fc <cleanup_stdio>:
 800c9fc:	6841      	ldr	r1, [r0, #4]
 800c9fe:	4b0c      	ldr	r3, [pc, #48]	; (800ca30 <cleanup_stdio+0x34>)
 800ca00:	4299      	cmp	r1, r3
 800ca02:	b510      	push	{r4, lr}
 800ca04:	4604      	mov	r4, r0
 800ca06:	d001      	beq.n	800ca0c <cleanup_stdio+0x10>
 800ca08:	f000 fe06 	bl	800d618 <_fflush_r>
 800ca0c:	68a1      	ldr	r1, [r4, #8]
 800ca0e:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <cleanup_stdio+0x38>)
 800ca10:	4299      	cmp	r1, r3
 800ca12:	d002      	beq.n	800ca1a <cleanup_stdio+0x1e>
 800ca14:	4620      	mov	r0, r4
 800ca16:	f000 fdff 	bl	800d618 <_fflush_r>
 800ca1a:	68e1      	ldr	r1, [r4, #12]
 800ca1c:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <cleanup_stdio+0x3c>)
 800ca1e:	4299      	cmp	r1, r3
 800ca20:	d004      	beq.n	800ca2c <cleanup_stdio+0x30>
 800ca22:	4620      	mov	r0, r4
 800ca24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca28:	f000 bdf6 	b.w	800d618 <_fflush_r>
 800ca2c:	bd10      	pop	{r4, pc}
 800ca2e:	bf00      	nop
 800ca30:	20000858 	.word	0x20000858
 800ca34:	200008c0 	.word	0x200008c0
 800ca38:	20000928 	.word	0x20000928

0800ca3c <global_stdio_init.part.0>:
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	4b0b      	ldr	r3, [pc, #44]	; (800ca6c <global_stdio_init.part.0+0x30>)
 800ca40:	4c0b      	ldr	r4, [pc, #44]	; (800ca70 <global_stdio_init.part.0+0x34>)
 800ca42:	4a0c      	ldr	r2, [pc, #48]	; (800ca74 <global_stdio_init.part.0+0x38>)
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	4620      	mov	r0, r4
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2104      	movs	r1, #4
 800ca4c:	f7ff ff94 	bl	800c978 <std>
 800ca50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ca54:	2201      	movs	r2, #1
 800ca56:	2109      	movs	r1, #9
 800ca58:	f7ff ff8e 	bl	800c978 <std>
 800ca5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ca60:	2202      	movs	r2, #2
 800ca62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca66:	2112      	movs	r1, #18
 800ca68:	f7ff bf86 	b.w	800c978 <std>
 800ca6c:	20000990 	.word	0x20000990
 800ca70:	20000858 	.word	0x20000858
 800ca74:	0800c9e5 	.word	0x0800c9e5

0800ca78 <__sfp_lock_acquire>:
 800ca78:	4801      	ldr	r0, [pc, #4]	; (800ca80 <__sfp_lock_acquire+0x8>)
 800ca7a:	f000 ba16 	b.w	800ceaa <__retarget_lock_acquire_recursive>
 800ca7e:	bf00      	nop
 800ca80:	20000999 	.word	0x20000999

0800ca84 <__sfp_lock_release>:
 800ca84:	4801      	ldr	r0, [pc, #4]	; (800ca8c <__sfp_lock_release+0x8>)
 800ca86:	f000 ba11 	b.w	800ceac <__retarget_lock_release_recursive>
 800ca8a:	bf00      	nop
 800ca8c:	20000999 	.word	0x20000999

0800ca90 <__sinit>:
 800ca90:	b510      	push	{r4, lr}
 800ca92:	4604      	mov	r4, r0
 800ca94:	f7ff fff0 	bl	800ca78 <__sfp_lock_acquire>
 800ca98:	6a23      	ldr	r3, [r4, #32]
 800ca9a:	b11b      	cbz	r3, 800caa4 <__sinit+0x14>
 800ca9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caa0:	f7ff bff0 	b.w	800ca84 <__sfp_lock_release>
 800caa4:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <__sinit+0x28>)
 800caa6:	6223      	str	r3, [r4, #32]
 800caa8:	4b04      	ldr	r3, [pc, #16]	; (800cabc <__sinit+0x2c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1f5      	bne.n	800ca9c <__sinit+0xc>
 800cab0:	f7ff ffc4 	bl	800ca3c <global_stdio_init.part.0>
 800cab4:	e7f2      	b.n	800ca9c <__sinit+0xc>
 800cab6:	bf00      	nop
 800cab8:	0800c9fd 	.word	0x0800c9fd
 800cabc:	20000990 	.word	0x20000990

0800cac0 <_fwalk_sglue>:
 800cac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac4:	4607      	mov	r7, r0
 800cac6:	4688      	mov	r8, r1
 800cac8:	4614      	mov	r4, r2
 800caca:	2600      	movs	r6, #0
 800cacc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cad0:	f1b9 0901 	subs.w	r9, r9, #1
 800cad4:	d505      	bpl.n	800cae2 <_fwalk_sglue+0x22>
 800cad6:	6824      	ldr	r4, [r4, #0]
 800cad8:	2c00      	cmp	r4, #0
 800cada:	d1f7      	bne.n	800cacc <_fwalk_sglue+0xc>
 800cadc:	4630      	mov	r0, r6
 800cade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cae2:	89ab      	ldrh	r3, [r5, #12]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d907      	bls.n	800caf8 <_fwalk_sglue+0x38>
 800cae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800caec:	3301      	adds	r3, #1
 800caee:	d003      	beq.n	800caf8 <_fwalk_sglue+0x38>
 800caf0:	4629      	mov	r1, r5
 800caf2:	4638      	mov	r0, r7
 800caf4:	47c0      	blx	r8
 800caf6:	4306      	orrs	r6, r0
 800caf8:	3568      	adds	r5, #104	; 0x68
 800cafa:	e7e9      	b.n	800cad0 <_fwalk_sglue+0x10>

0800cafc <iprintf>:
 800cafc:	b40f      	push	{r0, r1, r2, r3}
 800cafe:	b507      	push	{r0, r1, r2, lr}
 800cb00:	4906      	ldr	r1, [pc, #24]	; (800cb1c <iprintf+0x20>)
 800cb02:	ab04      	add	r3, sp, #16
 800cb04:	6808      	ldr	r0, [r1, #0]
 800cb06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0a:	6881      	ldr	r1, [r0, #8]
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	f000 fa53 	bl	800cfb8 <_vfiprintf_r>
 800cb12:	b003      	add	sp, #12
 800cb14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb18:	b004      	add	sp, #16
 800cb1a:	4770      	bx	lr
 800cb1c:	20000084 	.word	0x20000084

0800cb20 <putchar>:
 800cb20:	4b02      	ldr	r3, [pc, #8]	; (800cb2c <putchar+0xc>)
 800cb22:	4601      	mov	r1, r0
 800cb24:	6818      	ldr	r0, [r3, #0]
 800cb26:	6882      	ldr	r2, [r0, #8]
 800cb28:	f000 be00 	b.w	800d72c <_putc_r>
 800cb2c:	20000084 	.word	0x20000084

0800cb30 <_puts_r>:
 800cb30:	6a03      	ldr	r3, [r0, #32]
 800cb32:	b570      	push	{r4, r5, r6, lr}
 800cb34:	6884      	ldr	r4, [r0, #8]
 800cb36:	4605      	mov	r5, r0
 800cb38:	460e      	mov	r6, r1
 800cb3a:	b90b      	cbnz	r3, 800cb40 <_puts_r+0x10>
 800cb3c:	f7ff ffa8 	bl	800ca90 <__sinit>
 800cb40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb42:	07db      	lsls	r3, r3, #31
 800cb44:	d405      	bmi.n	800cb52 <_puts_r+0x22>
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	0598      	lsls	r0, r3, #22
 800cb4a:	d402      	bmi.n	800cb52 <_puts_r+0x22>
 800cb4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb4e:	f000 f9ac 	bl	800ceaa <__retarget_lock_acquire_recursive>
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	0719      	lsls	r1, r3, #28
 800cb56:	d513      	bpl.n	800cb80 <_puts_r+0x50>
 800cb58:	6923      	ldr	r3, [r4, #16]
 800cb5a:	b18b      	cbz	r3, 800cb80 <_puts_r+0x50>
 800cb5c:	3e01      	subs	r6, #1
 800cb5e:	68a3      	ldr	r3, [r4, #8]
 800cb60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb64:	3b01      	subs	r3, #1
 800cb66:	60a3      	str	r3, [r4, #8]
 800cb68:	b9e9      	cbnz	r1, 800cba6 <_puts_r+0x76>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	da2e      	bge.n	800cbcc <_puts_r+0x9c>
 800cb6e:	4622      	mov	r2, r4
 800cb70:	210a      	movs	r1, #10
 800cb72:	4628      	mov	r0, r5
 800cb74:	f000 f87b 	bl	800cc6e <__swbuf_r>
 800cb78:	3001      	adds	r0, #1
 800cb7a:	d007      	beq.n	800cb8c <_puts_r+0x5c>
 800cb7c:	250a      	movs	r5, #10
 800cb7e:	e007      	b.n	800cb90 <_puts_r+0x60>
 800cb80:	4621      	mov	r1, r4
 800cb82:	4628      	mov	r0, r5
 800cb84:	f000 f8b0 	bl	800cce8 <__swsetup_r>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d0e7      	beq.n	800cb5c <_puts_r+0x2c>
 800cb8c:	f04f 35ff 	mov.w	r5, #4294967295
 800cb90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb92:	07da      	lsls	r2, r3, #31
 800cb94:	d405      	bmi.n	800cba2 <_puts_r+0x72>
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	059b      	lsls	r3, r3, #22
 800cb9a:	d402      	bmi.n	800cba2 <_puts_r+0x72>
 800cb9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb9e:	f000 f985 	bl	800ceac <__retarget_lock_release_recursive>
 800cba2:	4628      	mov	r0, r5
 800cba4:	bd70      	pop	{r4, r5, r6, pc}
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	da04      	bge.n	800cbb4 <_puts_r+0x84>
 800cbaa:	69a2      	ldr	r2, [r4, #24]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	dc06      	bgt.n	800cbbe <_puts_r+0x8e>
 800cbb0:	290a      	cmp	r1, #10
 800cbb2:	d004      	beq.n	800cbbe <_puts_r+0x8e>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	6022      	str	r2, [r4, #0]
 800cbba:	7019      	strb	r1, [r3, #0]
 800cbbc:	e7cf      	b.n	800cb5e <_puts_r+0x2e>
 800cbbe:	4622      	mov	r2, r4
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f000 f854 	bl	800cc6e <__swbuf_r>
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	d1c9      	bne.n	800cb5e <_puts_r+0x2e>
 800cbca:	e7df      	b.n	800cb8c <_puts_r+0x5c>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	250a      	movs	r5, #10
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	701d      	strb	r5, [r3, #0]
 800cbd6:	e7db      	b.n	800cb90 <_puts_r+0x60>

0800cbd8 <puts>:
 800cbd8:	4b02      	ldr	r3, [pc, #8]	; (800cbe4 <puts+0xc>)
 800cbda:	4601      	mov	r1, r0
 800cbdc:	6818      	ldr	r0, [r3, #0]
 800cbde:	f7ff bfa7 	b.w	800cb30 <_puts_r>
 800cbe2:	bf00      	nop
 800cbe4:	20000084 	.word	0x20000084

0800cbe8 <__sread>:
 800cbe8:	b510      	push	{r4, lr}
 800cbea:	460c      	mov	r4, r1
 800cbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf0:	f000 f8fc 	bl	800cdec <_read_r>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	bfab      	itete	ge
 800cbf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbfa:	89a3      	ldrhlt	r3, [r4, #12]
 800cbfc:	181b      	addge	r3, r3, r0
 800cbfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc02:	bfac      	ite	ge
 800cc04:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc06:	81a3      	strhlt	r3, [r4, #12]
 800cc08:	bd10      	pop	{r4, pc}

0800cc0a <__swrite>:
 800cc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0e:	461f      	mov	r7, r3
 800cc10:	898b      	ldrh	r3, [r1, #12]
 800cc12:	05db      	lsls	r3, r3, #23
 800cc14:	4605      	mov	r5, r0
 800cc16:	460c      	mov	r4, r1
 800cc18:	4616      	mov	r6, r2
 800cc1a:	d505      	bpl.n	800cc28 <__swrite+0x1e>
 800cc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc20:	2302      	movs	r3, #2
 800cc22:	2200      	movs	r2, #0
 800cc24:	f000 f8d0 	bl	800cdc8 <_lseek_r>
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc32:	81a3      	strh	r3, [r4, #12]
 800cc34:	4632      	mov	r2, r6
 800cc36:	463b      	mov	r3, r7
 800cc38:	4628      	mov	r0, r5
 800cc3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3e:	f000 b8f7 	b.w	800ce30 <_write_r>

0800cc42 <__sseek>:
 800cc42:	b510      	push	{r4, lr}
 800cc44:	460c      	mov	r4, r1
 800cc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc4a:	f000 f8bd 	bl	800cdc8 <_lseek_r>
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	bf15      	itete	ne
 800cc54:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc5e:	81a3      	strheq	r3, [r4, #12]
 800cc60:	bf18      	it	ne
 800cc62:	81a3      	strhne	r3, [r4, #12]
 800cc64:	bd10      	pop	{r4, pc}

0800cc66 <__sclose>:
 800cc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc6a:	f000 b89d 	b.w	800cda8 <_close_r>

0800cc6e <__swbuf_r>:
 800cc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc70:	460e      	mov	r6, r1
 800cc72:	4614      	mov	r4, r2
 800cc74:	4605      	mov	r5, r0
 800cc76:	b118      	cbz	r0, 800cc80 <__swbuf_r+0x12>
 800cc78:	6a03      	ldr	r3, [r0, #32]
 800cc7a:	b90b      	cbnz	r3, 800cc80 <__swbuf_r+0x12>
 800cc7c:	f7ff ff08 	bl	800ca90 <__sinit>
 800cc80:	69a3      	ldr	r3, [r4, #24]
 800cc82:	60a3      	str	r3, [r4, #8]
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	071a      	lsls	r2, r3, #28
 800cc88:	d525      	bpl.n	800ccd6 <__swbuf_r+0x68>
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	b31b      	cbz	r3, 800ccd6 <__swbuf_r+0x68>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	6922      	ldr	r2, [r4, #16]
 800cc92:	1a98      	subs	r0, r3, r2
 800cc94:	6963      	ldr	r3, [r4, #20]
 800cc96:	b2f6      	uxtb	r6, r6
 800cc98:	4283      	cmp	r3, r0
 800cc9a:	4637      	mov	r7, r6
 800cc9c:	dc04      	bgt.n	800cca8 <__swbuf_r+0x3a>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4628      	mov	r0, r5
 800cca2:	f000 fcb9 	bl	800d618 <_fflush_r>
 800cca6:	b9e0      	cbnz	r0, 800cce2 <__swbuf_r+0x74>
 800cca8:	68a3      	ldr	r3, [r4, #8]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	60a3      	str	r3, [r4, #8]
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	6022      	str	r2, [r4, #0]
 800ccb4:	701e      	strb	r6, [r3, #0]
 800ccb6:	6962      	ldr	r2, [r4, #20]
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d004      	beq.n	800ccc8 <__swbuf_r+0x5a>
 800ccbe:	89a3      	ldrh	r3, [r4, #12]
 800ccc0:	07db      	lsls	r3, r3, #31
 800ccc2:	d506      	bpl.n	800ccd2 <__swbuf_r+0x64>
 800ccc4:	2e0a      	cmp	r6, #10
 800ccc6:	d104      	bne.n	800ccd2 <__swbuf_r+0x64>
 800ccc8:	4621      	mov	r1, r4
 800ccca:	4628      	mov	r0, r5
 800cccc:	f000 fca4 	bl	800d618 <_fflush_r>
 800ccd0:	b938      	cbnz	r0, 800cce2 <__swbuf_r+0x74>
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f000 f805 	bl	800cce8 <__swsetup_r>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0d5      	beq.n	800cc8e <__swbuf_r+0x20>
 800cce2:	f04f 37ff 	mov.w	r7, #4294967295
 800cce6:	e7f4      	b.n	800ccd2 <__swbuf_r+0x64>

0800cce8 <__swsetup_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4b2a      	ldr	r3, [pc, #168]	; (800cd94 <__swsetup_r+0xac>)
 800ccec:	4605      	mov	r5, r0
 800ccee:	6818      	ldr	r0, [r3, #0]
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	b118      	cbz	r0, 800ccfc <__swsetup_r+0x14>
 800ccf4:	6a03      	ldr	r3, [r0, #32]
 800ccf6:	b90b      	cbnz	r3, 800ccfc <__swsetup_r+0x14>
 800ccf8:	f7ff feca 	bl	800ca90 <__sinit>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd02:	0718      	lsls	r0, r3, #28
 800cd04:	d422      	bmi.n	800cd4c <__swsetup_r+0x64>
 800cd06:	06d9      	lsls	r1, r3, #27
 800cd08:	d407      	bmi.n	800cd1a <__swsetup_r+0x32>
 800cd0a:	2309      	movs	r3, #9
 800cd0c:	602b      	str	r3, [r5, #0]
 800cd0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd12:	81a3      	strh	r3, [r4, #12]
 800cd14:	f04f 30ff 	mov.w	r0, #4294967295
 800cd18:	e034      	b.n	800cd84 <__swsetup_r+0x9c>
 800cd1a:	0758      	lsls	r0, r3, #29
 800cd1c:	d512      	bpl.n	800cd44 <__swsetup_r+0x5c>
 800cd1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd20:	b141      	cbz	r1, 800cd34 <__swsetup_r+0x4c>
 800cd22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd26:	4299      	cmp	r1, r3
 800cd28:	d002      	beq.n	800cd30 <__swsetup_r+0x48>
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f000 f8ce 	bl	800cecc <_free_r>
 800cd30:	2300      	movs	r3, #0
 800cd32:	6363      	str	r3, [r4, #52]	; 0x34
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	6063      	str	r3, [r4, #4]
 800cd40:	6923      	ldr	r3, [r4, #16]
 800cd42:	6023      	str	r3, [r4, #0]
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	f043 0308 	orr.w	r3, r3, #8
 800cd4a:	81a3      	strh	r3, [r4, #12]
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	b94b      	cbnz	r3, 800cd64 <__swsetup_r+0x7c>
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd5a:	d003      	beq.n	800cd64 <__swsetup_r+0x7c>
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f000 fca8 	bl	800d6b4 <__smakebuf_r>
 800cd64:	89a0      	ldrh	r0, [r4, #12]
 800cd66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd6a:	f010 0301 	ands.w	r3, r0, #1
 800cd6e:	d00a      	beq.n	800cd86 <__swsetup_r+0x9e>
 800cd70:	2300      	movs	r3, #0
 800cd72:	60a3      	str	r3, [r4, #8]
 800cd74:	6963      	ldr	r3, [r4, #20]
 800cd76:	425b      	negs	r3, r3
 800cd78:	61a3      	str	r3, [r4, #24]
 800cd7a:	6923      	ldr	r3, [r4, #16]
 800cd7c:	b943      	cbnz	r3, 800cd90 <__swsetup_r+0xa8>
 800cd7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd82:	d1c4      	bne.n	800cd0e <__swsetup_r+0x26>
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	0781      	lsls	r1, r0, #30
 800cd88:	bf58      	it	pl
 800cd8a:	6963      	ldrpl	r3, [r4, #20]
 800cd8c:	60a3      	str	r3, [r4, #8]
 800cd8e:	e7f4      	b.n	800cd7a <__swsetup_r+0x92>
 800cd90:	2000      	movs	r0, #0
 800cd92:	e7f7      	b.n	800cd84 <__swsetup_r+0x9c>
 800cd94:	20000084 	.word	0x20000084

0800cd98 <memset>:
 800cd98:	4402      	add	r2, r0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d100      	bne.n	800cda2 <memset+0xa>
 800cda0:	4770      	bx	lr
 800cda2:	f803 1b01 	strb.w	r1, [r3], #1
 800cda6:	e7f9      	b.n	800cd9c <memset+0x4>

0800cda8 <_close_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d06      	ldr	r5, [pc, #24]	; (800cdc4 <_close_r+0x1c>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	602b      	str	r3, [r5, #0]
 800cdb4:	f7f3 fe3d 	bl	8000a32 <_close>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_close_r+0x1a>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_close_r+0x1a>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	20000994 	.word	0x20000994

0800cdc8 <_lseek_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4d07      	ldr	r5, [pc, #28]	; (800cde8 <_lseek_r+0x20>)
 800cdcc:	4604      	mov	r4, r0
 800cdce:	4608      	mov	r0, r1
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	602a      	str	r2, [r5, #0]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f7f3 fe52 	bl	8000a80 <_lseek>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_lseek_r+0x1e>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_lseek_r+0x1e>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	20000994 	.word	0x20000994

0800cdec <_read_r>:
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	4d07      	ldr	r5, [pc, #28]	; (800ce0c <_read_r+0x20>)
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	4608      	mov	r0, r1
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	602a      	str	r2, [r5, #0]
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	f7f3 fde0 	bl	80009c0 <_read>
 800ce00:	1c43      	adds	r3, r0, #1
 800ce02:	d102      	bne.n	800ce0a <_read_r+0x1e>
 800ce04:	682b      	ldr	r3, [r5, #0]
 800ce06:	b103      	cbz	r3, 800ce0a <_read_r+0x1e>
 800ce08:	6023      	str	r3, [r4, #0]
 800ce0a:	bd38      	pop	{r3, r4, r5, pc}
 800ce0c:	20000994 	.word	0x20000994

0800ce10 <_sbrk_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4d06      	ldr	r5, [pc, #24]	; (800ce2c <_sbrk_r+0x1c>)
 800ce14:	2300      	movs	r3, #0
 800ce16:	4604      	mov	r4, r0
 800ce18:	4608      	mov	r0, r1
 800ce1a:	602b      	str	r3, [r5, #0]
 800ce1c:	f7f3 fe3e 	bl	8000a9c <_sbrk>
 800ce20:	1c43      	adds	r3, r0, #1
 800ce22:	d102      	bne.n	800ce2a <_sbrk_r+0x1a>
 800ce24:	682b      	ldr	r3, [r5, #0]
 800ce26:	b103      	cbz	r3, 800ce2a <_sbrk_r+0x1a>
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	20000994 	.word	0x20000994

0800ce30 <_write_r>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4d07      	ldr	r5, [pc, #28]	; (800ce50 <_write_r+0x20>)
 800ce34:	4604      	mov	r4, r0
 800ce36:	4608      	mov	r0, r1
 800ce38:	4611      	mov	r1, r2
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	602a      	str	r2, [r5, #0]
 800ce3e:	461a      	mov	r2, r3
 800ce40:	f7f3 fddb 	bl	80009fa <_write>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	d102      	bne.n	800ce4e <_write_r+0x1e>
 800ce48:	682b      	ldr	r3, [r5, #0]
 800ce4a:	b103      	cbz	r3, 800ce4e <_write_r+0x1e>
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	bd38      	pop	{r3, r4, r5, pc}
 800ce50:	20000994 	.word	0x20000994

0800ce54 <__errno>:
 800ce54:	4b01      	ldr	r3, [pc, #4]	; (800ce5c <__errno+0x8>)
 800ce56:	6818      	ldr	r0, [r3, #0]
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	20000084 	.word	0x20000084

0800ce60 <__libc_init_array>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	4d0d      	ldr	r5, [pc, #52]	; (800ce98 <__libc_init_array+0x38>)
 800ce64:	4c0d      	ldr	r4, [pc, #52]	; (800ce9c <__libc_init_array+0x3c>)
 800ce66:	1b64      	subs	r4, r4, r5
 800ce68:	10a4      	asrs	r4, r4, #2
 800ce6a:	2600      	movs	r6, #0
 800ce6c:	42a6      	cmp	r6, r4
 800ce6e:	d109      	bne.n	800ce84 <__libc_init_array+0x24>
 800ce70:	4d0b      	ldr	r5, [pc, #44]	; (800cea0 <__libc_init_array+0x40>)
 800ce72:	4c0c      	ldr	r4, [pc, #48]	; (800cea4 <__libc_init_array+0x44>)
 800ce74:	f000 fcb0 	bl	800d7d8 <_init>
 800ce78:	1b64      	subs	r4, r4, r5
 800ce7a:	10a4      	asrs	r4, r4, #2
 800ce7c:	2600      	movs	r6, #0
 800ce7e:	42a6      	cmp	r6, r4
 800ce80:	d105      	bne.n	800ce8e <__libc_init_array+0x2e>
 800ce82:	bd70      	pop	{r4, r5, r6, pc}
 800ce84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce88:	4798      	blx	r3
 800ce8a:	3601      	adds	r6, #1
 800ce8c:	e7ee      	b.n	800ce6c <__libc_init_array+0xc>
 800ce8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce92:	4798      	blx	r3
 800ce94:	3601      	adds	r6, #1
 800ce96:	e7f2      	b.n	800ce7e <__libc_init_array+0x1e>
 800ce98:	0800e110 	.word	0x0800e110
 800ce9c:	0800e110 	.word	0x0800e110
 800cea0:	0800e110 	.word	0x0800e110
 800cea4:	0800e114 	.word	0x0800e114

0800cea8 <__retarget_lock_init_recursive>:
 800cea8:	4770      	bx	lr

0800ceaa <__retarget_lock_acquire_recursive>:
 800ceaa:	4770      	bx	lr

0800ceac <__retarget_lock_release_recursive>:
 800ceac:	4770      	bx	lr

0800ceae <memcpy>:
 800ceae:	440a      	add	r2, r1
 800ceb0:	4291      	cmp	r1, r2
 800ceb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800ceb6:	d100      	bne.n	800ceba <memcpy+0xc>
 800ceb8:	4770      	bx	lr
 800ceba:	b510      	push	{r4, lr}
 800cebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cec4:	4291      	cmp	r1, r2
 800cec6:	d1f9      	bne.n	800cebc <memcpy+0xe>
 800cec8:	bd10      	pop	{r4, pc}
	...

0800cecc <_free_r>:
 800cecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cece:	2900      	cmp	r1, #0
 800ced0:	d044      	beq.n	800cf5c <_free_r+0x90>
 800ced2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ced6:	9001      	str	r0, [sp, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f1a1 0404 	sub.w	r4, r1, #4
 800cede:	bfb8      	it	lt
 800cee0:	18e4      	addlt	r4, r4, r3
 800cee2:	f7ff fd3d 	bl	800c960 <__malloc_lock>
 800cee6:	4a1e      	ldr	r2, [pc, #120]	; (800cf60 <_free_r+0x94>)
 800cee8:	9801      	ldr	r0, [sp, #4]
 800ceea:	6813      	ldr	r3, [r2, #0]
 800ceec:	b933      	cbnz	r3, 800cefc <_free_r+0x30>
 800ceee:	6063      	str	r3, [r4, #4]
 800cef0:	6014      	str	r4, [r2, #0]
 800cef2:	b003      	add	sp, #12
 800cef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cef8:	f7ff bd38 	b.w	800c96c <__malloc_unlock>
 800cefc:	42a3      	cmp	r3, r4
 800cefe:	d908      	bls.n	800cf12 <_free_r+0x46>
 800cf00:	6825      	ldr	r5, [r4, #0]
 800cf02:	1961      	adds	r1, r4, r5
 800cf04:	428b      	cmp	r3, r1
 800cf06:	bf01      	itttt	eq
 800cf08:	6819      	ldreq	r1, [r3, #0]
 800cf0a:	685b      	ldreq	r3, [r3, #4]
 800cf0c:	1949      	addeq	r1, r1, r5
 800cf0e:	6021      	streq	r1, [r4, #0]
 800cf10:	e7ed      	b.n	800ceee <_free_r+0x22>
 800cf12:	461a      	mov	r2, r3
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	b10b      	cbz	r3, 800cf1c <_free_r+0x50>
 800cf18:	42a3      	cmp	r3, r4
 800cf1a:	d9fa      	bls.n	800cf12 <_free_r+0x46>
 800cf1c:	6811      	ldr	r1, [r2, #0]
 800cf1e:	1855      	adds	r5, r2, r1
 800cf20:	42a5      	cmp	r5, r4
 800cf22:	d10b      	bne.n	800cf3c <_free_r+0x70>
 800cf24:	6824      	ldr	r4, [r4, #0]
 800cf26:	4421      	add	r1, r4
 800cf28:	1854      	adds	r4, r2, r1
 800cf2a:	42a3      	cmp	r3, r4
 800cf2c:	6011      	str	r1, [r2, #0]
 800cf2e:	d1e0      	bne.n	800cef2 <_free_r+0x26>
 800cf30:	681c      	ldr	r4, [r3, #0]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	6053      	str	r3, [r2, #4]
 800cf36:	440c      	add	r4, r1
 800cf38:	6014      	str	r4, [r2, #0]
 800cf3a:	e7da      	b.n	800cef2 <_free_r+0x26>
 800cf3c:	d902      	bls.n	800cf44 <_free_r+0x78>
 800cf3e:	230c      	movs	r3, #12
 800cf40:	6003      	str	r3, [r0, #0]
 800cf42:	e7d6      	b.n	800cef2 <_free_r+0x26>
 800cf44:	6825      	ldr	r5, [r4, #0]
 800cf46:	1961      	adds	r1, r4, r5
 800cf48:	428b      	cmp	r3, r1
 800cf4a:	bf04      	itt	eq
 800cf4c:	6819      	ldreq	r1, [r3, #0]
 800cf4e:	685b      	ldreq	r3, [r3, #4]
 800cf50:	6063      	str	r3, [r4, #4]
 800cf52:	bf04      	itt	eq
 800cf54:	1949      	addeq	r1, r1, r5
 800cf56:	6021      	streq	r1, [r4, #0]
 800cf58:	6054      	str	r4, [r2, #4]
 800cf5a:	e7ca      	b.n	800cef2 <_free_r+0x26>
 800cf5c:	b003      	add	sp, #12
 800cf5e:	bd30      	pop	{r4, r5, pc}
 800cf60:	20000850 	.word	0x20000850

0800cf64 <__sfputc_r>:
 800cf64:	6893      	ldr	r3, [r2, #8]
 800cf66:	3b01      	subs	r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	b410      	push	{r4}
 800cf6c:	6093      	str	r3, [r2, #8]
 800cf6e:	da08      	bge.n	800cf82 <__sfputc_r+0x1e>
 800cf70:	6994      	ldr	r4, [r2, #24]
 800cf72:	42a3      	cmp	r3, r4
 800cf74:	db01      	blt.n	800cf7a <__sfputc_r+0x16>
 800cf76:	290a      	cmp	r1, #10
 800cf78:	d103      	bne.n	800cf82 <__sfputc_r+0x1e>
 800cf7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf7e:	f7ff be76 	b.w	800cc6e <__swbuf_r>
 800cf82:	6813      	ldr	r3, [r2, #0]
 800cf84:	1c58      	adds	r0, r3, #1
 800cf86:	6010      	str	r0, [r2, #0]
 800cf88:	7019      	strb	r1, [r3, #0]
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <__sfputs_r>:
 800cf92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf94:	4606      	mov	r6, r0
 800cf96:	460f      	mov	r7, r1
 800cf98:	4614      	mov	r4, r2
 800cf9a:	18d5      	adds	r5, r2, r3
 800cf9c:	42ac      	cmp	r4, r5
 800cf9e:	d101      	bne.n	800cfa4 <__sfputs_r+0x12>
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	e007      	b.n	800cfb4 <__sfputs_r+0x22>
 800cfa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa8:	463a      	mov	r2, r7
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7ff ffda 	bl	800cf64 <__sfputc_r>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d1f3      	bne.n	800cf9c <__sfputs_r+0xa>
 800cfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfb8 <_vfiprintf_r>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	460d      	mov	r5, r1
 800cfbe:	b09d      	sub	sp, #116	; 0x74
 800cfc0:	4614      	mov	r4, r2
 800cfc2:	4698      	mov	r8, r3
 800cfc4:	4606      	mov	r6, r0
 800cfc6:	b118      	cbz	r0, 800cfd0 <_vfiprintf_r+0x18>
 800cfc8:	6a03      	ldr	r3, [r0, #32]
 800cfca:	b90b      	cbnz	r3, 800cfd0 <_vfiprintf_r+0x18>
 800cfcc:	f7ff fd60 	bl	800ca90 <__sinit>
 800cfd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfd2:	07d9      	lsls	r1, r3, #31
 800cfd4:	d405      	bmi.n	800cfe2 <_vfiprintf_r+0x2a>
 800cfd6:	89ab      	ldrh	r3, [r5, #12]
 800cfd8:	059a      	lsls	r2, r3, #22
 800cfda:	d402      	bmi.n	800cfe2 <_vfiprintf_r+0x2a>
 800cfdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfde:	f7ff ff64 	bl	800ceaa <__retarget_lock_acquire_recursive>
 800cfe2:	89ab      	ldrh	r3, [r5, #12]
 800cfe4:	071b      	lsls	r3, r3, #28
 800cfe6:	d501      	bpl.n	800cfec <_vfiprintf_r+0x34>
 800cfe8:	692b      	ldr	r3, [r5, #16]
 800cfea:	b99b      	cbnz	r3, 800d014 <_vfiprintf_r+0x5c>
 800cfec:	4629      	mov	r1, r5
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7ff fe7a 	bl	800cce8 <__swsetup_r>
 800cff4:	b170      	cbz	r0, 800d014 <_vfiprintf_r+0x5c>
 800cff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cff8:	07dc      	lsls	r4, r3, #31
 800cffa:	d504      	bpl.n	800d006 <_vfiprintf_r+0x4e>
 800cffc:	f04f 30ff 	mov.w	r0, #4294967295
 800d000:	b01d      	add	sp, #116	; 0x74
 800d002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d006:	89ab      	ldrh	r3, [r5, #12]
 800d008:	0598      	lsls	r0, r3, #22
 800d00a:	d4f7      	bmi.n	800cffc <_vfiprintf_r+0x44>
 800d00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d00e:	f7ff ff4d 	bl	800ceac <__retarget_lock_release_recursive>
 800d012:	e7f3      	b.n	800cffc <_vfiprintf_r+0x44>
 800d014:	2300      	movs	r3, #0
 800d016:	9309      	str	r3, [sp, #36]	; 0x24
 800d018:	2320      	movs	r3, #32
 800d01a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d022:	2330      	movs	r3, #48	; 0x30
 800d024:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d1d8 <_vfiprintf_r+0x220>
 800d028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d02c:	f04f 0901 	mov.w	r9, #1
 800d030:	4623      	mov	r3, r4
 800d032:	469a      	mov	sl, r3
 800d034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d038:	b10a      	cbz	r2, 800d03e <_vfiprintf_r+0x86>
 800d03a:	2a25      	cmp	r2, #37	; 0x25
 800d03c:	d1f9      	bne.n	800d032 <_vfiprintf_r+0x7a>
 800d03e:	ebba 0b04 	subs.w	fp, sl, r4
 800d042:	d00b      	beq.n	800d05c <_vfiprintf_r+0xa4>
 800d044:	465b      	mov	r3, fp
 800d046:	4622      	mov	r2, r4
 800d048:	4629      	mov	r1, r5
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7ff ffa1 	bl	800cf92 <__sfputs_r>
 800d050:	3001      	adds	r0, #1
 800d052:	f000 80a9 	beq.w	800d1a8 <_vfiprintf_r+0x1f0>
 800d056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d058:	445a      	add	r2, fp
 800d05a:	9209      	str	r2, [sp, #36]	; 0x24
 800d05c:	f89a 3000 	ldrb.w	r3, [sl]
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 80a1 	beq.w	800d1a8 <_vfiprintf_r+0x1f0>
 800d066:	2300      	movs	r3, #0
 800d068:	f04f 32ff 	mov.w	r2, #4294967295
 800d06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d070:	f10a 0a01 	add.w	sl, sl, #1
 800d074:	9304      	str	r3, [sp, #16]
 800d076:	9307      	str	r3, [sp, #28]
 800d078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d07c:	931a      	str	r3, [sp, #104]	; 0x68
 800d07e:	4654      	mov	r4, sl
 800d080:	2205      	movs	r2, #5
 800d082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d086:	4854      	ldr	r0, [pc, #336]	; (800d1d8 <_vfiprintf_r+0x220>)
 800d088:	f7f3 f8da 	bl	8000240 <memchr>
 800d08c:	9a04      	ldr	r2, [sp, #16]
 800d08e:	b9d8      	cbnz	r0, 800d0c8 <_vfiprintf_r+0x110>
 800d090:	06d1      	lsls	r1, r2, #27
 800d092:	bf44      	itt	mi
 800d094:	2320      	movmi	r3, #32
 800d096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d09a:	0713      	lsls	r3, r2, #28
 800d09c:	bf44      	itt	mi
 800d09e:	232b      	movmi	r3, #43	; 0x2b
 800d0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0aa:	d015      	beq.n	800d0d8 <_vfiprintf_r+0x120>
 800d0ac:	9a07      	ldr	r2, [sp, #28]
 800d0ae:	4654      	mov	r4, sl
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	f04f 0c0a 	mov.w	ip, #10
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0bc:	3b30      	subs	r3, #48	; 0x30
 800d0be:	2b09      	cmp	r3, #9
 800d0c0:	d94d      	bls.n	800d15e <_vfiprintf_r+0x1a6>
 800d0c2:	b1b0      	cbz	r0, 800d0f2 <_vfiprintf_r+0x13a>
 800d0c4:	9207      	str	r2, [sp, #28]
 800d0c6:	e014      	b.n	800d0f2 <_vfiprintf_r+0x13a>
 800d0c8:	eba0 0308 	sub.w	r3, r0, r8
 800d0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	9304      	str	r3, [sp, #16]
 800d0d4:	46a2      	mov	sl, r4
 800d0d6:	e7d2      	b.n	800d07e <_vfiprintf_r+0xc6>
 800d0d8:	9b03      	ldr	r3, [sp, #12]
 800d0da:	1d19      	adds	r1, r3, #4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	9103      	str	r1, [sp, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	bfbb      	ittet	lt
 800d0e4:	425b      	neglt	r3, r3
 800d0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ea:	9307      	strge	r3, [sp, #28]
 800d0ec:	9307      	strlt	r3, [sp, #28]
 800d0ee:	bfb8      	it	lt
 800d0f0:	9204      	strlt	r2, [sp, #16]
 800d0f2:	7823      	ldrb	r3, [r4, #0]
 800d0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800d0f6:	d10c      	bne.n	800d112 <_vfiprintf_r+0x15a>
 800d0f8:	7863      	ldrb	r3, [r4, #1]
 800d0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d0fc:	d134      	bne.n	800d168 <_vfiprintf_r+0x1b0>
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	1d1a      	adds	r2, r3, #4
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	9203      	str	r2, [sp, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	bfb8      	it	lt
 800d10a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d10e:	3402      	adds	r4, #2
 800d110:	9305      	str	r3, [sp, #20]
 800d112:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d1e8 <_vfiprintf_r+0x230>
 800d116:	7821      	ldrb	r1, [r4, #0]
 800d118:	2203      	movs	r2, #3
 800d11a:	4650      	mov	r0, sl
 800d11c:	f7f3 f890 	bl	8000240 <memchr>
 800d120:	b138      	cbz	r0, 800d132 <_vfiprintf_r+0x17a>
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	eba0 000a 	sub.w	r0, r0, sl
 800d128:	2240      	movs	r2, #64	; 0x40
 800d12a:	4082      	lsls	r2, r0
 800d12c:	4313      	orrs	r3, r2
 800d12e:	3401      	adds	r4, #1
 800d130:	9304      	str	r3, [sp, #16]
 800d132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d136:	4829      	ldr	r0, [pc, #164]	; (800d1dc <_vfiprintf_r+0x224>)
 800d138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d13c:	2206      	movs	r2, #6
 800d13e:	f7f3 f87f 	bl	8000240 <memchr>
 800d142:	2800      	cmp	r0, #0
 800d144:	d03f      	beq.n	800d1c6 <_vfiprintf_r+0x20e>
 800d146:	4b26      	ldr	r3, [pc, #152]	; (800d1e0 <_vfiprintf_r+0x228>)
 800d148:	bb1b      	cbnz	r3, 800d192 <_vfiprintf_r+0x1da>
 800d14a:	9b03      	ldr	r3, [sp, #12]
 800d14c:	3307      	adds	r3, #7
 800d14e:	f023 0307 	bic.w	r3, r3, #7
 800d152:	3308      	adds	r3, #8
 800d154:	9303      	str	r3, [sp, #12]
 800d156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d158:	443b      	add	r3, r7
 800d15a:	9309      	str	r3, [sp, #36]	; 0x24
 800d15c:	e768      	b.n	800d030 <_vfiprintf_r+0x78>
 800d15e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d162:	460c      	mov	r4, r1
 800d164:	2001      	movs	r0, #1
 800d166:	e7a6      	b.n	800d0b6 <_vfiprintf_r+0xfe>
 800d168:	2300      	movs	r3, #0
 800d16a:	3401      	adds	r4, #1
 800d16c:	9305      	str	r3, [sp, #20]
 800d16e:	4619      	mov	r1, r3
 800d170:	f04f 0c0a 	mov.w	ip, #10
 800d174:	4620      	mov	r0, r4
 800d176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d17a:	3a30      	subs	r2, #48	; 0x30
 800d17c:	2a09      	cmp	r2, #9
 800d17e:	d903      	bls.n	800d188 <_vfiprintf_r+0x1d0>
 800d180:	2b00      	cmp	r3, #0
 800d182:	d0c6      	beq.n	800d112 <_vfiprintf_r+0x15a>
 800d184:	9105      	str	r1, [sp, #20]
 800d186:	e7c4      	b.n	800d112 <_vfiprintf_r+0x15a>
 800d188:	fb0c 2101 	mla	r1, ip, r1, r2
 800d18c:	4604      	mov	r4, r0
 800d18e:	2301      	movs	r3, #1
 800d190:	e7f0      	b.n	800d174 <_vfiprintf_r+0x1bc>
 800d192:	ab03      	add	r3, sp, #12
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	462a      	mov	r2, r5
 800d198:	4b12      	ldr	r3, [pc, #72]	; (800d1e4 <_vfiprintf_r+0x22c>)
 800d19a:	a904      	add	r1, sp, #16
 800d19c:	4630      	mov	r0, r6
 800d19e:	f3af 8000 	nop.w
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	1c78      	adds	r0, r7, #1
 800d1a6:	d1d6      	bne.n	800d156 <_vfiprintf_r+0x19e>
 800d1a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1aa:	07d9      	lsls	r1, r3, #31
 800d1ac:	d405      	bmi.n	800d1ba <_vfiprintf_r+0x202>
 800d1ae:	89ab      	ldrh	r3, [r5, #12]
 800d1b0:	059a      	lsls	r2, r3, #22
 800d1b2:	d402      	bmi.n	800d1ba <_vfiprintf_r+0x202>
 800d1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1b6:	f7ff fe79 	bl	800ceac <__retarget_lock_release_recursive>
 800d1ba:	89ab      	ldrh	r3, [r5, #12]
 800d1bc:	065b      	lsls	r3, r3, #25
 800d1be:	f53f af1d 	bmi.w	800cffc <_vfiprintf_r+0x44>
 800d1c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1c4:	e71c      	b.n	800d000 <_vfiprintf_r+0x48>
 800d1c6:	ab03      	add	r3, sp, #12
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	462a      	mov	r2, r5
 800d1cc:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <_vfiprintf_r+0x22c>)
 800d1ce:	a904      	add	r1, sp, #16
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f000 f879 	bl	800d2c8 <_printf_i>
 800d1d6:	e7e4      	b.n	800d1a2 <_vfiprintf_r+0x1ea>
 800d1d8:	0800e0d4 	.word	0x0800e0d4
 800d1dc:	0800e0de 	.word	0x0800e0de
 800d1e0:	00000000 	.word	0x00000000
 800d1e4:	0800cf93 	.word	0x0800cf93
 800d1e8:	0800e0da 	.word	0x0800e0da

0800d1ec <_printf_common>:
 800d1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f0:	4616      	mov	r6, r2
 800d1f2:	4699      	mov	r9, r3
 800d1f4:	688a      	ldr	r2, [r1, #8]
 800d1f6:	690b      	ldr	r3, [r1, #16]
 800d1f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	bfb8      	it	lt
 800d200:	4613      	movlt	r3, r2
 800d202:	6033      	str	r3, [r6, #0]
 800d204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d208:	4607      	mov	r7, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	b10a      	cbz	r2, 800d212 <_printf_common+0x26>
 800d20e:	3301      	adds	r3, #1
 800d210:	6033      	str	r3, [r6, #0]
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	0699      	lsls	r1, r3, #26
 800d216:	bf42      	ittt	mi
 800d218:	6833      	ldrmi	r3, [r6, #0]
 800d21a:	3302      	addmi	r3, #2
 800d21c:	6033      	strmi	r3, [r6, #0]
 800d21e:	6825      	ldr	r5, [r4, #0]
 800d220:	f015 0506 	ands.w	r5, r5, #6
 800d224:	d106      	bne.n	800d234 <_printf_common+0x48>
 800d226:	f104 0a19 	add.w	sl, r4, #25
 800d22a:	68e3      	ldr	r3, [r4, #12]
 800d22c:	6832      	ldr	r2, [r6, #0]
 800d22e:	1a9b      	subs	r3, r3, r2
 800d230:	42ab      	cmp	r3, r5
 800d232:	dc26      	bgt.n	800d282 <_printf_common+0x96>
 800d234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d238:	1e13      	subs	r3, r2, #0
 800d23a:	6822      	ldr	r2, [r4, #0]
 800d23c:	bf18      	it	ne
 800d23e:	2301      	movne	r3, #1
 800d240:	0692      	lsls	r2, r2, #26
 800d242:	d42b      	bmi.n	800d29c <_printf_common+0xb0>
 800d244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d248:	4649      	mov	r1, r9
 800d24a:	4638      	mov	r0, r7
 800d24c:	47c0      	blx	r8
 800d24e:	3001      	adds	r0, #1
 800d250:	d01e      	beq.n	800d290 <_printf_common+0xa4>
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	6922      	ldr	r2, [r4, #16]
 800d256:	f003 0306 	and.w	r3, r3, #6
 800d25a:	2b04      	cmp	r3, #4
 800d25c:	bf02      	ittt	eq
 800d25e:	68e5      	ldreq	r5, [r4, #12]
 800d260:	6833      	ldreq	r3, [r6, #0]
 800d262:	1aed      	subeq	r5, r5, r3
 800d264:	68a3      	ldr	r3, [r4, #8]
 800d266:	bf0c      	ite	eq
 800d268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d26c:	2500      	movne	r5, #0
 800d26e:	4293      	cmp	r3, r2
 800d270:	bfc4      	itt	gt
 800d272:	1a9b      	subgt	r3, r3, r2
 800d274:	18ed      	addgt	r5, r5, r3
 800d276:	2600      	movs	r6, #0
 800d278:	341a      	adds	r4, #26
 800d27a:	42b5      	cmp	r5, r6
 800d27c:	d11a      	bne.n	800d2b4 <_printf_common+0xc8>
 800d27e:	2000      	movs	r0, #0
 800d280:	e008      	b.n	800d294 <_printf_common+0xa8>
 800d282:	2301      	movs	r3, #1
 800d284:	4652      	mov	r2, sl
 800d286:	4649      	mov	r1, r9
 800d288:	4638      	mov	r0, r7
 800d28a:	47c0      	blx	r8
 800d28c:	3001      	adds	r0, #1
 800d28e:	d103      	bne.n	800d298 <_printf_common+0xac>
 800d290:	f04f 30ff 	mov.w	r0, #4294967295
 800d294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d298:	3501      	adds	r5, #1
 800d29a:	e7c6      	b.n	800d22a <_printf_common+0x3e>
 800d29c:	18e1      	adds	r1, r4, r3
 800d29e:	1c5a      	adds	r2, r3, #1
 800d2a0:	2030      	movs	r0, #48	; 0x30
 800d2a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2a6:	4422      	add	r2, r4
 800d2a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2b0:	3302      	adds	r3, #2
 800d2b2:	e7c7      	b.n	800d244 <_printf_common+0x58>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	4622      	mov	r2, r4
 800d2b8:	4649      	mov	r1, r9
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	47c0      	blx	r8
 800d2be:	3001      	adds	r0, #1
 800d2c0:	d0e6      	beq.n	800d290 <_printf_common+0xa4>
 800d2c2:	3601      	adds	r6, #1
 800d2c4:	e7d9      	b.n	800d27a <_printf_common+0x8e>
	...

0800d2c8 <_printf_i>:
 800d2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	7e0f      	ldrb	r7, [r1, #24]
 800d2ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2d0:	2f78      	cmp	r7, #120	; 0x78
 800d2d2:	4691      	mov	r9, r2
 800d2d4:	4680      	mov	r8, r0
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	469a      	mov	sl, r3
 800d2da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2de:	d807      	bhi.n	800d2f0 <_printf_i+0x28>
 800d2e0:	2f62      	cmp	r7, #98	; 0x62
 800d2e2:	d80a      	bhi.n	800d2fa <_printf_i+0x32>
 800d2e4:	2f00      	cmp	r7, #0
 800d2e6:	f000 80d4 	beq.w	800d492 <_printf_i+0x1ca>
 800d2ea:	2f58      	cmp	r7, #88	; 0x58
 800d2ec:	f000 80c0 	beq.w	800d470 <_printf_i+0x1a8>
 800d2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2f8:	e03a      	b.n	800d370 <_printf_i+0xa8>
 800d2fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2fe:	2b15      	cmp	r3, #21
 800d300:	d8f6      	bhi.n	800d2f0 <_printf_i+0x28>
 800d302:	a101      	add	r1, pc, #4	; (adr r1, 800d308 <_printf_i+0x40>)
 800d304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d308:	0800d361 	.word	0x0800d361
 800d30c:	0800d375 	.word	0x0800d375
 800d310:	0800d2f1 	.word	0x0800d2f1
 800d314:	0800d2f1 	.word	0x0800d2f1
 800d318:	0800d2f1 	.word	0x0800d2f1
 800d31c:	0800d2f1 	.word	0x0800d2f1
 800d320:	0800d375 	.word	0x0800d375
 800d324:	0800d2f1 	.word	0x0800d2f1
 800d328:	0800d2f1 	.word	0x0800d2f1
 800d32c:	0800d2f1 	.word	0x0800d2f1
 800d330:	0800d2f1 	.word	0x0800d2f1
 800d334:	0800d479 	.word	0x0800d479
 800d338:	0800d3a1 	.word	0x0800d3a1
 800d33c:	0800d433 	.word	0x0800d433
 800d340:	0800d2f1 	.word	0x0800d2f1
 800d344:	0800d2f1 	.word	0x0800d2f1
 800d348:	0800d49b 	.word	0x0800d49b
 800d34c:	0800d2f1 	.word	0x0800d2f1
 800d350:	0800d3a1 	.word	0x0800d3a1
 800d354:	0800d2f1 	.word	0x0800d2f1
 800d358:	0800d2f1 	.word	0x0800d2f1
 800d35c:	0800d43b 	.word	0x0800d43b
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	1d1a      	adds	r2, r3, #4
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	602a      	str	r2, [r5, #0]
 800d368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d370:	2301      	movs	r3, #1
 800d372:	e09f      	b.n	800d4b4 <_printf_i+0x1ec>
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	682b      	ldr	r3, [r5, #0]
 800d378:	0607      	lsls	r7, r0, #24
 800d37a:	f103 0104 	add.w	r1, r3, #4
 800d37e:	6029      	str	r1, [r5, #0]
 800d380:	d501      	bpl.n	800d386 <_printf_i+0xbe>
 800d382:	681e      	ldr	r6, [r3, #0]
 800d384:	e003      	b.n	800d38e <_printf_i+0xc6>
 800d386:	0646      	lsls	r6, r0, #25
 800d388:	d5fb      	bpl.n	800d382 <_printf_i+0xba>
 800d38a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d38e:	2e00      	cmp	r6, #0
 800d390:	da03      	bge.n	800d39a <_printf_i+0xd2>
 800d392:	232d      	movs	r3, #45	; 0x2d
 800d394:	4276      	negs	r6, r6
 800d396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d39a:	485a      	ldr	r0, [pc, #360]	; (800d504 <_printf_i+0x23c>)
 800d39c:	230a      	movs	r3, #10
 800d39e:	e012      	b.n	800d3c6 <_printf_i+0xfe>
 800d3a0:	682b      	ldr	r3, [r5, #0]
 800d3a2:	6820      	ldr	r0, [r4, #0]
 800d3a4:	1d19      	adds	r1, r3, #4
 800d3a6:	6029      	str	r1, [r5, #0]
 800d3a8:	0605      	lsls	r5, r0, #24
 800d3aa:	d501      	bpl.n	800d3b0 <_printf_i+0xe8>
 800d3ac:	681e      	ldr	r6, [r3, #0]
 800d3ae:	e002      	b.n	800d3b6 <_printf_i+0xee>
 800d3b0:	0641      	lsls	r1, r0, #25
 800d3b2:	d5fb      	bpl.n	800d3ac <_printf_i+0xe4>
 800d3b4:	881e      	ldrh	r6, [r3, #0]
 800d3b6:	4853      	ldr	r0, [pc, #332]	; (800d504 <_printf_i+0x23c>)
 800d3b8:	2f6f      	cmp	r7, #111	; 0x6f
 800d3ba:	bf0c      	ite	eq
 800d3bc:	2308      	moveq	r3, #8
 800d3be:	230a      	movne	r3, #10
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3c6:	6865      	ldr	r5, [r4, #4]
 800d3c8:	60a5      	str	r5, [r4, #8]
 800d3ca:	2d00      	cmp	r5, #0
 800d3cc:	bfa2      	ittt	ge
 800d3ce:	6821      	ldrge	r1, [r4, #0]
 800d3d0:	f021 0104 	bicge.w	r1, r1, #4
 800d3d4:	6021      	strge	r1, [r4, #0]
 800d3d6:	b90e      	cbnz	r6, 800d3dc <_printf_i+0x114>
 800d3d8:	2d00      	cmp	r5, #0
 800d3da:	d04b      	beq.n	800d474 <_printf_i+0x1ac>
 800d3dc:	4615      	mov	r5, r2
 800d3de:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3e2:	fb03 6711 	mls	r7, r3, r1, r6
 800d3e6:	5dc7      	ldrb	r7, [r0, r7]
 800d3e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3ec:	4637      	mov	r7, r6
 800d3ee:	42bb      	cmp	r3, r7
 800d3f0:	460e      	mov	r6, r1
 800d3f2:	d9f4      	bls.n	800d3de <_printf_i+0x116>
 800d3f4:	2b08      	cmp	r3, #8
 800d3f6:	d10b      	bne.n	800d410 <_printf_i+0x148>
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	07de      	lsls	r6, r3, #31
 800d3fc:	d508      	bpl.n	800d410 <_printf_i+0x148>
 800d3fe:	6923      	ldr	r3, [r4, #16]
 800d400:	6861      	ldr	r1, [r4, #4]
 800d402:	4299      	cmp	r1, r3
 800d404:	bfde      	ittt	le
 800d406:	2330      	movle	r3, #48	; 0x30
 800d408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d40c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d410:	1b52      	subs	r2, r2, r5
 800d412:	6122      	str	r2, [r4, #16]
 800d414:	f8cd a000 	str.w	sl, [sp]
 800d418:	464b      	mov	r3, r9
 800d41a:	aa03      	add	r2, sp, #12
 800d41c:	4621      	mov	r1, r4
 800d41e:	4640      	mov	r0, r8
 800d420:	f7ff fee4 	bl	800d1ec <_printf_common>
 800d424:	3001      	adds	r0, #1
 800d426:	d14a      	bne.n	800d4be <_printf_i+0x1f6>
 800d428:	f04f 30ff 	mov.w	r0, #4294967295
 800d42c:	b004      	add	sp, #16
 800d42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d432:	6823      	ldr	r3, [r4, #0]
 800d434:	f043 0320 	orr.w	r3, r3, #32
 800d438:	6023      	str	r3, [r4, #0]
 800d43a:	4833      	ldr	r0, [pc, #204]	; (800d508 <_printf_i+0x240>)
 800d43c:	2778      	movs	r7, #120	; 0x78
 800d43e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	6829      	ldr	r1, [r5, #0]
 800d446:	061f      	lsls	r7, r3, #24
 800d448:	f851 6b04 	ldr.w	r6, [r1], #4
 800d44c:	d402      	bmi.n	800d454 <_printf_i+0x18c>
 800d44e:	065f      	lsls	r7, r3, #25
 800d450:	bf48      	it	mi
 800d452:	b2b6      	uxthmi	r6, r6
 800d454:	07df      	lsls	r7, r3, #31
 800d456:	bf48      	it	mi
 800d458:	f043 0320 	orrmi.w	r3, r3, #32
 800d45c:	6029      	str	r1, [r5, #0]
 800d45e:	bf48      	it	mi
 800d460:	6023      	strmi	r3, [r4, #0]
 800d462:	b91e      	cbnz	r6, 800d46c <_printf_i+0x1a4>
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	f023 0320 	bic.w	r3, r3, #32
 800d46a:	6023      	str	r3, [r4, #0]
 800d46c:	2310      	movs	r3, #16
 800d46e:	e7a7      	b.n	800d3c0 <_printf_i+0xf8>
 800d470:	4824      	ldr	r0, [pc, #144]	; (800d504 <_printf_i+0x23c>)
 800d472:	e7e4      	b.n	800d43e <_printf_i+0x176>
 800d474:	4615      	mov	r5, r2
 800d476:	e7bd      	b.n	800d3f4 <_printf_i+0x12c>
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	6826      	ldr	r6, [r4, #0]
 800d47c:	6961      	ldr	r1, [r4, #20]
 800d47e:	1d18      	adds	r0, r3, #4
 800d480:	6028      	str	r0, [r5, #0]
 800d482:	0635      	lsls	r5, r6, #24
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	d501      	bpl.n	800d48c <_printf_i+0x1c4>
 800d488:	6019      	str	r1, [r3, #0]
 800d48a:	e002      	b.n	800d492 <_printf_i+0x1ca>
 800d48c:	0670      	lsls	r0, r6, #25
 800d48e:	d5fb      	bpl.n	800d488 <_printf_i+0x1c0>
 800d490:	8019      	strh	r1, [r3, #0]
 800d492:	2300      	movs	r3, #0
 800d494:	6123      	str	r3, [r4, #16]
 800d496:	4615      	mov	r5, r2
 800d498:	e7bc      	b.n	800d414 <_printf_i+0x14c>
 800d49a:	682b      	ldr	r3, [r5, #0]
 800d49c:	1d1a      	adds	r2, r3, #4
 800d49e:	602a      	str	r2, [r5, #0]
 800d4a0:	681d      	ldr	r5, [r3, #0]
 800d4a2:	6862      	ldr	r2, [r4, #4]
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f7f2 feca 	bl	8000240 <memchr>
 800d4ac:	b108      	cbz	r0, 800d4b2 <_printf_i+0x1ea>
 800d4ae:	1b40      	subs	r0, r0, r5
 800d4b0:	6060      	str	r0, [r4, #4]
 800d4b2:	6863      	ldr	r3, [r4, #4]
 800d4b4:	6123      	str	r3, [r4, #16]
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4bc:	e7aa      	b.n	800d414 <_printf_i+0x14c>
 800d4be:	6923      	ldr	r3, [r4, #16]
 800d4c0:	462a      	mov	r2, r5
 800d4c2:	4649      	mov	r1, r9
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	47d0      	blx	sl
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	d0ad      	beq.n	800d428 <_printf_i+0x160>
 800d4cc:	6823      	ldr	r3, [r4, #0]
 800d4ce:	079b      	lsls	r3, r3, #30
 800d4d0:	d413      	bmi.n	800d4fa <_printf_i+0x232>
 800d4d2:	68e0      	ldr	r0, [r4, #12]
 800d4d4:	9b03      	ldr	r3, [sp, #12]
 800d4d6:	4298      	cmp	r0, r3
 800d4d8:	bfb8      	it	lt
 800d4da:	4618      	movlt	r0, r3
 800d4dc:	e7a6      	b.n	800d42c <_printf_i+0x164>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	4632      	mov	r2, r6
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	4640      	mov	r0, r8
 800d4e6:	47d0      	blx	sl
 800d4e8:	3001      	adds	r0, #1
 800d4ea:	d09d      	beq.n	800d428 <_printf_i+0x160>
 800d4ec:	3501      	adds	r5, #1
 800d4ee:	68e3      	ldr	r3, [r4, #12]
 800d4f0:	9903      	ldr	r1, [sp, #12]
 800d4f2:	1a5b      	subs	r3, r3, r1
 800d4f4:	42ab      	cmp	r3, r5
 800d4f6:	dcf2      	bgt.n	800d4de <_printf_i+0x216>
 800d4f8:	e7eb      	b.n	800d4d2 <_printf_i+0x20a>
 800d4fa:	2500      	movs	r5, #0
 800d4fc:	f104 0619 	add.w	r6, r4, #25
 800d500:	e7f5      	b.n	800d4ee <_printf_i+0x226>
 800d502:	bf00      	nop
 800d504:	0800e0e5 	.word	0x0800e0e5
 800d508:	0800e0f6 	.word	0x0800e0f6

0800d50c <__sflush_r>:
 800d50c:	898a      	ldrh	r2, [r1, #12]
 800d50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d512:	4605      	mov	r5, r0
 800d514:	0710      	lsls	r0, r2, #28
 800d516:	460c      	mov	r4, r1
 800d518:	d458      	bmi.n	800d5cc <__sflush_r+0xc0>
 800d51a:	684b      	ldr	r3, [r1, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	dc05      	bgt.n	800d52c <__sflush_r+0x20>
 800d520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d522:	2b00      	cmp	r3, #0
 800d524:	dc02      	bgt.n	800d52c <__sflush_r+0x20>
 800d526:	2000      	movs	r0, #0
 800d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d52e:	2e00      	cmp	r6, #0
 800d530:	d0f9      	beq.n	800d526 <__sflush_r+0x1a>
 800d532:	2300      	movs	r3, #0
 800d534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d538:	682f      	ldr	r7, [r5, #0]
 800d53a:	6a21      	ldr	r1, [r4, #32]
 800d53c:	602b      	str	r3, [r5, #0]
 800d53e:	d032      	beq.n	800d5a6 <__sflush_r+0x9a>
 800d540:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	075a      	lsls	r2, r3, #29
 800d546:	d505      	bpl.n	800d554 <__sflush_r+0x48>
 800d548:	6863      	ldr	r3, [r4, #4]
 800d54a:	1ac0      	subs	r0, r0, r3
 800d54c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d54e:	b10b      	cbz	r3, 800d554 <__sflush_r+0x48>
 800d550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d552:	1ac0      	subs	r0, r0, r3
 800d554:	2300      	movs	r3, #0
 800d556:	4602      	mov	r2, r0
 800d558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d55a:	6a21      	ldr	r1, [r4, #32]
 800d55c:	4628      	mov	r0, r5
 800d55e:	47b0      	blx	r6
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	d106      	bne.n	800d574 <__sflush_r+0x68>
 800d566:	6829      	ldr	r1, [r5, #0]
 800d568:	291d      	cmp	r1, #29
 800d56a:	d82b      	bhi.n	800d5c4 <__sflush_r+0xb8>
 800d56c:	4a29      	ldr	r2, [pc, #164]	; (800d614 <__sflush_r+0x108>)
 800d56e:	410a      	asrs	r2, r1
 800d570:	07d6      	lsls	r6, r2, #31
 800d572:	d427      	bmi.n	800d5c4 <__sflush_r+0xb8>
 800d574:	2200      	movs	r2, #0
 800d576:	6062      	str	r2, [r4, #4]
 800d578:	04d9      	lsls	r1, r3, #19
 800d57a:	6922      	ldr	r2, [r4, #16]
 800d57c:	6022      	str	r2, [r4, #0]
 800d57e:	d504      	bpl.n	800d58a <__sflush_r+0x7e>
 800d580:	1c42      	adds	r2, r0, #1
 800d582:	d101      	bne.n	800d588 <__sflush_r+0x7c>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b903      	cbnz	r3, 800d58a <__sflush_r+0x7e>
 800d588:	6560      	str	r0, [r4, #84]	; 0x54
 800d58a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d58c:	602f      	str	r7, [r5, #0]
 800d58e:	2900      	cmp	r1, #0
 800d590:	d0c9      	beq.n	800d526 <__sflush_r+0x1a>
 800d592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d596:	4299      	cmp	r1, r3
 800d598:	d002      	beq.n	800d5a0 <__sflush_r+0x94>
 800d59a:	4628      	mov	r0, r5
 800d59c:	f7ff fc96 	bl	800cecc <_free_r>
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	6360      	str	r0, [r4, #52]	; 0x34
 800d5a4:	e7c0      	b.n	800d528 <__sflush_r+0x1c>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	47b0      	blx	r6
 800d5ac:	1c41      	adds	r1, r0, #1
 800d5ae:	d1c8      	bne.n	800d542 <__sflush_r+0x36>
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0c5      	beq.n	800d542 <__sflush_r+0x36>
 800d5b6:	2b1d      	cmp	r3, #29
 800d5b8:	d001      	beq.n	800d5be <__sflush_r+0xb2>
 800d5ba:	2b16      	cmp	r3, #22
 800d5bc:	d101      	bne.n	800d5c2 <__sflush_r+0xb6>
 800d5be:	602f      	str	r7, [r5, #0]
 800d5c0:	e7b1      	b.n	800d526 <__sflush_r+0x1a>
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c8:	81a3      	strh	r3, [r4, #12]
 800d5ca:	e7ad      	b.n	800d528 <__sflush_r+0x1c>
 800d5cc:	690f      	ldr	r7, [r1, #16]
 800d5ce:	2f00      	cmp	r7, #0
 800d5d0:	d0a9      	beq.n	800d526 <__sflush_r+0x1a>
 800d5d2:	0793      	lsls	r3, r2, #30
 800d5d4:	680e      	ldr	r6, [r1, #0]
 800d5d6:	bf08      	it	eq
 800d5d8:	694b      	ldreq	r3, [r1, #20]
 800d5da:	600f      	str	r7, [r1, #0]
 800d5dc:	bf18      	it	ne
 800d5de:	2300      	movne	r3, #0
 800d5e0:	eba6 0807 	sub.w	r8, r6, r7
 800d5e4:	608b      	str	r3, [r1, #8]
 800d5e6:	f1b8 0f00 	cmp.w	r8, #0
 800d5ea:	dd9c      	ble.n	800d526 <__sflush_r+0x1a>
 800d5ec:	6a21      	ldr	r1, [r4, #32]
 800d5ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5f0:	4643      	mov	r3, r8
 800d5f2:	463a      	mov	r2, r7
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	47b0      	blx	r6
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	dc06      	bgt.n	800d60a <__sflush_r+0xfe>
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d602:	81a3      	strh	r3, [r4, #12]
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	e78e      	b.n	800d528 <__sflush_r+0x1c>
 800d60a:	4407      	add	r7, r0
 800d60c:	eba8 0800 	sub.w	r8, r8, r0
 800d610:	e7e9      	b.n	800d5e6 <__sflush_r+0xda>
 800d612:	bf00      	nop
 800d614:	dfbffffe 	.word	0xdfbffffe

0800d618 <_fflush_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	690b      	ldr	r3, [r1, #16]
 800d61c:	4605      	mov	r5, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	b913      	cbnz	r3, 800d628 <_fflush_r+0x10>
 800d622:	2500      	movs	r5, #0
 800d624:	4628      	mov	r0, r5
 800d626:	bd38      	pop	{r3, r4, r5, pc}
 800d628:	b118      	cbz	r0, 800d632 <_fflush_r+0x1a>
 800d62a:	6a03      	ldr	r3, [r0, #32]
 800d62c:	b90b      	cbnz	r3, 800d632 <_fflush_r+0x1a>
 800d62e:	f7ff fa2f 	bl	800ca90 <__sinit>
 800d632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d0f3      	beq.n	800d622 <_fflush_r+0xa>
 800d63a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d63c:	07d0      	lsls	r0, r2, #31
 800d63e:	d404      	bmi.n	800d64a <_fflush_r+0x32>
 800d640:	0599      	lsls	r1, r3, #22
 800d642:	d402      	bmi.n	800d64a <_fflush_r+0x32>
 800d644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d646:	f7ff fc30 	bl	800ceaa <__retarget_lock_acquire_recursive>
 800d64a:	4628      	mov	r0, r5
 800d64c:	4621      	mov	r1, r4
 800d64e:	f7ff ff5d 	bl	800d50c <__sflush_r>
 800d652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d654:	07da      	lsls	r2, r3, #31
 800d656:	4605      	mov	r5, r0
 800d658:	d4e4      	bmi.n	800d624 <_fflush_r+0xc>
 800d65a:	89a3      	ldrh	r3, [r4, #12]
 800d65c:	059b      	lsls	r3, r3, #22
 800d65e:	d4e1      	bmi.n	800d624 <_fflush_r+0xc>
 800d660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d662:	f7ff fc23 	bl	800ceac <__retarget_lock_release_recursive>
 800d666:	e7dd      	b.n	800d624 <_fflush_r+0xc>

0800d668 <__swhatbuf_r>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	460c      	mov	r4, r1
 800d66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d670:	2900      	cmp	r1, #0
 800d672:	b096      	sub	sp, #88	; 0x58
 800d674:	4615      	mov	r5, r2
 800d676:	461e      	mov	r6, r3
 800d678:	da0d      	bge.n	800d696 <__swhatbuf_r+0x2e>
 800d67a:	89a3      	ldrh	r3, [r4, #12]
 800d67c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d680:	f04f 0100 	mov.w	r1, #0
 800d684:	bf0c      	ite	eq
 800d686:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d68a:	2340      	movne	r3, #64	; 0x40
 800d68c:	2000      	movs	r0, #0
 800d68e:	6031      	str	r1, [r6, #0]
 800d690:	602b      	str	r3, [r5, #0]
 800d692:	b016      	add	sp, #88	; 0x58
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	466a      	mov	r2, sp
 800d698:	f000 f87c 	bl	800d794 <_fstat_r>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	dbec      	blt.n	800d67a <__swhatbuf_r+0x12>
 800d6a0:	9901      	ldr	r1, [sp, #4]
 800d6a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d6a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d6aa:	4259      	negs	r1, r3
 800d6ac:	4159      	adcs	r1, r3
 800d6ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6b2:	e7eb      	b.n	800d68c <__swhatbuf_r+0x24>

0800d6b4 <__smakebuf_r>:
 800d6b4:	898b      	ldrh	r3, [r1, #12]
 800d6b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6b8:	079d      	lsls	r5, r3, #30
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	460c      	mov	r4, r1
 800d6be:	d507      	bpl.n	800d6d0 <__smakebuf_r+0x1c>
 800d6c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	6123      	str	r3, [r4, #16]
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	6163      	str	r3, [r4, #20]
 800d6cc:	b002      	add	sp, #8
 800d6ce:	bd70      	pop	{r4, r5, r6, pc}
 800d6d0:	ab01      	add	r3, sp, #4
 800d6d2:	466a      	mov	r2, sp
 800d6d4:	f7ff ffc8 	bl	800d668 <__swhatbuf_r>
 800d6d8:	9900      	ldr	r1, [sp, #0]
 800d6da:	4605      	mov	r5, r0
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f7ff f8bf 	bl	800c860 <_malloc_r>
 800d6e2:	b948      	cbnz	r0, 800d6f8 <__smakebuf_r+0x44>
 800d6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e8:	059a      	lsls	r2, r3, #22
 800d6ea:	d4ef      	bmi.n	800d6cc <__smakebuf_r+0x18>
 800d6ec:	f023 0303 	bic.w	r3, r3, #3
 800d6f0:	f043 0302 	orr.w	r3, r3, #2
 800d6f4:	81a3      	strh	r3, [r4, #12]
 800d6f6:	e7e3      	b.n	800d6c0 <__smakebuf_r+0xc>
 800d6f8:	89a3      	ldrh	r3, [r4, #12]
 800d6fa:	6020      	str	r0, [r4, #0]
 800d6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d700:	81a3      	strh	r3, [r4, #12]
 800d702:	9b00      	ldr	r3, [sp, #0]
 800d704:	6163      	str	r3, [r4, #20]
 800d706:	9b01      	ldr	r3, [sp, #4]
 800d708:	6120      	str	r0, [r4, #16]
 800d70a:	b15b      	cbz	r3, 800d724 <__smakebuf_r+0x70>
 800d70c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d710:	4630      	mov	r0, r6
 800d712:	f000 f851 	bl	800d7b8 <_isatty_r>
 800d716:	b128      	cbz	r0, 800d724 <__smakebuf_r+0x70>
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	f023 0303 	bic.w	r3, r3, #3
 800d71e:	f043 0301 	orr.w	r3, r3, #1
 800d722:	81a3      	strh	r3, [r4, #12]
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	431d      	orrs	r5, r3
 800d728:	81a5      	strh	r5, [r4, #12]
 800d72a:	e7cf      	b.n	800d6cc <__smakebuf_r+0x18>

0800d72c <_putc_r>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	460d      	mov	r5, r1
 800d730:	4614      	mov	r4, r2
 800d732:	4606      	mov	r6, r0
 800d734:	b118      	cbz	r0, 800d73e <_putc_r+0x12>
 800d736:	6a03      	ldr	r3, [r0, #32]
 800d738:	b90b      	cbnz	r3, 800d73e <_putc_r+0x12>
 800d73a:	f7ff f9a9 	bl	800ca90 <__sinit>
 800d73e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d740:	07d8      	lsls	r0, r3, #31
 800d742:	d405      	bmi.n	800d750 <_putc_r+0x24>
 800d744:	89a3      	ldrh	r3, [r4, #12]
 800d746:	0599      	lsls	r1, r3, #22
 800d748:	d402      	bmi.n	800d750 <_putc_r+0x24>
 800d74a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d74c:	f7ff fbad 	bl	800ceaa <__retarget_lock_acquire_recursive>
 800d750:	68a3      	ldr	r3, [r4, #8]
 800d752:	3b01      	subs	r3, #1
 800d754:	2b00      	cmp	r3, #0
 800d756:	60a3      	str	r3, [r4, #8]
 800d758:	da05      	bge.n	800d766 <_putc_r+0x3a>
 800d75a:	69a2      	ldr	r2, [r4, #24]
 800d75c:	4293      	cmp	r3, r2
 800d75e:	db12      	blt.n	800d786 <_putc_r+0x5a>
 800d760:	b2eb      	uxtb	r3, r5
 800d762:	2b0a      	cmp	r3, #10
 800d764:	d00f      	beq.n	800d786 <_putc_r+0x5a>
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	6022      	str	r2, [r4, #0]
 800d76c:	701d      	strb	r5, [r3, #0]
 800d76e:	b2ed      	uxtb	r5, r5
 800d770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d772:	07da      	lsls	r2, r3, #31
 800d774:	d405      	bmi.n	800d782 <_putc_r+0x56>
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	059b      	lsls	r3, r3, #22
 800d77a:	d402      	bmi.n	800d782 <_putc_r+0x56>
 800d77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d77e:	f7ff fb95 	bl	800ceac <__retarget_lock_release_recursive>
 800d782:	4628      	mov	r0, r5
 800d784:	bd70      	pop	{r4, r5, r6, pc}
 800d786:	4629      	mov	r1, r5
 800d788:	4622      	mov	r2, r4
 800d78a:	4630      	mov	r0, r6
 800d78c:	f7ff fa6f 	bl	800cc6e <__swbuf_r>
 800d790:	4605      	mov	r5, r0
 800d792:	e7ed      	b.n	800d770 <_putc_r+0x44>

0800d794 <_fstat_r>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4d07      	ldr	r5, [pc, #28]	; (800d7b4 <_fstat_r+0x20>)
 800d798:	2300      	movs	r3, #0
 800d79a:	4604      	mov	r4, r0
 800d79c:	4608      	mov	r0, r1
 800d79e:	4611      	mov	r1, r2
 800d7a0:	602b      	str	r3, [r5, #0]
 800d7a2:	f7f3 f952 	bl	8000a4a <_fstat>
 800d7a6:	1c43      	adds	r3, r0, #1
 800d7a8:	d102      	bne.n	800d7b0 <_fstat_r+0x1c>
 800d7aa:	682b      	ldr	r3, [r5, #0]
 800d7ac:	b103      	cbz	r3, 800d7b0 <_fstat_r+0x1c>
 800d7ae:	6023      	str	r3, [r4, #0]
 800d7b0:	bd38      	pop	{r3, r4, r5, pc}
 800d7b2:	bf00      	nop
 800d7b4:	20000994 	.word	0x20000994

0800d7b8 <_isatty_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4d06      	ldr	r5, [pc, #24]	; (800d7d4 <_isatty_r+0x1c>)
 800d7bc:	2300      	movs	r3, #0
 800d7be:	4604      	mov	r4, r0
 800d7c0:	4608      	mov	r0, r1
 800d7c2:	602b      	str	r3, [r5, #0]
 800d7c4:	f7f3 f951 	bl	8000a6a <_isatty>
 800d7c8:	1c43      	adds	r3, r0, #1
 800d7ca:	d102      	bne.n	800d7d2 <_isatty_r+0x1a>
 800d7cc:	682b      	ldr	r3, [r5, #0]
 800d7ce:	b103      	cbz	r3, 800d7d2 <_isatty_r+0x1a>
 800d7d0:	6023      	str	r3, [r4, #0]
 800d7d2:	bd38      	pop	{r3, r4, r5, pc}
 800d7d4:	20000994 	.word	0x20000994

0800d7d8 <_init>:
 800d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7da:	bf00      	nop
 800d7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7de:	bc08      	pop	{r3}
 800d7e0:	469e      	mov	lr, r3
 800d7e2:	4770      	bx	lr

0800d7e4 <_fini>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	bf00      	nop
 800d7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ea:	bc08      	pop	{r3}
 800d7ec:	469e      	mov	lr, r3
 800d7ee:	4770      	bx	lr
