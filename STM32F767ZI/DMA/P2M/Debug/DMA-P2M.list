
DMA-P2M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c8  080041c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d0  080041d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  080041e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080041e4  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaba  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c0  00000000  00000000  0002aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dda  00000000  00000000  0002d100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cb7  00000000  00000000  00052eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed270  00000000  00000000  0005cb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149e01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d40  00000000  00000000  00149e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004190 	.word	0x08004190

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004190 	.word	0x08004190

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000540:	f000 f8f4 	bl	800072c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fa97 	bl	8000a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f810 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f8c0 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 f898 	bl	8000684 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f866 	bl	8000624 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart3, RX_BUF, sizeof(RX_BUF));
 8000558:	2264      	movs	r2, #100	; 0x64
 800055a:	4902      	ldr	r1, [pc, #8]	; (8000564 <main+0x28>)
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <main+0x2c>)
 800055e:	f002 fbb1 	bl	8002cc4 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x26>
 8000564:	20000170 	.word	0x20000170
 8000568:	20000028 	.word	0x20000028

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fe00 	bl	8004180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xb0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <SystemClock_Config+0xb0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xb0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <SystemClock_Config+0xb4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <SystemClock_Config+0xb4>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <SystemClock_Config+0xb4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f9ed 	bl	80019b8 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005e4:	f000 f8ce 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fc86 	bl	8001f14 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060e:	f000 f8b9 	bl	8000784 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_USART3_UART_Init+0x58>)
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <MX_USART3_UART_Init+0x5c>)
 800062c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_USART3_UART_Init+0x58>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_USART3_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_USART3_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_USART3_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_USART3_UART_Init+0x58>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_USART3_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_USART3_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_USART3_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_USART3_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_USART3_UART_Init+0x58>)
 8000668:	f002 fa62 	bl	8002b30 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000672:	f000 f887 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	40004800 	.word	0x40004800

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_DMA_Init+0x48>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <MX_DMA_Init+0x48>)
 8000690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_DMA_Init+0x48>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200c      	movs	r0, #12
 80006a8:	f000 fb1d 	bl	8000ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006ac:	200c      	movs	r0, #12
 80006ae:	f000 fb36 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	200e      	movs	r0, #14
 80006b8:	f000 fb15 	bl	8000ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006bc:	200e      	movs	r0, #14
 80006be:	f000 fb2e 	bl	8000d1e <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	/* Re Transmit the data */
	HAL_UART_Transmit_DMA(&huart3, RX_BUF, sizeof(RX_BUF));
 8000708:	2264      	movs	r2, #100	; 0x64
 800070a:	4906      	ldr	r1, [pc, #24]	; (8000724 <HAL_UART_RxCpltCallback+0x24>)
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <HAL_UART_RxCpltCallback+0x28>)
 800070e:	f002 fa5d 	bl	8002bcc <HAL_UART_Transmit_DMA>

	/* Start the DMA again */
	HAL_UART_Receive_DMA(&huart3, RX_BUF, sizeof(RX_BUF));
 8000712:	2264      	movs	r2, #100	; 0x64
 8000714:	4903      	ldr	r1, [pc, #12]	; (8000724 <HAL_UART_RxCpltCallback+0x24>)
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <HAL_UART_RxCpltCallback+0x28>)
 8000718:	f002 fad4 	bl	8002cc4 <HAL_UART_Receive_DMA>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000170 	.word	0x20000170
 8000728:	20000028 	.word	0x20000028

0800072c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800073e:	f000 fb09 	bl	8000d54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000742:	2301      	movs	r3, #1
 8000744:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000746:	2300      	movs	r3, #0
 8000748:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800074e:	231f      	movs	r3, #31
 8000750:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000752:	2387      	movs	r3, #135	; 0x87
 8000754:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000756:	2300      	movs	r3, #0
 8000758:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800075a:	2300      	movs	r3, #0
 800075c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800075e:	2301      	movs	r3, #1
 8000760:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000762:	2301      	movs	r3, #1
 8000764:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800076e:	463b      	mov	r3, r7
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fb27 	bl	8000dc4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000776:	2004      	movs	r0, #4
 8000778:	f000 fb04 	bl	8000d84 <HAL_MPU_Enable>

}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x44>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x44>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0ae      	sub	sp, #184	; 0xb8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2290      	movs	r2, #144	; 0x90
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 fcc1 	bl	8004180 <memset>
  if(huart->Instance==USART3)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a54      	ldr	r2, [pc, #336]	; (8000954 <HAL_UART_MspInit+0x17c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	f040 80a1 	bne.w	800094c <HAL_UART_MspInit+0x174>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000810:	2300      	movs	r3, #0
 8000812:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fd61 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000824:	f7ff ffae 	bl	8000784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000828:	4b4b      	ldr	r3, [pc, #300]	; (8000958 <HAL_UART_MspInit+0x180>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a4a      	ldr	r2, [pc, #296]	; (8000958 <HAL_UART_MspInit+0x180>)
 800082e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b48      	ldr	r3, [pc, #288]	; (8000958 <HAL_UART_MspInit+0x180>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	4b45      	ldr	r3, [pc, #276]	; (8000958 <HAL_UART_MspInit+0x180>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a44      	ldr	r2, [pc, #272]	; (8000958 <HAL_UART_MspInit+0x180>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b42      	ldr	r3, [pc, #264]	; (8000958 <HAL_UART_MspInit+0x180>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000858:	f44f 7340 	mov.w	r3, #768	; 0x300
 800085c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000872:	2307      	movs	r3, #7
 8000874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800087c:	4619      	mov	r1, r3
 800087e:	4837      	ldr	r0, [pc, #220]	; (800095c <HAL_UART_MspInit+0x184>)
 8000880:	f000 feee 	bl	8001660 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000884:	4b36      	ldr	r3, [pc, #216]	; (8000960 <HAL_UART_MspInit+0x188>)
 8000886:	4a37      	ldr	r2, [pc, #220]	; (8000964 <HAL_UART_MspInit+0x18c>)
 8000888:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800088a:	4b35      	ldr	r3, [pc, #212]	; (8000960 <HAL_UART_MspInit+0x188>)
 800088c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000890:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <HAL_UART_MspInit+0x188>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000898:	4b31      	ldr	r3, [pc, #196]	; (8000960 <HAL_UART_MspInit+0x188>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008be:	4b28      	ldr	r3, [pc, #160]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80008c4:	4826      	ldr	r0, [pc, #152]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008c6:	f000 fac1 	bl	8000e4c <HAL_DMA_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80008d0:	f7ff ff58 	bl	8000784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a22      	ldr	r2, [pc, #136]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008d8:	675a      	str	r2, [r3, #116]	; 0x74
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <HAL_UART_MspInit+0x188>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <HAL_UART_MspInit+0x190>)
 80008e2:	4a22      	ldr	r2, [pc, #136]	; (800096c <HAL_UART_MspInit+0x194>)
 80008e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <HAL_UART_MspInit+0x190>)
 80008e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <HAL_UART_MspInit+0x190>)
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_UART_MspInit+0x190>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <HAL_UART_MspInit+0x190>)
 80008fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000900:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_UART_MspInit+0x190>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x190>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <HAL_UART_MspInit+0x190>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0x190>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <HAL_UART_MspInit+0x190>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <HAL_UART_MspInit+0x190>)
 8000922:	f000 fa93 	bl	8000e4c <HAL_DMA_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 800092c:	f7ff ff2a 	bl	8000784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <HAL_UART_MspInit+0x190>)
 8000934:	671a      	str	r2, [r3, #112]	; 0x70
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <HAL_UART_MspInit+0x190>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2027      	movs	r0, #39	; 0x27
 8000942:	f000 f9d0 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000946:	2027      	movs	r0, #39	; 0x27
 8000948:	f000 f9e9 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	37b8      	adds	r7, #184	; 0xb8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40004800 	.word	0x40004800
 8000958:	40023800 	.word	0x40023800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	200000b0 	.word	0x200000b0
 8000964:	40026028 	.word	0x40026028
 8000968:	20000110 	.word	0x20000110
 800096c:	40026058 	.word	0x40026058

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f898 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <DMA1_Stream1_IRQHandler+0x10>)
 80009ca:	f000 fbdf 	bl	800118c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000b0 	.word	0x200000b0

080009d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <DMA1_Stream3_IRQHandler+0x10>)
 80009de:	f000 fbd5 	bl	800118c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000110 	.word	0x20000110

080009ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <USART3_IRQHandler+0x10>)
 80009f2:	f002 f9ab 	bl	8002d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000028 	.word	0x20000028

08000a00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f003 fb71 	bl	8004138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd71 	bl	800053c <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a68:	080041d8 	.word	0x080041d8
  ldr r2, =_sbss
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a70:	200001d8 	.word	0x200001d8

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>

08000a76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 f928 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a80:	200f      	movs	r0, #15
 8000a82:	f000 f805 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a86:	f7ff fe83 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f943 	bl	8000d3a <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f90b 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200001d4 	.word	0x200001d4

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200001d4 	.word	0x200001d4

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <__NVIC_SetPriorityGrouping+0x40>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x40>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	05fa0000 	.word	0x05fa0000

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff29 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff3e 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff31 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa2 	bl	8000c8c <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d58:	f3bf 8f5f 	dmb	sy
}
 8000d5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_MPU_Disable+0x28>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_MPU_Disable+0x28>)
 8000d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d68:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_MPU_Disable+0x2c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	e000ed90 	.word	0xe000ed90

08000d84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <HAL_MPU_Enable+0x38>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_MPU_Enable+0x3c>)
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_MPU_Enable+0x3c>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000da2:	f3bf 8f4f 	dsb	sy
}
 8000da6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000da8:	f3bf 8f6f 	isb	sy
}
 8000dac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed90 	.word	0xe000ed90
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	785a      	ldrb	r2, [r3, #1]
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_MPU_ConfigRegion+0x84>)
 8000dd2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d029      	beq.n	8000e30 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <HAL_MPU_ConfigRegion+0x84>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7b1b      	ldrb	r3, [r3, #12]
 8000de8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7adb      	ldrb	r3, [r3, #11]
 8000dee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000df0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7a9b      	ldrb	r3, [r3, #10]
 8000df6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000df8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7b5b      	ldrb	r3, [r3, #13]
 8000dfe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7b9b      	ldrb	r3, [r3, #14]
 8000e06:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7bdb      	ldrb	r3, [r3, #15]
 8000e0e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7a5b      	ldrb	r3, [r3, #9]
 8000e16:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7a1b      	ldrb	r3, [r3, #8]
 8000e1e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e20:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e2a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e2c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000e2e:	e005      	b.n	8000e3c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_MPU_ConfigRegion+0x84>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_MPU_ConfigRegion+0x84>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed90 	.word	0xe000ed90

08000e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff fe5e 	bl	8000b18 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e099      	b.n	8000f9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0201 	bic.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e88:	e00f      	b.n	8000eaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e8a:	f7ff fe45 	bl	8000b18 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d908      	bls.n	8000eaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e078      	b.n	8000f9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e8      	bne.n	8000e8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <HAL_DMA_Init+0x158>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d107      	bne.n	8000f14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f023 0307 	bic.w	r3, r3, #7
 8000f2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d117      	bne.n	8000f6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00e      	beq.n	8000f6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fb09 	bl	8001568 <DMA_CheckFifoParam>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e016      	b.n	8000f9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fac0 	bl	80014fc <DMA_CalcBaseAndBitshift>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	223f      	movs	r2, #63	; 0x3f
 8000f86:	409a      	lsls	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	e010803f 	.word	0xe010803f

08000fa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <HAL_DMA_Start_IT+0x26>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e048      	b.n	8001060 <HAL_DMA_Start_IT+0xb8>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d137      	bne.n	8001052 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 fa52 	bl	80014a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001000:	223f      	movs	r2, #63	; 0x3f
 8001002:	409a      	lsls	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0216 	orr.w	r2, r2, #22
 8001016:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001026:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0208 	orr.w	r2, r2, #8
 800103e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e005      	b.n	800105e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800105a:	2302      	movs	r3, #2
 800105c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800105e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001074:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001076:	f7ff fd4f 	bl	8000b18 <HAL_GetTick>
 800107a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d008      	beq.n	800109a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e052      	b.n	8001140 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0216 	bic.w	r2, r2, #22
 80010a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <HAL_DMA_Abort+0x62>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0208 	bic.w	r2, r2, #8
 80010d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ea:	e013      	b.n	8001114 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ec:	f7ff fd14 	bl	8000b18 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d90c      	bls.n	8001114 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e015      	b.n	8001140 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e4      	bne.n	80010ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001126:	223f      	movs	r2, #63	; 0x3f
 8001128:	409a      	lsls	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d004      	beq.n	8001166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00c      	b.n	8001180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2205      	movs	r2, #5
 800116a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001198:	4b8e      	ldr	r3, [pc, #568]	; (80013d4 <HAL_DMA_IRQHandler+0x248>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a8e      	ldr	r2, [pc, #568]	; (80013d8 <HAL_DMA_IRQHandler+0x24c>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0a9b      	lsrs	r3, r3, #10
 80011a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b6:	2208      	movs	r2, #8
 80011b8:	409a      	lsls	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d01a      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0204 	bic.w	r2, r2, #4
 80011de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	2208      	movs	r2, #8
 80011e6:	409a      	lsls	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f0:	f043 0201 	orr.w	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	2201      	movs	r2, #1
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d012      	beq.n	800122e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121a:	2201      	movs	r2, #1
 800121c:	409a      	lsls	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	f043 0202 	orr.w	r2, r3, #2
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001232:	2204      	movs	r2, #4
 8001234:	409a      	lsls	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4013      	ands	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d012      	beq.n	8001264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00b      	beq.n	8001264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001250:	2204      	movs	r2, #4
 8001252:	409a      	lsls	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	f043 0204 	orr.w	r2, r3, #4
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001268:	2210      	movs	r2, #16
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d043      	beq.n	80012fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d03c      	beq.n	80012fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001286:	2210      	movs	r2, #16
 8001288:	409a      	lsls	r2, r3
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d018      	beq.n	80012ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d108      	bne.n	80012bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d024      	beq.n	80012fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
 80012ba:	e01f      	b.n	80012fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d01b      	beq.n	80012fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
 80012cc:	e016      	b.n	80012fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d107      	bne.n	80012ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0208 	bic.w	r2, r2, #8
 80012ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	2220      	movs	r2, #32
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 808f 	beq.w	800142c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 8087 	beq.w	800142c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001322:	2220      	movs	r2, #32
 8001324:	409a      	lsls	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b05      	cmp	r3, #5
 8001334:	d136      	bne.n	80013a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0216 	bic.w	r2, r2, #22
 8001344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	695a      	ldr	r2, [r3, #20]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d103      	bne.n	8001366 <HAL_DMA_IRQHandler+0x1da>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0208 	bic.w	r2, r2, #8
 8001374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137a:	223f      	movs	r2, #63	; 0x3f
 800137c:	409a      	lsls	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001396:	2b00      	cmp	r3, #0
 8001398:	d07e      	beq.n	8001498 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	4798      	blx	r3
        }
        return;
 80013a2:	e079      	b.n	8001498 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01d      	beq.n	80013ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10d      	bne.n	80013dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d031      	beq.n	800142c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4798      	blx	r3
 80013d0:	e02c      	b.n	800142c <HAL_DMA_IRQHandler+0x2a0>
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000
 80013d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d023      	beq.n	800142c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	4798      	blx	r3
 80013ec:	e01e      	b.n	800142c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10f      	bne.n	800141c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0210 	bic.w	r2, r2, #16
 800140a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001430:	2b00      	cmp	r3, #0
 8001432:	d032      	beq.n	800149a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d022      	beq.n	8001486 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2205      	movs	r2, #5
 8001444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3301      	adds	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	429a      	cmp	r2, r3
 8001462:	d307      	bcc.n	8001474 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f2      	bne.n	8001458 <HAL_DMA_IRQHandler+0x2cc>
 8001472:	e000      	b.n	8001476 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001474:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
 8001496:	e000      	b.n	800149a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001498:	bf00      	nop
    }
  }
}
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b40      	cmp	r3, #64	; 0x40
 80014cc:	d108      	bne.n	80014e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014de:	e007      	b.n	80014f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	60da      	str	r2, [r3, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	3b10      	subs	r3, #16
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <DMA_CalcBaseAndBitshift+0x60>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <DMA_CalcBaseAndBitshift+0x64>)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d908      	bls.n	800153c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <DMA_CalcBaseAndBitshift+0x68>)
 8001532:	4013      	ands	r3, r2
 8001534:	1d1a      	adds	r2, r3, #4
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	659a      	str	r2, [r3, #88]	; 0x58
 800153a:	e006      	b.n	800154a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <DMA_CalcBaseAndBitshift+0x68>)
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	aaaaaaab 	.word	0xaaaaaaab
 8001560:	080041c0 	.word	0x080041c0
 8001564:	fffffc00 	.word	0xfffffc00

08001568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11f      	bne.n	80015c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d856      	bhi.n	8001636 <DMA_CheckFifoParam+0xce>
 8001588:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <DMA_CheckFifoParam+0x28>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015a1 	.word	0x080015a1
 8001594:	080015b3 	.word	0x080015b3
 8001598:	080015a1 	.word	0x080015a1
 800159c:	08001637 	.word	0x08001637
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d046      	beq.n	800163a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015b0:	e043      	b.n	800163a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015ba:	d140      	bne.n	800163e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c0:	e03d      	b.n	800163e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ca:	d121      	bne.n	8001610 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d837      	bhi.n	8001642 <DMA_CheckFifoParam+0xda>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <DMA_CheckFifoParam+0x70>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	080015ef 	.word	0x080015ef
 80015e0:	080015e9 	.word	0x080015e9
 80015e4:	08001601 	.word	0x08001601
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
      break;
 80015ec:	e030      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d025      	beq.n	8001646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015fe:	e022      	b.n	8001646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001608:	d11f      	bne.n	800164a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800160e:	e01c      	b.n	800164a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d903      	bls.n	800161e <DMA_CheckFifoParam+0xb6>
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d003      	beq.n	8001624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800161c:	e018      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
      break;
 8001622:	e015      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00e      	beq.n	800164e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
      break;
 8001634:	e00b      	b.n	800164e <DMA_CheckFifoParam+0xe6>
      break;
 8001636:	bf00      	nop
 8001638:	e00a      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
      break;
 800163a:	bf00      	nop
 800163c:	e008      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
      break;
 800163e:	bf00      	nop
 8001640:	e006      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
      break;
 8001642:	bf00      	nop
 8001644:	e004      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
      break;
 8001646:	bf00      	nop
 8001648:	e002      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
      break;   
 800164a:	bf00      	nop
 800164c:	e000      	b.n	8001650 <DMA_CheckFifoParam+0xe8>
      break;
 800164e:	bf00      	nop
    }
  } 
  
  return status; 
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e175      	b.n	800196c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8164 	bne.w	8001966 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d005      	beq.n	80016b6 <HAL_GPIO_Init+0x56>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d130      	bne.n	8001718 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80be 	beq.w	8001966 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_GPIO_Init+0x324>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_GPIO_Init+0x324>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_GPIO_Init+0x324>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001802:	4a61      	ldr	r2, [pc, #388]	; (8001988 <HAL_GPIO_Init+0x328>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a58      	ldr	r2, [pc, #352]	; (800198c <HAL_GPIO_Init+0x32c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d037      	beq.n	800189e <HAL_GPIO_Init+0x23e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a57      	ldr	r2, [pc, #348]	; (8001990 <HAL_GPIO_Init+0x330>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d031      	beq.n	800189a <HAL_GPIO_Init+0x23a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a56      	ldr	r2, [pc, #344]	; (8001994 <HAL_GPIO_Init+0x334>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d02b      	beq.n	8001896 <HAL_GPIO_Init+0x236>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a55      	ldr	r2, [pc, #340]	; (8001998 <HAL_GPIO_Init+0x338>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d025      	beq.n	8001892 <HAL_GPIO_Init+0x232>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a54      	ldr	r2, [pc, #336]	; (800199c <HAL_GPIO_Init+0x33c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_Init+0x22e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a53      	ldr	r2, [pc, #332]	; (80019a0 <HAL_GPIO_Init+0x340>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x22a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_GPIO_Init+0x344>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x226>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_GPIO_Init+0x348>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x222>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a50      	ldr	r2, [pc, #320]	; (80019ac <HAL_GPIO_Init+0x34c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x21e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x350>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x21a>
 8001876:	2309      	movs	r3, #9
 8001878:	e012      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800187a:	230a      	movs	r3, #10
 800187c:	e010      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800187e:	2308      	movs	r3, #8
 8001880:	e00e      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 8001882:	2307      	movs	r3, #7
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 8001886:	2306      	movs	r3, #6
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800189e:	2300      	movs	r3, #0
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x328>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_GPIO_Init+0x354>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e2:	4a34      	ldr	r2, [pc, #208]	; (80019b4 <HAL_GPIO_Init+0x354>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_GPIO_Init+0x354>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <HAL_GPIO_Init+0x354>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <HAL_GPIO_Init+0x354>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_GPIO_Init+0x354>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_GPIO_Init+0x354>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_GPIO_Init+0x354>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	f67f ae86 	bls.w	8001680 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40021400 	.word	0x40021400
 80019a4:	40021800 	.word	0x40021800
 80019a8:	40021c00 	.word	0x40021c00
 80019ac:	40022000 	.word	0x40022000
 80019b0:	40022400 	.word	0x40022400
 80019b4:	40013c00 	.word	0x40013c00

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e29b      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8087 	beq.w	8001aea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019dc:	4b96      	ldr	r3, [pc, #600]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d00c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e8:	4b93      	ldr	r3, [pc, #588]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d112      	bne.n	8001a1a <HAL_RCC_OscConfig+0x62>
 80019f4:	4b90      	ldr	r3, [pc, #576]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a00:	d10b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d06c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x130>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d168      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e275      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x7a>
 8001a24:	4b84      	ldr	r3, [pc, #528]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a83      	ldr	r2, [pc, #524]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e02e      	b.n	8001a90 <HAL_RCC_OscConfig+0xd8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x9c>
 8001a3a:	4b7f      	ldr	r3, [pc, #508]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7e      	ldr	r2, [pc, #504]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b7c      	ldr	r3, [pc, #496]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a7b      	ldr	r2, [pc, #492]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e01d      	b.n	8001a90 <HAL_RCC_OscConfig+0xd8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0xc0>
 8001a5e:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a75      	ldr	r2, [pc, #468]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a72      	ldr	r2, [pc, #456]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0xd8>
 8001a78:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6e      	ldr	r2, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b6c      	ldr	r3, [pc, #432]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a6b      	ldr	r2, [pc, #428]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f83e 	bl	8000b18 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f83a 	bl	8000b18 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e229      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe8>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f82a 	bl	8000b18 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f826 	bl	8000b18 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e215      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x110>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d069      	beq.n	8001bca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b02:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d11c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x190>
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d116      	bne.n	8001b48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e1e9      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	493d      	ldr	r1, [pc, #244]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	e040      	b.n	8001bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b50:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a38      	ldr	r2, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7fe ffdc 	bl	8000b18 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7fe ffd8 	bl	8000b18 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1c7      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4929      	ldr	r1, [pc, #164]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
 8001b96:	e018      	b.n	8001bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ffb8 	bl	8000b18 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bac:	f7fe ffb4 	bl	8000b18 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1a3      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d038      	beq.n	8001c48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d019      	beq.n	8001c12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7fe ff95 	bl	8000b18 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7fe ff91 	bl	8000b18 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e180      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x23a>
 8001c10:	e01a      	b.n	8001c48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7fe ff7b 	bl	8000b18 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c26:	f7fe ff77 	bl	8000b18 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d903      	bls.n	8001c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e166      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
 8001c38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a4 	beq.w	8001d9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c56:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10d      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a88      	ldr	r2, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b86      	ldr	r3, [pc, #536]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7e:	4b83      	ldr	r3, [pc, #524]	; (8001e8c <HAL_RCC_OscConfig+0x4d4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c8a:	4b80      	ldr	r3, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x4d4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7f      	ldr	r2, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x4d4>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7fe ff3f 	bl	8000b18 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7fe ff3b 	bl	8000b18 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	; 0x64
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e12a      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb0:	4b76      	ldr	r3, [pc, #472]	; (8001e8c <HAL_RCC_OscConfig+0x4d4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x31a>
 8001cc4:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a6f      	ldr	r2, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	e02d      	b.n	8001d2e <HAL_RCC_OscConfig+0x376>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x33c>
 8001cda:	4b6b      	ldr	r3, [pc, #428]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a67      	ldr	r2, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf2:	e01c      	b.n	8001d2e <HAL_RCC_OscConfig+0x376>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x35e>
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a61      	ldr	r2, [pc, #388]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a5e      	ldr	r2, [pc, #376]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
 8001d14:	e00b      	b.n	8001d2e <HAL_RCC_OscConfig+0x376>
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	4a5b      	ldr	r2, [pc, #364]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6713      	str	r3, [r2, #112]	; 0x70
 8001d22:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d28:	f023 0304 	bic.w	r3, r3, #4
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d015      	beq.n	8001d62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d36:	f7fe feef 	bl	8000b18 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7fe feeb 	bl	8000b18 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0d8      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ee      	beq.n	8001d3e <HAL_RCC_OscConfig+0x386>
 8001d60:	e014      	b.n	8001d8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7fe fed9 	bl	8000b18 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fed5 	bl	8000b18 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e0c2      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ee      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a3c      	ldr	r2, [pc, #240]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80ae 	beq.w	8001f04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da8:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d06d      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d14b      	bne.n	8001e54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a31      	ldr	r2, [pc, #196]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe fea6 	bl	8000b18 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe fea2 	bl	8000b18 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e091      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	019b      	lsls	r3, r3, #6
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	085b      	lsrs	r3, r3, #1
 8001e06:	3b01      	subs	r3, #1
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	071b      	lsls	r3, r3, #28
 8001e1a:	491b      	ldr	r1, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fe74 	bl	8000b18 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe fe70 	bl	8000b18 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e05f      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x47c>
 8001e52:	e057      	b.n	8001f04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe fe5a 	bl	8000b18 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe fe56 	bl	8000b18 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e045      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_OscConfig+0x4d0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4b0>
 8001e86:	e03d      	b.n	8001f04 <HAL_RCC_OscConfig+0x54c>
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <HAL_RCC_OscConfig+0x558>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d030      	beq.n	8001f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d129      	bne.n	8001f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d122      	bne.n	8001f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ec6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d119      	bne.n	8001f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d10f      	bne.n	8001f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0d0      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 020f 	bic.w	r2, r3, #15
 8001f42:	4965      	ldr	r1, [pc, #404]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b8      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4a58      	ldr	r2, [pc, #352]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d040      	beq.n	8002038 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e073      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06b      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4936      	ldr	r1, [pc, #216]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002008:	f7fe fd86 	bl	8000b18 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fd82 	bl	8000b18 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e053      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d210      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 020f 	bic.w	r2, r3, #15
 800204e:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e032      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	490a      	ldr	r1, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1cc>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1d0>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1d4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fce2 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00
 80020dc:	40023800 	.word	0x40023800
 80020e0:	080041a8 	.word	0x080041a8
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f0:	b090      	sub	sp, #64	; 0x40
 80020f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
 80020f8:	2300      	movs	r3, #0
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d00d      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x40>
 8002110:	2b08      	cmp	r3, #8
 8002112:	f200 80a1 	bhi.w	8002258 <HAL_RCC_GetSysClockFreq+0x16c>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x34>
 800211a:	2b04      	cmp	r3, #4
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x3a>
 800211e:	e09b      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_GetSysClockFreq+0x184>)
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002124:	e09b      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_GetSysClockFreq+0x188>)
 8002128:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800212a:	e098      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800212c:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002136:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d028      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	2200      	movs	r2, #0
 800214a:	623b      	str	r3, [r7, #32]
 800214c:	627a      	str	r2, [r7, #36]	; 0x24
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002154:	2100      	movs	r1, #0
 8002156:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCC_GetSysClockFreq+0x188>)
 8002158:	fb03 f201 	mul.w	r2, r3, r1
 800215c:	2300      	movs	r3, #0
 800215e:	fb00 f303 	mul.w	r3, r0, r3
 8002162:	4413      	add	r3, r2
 8002164:	4a43      	ldr	r2, [pc, #268]	; (8002274 <HAL_RCC_GetSysClockFreq+0x188>)
 8002166:	fba0 1202 	umull	r1, r2, r0, r2
 800216a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800216c:	460a      	mov	r2, r1
 800216e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002172:	4413      	add	r3, r2
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	2200      	movs	r2, #0
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	61fa      	str	r2, [r7, #28]
 800217e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002182:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002186:	f7fe f857 	bl	8000238 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4613      	mov	r3, r2
 8002190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002192:	e053      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002194:	4b35      	ldr	r3, [pc, #212]	; (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	2200      	movs	r2, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	617a      	str	r2, [r7, #20]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021a6:	f04f 0b00 	mov.w	fp, #0
 80021aa:	4652      	mov	r2, sl
 80021ac:	465b      	mov	r3, fp
 80021ae:	f04f 0000 	mov.w	r0, #0
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	0159      	lsls	r1, r3, #5
 80021b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021bc:	0150      	lsls	r0, r2, #5
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	ebb2 080a 	subs.w	r8, r2, sl
 80021c6:	eb63 090b 	sbc.w	r9, r3, fp
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021de:	ebb2 0408 	subs.w	r4, r2, r8
 80021e2:	eb63 0509 	sbc.w	r5, r3, r9
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	00eb      	lsls	r3, r5, #3
 80021f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021f4:	00e2      	lsls	r2, r4, #3
 80021f6:	4614      	mov	r4, r2
 80021f8:	461d      	mov	r5, r3
 80021fa:	eb14 030a 	adds.w	r3, r4, sl
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	eb45 030b 	adc.w	r3, r5, fp
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002212:	4629      	mov	r1, r5
 8002214:	028b      	lsls	r3, r1, #10
 8002216:	4621      	mov	r1, r4
 8002218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800221c:	4621      	mov	r1, r4
 800221e:	028a      	lsls	r2, r1, #10
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002226:	2200      	movs	r2, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002230:	f7fe f802 	bl	8000238 <__aeabi_uldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4613      	mov	r3, r2
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_GetSysClockFreq+0x180>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	3301      	adds	r3, #1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800224c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x184>)
 800225a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002260:	4618      	mov	r0, r3
 8002262:	3740      	adds	r7, #64	; 0x40
 8002264:	46bd      	mov	sp, r7
 8002266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	00f42400 	.word	0x00f42400
 8002274:	017d7840 	.word	0x017d7840

08002278 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_RCC_GetHCLKFreq+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000000 	.word	0x20000000

08002290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002294:	f7ff fff0 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0a9b      	lsrs	r3, r3, #10
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4903      	ldr	r1, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	080041b8 	.word	0x080041b8

080022b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022bc:	f7ff ffdc 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	0b5b      	lsrs	r3, r3, #13
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4903      	ldr	r1, [pc, #12]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	080041b8 	.word	0x080041b8

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002308:	4b69      	ldr	r3, [pc, #420]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a68      	ldr	r2, [pc, #416]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002312:	6093      	str	r3, [r2, #8]
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	4964      	ldr	r1, [pc, #400]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d017      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800233a:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	4959      	ldr	r1, [pc, #356]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002358:	d101      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002366:	2301      	movs	r3, #1
 8002368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d017      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002376:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800237c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	494a      	ldr	r1, [pc, #296]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002394:	d101      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 808b 	beq.w	80024da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4a39      	ldr	r2, [pc, #228]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6413      	str	r3, [r2, #64]	; 0x40
 80023d0:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023dc:	4b35      	ldr	r3, [pc, #212]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a34      	ldr	r2, [pc, #208]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e8:	f7fe fb96 	bl	8000b18 <HAL_GetTick>
 80023ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f0:	f7fe fb92 	bl	8000b18 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e38f      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002402:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d035      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d02e      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800244e:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d114      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fb5a 	bl	8000b18 <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fb56 	bl	8000b18 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e351      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0ee      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002496:	d111      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024a6:	400b      	ands	r3, r1
 80024a8:	4901      	ldr	r1, [pc, #4]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40007000 	.word	0x40007000
 80024b8:	0ffffcff 	.word	0x0ffffcff
 80024bc:	4bac      	ldr	r3, [pc, #688]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4aab      	ldr	r2, [pc, #684]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024c6:	6093      	str	r3, [r2, #8]
 80024c8:	4ba9      	ldr	r3, [pc, #676]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	49a6      	ldr	r1, [pc, #664]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024e6:	4ba2      	ldr	r3, [pc, #648]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ec:	4aa0      	ldr	r2, [pc, #640]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024f6:	4b9e      	ldr	r3, [pc, #632]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	499b      	ldr	r1, [pc, #620]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002514:	4b96      	ldr	r3, [pc, #600]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002522:	4993      	ldr	r1, [pc, #588]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002536:	4b8e      	ldr	r3, [pc, #568]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002544:	498a      	ldr	r1, [pc, #552]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002558:	4b85      	ldr	r3, [pc, #532]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002566:	4982      	ldr	r1, [pc, #520]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800257a:	4b7d      	ldr	r3, [pc, #500]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4979      	ldr	r1, [pc, #484]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800259c:	4b74      	ldr	r3, [pc, #464]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f023 0203 	bic.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4971      	ldr	r1, [pc, #452]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025be:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c4:	f023 020c 	bic.w	r2, r3, #12
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	4968      	ldr	r1, [pc, #416]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e0:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	4960      	ldr	r1, [pc, #384]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002602:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	4957      	ldr	r1, [pc, #348]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002624:	4b52      	ldr	r3, [pc, #328]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	494f      	ldr	r1, [pc, #316]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	4946      	ldr	r1, [pc, #280]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002668:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	493e      	ldr	r1, [pc, #248]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002698:	4935      	ldr	r1, [pc, #212]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ba:	492d      	ldr	r1, [pc, #180]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d011      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026ce:	4b28      	ldr	r3, [pc, #160]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026dc:	4924      	ldr	r1, [pc, #144]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ec:	d101      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	4914      	ldr	r1, [pc, #80]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002740:	490b      	ldr	r1, [pc, #44]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002764:	4902      	ldr	r1, [pc, #8]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800276c:	e002      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002780:	4b8a      	ldr	r3, [pc, #552]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002786:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	4986      	ldr	r1, [pc, #536]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027a4:	4b81      	ldr	r3, [pc, #516]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b4:	497d      	ldr	r1, [pc, #500]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d006      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80d6 	beq.w	800297c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027d0:	4b76      	ldr	r3, [pc, #472]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a75      	ldr	r2, [pc, #468]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027dc:	f7fe f99c 	bl	8000b18 <HAL_GetTick>
 80027e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027e4:	f7fe f998 	bl	8000b18 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e195      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027f6:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d021      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11d      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002816:	4b65      	ldr	r3, [pc, #404]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002824:	4b61      	ldr	r3, [pc, #388]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800282a:	0e1b      	lsrs	r3, r3, #24
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	019a      	lsls	r2, r3, #6
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	071b      	lsls	r3, r3, #28
 800284a:	4958      	ldr	r1, [pc, #352]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002870:	2b00      	cmp	r3, #0
 8002872:	d02e      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287c:	d129      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800287e:	4b4b      	ldr	r3, [pc, #300]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800288c:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800288e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002892:	0f1b      	lsrs	r3, r3, #28
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	019a      	lsls	r2, r3, #6
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	041b      	lsls	r3, r3, #16
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	061b      	lsls	r3, r3, #24
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	071b      	lsls	r3, r3, #28
 80028b2:	493e      	ldr	r1, [pc, #248]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028ba:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c0:	f023 021f 	bic.w	r2, r3, #31
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	3b01      	subs	r3, #1
 80028ca:	4938      	ldr	r1, [pc, #224]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01d      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e4:	0e1b      	lsrs	r3, r3, #24
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028ec:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f2:	0f1b      	lsrs	r3, r3, #28
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	019a      	lsls	r2, r3, #6
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	071b      	lsls	r3, r3, #28
 8002912:	4926      	ldr	r1, [pc, #152]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	019a      	lsls	r2, r3, #6
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	071b      	lsls	r3, r3, #28
 8002942:	491a      	ldr	r1, [pc, #104]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002950:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002956:	f7fe f8df 	bl	8000b18 <HAL_GetTick>
 800295a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800295e:	f7fe f8db 	bl	8000b18 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b64      	cmp	r3, #100	; 0x64
 800296a:	d901      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0d8      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b01      	cmp	r3, #1
 8002980:	f040 80ce 	bne.w	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800298a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe f8c2 	bl	8000b18 <HAL_GetTick>
 8002994:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002996:	e00b      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002998:	f7fe f8be 	bl	8000b18 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d904      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0bb      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029b0:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029bc:	d0ec      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02e      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d12a      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029e6:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029f4:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	0f1b      	lsrs	r3, r3, #28
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	019a      	lsls	r2, r3, #6
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	061b      	lsls	r3, r3, #24
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	071b      	lsls	r3, r3, #28
 8002a1a:	4944      	ldr	r1, [pc, #272]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a22:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	493d      	ldr	r1, [pc, #244]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d022      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a50:	d11d      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a52:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	0e1b      	lsrs	r3, r3, #24
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a60:	4b32      	ldr	r3, [pc, #200]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	0f1b      	lsrs	r3, r3, #28
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	019a      	lsls	r2, r3, #6
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	061b      	lsls	r3, r3, #24
 8002a80:	431a      	orrs	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	071b      	lsls	r3, r3, #28
 8002a86:	4929      	ldr	r1, [pc, #164]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d028      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	0e1b      	lsrs	r3, r3, #24
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	019a      	lsls	r2, r3, #6
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	071b      	lsls	r3, r3, #28
 8002ace:	4917      	ldr	r1, [pc, #92]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	4911      	ldr	r1, [pc, #68]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af8:	f7fe f80e 	bl	8000b18 <HAL_GetTick>
 8002afc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b00:	f7fe f80a 	bl	8000b18 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e007      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1e:	d1ef      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800

08002b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e040      	b.n	8002bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd fe40 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fc12 	bl	8003398 <UART_SetConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e022      	b.n	8002bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fe6a 	bl	8003860 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fef1 	bl	80039a4 <UART_CheckIdleState>
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d165      	bne.n	8002cae <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_UART_Transmit_DMA+0x22>
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e05e      	b.n	8002cb0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	88fa      	ldrh	r2, [r7, #6]
 8002c04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2221      	movs	r2, #33	; 0x21
 8002c14:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d027      	beq.n	8002c6e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <HAL_UART_Transmit_DMA+0xec>)
 8002c24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_UART_Transmit_DMA+0xf0>)
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <HAL_UART_Transmit_DMA+0xf4>)
 8002c34:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	4619      	mov	r1, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3328      	adds	r3, #40	; 0x28
 8002c4e:	461a      	mov	r2, r3
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	f7fe f9a9 	bl	8000fa8 <HAL_DMA_Start_IT>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e020      	b.n	8002cb0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	613b      	str	r3, [r7, #16]
   return(result);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3308      	adds	r3, #8
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	623a      	str	r2, [r7, #32]
 8002c98:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	69f9      	ldr	r1, [r7, #28]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e5      	bne.n	8002c76 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	; 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	08003e21 	.word	0x08003e21
 8002cbc:	08003eb7 	.word	0x08003eb7
 8002cc0:	08004039 	.word	0x08004039

08002cc4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d132      	bne.n	8002d42 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_UART_Receive_DMA+0x24>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e02b      	b.n	8002d44 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d018      	beq.n	8002d32 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	69f9      	ldr	r1, [r7, #28]
 8002d24:	6a3a      	ldr	r2, [r7, #32]
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e6      	bne.n	8002d00 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	461a      	mov	r2, r3
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 ff47 	bl	8003bcc <UART_Start_Receive_DMA>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	e000      	b.n	8002d44 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0ba      	sub	sp, #232	; 0xe8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d76:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d115      	bne.n	8002db4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00f      	beq.n	8002db4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 82ac 	beq.w	8003302 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
      }
      return;
 8002db2:	e2a6      	b.n	8003302 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8117 	beq.w	8002fec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dce:	4b85      	ldr	r3, [pc, #532]	; (8002fe4 <HAL_UART_IRQHandler+0x298>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 810a 	beq.w	8002fec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d011      	beq.n	8002e08 <HAL_UART_IRQHandler+0xbc>
 8002de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d011      	beq.n	8002e38 <HAL_UART_IRQHandler+0xec>
 8002e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2202      	movs	r2, #2
 8002e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d011      	beq.n	8002e68 <HAL_UART_IRQHandler+0x11c>
 8002e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2204      	movs	r2, #4
 8002e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5e:	f043 0202 	orr.w	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d017      	beq.n	8002ea4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2208      	movs	r2, #8
 8002e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9a:	f043 0208 	orr.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d012      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x18a>
 8002eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00c      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8212 	beq.w	8003306 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d005      	beq.n	8002f2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d04f      	beq.n	8002fce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 ff12 	bl	8003d58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d141      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3308      	adds	r3, #8
 8002f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3308      	adds	r3, #8
 8002f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f7e:	e841 2300 	strex	r3, r2, [r1]
 8002f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1d9      	bne.n	8002f42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <HAL_UART_IRQHandler+0x29c>)
 8002f9c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe f8d0 	bl	8001148 <HAL_DMA_Abort_IT>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d017      	beq.n	8002fde <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	e00f      	b.n	8002fde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f9ca 	bl	8003358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc4:	e00b      	b.n	8002fde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f9c6 	bl	8003358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fcc:	e007      	b.n	8002fde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9c2 	bl	8003358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002fdc:	e193      	b.n	8003306 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fde:	bf00      	nop
    return;
 8002fe0:	e191      	b.n	8003306 <HAL_UART_IRQHandler+0x5ba>
 8002fe2:	bf00      	nop
 8002fe4:	04000120 	.word	0x04000120
 8002fe8:	080040b7 	.word	0x080040b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f040 814c 	bne.w	800328e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8145 	beq.w	800328e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 813e 	beq.w	800328e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2210      	movs	r2, #16
 8003018:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	f040 80b6 	bne.w	8003196 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003036:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8165 	beq.w	800330a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800304a:	429a      	cmp	r2, r3
 800304c:	f080 815d 	bcs.w	800330a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003056:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003064:	f000 8086 	beq.w	8003174 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800307c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003092:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003096:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800309e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1da      	bne.n	8003068 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3308      	adds	r3, #8
 80030b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3308      	adds	r3, #8
 80030d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e1      	bne.n	80030b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3308      	adds	r3, #8
 80030f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3308      	adds	r3, #8
 800310e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003112:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003114:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e3      	bne.n	80030ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003144:	f023 0310 	bic.w	r3, r3, #16
 8003148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003156:	65bb      	str	r3, [r7, #88]	; 0x58
 8003158:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800315c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e4      	bne.n	8003134 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd ff7a 	bl	8001068 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003186:	b29b      	uxth	r3, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	b29b      	uxth	r3, r3
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f8ec 	bl	800336c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003194:	e0b9      	b.n	800330a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80ab 	beq.w	800330e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80031b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a6 	beq.w	800330e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	e853 3f00 	ldrex	r3, [r3]
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
 80031e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e4      	bne.n	80031c2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	623b      	str	r3, [r7, #32]
   return(result);
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3308      	adds	r3, #8
 8003218:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800321c:	633a      	str	r2, [r7, #48]	; 0x30
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e3      	bne.n	80031f8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	60fb      	str	r3, [r7, #12]
   return(result);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f023 0310 	bic.w	r3, r3, #16
 8003258:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	69b9      	ldr	r1, [r7, #24]
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	617b      	str	r3, [r7, #20]
   return(result);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e4      	bne.n	8003244 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f870 	bl	800336c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800328c:	e03f      	b.n	800330e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00e      	beq.n	80032b8 <HAL_UART_IRQHandler+0x56c>
 800329a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f867 	bl	8003384 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032b6:	e02d      	b.n	8003314 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01c      	beq.n	8003312 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
    }
    return;
 80032e0:	e017      	b.n	8003312 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <HAL_UART_IRQHandler+0x5c8>
 80032ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fef1 	bl	80040e2 <UART_EndTransmit_IT>
    return;
 8003300:	e008      	b.n	8003314 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003302:	bf00      	nop
 8003304:	e006      	b.n	8003314 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003306:	bf00      	nop
 8003308:	e004      	b.n	8003314 <HAL_UART_IRQHandler+0x5c8>
      return;
 800330a:	bf00      	nop
 800330c:	e002      	b.n	8003314 <HAL_UART_IRQHandler+0x5c8>
      return;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003312:	bf00      	nop
  }

}
 8003314:	37e8      	adds	r7, #232	; 0xe8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop

0800331c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4ba6      	ldr	r3, [pc, #664]	; (800365c <UART_SetConfig+0x2c4>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	6979      	ldr	r1, [r7, #20]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a94      	ldr	r2, [pc, #592]	; (8003660 <UART_SetConfig+0x2c8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d120      	bne.n	8003456 <UART_SetConfig+0xbe>
 8003414:	4b93      	ldr	r3, [pc, #588]	; (8003664 <UART_SetConfig+0x2cc>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b03      	cmp	r3, #3
 8003420:	d816      	bhi.n	8003450 <UART_SetConfig+0xb8>
 8003422:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <UART_SetConfig+0x90>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	08003439 	.word	0x08003439
 800342c:	08003445 	.word	0x08003445
 8003430:	0800343f 	.word	0x0800343f
 8003434:	0800344b 	.word	0x0800344b
 8003438:	2301      	movs	r3, #1
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e150      	b.n	80036e0 <UART_SetConfig+0x348>
 800343e:	2302      	movs	r3, #2
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e14d      	b.n	80036e0 <UART_SetConfig+0x348>
 8003444:	2304      	movs	r3, #4
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e14a      	b.n	80036e0 <UART_SetConfig+0x348>
 800344a:	2308      	movs	r3, #8
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e147      	b.n	80036e0 <UART_SetConfig+0x348>
 8003450:	2310      	movs	r3, #16
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e144      	b.n	80036e0 <UART_SetConfig+0x348>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a83      	ldr	r2, [pc, #524]	; (8003668 <UART_SetConfig+0x2d0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d132      	bne.n	80034c6 <UART_SetConfig+0x12e>
 8003460:	4b80      	ldr	r3, [pc, #512]	; (8003664 <UART_SetConfig+0x2cc>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d828      	bhi.n	80034c0 <UART_SetConfig+0x128>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <UART_SetConfig+0xdc>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080034c1 	.word	0x080034c1
 800347c:	080034c1 	.word	0x080034c1
 8003480:	080034c1 	.word	0x080034c1
 8003484:	080034b5 	.word	0x080034b5
 8003488:	080034c1 	.word	0x080034c1
 800348c:	080034c1 	.word	0x080034c1
 8003490:	080034c1 	.word	0x080034c1
 8003494:	080034af 	.word	0x080034af
 8003498:	080034c1 	.word	0x080034c1
 800349c:	080034c1 	.word	0x080034c1
 80034a0:	080034c1 	.word	0x080034c1
 80034a4:	080034bb 	.word	0x080034bb
 80034a8:	2300      	movs	r3, #0
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e118      	b.n	80036e0 <UART_SetConfig+0x348>
 80034ae:	2302      	movs	r3, #2
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e115      	b.n	80036e0 <UART_SetConfig+0x348>
 80034b4:	2304      	movs	r3, #4
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e112      	b.n	80036e0 <UART_SetConfig+0x348>
 80034ba:	2308      	movs	r3, #8
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e10f      	b.n	80036e0 <UART_SetConfig+0x348>
 80034c0:	2310      	movs	r3, #16
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e10c      	b.n	80036e0 <UART_SetConfig+0x348>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a68      	ldr	r2, [pc, #416]	; (800366c <UART_SetConfig+0x2d4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d120      	bne.n	8003512 <UART_SetConfig+0x17a>
 80034d0:	4b64      	ldr	r3, [pc, #400]	; (8003664 <UART_SetConfig+0x2cc>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034da:	2b30      	cmp	r3, #48	; 0x30
 80034dc:	d013      	beq.n	8003506 <UART_SetConfig+0x16e>
 80034de:	2b30      	cmp	r3, #48	; 0x30
 80034e0:	d814      	bhi.n	800350c <UART_SetConfig+0x174>
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d009      	beq.n	80034fa <UART_SetConfig+0x162>
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d810      	bhi.n	800350c <UART_SetConfig+0x174>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <UART_SetConfig+0x15c>
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d006      	beq.n	8003500 <UART_SetConfig+0x168>
 80034f2:	e00b      	b.n	800350c <UART_SetConfig+0x174>
 80034f4:	2300      	movs	r3, #0
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e0f2      	b.n	80036e0 <UART_SetConfig+0x348>
 80034fa:	2302      	movs	r3, #2
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e0ef      	b.n	80036e0 <UART_SetConfig+0x348>
 8003500:	2304      	movs	r3, #4
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e0ec      	b.n	80036e0 <UART_SetConfig+0x348>
 8003506:	2308      	movs	r3, #8
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e0e9      	b.n	80036e0 <UART_SetConfig+0x348>
 800350c:	2310      	movs	r3, #16
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e0e6      	b.n	80036e0 <UART_SetConfig+0x348>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a56      	ldr	r2, [pc, #344]	; (8003670 <UART_SetConfig+0x2d8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d120      	bne.n	800355e <UART_SetConfig+0x1c6>
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <UART_SetConfig+0x2cc>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003526:	2bc0      	cmp	r3, #192	; 0xc0
 8003528:	d013      	beq.n	8003552 <UART_SetConfig+0x1ba>
 800352a:	2bc0      	cmp	r3, #192	; 0xc0
 800352c:	d814      	bhi.n	8003558 <UART_SetConfig+0x1c0>
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d009      	beq.n	8003546 <UART_SetConfig+0x1ae>
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d810      	bhi.n	8003558 <UART_SetConfig+0x1c0>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <UART_SetConfig+0x1a8>
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d006      	beq.n	800354c <UART_SetConfig+0x1b4>
 800353e:	e00b      	b.n	8003558 <UART_SetConfig+0x1c0>
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e0cc      	b.n	80036e0 <UART_SetConfig+0x348>
 8003546:	2302      	movs	r3, #2
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e0c9      	b.n	80036e0 <UART_SetConfig+0x348>
 800354c:	2304      	movs	r3, #4
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e0c6      	b.n	80036e0 <UART_SetConfig+0x348>
 8003552:	2308      	movs	r3, #8
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e0c3      	b.n	80036e0 <UART_SetConfig+0x348>
 8003558:	2310      	movs	r3, #16
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e0c0      	b.n	80036e0 <UART_SetConfig+0x348>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a44      	ldr	r2, [pc, #272]	; (8003674 <UART_SetConfig+0x2dc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d125      	bne.n	80035b4 <UART_SetConfig+0x21c>
 8003568:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <UART_SetConfig+0x2cc>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003576:	d017      	beq.n	80035a8 <UART_SetConfig+0x210>
 8003578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800357c:	d817      	bhi.n	80035ae <UART_SetConfig+0x216>
 800357e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003582:	d00b      	beq.n	800359c <UART_SetConfig+0x204>
 8003584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003588:	d811      	bhi.n	80035ae <UART_SetConfig+0x216>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <UART_SetConfig+0x1fe>
 800358e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003592:	d006      	beq.n	80035a2 <UART_SetConfig+0x20a>
 8003594:	e00b      	b.n	80035ae <UART_SetConfig+0x216>
 8003596:	2300      	movs	r3, #0
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e0a1      	b.n	80036e0 <UART_SetConfig+0x348>
 800359c:	2302      	movs	r3, #2
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e09e      	b.n	80036e0 <UART_SetConfig+0x348>
 80035a2:	2304      	movs	r3, #4
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e09b      	b.n	80036e0 <UART_SetConfig+0x348>
 80035a8:	2308      	movs	r3, #8
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e098      	b.n	80036e0 <UART_SetConfig+0x348>
 80035ae:	2310      	movs	r3, #16
 80035b0:	77fb      	strb	r3, [r7, #31]
 80035b2:	e095      	b.n	80036e0 <UART_SetConfig+0x348>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2f      	ldr	r2, [pc, #188]	; (8003678 <UART_SetConfig+0x2e0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d125      	bne.n	800360a <UART_SetConfig+0x272>
 80035be:	4b29      	ldr	r3, [pc, #164]	; (8003664 <UART_SetConfig+0x2cc>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035cc:	d017      	beq.n	80035fe <UART_SetConfig+0x266>
 80035ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035d2:	d817      	bhi.n	8003604 <UART_SetConfig+0x26c>
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d8:	d00b      	beq.n	80035f2 <UART_SetConfig+0x25a>
 80035da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035de:	d811      	bhi.n	8003604 <UART_SetConfig+0x26c>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <UART_SetConfig+0x254>
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d006      	beq.n	80035f8 <UART_SetConfig+0x260>
 80035ea:	e00b      	b.n	8003604 <UART_SetConfig+0x26c>
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e076      	b.n	80036e0 <UART_SetConfig+0x348>
 80035f2:	2302      	movs	r3, #2
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e073      	b.n	80036e0 <UART_SetConfig+0x348>
 80035f8:	2304      	movs	r3, #4
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e070      	b.n	80036e0 <UART_SetConfig+0x348>
 80035fe:	2308      	movs	r3, #8
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e06d      	b.n	80036e0 <UART_SetConfig+0x348>
 8003604:	2310      	movs	r3, #16
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e06a      	b.n	80036e0 <UART_SetConfig+0x348>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1b      	ldr	r2, [pc, #108]	; (800367c <UART_SetConfig+0x2e4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d138      	bne.n	8003686 <UART_SetConfig+0x2ee>
 8003614:	4b13      	ldr	r3, [pc, #76]	; (8003664 <UART_SetConfig+0x2cc>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800361e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003622:	d017      	beq.n	8003654 <UART_SetConfig+0x2bc>
 8003624:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003628:	d82a      	bhi.n	8003680 <UART_SetConfig+0x2e8>
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362e:	d00b      	beq.n	8003648 <UART_SetConfig+0x2b0>
 8003630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003634:	d824      	bhi.n	8003680 <UART_SetConfig+0x2e8>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <UART_SetConfig+0x2aa>
 800363a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363e:	d006      	beq.n	800364e <UART_SetConfig+0x2b6>
 8003640:	e01e      	b.n	8003680 <UART_SetConfig+0x2e8>
 8003642:	2300      	movs	r3, #0
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e04b      	b.n	80036e0 <UART_SetConfig+0x348>
 8003648:	2302      	movs	r3, #2
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e048      	b.n	80036e0 <UART_SetConfig+0x348>
 800364e:	2304      	movs	r3, #4
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e045      	b.n	80036e0 <UART_SetConfig+0x348>
 8003654:	2308      	movs	r3, #8
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e042      	b.n	80036e0 <UART_SetConfig+0x348>
 800365a:	bf00      	nop
 800365c:	efff69f3 	.word	0xefff69f3
 8003660:	40011000 	.word	0x40011000
 8003664:	40023800 	.word	0x40023800
 8003668:	40004400 	.word	0x40004400
 800366c:	40004800 	.word	0x40004800
 8003670:	40004c00 	.word	0x40004c00
 8003674:	40005000 	.word	0x40005000
 8003678:	40011400 	.word	0x40011400
 800367c:	40007800 	.word	0x40007800
 8003680:	2310      	movs	r3, #16
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e02c      	b.n	80036e0 <UART_SetConfig+0x348>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a72      	ldr	r2, [pc, #456]	; (8003854 <UART_SetConfig+0x4bc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d125      	bne.n	80036dc <UART_SetConfig+0x344>
 8003690:	4b71      	ldr	r3, [pc, #452]	; (8003858 <UART_SetConfig+0x4c0>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800369a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800369e:	d017      	beq.n	80036d0 <UART_SetConfig+0x338>
 80036a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036a4:	d817      	bhi.n	80036d6 <UART_SetConfig+0x33e>
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036aa:	d00b      	beq.n	80036c4 <UART_SetConfig+0x32c>
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d811      	bhi.n	80036d6 <UART_SetConfig+0x33e>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <UART_SetConfig+0x326>
 80036b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ba:	d006      	beq.n	80036ca <UART_SetConfig+0x332>
 80036bc:	e00b      	b.n	80036d6 <UART_SetConfig+0x33e>
 80036be:	2300      	movs	r3, #0
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e00d      	b.n	80036e0 <UART_SetConfig+0x348>
 80036c4:	2302      	movs	r3, #2
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e00a      	b.n	80036e0 <UART_SetConfig+0x348>
 80036ca:	2304      	movs	r3, #4
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e007      	b.n	80036e0 <UART_SetConfig+0x348>
 80036d0:	2308      	movs	r3, #8
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e004      	b.n	80036e0 <UART_SetConfig+0x348>
 80036d6:	2310      	movs	r3, #16
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e001      	b.n	80036e0 <UART_SetConfig+0x348>
 80036dc:	2310      	movs	r3, #16
 80036de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e8:	d15b      	bne.n	80037a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036ea:	7ffb      	ldrb	r3, [r7, #31]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d828      	bhi.n	8003742 <UART_SetConfig+0x3aa>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0x360>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	08003725 	.word	0x08003725
 8003700:	0800372d 	.word	0x0800372d
 8003704:	08003743 	.word	0x08003743
 8003708:	08003733 	.word	0x08003733
 800370c:	08003743 	.word	0x08003743
 8003710:	08003743 	.word	0x08003743
 8003714:	08003743 	.word	0x08003743
 8003718:	0800373b 	.word	0x0800373b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800371c:	f7fe fdb8 	bl	8002290 <HAL_RCC_GetPCLK1Freq>
 8003720:	61b8      	str	r0, [r7, #24]
        break;
 8003722:	e013      	b.n	800374c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7fe fdc8 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8003728:	61b8      	str	r0, [r7, #24]
        break;
 800372a:	e00f      	b.n	800374c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800372c:	4b4b      	ldr	r3, [pc, #300]	; (800385c <UART_SetConfig+0x4c4>)
 800372e:	61bb      	str	r3, [r7, #24]
        break;
 8003730:	e00c      	b.n	800374c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003732:	f7fe fcdb 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8003736:	61b8      	str	r0, [r7, #24]
        break;
 8003738:	e008      	b.n	800374c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373e:	61bb      	str	r3, [r7, #24]
        break;
 8003740:	e004      	b.n	800374c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	77bb      	strb	r3, [r7, #30]
        break;
 800374a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d074      	beq.n	800383c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	005a      	lsls	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b0f      	cmp	r3, #15
 800376c:	d916      	bls.n	800379c <UART_SetConfig+0x404>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d212      	bcs.n	800379c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	b29b      	uxth	r3, r3
 800377a:	f023 030f 	bic.w	r3, r3, #15
 800377e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	b29a      	uxth	r2, r3
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	4313      	orrs	r3, r2
 8003790:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	89fa      	ldrh	r2, [r7, #14]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	e04f      	b.n	800383c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	77bb      	strb	r3, [r7, #30]
 80037a0:	e04c      	b.n	800383c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037a2:	7ffb      	ldrb	r3, [r7, #31]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d828      	bhi.n	80037fa <UART_SetConfig+0x462>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <UART_SetConfig+0x418>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	080037fb 	.word	0x080037fb
 80037c0:	080037eb 	.word	0x080037eb
 80037c4:	080037fb 	.word	0x080037fb
 80037c8:	080037fb 	.word	0x080037fb
 80037cc:	080037fb 	.word	0x080037fb
 80037d0:	080037f3 	.word	0x080037f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d4:	f7fe fd5c 	bl	8002290 <HAL_RCC_GetPCLK1Freq>
 80037d8:	61b8      	str	r0, [r7, #24]
        break;
 80037da:	e013      	b.n	8003804 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7fe fd6c 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 80037e0:	61b8      	str	r0, [r7, #24]
        break;
 80037e2:	e00f      	b.n	8003804 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <UART_SetConfig+0x4c4>)
 80037e6:	61bb      	str	r3, [r7, #24]
        break;
 80037e8:	e00c      	b.n	8003804 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ea:	f7fe fc7f 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80037ee:	61b8      	str	r0, [r7, #24]
        break;
 80037f0:	e008      	b.n	8003804 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f6:	61bb      	str	r3, [r7, #24]
        break;
 80037f8:	e004      	b.n	8003804 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	77bb      	strb	r3, [r7, #30]
        break;
 8003802:	bf00      	nop
    }

    if (pclk != 0U)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d018      	beq.n	800383c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	085a      	lsrs	r2, r3, #1
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	441a      	add	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b0f      	cmp	r3, #15
 8003822:	d909      	bls.n	8003838 <UART_SetConfig+0x4a0>
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382a:	d205      	bcs.n	8003838 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	e001      	b.n	800383c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003848:	7fbb      	ldrb	r3, [r7, #30]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40007c00 	.word	0x40007c00
 8003858:	40023800 	.word	0x40023800
 800385c:	00f42400 	.word	0x00f42400

08003860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01a      	beq.n	8003976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395e:	d10a      	bne.n	8003976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  }
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039b4:	f7fd f8b0 	bl	8000b18 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d10e      	bne.n	80039e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f831 	bl	8003a3e <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e027      	b.n	8003a36 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d10e      	bne.n	8003a12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f81b 	bl	8003a3e <UART_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e011      	b.n	8003a36 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b09c      	sub	sp, #112	; 0x70
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4e:	e0a7      	b.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	f000 80a3 	beq.w	8003ba0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fd f85d 	bl	8000b18 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d13f      	bne.n	8003af0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a84:	667b      	str	r3, [r7, #100]	; 0x64
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e6      	bne.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ac2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e068      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d050      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0c:	d148      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
 8003b38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e6      	bne.n	8003b18 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3308      	adds	r3, #8
 8003b68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b6a:	623a      	str	r2, [r7, #32]
 8003b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	69f9      	ldr	r1, [r7, #28]
 8003b70:	6a3a      	ldr	r2, [r7, #32]
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e5      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e010      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	f43f af48 	beq.w	8003a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3770      	adds	r7, #112	; 0x70
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b096      	sub	sp, #88	; 0x58
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2222      	movs	r2, #34	; 0x22
 8003bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d028      	beq.n	8003c52 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c04:	4a3e      	ldr	r2, [pc, #248]	; (8003d00 <UART_Start_Receive_DMA+0x134>)
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0c:	4a3d      	ldr	r2, [pc, #244]	; (8003d04 <UART_Start_Receive_DMA+0x138>)
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c14:	4a3c      	ldr	r2, [pc, #240]	; (8003d08 <UART_Start_Receive_DMA+0x13c>)
 8003c16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3324      	adds	r3, #36	; 0x24
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	461a      	mov	r2, r3
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f7fd f9b8 	bl	8000fa8 <HAL_DMA_Start_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2210      	movs	r2, #16
 8003c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e051      	b.n	8003cf6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d018      	beq.n	8003c8c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c7a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e6      	bne.n	8003c5a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cac:	637a      	str	r2, [r7, #52]	; 0x34
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e5      	bne.n	8003c8c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3308      	adds	r3, #8
 8003cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce0:	623a      	str	r2, [r7, #32]
 8003ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	69f9      	ldr	r1, [r7, #28]
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e5      	bne.n	8003cc0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3758      	adds	r7, #88	; 0x58
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	08003ed3 	.word	0x08003ed3
 8003d04:	08003ffb 	.word	0x08003ffb
 8003d08:	08004039 	.word	0x08004039

08003d0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6979      	ldr	r1, [r7, #20]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e6      	bne.n	8003d14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003d4c:	bf00      	nop
 8003d4e:	3724      	adds	r7, #36	; 0x24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b095      	sub	sp, #84	; 0x54
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d118      	bne.n	8003e00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f023 0310 	bic.w	r3, r3, #16
 8003de2:	647b      	str	r3, [r7, #68]	; 0x44
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6979      	ldr	r1, [r7, #20]
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e6      	bne.n	8003dce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e14:	bf00      	nop
 8003e16:	3754      	adds	r7, #84	; 0x54
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b090      	sub	sp, #64	; 0x40
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e36:	d037      	beq.n	8003ea8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e60:	633a      	str	r2, [r7, #48]	; 0x30
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	69b9      	ldr	r1, [r7, #24]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e6      	bne.n	8003e74 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ea6:	e002      	b.n	8003eae <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8003ea8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003eaa:	f7ff fa37 	bl	800331c <HAL_UART_TxCpltCallback>
}
 8003eae:	bf00      	nop
 8003eb0:	3740      	adds	r7, #64	; 0x40
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff fa33 	bl	8003330 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b09c      	sub	sp, #112	; 0x70
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee8:	d071      	beq.n	8003fce <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e6      	bne.n	8003ef2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f44:	647a      	str	r2, [r7, #68]	; 0x44
 8003f46:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	623b      	str	r3, [r7, #32]
   return(result);
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f78:	633a      	str	r2, [r7, #48]	; 0x30
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d118      	bne.n	8003fce <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f023 0310 	bic.w	r3, r3, #16
 8003fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	69b9      	ldr	r1, [r7, #24]
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e6      	bne.n	8003f9c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fe6:	f7ff f9c1 	bl	800336c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fea:	e002      	b.n	8003ff2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8003fec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fee:	f7fc fb87 	bl	8000700 <HAL_UART_RxCpltCallback>
}
 8003ff2:	bf00      	nop
 8003ff4:	3770      	adds	r7, #112	; 0x70
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004012:	2b01      	cmp	r3, #1
 8004014:	d109      	bne.n	800402a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	b29b      	uxth	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7ff f9a2 	bl	800336c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004028:	e002      	b.n	8004030 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff f98a 	bl	8003344 <HAL_UART_RxHalfCpltCallback>
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004052:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405e:	2b80      	cmp	r3, #128	; 0x80
 8004060:	d109      	bne.n	8004076 <UART_DMAError+0x3e>
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b21      	cmp	r3, #33	; 0x21
 8004066:	d106      	bne.n	8004076 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2200      	movs	r2, #0
 800406c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004070:	6978      	ldr	r0, [r7, #20]
 8004072:	f7ff fe4b 	bl	8003d0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d109      	bne.n	8004098 <UART_DMAError+0x60>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b22      	cmp	r3, #34	; 0x22
 8004088:	d106      	bne.n	8004098 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	f7ff fe60 	bl	8003d58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a8:	6978      	ldr	r0, [r7, #20]
 80040aa:	f7ff f955 	bl	8003358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ae:	bf00      	nop
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff f93f 	bl	8003358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b088      	sub	sp, #32
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	613b      	str	r3, [r7, #16]
   return(result);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e6      	bne.n	80040ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff f8f7 	bl	800331c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800412e:	bf00      	nop
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4d0d      	ldr	r5, [pc, #52]	; (8004170 <__libc_init_array+0x38>)
 800413c:	4c0d      	ldr	r4, [pc, #52]	; (8004174 <__libc_init_array+0x3c>)
 800413e:	1b64      	subs	r4, r4, r5
 8004140:	10a4      	asrs	r4, r4, #2
 8004142:	2600      	movs	r6, #0
 8004144:	42a6      	cmp	r6, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	4d0b      	ldr	r5, [pc, #44]	; (8004178 <__libc_init_array+0x40>)
 800414a:	4c0c      	ldr	r4, [pc, #48]	; (800417c <__libc_init_array+0x44>)
 800414c:	f000 f820 	bl	8004190 <_init>
 8004150:	1b64      	subs	r4, r4, r5
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	2600      	movs	r6, #0
 8004156:	42a6      	cmp	r6, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004160:	4798      	blx	r3
 8004162:	3601      	adds	r6, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	f855 3b04 	ldr.w	r3, [r5], #4
 800416a:	4798      	blx	r3
 800416c:	3601      	adds	r6, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	080041d0 	.word	0x080041d0
 8004174:	080041d0 	.word	0x080041d0
 8004178:	080041d0 	.word	0x080041d0
 800417c:	080041d4 	.word	0x080041d4

08004180 <memset>:
 8004180:	4402      	add	r2, r0
 8004182:	4603      	mov	r3, r0
 8004184:	4293      	cmp	r3, r2
 8004186:	d100      	bne.n	800418a <memset+0xa>
 8004188:	4770      	bx	lr
 800418a:	f803 1b01 	strb.w	r1, [r3], #1
 800418e:	e7f9      	b.n	8004184 <memset+0x4>

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
