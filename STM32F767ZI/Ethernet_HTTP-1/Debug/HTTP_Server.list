
HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe00  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b08  08010000  08010000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b08  08013b08  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08013b08  08013b08  00023b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b10  08013b10  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b10  08013b10  00023b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013b14  08013b14  00023b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08013b18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08013ba8  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08013c48  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008624  200001d0  08013ce8  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200087f4  08013ce8  000387f4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a1c3  00000000  00000000  000301fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004cc4  00000000  00000000  0004a3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012e0  00000000  00000000  0004f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001220  00000000  00000000  00050368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033843  00000000  00000000  00051588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002181e  00000000  00000000  00084dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00105466  00000000  00000000  000a65e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001aba4f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000053d8  00000000  00000000  001abaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d0 	.word	0x200001d0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ffe8 	.word	0x0800ffe8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d4 	.word	0x200001d4
 800023c:	0800ffe8 	.word	0x0800ffe8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb9b 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f81b 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f887 	bl	8000734 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000626:	f002 fc8b 	bl	8002f40 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 800062a:	f003 ffbb 	bl	80045a4 <httpd_init>
  uint32_t count = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    MX_LWIP_Process();
 8000632:	f002 fdd1 	bl	80031d8 <MX_LWIP_Process>
    count++;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3301      	adds	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
    if( count >= 10000)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000642:	4293      	cmp	r3, r2
 8000644:	d9f5      	bls.n	8000632 <main+0x1e>
    {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 );    //Green LED Toggle
 8000646:	2101      	movs	r1, #1
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <main+0x40>)
 800064a:	f001 ffa2 	bl	8002592 <HAL_GPIO_TogglePin>
      count = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
    MX_LWIP_Process();
 8000652:	e7ee      	b.n	8000632 <main+0x1e>
 8000654:	40020400 	.word	0x40020400

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00e fc44 	bl	800eef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a2a      	ldr	r2, [pc, #168]	; (800072c <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a25      	ldr	r2, [pc, #148]	; (8000730 <SystemClock_Config+0xd8>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006c4:	23d8      	movs	r3, #216	; 0xd8
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 ffc5 	bl	8002668 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006e4:	f000 f87c 	bl	80007e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f001 ff6e 	bl	80025c8 <HAL_PWREx_EnableOverDrive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 f875 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2107      	movs	r1, #7
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fa55 	bl	8002bc4 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000720:	f000 f85e 	bl	80007e0 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_GPIO_Init+0xa4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_GPIO_Init+0xa4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_GPIO_Init+0xa4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0xa8>)
 80007b0:	f001 fed6 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b4:	2301      	movs	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0xa8>)
 80007cc:	f001 fd1c 	bl	8002208 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020400 	.word	0x40020400

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 faa6 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	return 1;
 800088c:	2301      	movs	r3, #1
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_kill>:

int _kill(int pid, int sig)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <_kill+0x20>)
 80008a4:	2216      	movs	r2, #22
 80008a6:	601a      	str	r2, [r3, #0]
	return -1;
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	200087e4 	.word	0x200087e4

080008bc <_exit>:

void _exit (int status)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ffe5 	bl	8000898 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008ce:	e7fe      	b.n	80008ce <_exit+0x12>

080008d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e00a      	b.n	80008f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008e2:	f3af 8000 	nop.w
 80008e6:	4601      	mov	r1, r0
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	b2ca      	uxtb	r2, r1
 80008f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dbf0      	blt.n	80008e2 <_read+0x12>
	}

return len;
 8000900:	687b      	ldr	r3, [r7, #4]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	e009      	b.n	8000930 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	60ba      	str	r2, [r7, #8]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	dbf1      	blt.n	800091c <_write+0x12>
	}
	return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_close>:

int _close(int file)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	return -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096a:	605a      	str	r2, [r3, #4]
	return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_isatty>:

int _isatty(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	return 1;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
	return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <_sbrk+0x5c>)
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <_sbrk+0x60>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <_sbrk+0x64>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <_sbrk+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d205      	bcs.n	80009e8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <_sbrk+0x6c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e009      	b.n	80009fc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <_sbrk+0x64>)
 80009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	371c      	adds	r7, #28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	20080000 	.word	0x20080000
 8000a0c:	00000400 	.word	0x00000400
 8000a10:	200001ec 	.word	0x200001ec
 8000a14:	200087f8 	.word	0x200087f8
 8000a18:	200087e4 	.word	0x200087e4

08000a1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a5c:	4c0b      	ldr	r4, [pc, #44]	; (8000a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6a:	f7ff ffd7 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f00e f9ff 	bl	800ee70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fdcf 	bl	8000614 <main>
  bx  lr    
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000a84:	08013b18 	.word	0x08013b18
  ldr r2, =_sbss
 8000a88:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000a8c:	200087f4 	.word	0x200087f4

08000a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>

08000a92 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00b      	beq.n	8000aba <LAN8742_RegisterBusIO+0x28>
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <LAN8742_RegisterBusIO+0x28>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <LAN8742_RegisterBusIO+0x28>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e014      	b.n	8000aea <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	691a      	ldr	r2, [r3, #16]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d17c      	bne.n	8000c10 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2220      	movs	r2, #32
 8000b28:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e01c      	b.n	8000b6a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f107 0208 	add.w	r2, r7, #8
 8000b38:	2112      	movs	r1, #18
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	4798      	blx	r3
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da03      	bge.n	8000b4c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000b44:	f06f 0304 	mvn.w	r3, #4
 8000b48:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000b4a:	e00b      	b.n	8000b64 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	f003 031f 	and.w	r3, r3, #31
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d105      	bne.n	8000b64 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
         break;
 8000b62:	e005      	b.n	8000b70 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3301      	adds	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d9df      	bls.n	8000b30 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b1f      	cmp	r3, #31
 8000b76:	d902      	bls.n	8000b7e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000b78:	f06f 0302 	mvn.w	r3, #2
 8000b7c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d145      	bne.n	8000c10 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6810      	ldr	r0, [r2, #0]
 8000b8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b90:	2100      	movs	r1, #0
 8000b92:	4798      	blx	r3
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db37      	blt.n	8000c0a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6810      	ldr	r0, [r2, #0]
 8000ba2:	f107 0208 	add.w	r2, r7, #8
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4798      	blx	r3
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db28      	blt.n	8000c02 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4798      	blx	r3
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000bba:	e01c      	b.n	8000bf6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4798      	blx	r3
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bce:	d80e      	bhi.n	8000bee <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	6810      	ldr	r0, [r2, #0]
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4798      	blx	r3
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	da07      	bge.n	8000bf6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000be6:	f06f 0304 	mvn.w	r3, #4
 8000bea:	613b      	str	r3, [r7, #16]
                 break;
 8000bec:	e010      	b.n	8000c10 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000bee:	f06f 0301 	mvn.w	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
               break;
 8000bf4:	e00c      	b.n	8000c10 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1dd      	bne.n	8000bbc <LAN8742_Init+0xc6>
 8000c00:	e006      	b.n	8000c10 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000c02:	f06f 0304 	mvn.w	r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	e002      	b.n	8000c10 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000c0a:	f06f 0303 	mvn.w	r3, #3
 8000c0e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d112      	bne.n	8000c3c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4798      	blx	r3
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000c20:	bf00      	nop
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4798      	blx	r3
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c34:	d9f5      	bls.n	8000c22 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000c3c:	693b      	ldr	r3, [r7, #16]
 }
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6810      	ldr	r0, [r2, #0]
 8000c5a:	f107 020c 	add.w	r2, r7, #12
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4798      	blx	r3
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	da02      	bge.n	8000c6e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c68:	f06f 0304 	mvn.w	r3, #4
 8000c6c:	e06e      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	6810      	ldr	r0, [r2, #0]
 8000c76:	f107 020c 	add.w	r2, r7, #12
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4798      	blx	r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	da02      	bge.n	8000c8a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c84:	f06f 0304 	mvn.w	r3, #4
 8000c88:	e060      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000c94:	2301      	movs	r3, #1
 8000c96:	e059      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6810      	ldr	r0, [r2, #0]
 8000ca0:	f107 020c 	add.w	r2, r7, #12
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4798      	blx	r3
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da02      	bge.n	8000cb4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cae:	f06f 0304 	mvn.w	r3, #4
 8000cb2:	e04b      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d11b      	bne.n	8000cf6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <LAN8742_GetLinkState+0x90>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	e03a      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e033      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	e02c      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	e02a      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6810      	ldr	r0, [r2, #0]
 8000cfe:	f107 020c 	add.w	r2, r7, #12
 8000d02:	211f      	movs	r1, #31
 8000d04:	4798      	blx	r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	da02      	bge.n	8000d12 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000d0c:	f06f 0304 	mvn.w	r3, #4
 8000d10:	e01c      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	e015      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 031c 	and.w	r3, r3, #28
 8000d26:	2b18      	cmp	r3, #24
 8000d28:	d101      	bne.n	8000d2e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e00e      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f003 031c 	and.w	r3, r3, #28
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d101      	bne.n	8000d3c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e007      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 031c 	and.w	r3, r3, #28
 8000d42:	2b14      	cmp	r3, #20
 8000d44:	d101      	bne.n	8000d4a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d46:	2304      	movs	r3, #4
 8000d48:	e000      	b.n	8000d4c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d4a:	2305      	movs	r3, #5
    }				
  }
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f92f 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f806 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fd42 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f93b 	bl	800100a <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f911 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200001f0 	.word	0x200001f0

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200001f0 	.word	0x200001f0

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <__NVIC_SetPriorityGrouping+0x40>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x40>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00
 8000e9c:	05fa0000 	.word	0x05fa0000

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff47 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff5c 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffb0 	bl	8000f78 <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e06a      	b.n	800110c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800103c:	2b00      	cmp	r3, #0
 800103e:	d106      	bne.n	800104e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2223      	movs	r2, #35	; 0x23
 8001044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f002 faad 	bl	80035a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_ETH_Init+0xf0>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a30      	ldr	r2, [pc, #192]	; (8001114 <HAL_ETH_Init+0xf0>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_ETH_Init+0xf0>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <HAL_ETH_Init+0xf4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a2b      	ldr	r2, [pc, #172]	; (8001118 <HAL_ETH_Init+0xf4>)
 800106c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001070:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <HAL_ETH_Init+0xf4>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	4927      	ldr	r1, [pc, #156]	; (8001118 <HAL_ETH_Init+0xf4>)
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_ETH_Init+0xf4>)
 8001082:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800109a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109c:	f7ff feac 	bl	8000df8 <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010a2:	e011      	b.n	80010c8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010a4:	f7ff fea8 	bl	8000df8 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010b2:	d909      	bls.n	80010c8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	22e0      	movs	r2, #224	; 0xe0
 80010c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e021      	b.n	800110c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e4      	bne.n	80010a4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fdf0 	bl	8001cc0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fe97 	bl	8001e14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 feed 	bl	8001ec6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	461a      	mov	r2, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fe55 	bl	8001da4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2210      	movs	r2, #16
 8001106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800

0800111c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800112a:	2b10      	cmp	r3, #16
 800112c:	d150      	bne.n	80011d0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2223      	movs	r2, #35	; 0x23
 8001132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2204      	movs	r2, #4
 800113a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f9fd 	bl	800153c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0208 	orr.w	r2, r2, #8
 8001150:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fe58 	bl	8000e10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0204 	orr.w	r2, r2, #4
 8001176:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fe45 	bl	8000e10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fc36 	bl	8001a00 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011aa:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011c2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2223      	movs	r2, #35	; 0x23
 80011c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e000      	b.n	80011d2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
  }
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011e8:	2b23      	cmp	r3, #35	; 0x23
 80011ea:	d14a      	bne.n	8001282 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2223      	movs	r2, #35	; 0x23
 80011f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001206:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800120a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	f023 0302 	bic.w	r3, r3, #2
 800121e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001222:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0204 	bic.w	r2, r2, #4
 8001232:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff fde7 	bl	8000e10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 fbd8 	bl	8001a00 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0208 	bic.w	r2, r2, #8
 800125e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff fdd1 	bl	8000e10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2210      	movs	r2, #16
 800127a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
  }
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a4:	f043 0201 	orr.w	r2, r3, #1
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e07c      	b.n	80013ac <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012b8:	2b23      	cmp	r3, #35	; 0x23
 80012ba:	d176      	bne.n	80013aa <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80012bc:	2200      	movs	r2, #0
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 fe6d 	bl	8001fa0 <ETH_Prepare_Tx_Descriptors>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	f043 0202 	orr.w	r2, r3, #2
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e065      	b.n	80013ac <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012e0:	f3bf 8f4f 	dsb	sy
}
 80012e4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3206      	adds	r2, #6
 80012ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	2b03      	cmp	r3, #3
 8001304:	d904      	bls.n	8001310 <HAL_ETH_Transmit+0x84>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	1f1a      	subs	r2, r3, #4
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3106      	adds	r1, #6
 800131c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001320:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001324:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001326:	f7ff fd67 	bl	8000df8 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800132c:	e037      	b.n	800139e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d011      	beq.n	8001364 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	f043 0208 	orr.w	r2, r3, #8
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e023      	b.n	80013ac <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136a:	d018      	beq.n	800139e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800136c:	f7ff fd44 	bl	8000df8 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	d302      	bcc.n	8001382 <HAL_ETH_Transmit+0xf6>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10d      	bne.n	800139e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001388:	f043 0204 	orr.w	r2, r3, #4
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001398:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e006      	b.n	80013ac <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	dbc3      	blt.n	800132e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
  }
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0a8      	b.n	8001532 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013e6:	2b23      	cmp	r3, #35	; 0x23
 80013e8:	d001      	beq.n	80013ee <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0a1      	b.n	8001532 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	3212      	adds	r2, #18
 80013fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001404:	f1c3 0304 	rsb	r3, r3, #4
 8001408:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800140a:	e06a      	b.n	80014e2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	69da      	ldr	r2, [r3, #28]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001430:	2b00      	cmp	r3, #0
 8001432:	d103      	bne.n	800143c <HAL_ETH_ReadData+0x88>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d040      	beq.n	80014be <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00c      	beq.n	8001480 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0c1b      	lsrs	r3, r3, #16
 800146c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001470:	3b04      	subs	r3, #4
 8001472:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001498:	461a      	mov	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f002 fa45 	bl	800392c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	441a      	add	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d902      	bls.n	80014d0 <HAL_ETH_ReadData+0x11c>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b04      	subs	r3, #4
 80014ce:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	3212      	adds	r2, #18
 80014d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db06      	blt.n	80014f8 <HAL_ETH_ReadData+0x144>
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d202      	bcs.n	80014f8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d089      	beq.n	800140c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	441a      	add	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f815 	bl	800153c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	e000      	b.n	8001532 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001548:	2301      	movs	r3, #1
 800154a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001550:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	3212      	adds	r2, #18
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001562:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001564:	e040      	b.n	80015e8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d112      	bne.n	8001594 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4618      	mov	r0, r3
 8001574:	f002 f9aa 	bl	80038cc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	74fb      	strb	r3, [r7, #19]
 8001582:	e007      	b.n	8001594 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	461a      	mov	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	461a      	mov	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d026      	beq.n	80015e8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <ETH_UpdateDescriptor+0xe4>)
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	e003      	b.n	80015b2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80015b0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015b2:	f3bf 8f5f 	dmb	sy
}
 80015b6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	3301      	adds	r3, #1
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d902      	bls.n	80015d6 <ETH_UpdateDescriptor+0x9a>
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	3b04      	subs	r3, #4
 80015d4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	3212      	adds	r2, #18
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	617b      	str	r3, [r7, #20]
      desccount--;
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <ETH_UpdateDescriptor+0xb8>
 80015ee:	7cfb      	ldrb	r3, [r7, #19]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1b8      	bne.n	8001566 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d00c      	beq.n	8001618 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001606:	461a      	mov	r2, r3
 8001608:	2300      	movs	r3, #0
 800160a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	800045f8 	.word	0x800045f8

08001624 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f003 031c 	and.w	r3, r3, #28
 8001640:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	02db      	lsls	r3, r3, #11
 8001646:	b29b      	uxth	r3, r3
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	4313      	orrs	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	019b      	lsls	r3, r3, #6
 8001652:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f023 0302 	bic.w	r3, r3, #2
 8001662:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001674:	f7ff fbc0 	bl	8000df8 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800167a:	e00d      	b.n	8001698 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800167c:	f7ff fbbc 	bl	8000df8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168a:	d301      	bcc.n	8001690 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e010      	b.n	80016b2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ec      	bne.n	800167c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 031c 	and.w	r3, r3, #28
 80016d6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	02db      	lsls	r3, r3, #11
 80016dc:	b29b      	uxth	r3, r3
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	019b      	lsls	r3, r3, #6
 80016e8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001714:	f7ff fb70 	bl	8000df8 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800171a:	e00d      	b.n	8001738 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800171c:	f7ff fb6c 	bl	8000df8 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172a:	d301      	bcc.n	8001730 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e009      	b.n	8001744 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ec      	bne.n	800171c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0d9      	b.n	8001914 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf14      	ite	ne
 80017b4:	2301      	movne	r3, #1
 80017b6:	2300      	moveq	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf0c      	ite	eq
 80017ce:	2301      	moveq	r3, #1
 80017d0:	2300      	movne	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e00b      	b.n	800194c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800193a:	2b10      	cmp	r3, #16
 800193c:	d105      	bne.n	800194a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f883 	bl	8001a4c <ETH_SetMACConfig>

    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
  }
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f023 031c 	bic.w	r3, r3, #28
 800196a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800196c:	f001 fadc 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8001970:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_ETH_SetMDIOClockRange+0x98>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d908      	bls.n	800198c <HAL_ETH_SetMDIOClockRange+0x38>
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d804      	bhi.n	800198c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e027      	b.n	80019dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d908      	bls.n	80019a6 <HAL_ETH_SetMDIOClockRange+0x52>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d204      	bcs.n	80019a6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f043 030c 	orr.w	r3, r3, #12
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e01a      	b.n	80019dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d303      	bcc.n	80019b6 <HAL_ETH_SetMDIOClockRange+0x62>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d911      	bls.n	80019da <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d908      	bls.n	80019d0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d804      	bhi.n	80019d0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e005      	b.n	80019dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f043 0310 	orr.w	r3, r3, #16
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e000      	b.n	80019dc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80019da:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	611a      	str	r2, [r3, #16]
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	01312cff 	.word	0x01312cff
 80019f0:	02160ebf 	.word	0x02160ebf
 80019f4:	03938700 	.word	0x03938700
 80019f8:	05f5e0ff 	.word	0x05f5e0ff
 80019fc:	08f0d17f 	.word	0x08f0d17f

08001a00 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a22:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff f9ed 	bl	8000e10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a40:	6193      	str	r3, [r2, #24]
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <ETH_SetMACConfig+0x15c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	7c1b      	ldrb	r3, [r3, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <ETH_SetMACConfig+0x28>
 8001a6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a72:	e000      	b.n	8001a76 <ETH_SetMACConfig+0x2a>
 8001a74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	7c5b      	ldrb	r3, [r3, #17]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <ETH_SetMACConfig+0x38>
 8001a7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a82:	e000      	b.n	8001a86 <ETH_SetMACConfig+0x3a>
 8001a84:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7fdb      	ldrb	r3, [r3, #31]
 8001a92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001a94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	7f92      	ldrb	r2, [r2, #30]
 8001aa0:	2a00      	cmp	r2, #0
 8001aa2:	d102      	bne.n	8001aaa <ETH_SetMACConfig+0x5e>
 8001aa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa8:	e000      	b.n	8001aac <ETH_SetMACConfig+0x60>
 8001aaa:	2200      	movs	r2, #0
                        macconf->Speed |
 8001aac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	7f1b      	ldrb	r3, [r3, #28]
 8001ab2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ab4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001aba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ac2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	d102      	bne.n	8001ad4 <ETH_SetMACConfig+0x88>
 8001ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad2:	e000      	b.n	8001ad6 <ETH_SetMACConfig+0x8a>
 8001ad4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ad6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	7bdb      	ldrb	r3, [r3, #15]
 8001adc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ade:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ae4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001aec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aee:	4313      	orrs	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff f982 	bl	8000e10 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b22:	4013      	ands	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	d101      	bne.n	8001b3a <ETH_SetMACConfig+0xee>
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	e000      	b.n	8001b3c <ETH_SetMACConfig+0xf0>
 8001b3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001b4a:	2a01      	cmp	r2, #1
 8001b4c:	d101      	bne.n	8001b52 <ETH_SetMACConfig+0x106>
 8001b4e:	2208      	movs	r2, #8
 8001b50:	e000      	b.n	8001b54 <ETH_SetMACConfig+0x108>
 8001b52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b5c:	2a01      	cmp	r2, #1
 8001b5e:	d101      	bne.n	8001b64 <ETH_SetMACConfig+0x118>
 8001b60:	2204      	movs	r2, #4
 8001b62:	e000      	b.n	8001b66 <ETH_SetMACConfig+0x11a>
 8001b64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001b6e:	2a01      	cmp	r2, #1
 8001b70:	d101      	bne.n	8001b76 <ETH_SetMACConfig+0x12a>
 8001b72:	2202      	movs	r2, #2
 8001b74:	e000      	b.n	8001b78 <ETH_SetMACConfig+0x12c>
 8001b76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff f93d 	bl	8000e10 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	619a      	str	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	ff20810f 	.word	0xff20810f

08001bac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <ETH_SetDMAConfig+0x110>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	7b1b      	ldrb	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <ETH_SetDMAConfig+0x2c>
 8001bd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bd6:	e000      	b.n	8001bda <ETH_SetDMAConfig+0x2e>
 8001bd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	7b5b      	ldrb	r3, [r3, #13]
 8001bde:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001be0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	7f52      	ldrb	r2, [r2, #29]
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	d102      	bne.n	8001bf0 <ETH_SetDMAConfig+0x44>
 8001bea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bee:	e000      	b.n	8001bf2 <ETH_SetDMAConfig+0x46>
 8001bf0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bf2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	7b9b      	ldrb	r3, [r3, #14]
 8001bf8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bfa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	7f1b      	ldrb	r3, [r3, #28]
 8001c06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	7f9b      	ldrb	r3, [r3, #30]
 8001c0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c20:	4313      	orrs	r3, r2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c30:	461a      	mov	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff f8e4 	bl	8000e10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	791b      	ldrb	r3, [r3, #4]
 8001c5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff f8b5 	bl	8000e10 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	f8de3f23 	.word	0xf8de3f23

08001cc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0a6      	sub	sp, #152	; 0x98
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fe86 	bl	8001a4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d74:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	4619      	mov	r1, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff08 	bl	8001bac <ETH_SetDMAConfig>
}
 8001d9c:	bf00      	nop
 8001d9e:	3798      	adds	r7, #152	; 0x98
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3305      	adds	r3, #5
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	3204      	adds	r2, #4
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <ETH_MACAddressConfig+0x68>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	061a      	lsls	r2, r3, #24
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	041b      	lsls	r3, r3, #16
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3301      	adds	r3, #1
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	4313      	orrs	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <ETH_MACAddressConfig+0x6c>)
 8001df6:	4413      	add	r3, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	6013      	str	r3, [r2, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40028040 	.word	0x40028040
 8001e10:	40028044 	.word	0x40028044

08001e14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e03e      	b.n	8001ea0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	3206      	adds	r2, #6
 8001e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d80c      	bhi.n	8001e84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68d9      	ldr	r1, [r3, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	e004      	b.n	8001e8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d9bd      	bls.n	8001e22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	611a      	str	r2, [r3, #16]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	e046      	b.n	8001f62 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6919      	ldr	r1, [r3, #16]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	3212      	adds	r2, #18
 8001f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d80c      	bhi.n	8001f52 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6919      	ldr	r1, [r3, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	e004      	b.n	8001f5c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d9b5      	bls.n	8001ed4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f92:	60da      	str	r2, [r3, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b08d      	sub	sp, #52	; 0x34
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3318      	adds	r3, #24
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fe2:	d007      	beq.n	8001ff4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	3304      	adds	r3, #4
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0ff      	b.n	80021f8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <ETH_Prepare_Tx_Descriptors+0x264>)
 800200e:	4013      	ands	r3, r2
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	6852      	ldr	r2, [r2, #4]
 8002014:	431a      	orrs	r2, r3
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	431a      	orrs	r2, r3
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	431a      	orrs	r2, r3
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800207a:	f3bf 8f5f 	dmb	sy
}
 800207e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800208c:	e082      	b.n	8002194 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e005      	b.n	80020ba <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	3301      	adds	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d902      	bls.n	80020cc <ETH_Prepare_Tx_Descriptors+0x12c>
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	3b04      	subs	r3, #4
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020ee:	d007      	beq.n	8002100 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	3304      	adds	r3, #4
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d029      	beq.n	8002154 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800210e:	2300      	movs	r3, #0
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
 8002112:	e019      	b.n	8002148 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002114:	f3bf 8f5f 	dmb	sy
}
 8002118:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	3301      	adds	r3, #1
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212e:	2b03      	cmp	r3, #3
 8002130:	d902      	bls.n	8002138 <ETH_Prepare_Tx_Descriptors+0x198>
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	3b04      	subs	r3, #4
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	3301      	adds	r3, #1
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
 8002148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	429a      	cmp	r2, r3
 800214e:	d3e1      	bcc.n	8002114 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002150:	2302      	movs	r3, #2
 8002152:	e051      	b.n	80021f8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	3301      	adds	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002170:	4013      	ands	r3, r2
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	6852      	ldr	r2, [r2, #4]
 8002176:	431a      	orrs	r2, r3
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	3301      	adds	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002182:	f3bf 8f5f 	dmb	sy
}
 8002186:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f47f af78 	bne.w	800208e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e005      	b.n	80021be <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ce:	6979      	ldr	r1, [r7, #20]
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	3304      	adds	r3, #4
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021de:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	4413      	add	r3, r2
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80021f2:	b662      	cpsie	i
}
 80021f4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3734      	adds	r7, #52	; 0x34
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	ffffe000 	.word	0xffffe000

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	e175      	b.n	8002514 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 8164 	bne.w	800250e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d005      	beq.n	800225e <HAL_GPIO_Init+0x56>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d130      	bne.n	80022c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 0201 	and.w	r2, r3, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d017      	beq.n	80022fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d123      	bne.n	8002350 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	08da      	lsrs	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3208      	adds	r2, #8
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0203 	and.w	r2, r3, #3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80be 	beq.w	800250e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	4b66      	ldr	r3, [pc, #408]	; (800252c <HAL_GPIO_Init+0x324>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a65      	ldr	r2, [pc, #404]	; (800252c <HAL_GPIO_Init+0x324>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_GPIO_Init+0x324>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023aa:	4a61      	ldr	r2, [pc, #388]	; (8002530 <HAL_GPIO_Init+0x328>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a58      	ldr	r2, [pc, #352]	; (8002534 <HAL_GPIO_Init+0x32c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d037      	beq.n	8002446 <HAL_GPIO_Init+0x23e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_GPIO_Init+0x330>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d031      	beq.n	8002442 <HAL_GPIO_Init+0x23a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_GPIO_Init+0x334>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02b      	beq.n	800243e <HAL_GPIO_Init+0x236>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a55      	ldr	r2, [pc, #340]	; (8002540 <HAL_GPIO_Init+0x338>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d025      	beq.n	800243a <HAL_GPIO_Init+0x232>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a54      	ldr	r2, [pc, #336]	; (8002544 <HAL_GPIO_Init+0x33c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_GPIO_Init+0x22e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a53      	ldr	r2, [pc, #332]	; (8002548 <HAL_GPIO_Init+0x340>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x22a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_GPIO_Init+0x344>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x226>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a51      	ldr	r2, [pc, #324]	; (8002550 <HAL_GPIO_Init+0x348>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x222>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a50      	ldr	r2, [pc, #320]	; (8002554 <HAL_GPIO_Init+0x34c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x21e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_GPIO_Init+0x350>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x21a>
 800241e:	2309      	movs	r3, #9
 8002420:	e012      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002422:	230a      	movs	r3, #10
 8002424:	e010      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002426:	2308      	movs	r3, #8
 8002428:	e00e      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800242a:	2307      	movs	r3, #7
 800242c:	e00c      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800242e:	2306      	movs	r3, #6
 8002430:	e00a      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002432:	2305      	movs	r3, #5
 8002434:	e008      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002436:	2304      	movs	r3, #4
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800243a:	2303      	movs	r3, #3
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002446:	2300      	movs	r3, #0
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002458:	4935      	ldr	r1, [pc, #212]	; (8002530 <HAL_GPIO_Init+0x328>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_GPIO_Init+0x354>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248a:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_GPIO_Init+0x354>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_GPIO_Init+0x354>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b4:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_GPIO_Init+0x354>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_GPIO_Init+0x354>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_GPIO_Init+0x354>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_GPIO_Init+0x354>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_GPIO_Init+0x354>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	f67f ae86 	bls.w	8002228 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40020800 	.word	0x40020800
 8002540:	40020c00 	.word	0x40020c00
 8002544:	40021000 	.word	0x40021000
 8002548:	40021400 	.word	0x40021400
 800254c:	40021800 	.word	0x40021800
 8002550:	40021c00 	.word	0x40021c00
 8002554:	40022000 	.word	0x40022000
 8002558:	40022400 	.word	0x40022400
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	041a      	lsls	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <HAL_PWREx_EnableOverDrive+0x98>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a22      	ldr	r2, [pc, #136]	; (8002660 <HAL_PWREx_EnableOverDrive+0x98>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_PWREx_EnableOverDrive+0x98>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f6:	f7fe fbff 	bl	8000df8 <HAL_GetTick>
 80025fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025fc:	e009      	b.n	8002612 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025fe:	f7fe fbfb 	bl	8000df8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800260c:	d901      	bls.n	8002612 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e022      	b.n	8002658 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261e:	d1ee      	bne.n	80025fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800262c:	f7fe fbe4 	bl	8000df8 <HAL_GetTick>
 8002630:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002632:	e009      	b.n	8002648 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002634:	f7fe fbe0 	bl	8000df8 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002642:	d901      	bls.n	8002648 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e007      	b.n	8002658 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_PWREx_EnableOverDrive+0x9c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002654:	d1ee      	bne.n	8002634 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000

08002668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e29b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8087 	beq.w	800279a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800268c:	4b96      	ldr	r3, [pc, #600]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b04      	cmp	r3, #4
 8002696:	d00c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002698:	4b93      	ldr	r3, [pc, #588]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d112      	bne.n	80026ca <HAL_RCC_OscConfig+0x62>
 80026a4:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b0:	d10b      	bne.n	80026ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b2:	4b8d      	ldr	r3, [pc, #564]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d06c      	beq.n	8002798 <HAL_RCC_OscConfig+0x130>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d168      	bne.n	8002798 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e275      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x7a>
 80026d4:	4b84      	ldr	r3, [pc, #528]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a83      	ldr	r2, [pc, #524]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e02e      	b.n	8002740 <HAL_RCC_OscConfig+0xd8>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x9c>
 80026ea:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7e      	ldr	r2, [pc, #504]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a7b      	ldr	r2, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80026fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e01d      	b.n	8002740 <HAL_RCC_OscConfig+0xd8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0xc0>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0xd8>
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fb56 	bl	8000df8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe fb52 	bl	8000df8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e229      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0xe8>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fb42 	bl	8000df8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7fe fb3e 	bl	8000df8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e215      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x110>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d069      	beq.n	800287a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a6:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d11c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x190>
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d116      	bne.n	80027f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x17a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e1e9      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	493d      	ldr	r1, [pc, #244]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	e040      	b.n	800287a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d023      	beq.n	8002848 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002800:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a38      	ldr	r2, [pc, #224]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe faf4 	bl	8000df8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002814:	f7fe faf0 	bl	8000df8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1c7      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4929      	ldr	r1, [pc, #164]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
 8002846:	e018      	b.n	800287a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fad0 	bl	8000df8 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285c:	f7fe facc 	bl	8000df8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1a3      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d038      	beq.n	80028f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d019      	beq.n	80028c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	4a15      	ldr	r2, [pc, #84]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe faad 	bl	8000df8 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fe faa9 	bl	8000df8 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e180      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x23a>
 80028c0:	e01a      	b.n	80028f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7fe fa93 	bl	8000df8 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d6:	f7fe fa8f 	bl	8000df8 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d903      	bls.n	80028ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e166      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
 80028e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	4b92      	ldr	r3, [pc, #584]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a4 	beq.w	8002a4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002906:	4b8c      	ldr	r3, [pc, #560]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10d      	bne.n	800292e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4b89      	ldr	r3, [pc, #548]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a88      	ldr	r2, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b86      	ldr	r3, [pc, #536]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292a:	2301      	movs	r3, #1
 800292c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292e:	4b83      	ldr	r3, [pc, #524]	; (8002b3c <HAL_RCC_OscConfig+0x4d4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d118      	bne.n	800296c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800293a:	4b80      	ldr	r3, [pc, #512]	; (8002b3c <HAL_RCC_OscConfig+0x4d4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7f      	ldr	r2, [pc, #508]	; (8002b3c <HAL_RCC_OscConfig+0x4d4>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002946:	f7fe fa57 	bl	8000df8 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294e:	f7fe fa53 	bl	8000df8 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	; 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e12a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002960:	4b76      	ldr	r3, [pc, #472]	; (8002b3c <HAL_RCC_OscConfig+0x4d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x31a>
 8002974:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a6f      	ldr	r2, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
 8002980:	e02d      	b.n	80029de <HAL_RCC_OscConfig+0x376>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x33c>
 800298a:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	; 0x70
 8002996:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	e01c      	b.n	80029de <HAL_RCC_OscConfig+0x376>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d10c      	bne.n	80029c6 <HAL_RCC_OscConfig+0x35e>
 80029ac:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	4a61      	ldr	r2, [pc, #388]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
 80029b8:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a5e      	ldr	r2, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0x376>
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d015      	beq.n	8002a12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fa07 	bl	8000df8 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fa03 	bl	8000df8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0d8      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ee      	beq.n	80029ee <HAL_RCC_OscConfig+0x386>
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a12:	f7fe f9f1 	bl	8000df8 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe f9ed 	bl	8000df8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0c2      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80ae 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a58:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d06d      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d14b      	bne.n	8002b04 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe f9be 	bl	8000df8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe f9ba 	bl	8000df8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e091      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	071b      	lsls	r3, r3, #28
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe f98c 	bl	8000df8 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe f988 	bl	8000df8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e05f      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x47c>
 8002b02:	e057      	b.n	8002bb4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe f972 	bl	8000df8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe f96e 	bl	8000df8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e045      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_OscConfig+0x4d0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4b0>
 8002b36:	e03d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x54c>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_RCC_OscConfig+0x558>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d030      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d129      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d122      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d119      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d10f      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0d0      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d910      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 020f 	bic.w	r2, r3, #15
 8002bf2:	4965      	ldr	r1, [pc, #404]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d040      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d115      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e073      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06b      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca6:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4936      	ldr	r1, [pc, #216]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb8:	f7fe f89e 	bl	8000df8 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc0:	f7fe f89a 	bl	8000df8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e053      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 020c 	and.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1eb      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d210      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 020f 	bic.w	r2, r3, #15
 8002cfe:	4922      	ldr	r1, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f821 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	490a      	ldr	r1, [pc, #40]	; (8002d90 <HAL_RCC_ClockConfig+0x1cc>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1d0>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1d4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fffa 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	08012c00 	.word	0x08012c00
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da0:	b090      	sub	sp, #64	; 0x40
 8002da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
 8002da8:	2300      	movs	r3, #0
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	2300      	movs	r3, #0
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d00d      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x40>
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	f200 80a1 	bhi.w	8002f08 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dce:	e09b      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dd4:	e09b      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd6:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dda:	e098      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d028      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	2200      	movs	r2, #0
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e04:	2100      	movs	r1, #0
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e08:	fb03 f201 	mul.w	r2, r3, r1
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e16:	fba0 1202 	umull	r1, r2, r0, r2
 8002e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	4413      	add	r3, r2
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	61fa      	str	r2, [r7, #28]
 8002e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e36:	f7fd fa6b 	bl	8000310 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e42:	e053      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	617a      	str	r2, [r7, #20]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e56:	f04f 0b00 	mov.w	fp, #0
 8002e5a:	4652      	mov	r2, sl
 8002e5c:	465b      	mov	r3, fp
 8002e5e:	f04f 0000 	mov.w	r0, #0
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	0159      	lsls	r1, r3, #5
 8002e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e6c:	0150      	lsls	r0, r2, #5
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	ebb2 080a 	subs.w	r8, r2, sl
 8002e76:	eb63 090b 	sbc.w	r9, r3, fp
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e92:	eb63 0509 	sbc.w	r5, r3, r9
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	00eb      	lsls	r3, r5, #3
 8002ea0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea4:	00e2      	lsls	r2, r4, #3
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	461d      	mov	r5, r3
 8002eaa:	eb14 030a 	adds.w	r3, r4, sl
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	eb45 030b 	adc.w	r3, r5, fp
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	028b      	lsls	r3, r1, #10
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ecc:	4621      	mov	r1, r4
 8002ece:	028a      	lsls	r2, r1, #10
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	60fa      	str	r2, [r7, #12]
 8002edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee0:	f7fd fa16 	bl	8000310 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002efc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3740      	adds	r7, #64	; 0x40
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	017d7840 	.word	0x017d7840

08002f28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000

08002f40 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002f46:	4b8d      	ldr	r3, [pc, #564]	; (800317c <MX_LWIP_Init+0x23c>)
 8002f48:	22c0      	movs	r2, #192	; 0xc0
 8002f4a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002f4c:	4b8b      	ldr	r3, [pc, #556]	; (800317c <MX_LWIP_Init+0x23c>)
 8002f4e:	22a8      	movs	r2, #168	; 0xa8
 8002f50:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002f52:	4b8a      	ldr	r3, [pc, #552]	; (800317c <MX_LWIP_Init+0x23c>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 25;
 8002f58:	4b88      	ldr	r3, [pc, #544]	; (800317c <MX_LWIP_Init+0x23c>)
 8002f5a:	2219      	movs	r2, #25
 8002f5c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002f5e:	4b88      	ldr	r3, [pc, #544]	; (8003180 <MX_LWIP_Init+0x240>)
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002f64:	4b86      	ldr	r3, [pc, #536]	; (8003180 <MX_LWIP_Init+0x240>)
 8002f66:	22ff      	movs	r2, #255	; 0xff
 8002f68:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002f6a:	4b85      	ldr	r3, [pc, #532]	; (8003180 <MX_LWIP_Init+0x240>)
 8002f6c:	22ff      	movs	r2, #255	; 0xff
 8002f6e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002f70:	4b83      	ldr	r3, [pc, #524]	; (8003180 <MX_LWIP_Init+0x240>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002f76:	4b83      	ldr	r3, [pc, #524]	; (8003184 <MX_LWIP_Init+0x244>)
 8002f78:	22c0      	movs	r2, #192	; 0xc0
 8002f7a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002f7c:	4b81      	ldr	r3, [pc, #516]	; (8003184 <MX_LWIP_Init+0x244>)
 8002f7e:	22a8      	movs	r2, #168	; 0xa8
 8002f80:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002f82:	4b80      	ldr	r3, [pc, #512]	; (8003184 <MX_LWIP_Init+0x244>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002f88:	4b7e      	ldr	r3, [pc, #504]	; (8003184 <MX_LWIP_Init+0x244>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002f8e:	f001 fb8d 	bl	80046ac <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002f92:	4b7a      	ldr	r3, [pc, #488]	; (800317c <MX_LWIP_Init+0x23c>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	061a      	lsls	r2, r3, #24
 8002f98:	4b78      	ldr	r3, [pc, #480]	; (800317c <MX_LWIP_Init+0x23c>)
 8002f9a:	785b      	ldrb	r3, [r3, #1]
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	4b76      	ldr	r3, [pc, #472]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fa2:	789b      	ldrb	r3, [r3, #2]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	4a74      	ldr	r2, [pc, #464]	; (800317c <MX_LWIP_Init+0x23c>)
 8002faa:	78d2      	ldrb	r2, [r2, #3]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	061a      	lsls	r2, r3, #24
 8002fb0:	4b72      	ldr	r3, [pc, #456]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	0619      	lsls	r1, r3, #24
 8002fb6:	4b71      	ldr	r3, [pc, #452]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	4319      	orrs	r1, r3
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fc0:	789b      	ldrb	r3, [r3, #2]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	496d      	ldr	r1, [pc, #436]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fc8:	78c9      	ldrb	r1, [r1, #3]
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	4b69      	ldr	r3, [pc, #420]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	0619      	lsls	r1, r3, #24
 8002fda:	4b68      	ldr	r3, [pc, #416]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fdc:	785b      	ldrb	r3, [r3, #1]
 8002fde:	041b      	lsls	r3, r3, #16
 8002fe0:	4319      	orrs	r1, r3
 8002fe2:	4b66      	ldr	r3, [pc, #408]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	4964      	ldr	r1, [pc, #400]	; (800317c <MX_LWIP_Init+0x23c>)
 8002fec:	78c9      	ldrb	r1, [r1, #3]
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	4b60      	ldr	r3, [pc, #384]	; (800317c <MX_LWIP_Init+0x23c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	0619      	lsls	r1, r3, #24
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	; (800317c <MX_LWIP_Init+0x23c>)
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	4319      	orrs	r1, r3
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <MX_LWIP_Init+0x23c>)
 8003008:	789b      	ldrb	r3, [r3, #2]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	430b      	orrs	r3, r1
 800300e:	495b      	ldr	r1, [pc, #364]	; (800317c <MX_LWIP_Init+0x23c>)
 8003010:	78c9      	ldrb	r1, [r1, #3]
 8003012:	430b      	orrs	r3, r1
 8003014:	0e1b      	lsrs	r3, r3, #24
 8003016:	4313      	orrs	r3, r2
 8003018:	4a5b      	ldr	r2, [pc, #364]	; (8003188 <MX_LWIP_Init+0x248>)
 800301a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800301c:	4b58      	ldr	r3, [pc, #352]	; (8003180 <MX_LWIP_Init+0x240>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	061a      	lsls	r2, r3, #24
 8003022:	4b57      	ldr	r3, [pc, #348]	; (8003180 <MX_LWIP_Init+0x240>)
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	4b55      	ldr	r3, [pc, #340]	; (8003180 <MX_LWIP_Init+0x240>)
 800302c:	789b      	ldrb	r3, [r3, #2]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	4313      	orrs	r3, r2
 8003032:	4a53      	ldr	r2, [pc, #332]	; (8003180 <MX_LWIP_Init+0x240>)
 8003034:	78d2      	ldrb	r2, [r2, #3]
 8003036:	4313      	orrs	r3, r2
 8003038:	061a      	lsls	r2, r3, #24
 800303a:	4b51      	ldr	r3, [pc, #324]	; (8003180 <MX_LWIP_Init+0x240>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	0619      	lsls	r1, r3, #24
 8003040:	4b4f      	ldr	r3, [pc, #316]	; (8003180 <MX_LWIP_Init+0x240>)
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	4319      	orrs	r1, r3
 8003048:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <MX_LWIP_Init+0x240>)
 800304a:	789b      	ldrb	r3, [r3, #2]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	430b      	orrs	r3, r1
 8003050:	494b      	ldr	r1, [pc, #300]	; (8003180 <MX_LWIP_Init+0x240>)
 8003052:	78c9      	ldrb	r1, [r1, #3]
 8003054:	430b      	orrs	r3, r1
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800305c:	431a      	orrs	r2, r3
 800305e:	4b48      	ldr	r3, [pc, #288]	; (8003180 <MX_LWIP_Init+0x240>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	0619      	lsls	r1, r3, #24
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <MX_LWIP_Init+0x240>)
 8003066:	785b      	ldrb	r3, [r3, #1]
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	4319      	orrs	r1, r3
 800306c:	4b44      	ldr	r3, [pc, #272]	; (8003180 <MX_LWIP_Init+0x240>)
 800306e:	789b      	ldrb	r3, [r3, #2]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	430b      	orrs	r3, r1
 8003074:	4942      	ldr	r1, [pc, #264]	; (8003180 <MX_LWIP_Init+0x240>)
 8003076:	78c9      	ldrb	r1, [r1, #3]
 8003078:	430b      	orrs	r3, r1
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003080:	431a      	orrs	r2, r3
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <MX_LWIP_Init+0x240>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	0619      	lsls	r1, r3, #24
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <MX_LWIP_Init+0x240>)
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	4319      	orrs	r1, r3
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <MX_LWIP_Init+0x240>)
 8003092:	789b      	ldrb	r3, [r3, #2]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	430b      	orrs	r3, r1
 8003098:	4939      	ldr	r1, [pc, #228]	; (8003180 <MX_LWIP_Init+0x240>)
 800309a:	78c9      	ldrb	r1, [r1, #3]
 800309c:	430b      	orrs	r3, r1
 800309e:	0e1b      	lsrs	r3, r3, #24
 80030a0:	4313      	orrs	r3, r2
 80030a2:	4a3a      	ldr	r2, [pc, #232]	; (800318c <MX_LWIP_Init+0x24c>)
 80030a4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <MX_LWIP_Init+0x244>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	061a      	lsls	r2, r3, #24
 80030ac:	4b35      	ldr	r3, [pc, #212]	; (8003184 <MX_LWIP_Init+0x244>)
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	431a      	orrs	r2, r3
 80030b4:	4b33      	ldr	r3, [pc, #204]	; (8003184 <MX_LWIP_Init+0x244>)
 80030b6:	789b      	ldrb	r3, [r3, #2]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	4313      	orrs	r3, r2
 80030bc:	4a31      	ldr	r2, [pc, #196]	; (8003184 <MX_LWIP_Init+0x244>)
 80030be:	78d2      	ldrb	r2, [r2, #3]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	061a      	lsls	r2, r3, #24
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <MX_LWIP_Init+0x244>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	0619      	lsls	r1, r3, #24
 80030ca:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <MX_LWIP_Init+0x244>)
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	4319      	orrs	r1, r3
 80030d2:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <MX_LWIP_Init+0x244>)
 80030d4:	789b      	ldrb	r3, [r3, #2]
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	430b      	orrs	r3, r1
 80030da:	492a      	ldr	r1, [pc, #168]	; (8003184 <MX_LWIP_Init+0x244>)
 80030dc:	78c9      	ldrb	r1, [r1, #3]
 80030de:	430b      	orrs	r3, r1
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030e6:	431a      	orrs	r2, r3
 80030e8:	4b26      	ldr	r3, [pc, #152]	; (8003184 <MX_LWIP_Init+0x244>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	0619      	lsls	r1, r3, #24
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <MX_LWIP_Init+0x244>)
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	4319      	orrs	r1, r3
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <MX_LWIP_Init+0x244>)
 80030f8:	789b      	ldrb	r3, [r3, #2]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	430b      	orrs	r3, r1
 80030fe:	4921      	ldr	r1, [pc, #132]	; (8003184 <MX_LWIP_Init+0x244>)
 8003100:	78c9      	ldrb	r1, [r1, #3]
 8003102:	430b      	orrs	r3, r1
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800310a:	431a      	orrs	r2, r3
 800310c:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <MX_LWIP_Init+0x244>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	0619      	lsls	r1, r3, #24
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <MX_LWIP_Init+0x244>)
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	041b      	lsls	r3, r3, #16
 8003118:	4319      	orrs	r1, r3
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <MX_LWIP_Init+0x244>)
 800311c:	789b      	ldrb	r3, [r3, #2]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	430b      	orrs	r3, r1
 8003122:	4918      	ldr	r1, [pc, #96]	; (8003184 <MX_LWIP_Init+0x244>)
 8003124:	78c9      	ldrb	r1, [r1, #3]
 8003126:	430b      	orrs	r3, r1
 8003128:	0e1b      	lsrs	r3, r3, #24
 800312a:	4313      	orrs	r3, r2
 800312c:	4a18      	ldr	r2, [pc, #96]	; (8003190 <MX_LWIP_Init+0x250>)
 800312e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <MX_LWIP_Init+0x254>)
 8003132:	9302      	str	r3, [sp, #8]
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <MX_LWIP_Init+0x258>)
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	2300      	movs	r3, #0
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <MX_LWIP_Init+0x250>)
 800313e:	4a13      	ldr	r2, [pc, #76]	; (800318c <MX_LWIP_Init+0x24c>)
 8003140:	4911      	ldr	r1, [pc, #68]	; (8003188 <MX_LWIP_Init+0x248>)
 8003142:	4816      	ldr	r0, [pc, #88]	; (800319c <MX_LWIP_Init+0x25c>)
 8003144:	f001 ff9e 	bl	8005084 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003148:	4814      	ldr	r0, [pc, #80]	; (800319c <MX_LWIP_Init+0x25c>)
 800314a:	f002 f94d 	bl	80053e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <MX_LWIP_Init+0x25c>)
 8003150:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003160:	480e      	ldr	r0, [pc, #56]	; (800319c <MX_LWIP_Init+0x25c>)
 8003162:	f002 f951 	bl	8005408 <netif_set_up>
 8003166:	e002      	b.n	800316e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003168:	480c      	ldr	r0, [pc, #48]	; (800319c <MX_LWIP_Init+0x25c>)
 800316a:	f002 f9b9 	bl	80054e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800316e:	490c      	ldr	r1, [pc, #48]	; (80031a0 <MX_LWIP_Init+0x260>)
 8003170:	480a      	ldr	r0, [pc, #40]	; (800319c <MX_LWIP_Init+0x25c>)
 8003172:	f002 fa4b 	bl	800560c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000238 	.word	0x20000238
 8003180:	2000023c 	.word	0x2000023c
 8003184:	20000240 	.word	0x20000240
 8003188:	2000022c 	.word	0x2000022c
 800318c:	20000230 	.word	0x20000230
 8003190:	20000234 	.word	0x20000234
 8003194:	0800ecc5 	.word	0x0800ecc5
 8003198:	08003509 	.word	0x08003509
 800319c:	200001f8 	.word	0x200001f8
 80031a0:	080031f5 	.word	0x080031f5

080031a4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80031ac:	f7fd fe24 	bl	8000df8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <Ethernet_Link_Periodic_Handle+0x30>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b63      	cmp	r3, #99	; 0x63
 80031ba:	d907      	bls.n	80031cc <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80031bc:	f7fd fe1c 	bl	8000df8 <HAL_GetTick>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <Ethernet_Link_Periodic_Handle+0x30>)
 80031c4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 faf4 	bl	80037b4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200001f4 	.word	0x200001f4

080031d8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80031dc:	4804      	ldr	r0, [pc, #16]	; (80031f0 <MX_LWIP_Process+0x18>)
 80031de:	f000 f973 	bl	80034c8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80031e2:	f009 f983 	bl	800c4ec <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80031e6:	4802      	ldr	r0, [pc, #8]	; (80031f0 <MX_LWIP_Process+0x18>)
 80031e8:	f7ff ffdc 	bl	80031a4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	200001f8 	.word	0x200001f8

080031f4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <SCB_InvalidateDCache_by_Addr>:
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800321a:	2320      	movs	r3, #32
 800321c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800321e:	f3bf 8f4f 	dsb	sy
}
 8003222:	bf00      	nop
    while (op_size > 0) {
 8003224:	e00b      	b.n	800323e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003226:	4a0d      	ldr	r2, [pc, #52]	; (800325c <SCB_InvalidateDCache_by_Addr+0x54>)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	dcf0      	bgt.n	8003226 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003244:	f3bf 8f4f 	dsb	sy
}
 8003248:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800324a:	f3bf 8f6f 	isb	sy
}
 800324e:	bf00      	nop
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <low_level_init+0x110>)
 800326e:	4a41      	ldr	r2, [pc, #260]	; (8003374 <low_level_init+0x114>)
 8003270:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003272:	2300      	movs	r3, #0
 8003274:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800327a:	23e1      	movs	r3, #225	; 0xe1
 800327c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800327e:	2300      	movs	r3, #0
 8003280:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003282:	2300      	movs	r3, #0
 8003284:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003286:	2300      	movs	r3, #0
 8003288:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800328a:	4a39      	ldr	r2, [pc, #228]	; (8003370 <low_level_init+0x110>)
 800328c:	f107 0308 	add.w	r3, r7, #8
 8003290:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003292:	4b37      	ldr	r3, [pc, #220]	; (8003370 <low_level_init+0x110>)
 8003294:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003298:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800329a:	4b35      	ldr	r3, [pc, #212]	; (8003370 <low_level_init+0x110>)
 800329c:	4a36      	ldr	r2, [pc, #216]	; (8003378 <low_level_init+0x118>)
 800329e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <low_level_init+0x110>)
 80032a2:	4a36      	ldr	r2, [pc, #216]	; (800337c <low_level_init+0x11c>)
 80032a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80032a6:	4b32      	ldr	r3, [pc, #200]	; (8003370 <low_level_init+0x110>)
 80032a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80032ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80032ae:	4830      	ldr	r0, [pc, #192]	; (8003370 <low_level_init+0x110>)
 80032b0:	f7fd feb8 	bl	8001024 <HAL_ETH_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80032b8:	2238      	movs	r2, #56	; 0x38
 80032ba:	2100      	movs	r1, #0
 80032bc:	4830      	ldr	r0, [pc, #192]	; (8003380 <low_level_init+0x120>)
 80032be:	f00b fe19 	bl	800eef4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <low_level_init+0x120>)
 80032c4:	2221      	movs	r2, #33	; 0x21
 80032c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <low_level_init+0x120>)
 80032ca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80032ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80032d0:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <low_level_init+0x120>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80032d6:	482b      	ldr	r0, [pc, #172]	; (8003384 <low_level_init+0x124>)
 80032d8:	f001 fd9c 	bl	8004e14 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2206      	movs	r2, #6
 80032e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80032e4:	4b22      	ldr	r3, [pc, #136]	; (8003370 <low_level_init+0x110>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80032f0:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <low_level_init+0x110>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	785a      	ldrb	r2, [r3, #1]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <low_level_init+0x110>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	789a      	ldrb	r2, [r3, #2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <low_level_init+0x110>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	78da      	ldrb	r2, [r3, #3]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <low_level_init+0x110>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	791a      	ldrb	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003320:	4b13      	ldr	r3, [pc, #76]	; (8003370 <low_level_init+0x110>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	795a      	ldrb	r2, [r3, #5]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003332:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800333a:	f043 030a 	orr.w	r3, r3, #10
 800333e:	b2da      	uxtb	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003346:	4910      	ldr	r1, [pc, #64]	; (8003388 <low_level_init+0x128>)
 8003348:	4810      	ldr	r0, [pc, #64]	; (800338c <low_level_init+0x12c>)
 800334a:	f7fd fba2 	bl	8000a92 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800334e:	480f      	ldr	r0, [pc, #60]	; (800338c <low_level_init+0x12c>)
 8003350:	f7fd fbd1 	bl	8000af6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa2a 	bl	80037b4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003360:	e001      	b.n	8003366 <low_level_init+0x106>
    Error_Handler();
 8003362:	f7fd fa3d 	bl	80007e0 <Error_Handler>
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20004bd0 	.word	0x20004bd0
 8003374:	40028000 	.word	0x40028000
 8003378:	20000130 	.word	0x20000130
 800337c:	20000090 	.word	0x20000090
 8003380:	20004c80 	.word	0x20004c80
 8003384:	08012c10 	.word	0x08012c10
 8003388:	2000000c 	.word	0x2000000c
 800338c:	20004cb8 	.word	0x20004cb8

08003390 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b092      	sub	sp, #72	; 0x48
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	2230      	movs	r2, #48	; 0x30
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f00b fd9f 	bl	800eef4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	2230      	movs	r2, #48	; 0x30
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f00b fd98 	bl	800eef4 <memset>

  for(q = p; q != NULL; q = q->next)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	643b      	str	r3, [r7, #64]	; 0x40
 80033c8:	e045      	b.n	8003456 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80033ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d902      	bls.n	80033d6 <low_level_output+0x46>
      return ERR_IF;
 80033d0:	f06f 030b 	mvn.w	r3, #11
 80033d4:	e055      	b.n	8003482 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80033d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	3348      	adds	r3, #72	; 0x48
 80033e6:	443b      	add	r3, r7
 80033e8:	3b3c      	subs	r3, #60	; 0x3c
 80033ea:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80033ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ee:	895b      	ldrh	r3, [r3, #10]
 80033f0:	4619      	mov	r1, r3
 80033f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	3348      	adds	r3, #72	; 0x48
 80033fe:	443b      	add	r3, r7
 8003400:	3b38      	subs	r3, #56	; 0x38
 8003402:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003406:	2b00      	cmp	r3, #0
 8003408:	d011      	beq.n	800342e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800340a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340c:	1e5a      	subs	r2, r3, #1
 800340e:	f107 000c 	add.w	r0, r7, #12
 8003412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003414:	460b      	mov	r3, r1
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	440b      	add	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	18c1      	adds	r1, r0, r3
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	3348      	adds	r3, #72	; 0x48
 8003428:	443b      	add	r3, r7
 800342a:	3b34      	subs	r3, #52	; 0x34
 800342c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800342e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	3348      	adds	r3, #72	; 0x48
 8003442:	443b      	add	r3, r7
 8003444:	3b34      	subs	r3, #52	; 0x34
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    }

    i++;
 800344a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344c:	3301      	adds	r3, #1
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	643b      	str	r3, [r7, #64]	; 0x40
 8003456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1b6      	bne.n	80033ca <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	891b      	ldrh	r3, [r3, #8]
 8003460:	461a      	mov	r2, r3
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <low_level_output+0xfc>)
 8003464:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <low_level_output+0xfc>)
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <low_level_output+0xfc>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003474:	2214      	movs	r2, #20
 8003476:	4905      	ldr	r1, [pc, #20]	; (800348c <low_level_output+0xfc>)
 8003478:	4805      	ldr	r0, [pc, #20]	; (8003490 <low_level_output+0x100>)
 800347a:	f7fd ff07 	bl	800128c <HAL_ETH_Transmit>

  return errval;
 800347e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003482:	4618      	mov	r0, r3
 8003484:	3748      	adds	r7, #72	; 0x48
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20004c80 	.word	0x20004c80
 8003490:	20004bd0 	.word	0x20004bd0

08003494 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <low_level_input+0x2c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80034a8:	f107 030c 	add.w	r3, r7, #12
 80034ac:	4619      	mov	r1, r3
 80034ae:	4805      	ldr	r0, [pc, #20]	; (80034c4 <low_level_input+0x30>)
 80034b0:	f7fd ff80 	bl	80013b4 <HAL_ETH_ReadData>
  }

  return p;
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20004bcc 	.word	0x20004bcc
 80034c4:	20004bd0 	.word	0x20004bd0

080034c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ffdd 	bl	8003494 <low_level_input>
 80034da:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	4798      	blx	r3
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f002 fc0a 	bl	8005d0c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ea      	bne.n	80034d4 <ethernetif_input+0xc>
}
 80034fe:	bf00      	nop
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <ethernetif_init+0x1c>
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <ethernetif_init+0x48>)
 8003518:	f240 127b 	movw	r2, #379	; 0x17b
 800351c:	490d      	ldr	r1, [pc, #52]	; (8003554 <ethernetif_init+0x4c>)
 800351e:	480e      	ldr	r0, [pc, #56]	; (8003558 <ethernetif_init+0x50>)
 8003520:	f00b fcf0 	bl	800ef04 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2273      	movs	r2, #115	; 0x73
 8003528:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2274      	movs	r2, #116	; 0x74
 8003530:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <ethernetif_init+0x54>)
 8003538:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a08      	ldr	r2, [pc, #32]	; (8003560 <ethernetif_init+0x58>)
 800353e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fe8d 	bl	8003260 <low_level_init>

  return ERR_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	08010000 	.word	0x08010000
 8003554:	0801001c 	.word	0x0801001c
 8003558:	0801002c 	.word	0x0801002c
 800355c:	0800d17d 	.word	0x0800d17d
 8003560:	08003391 	.word	0x08003391

08003564 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	4807      	ldr	r0, [pc, #28]	; (8003590 <pbuf_free_custom+0x2c>)
 8003574:	f001 fd30 	bl	8004fd8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <pbuf_free_custom+0x30>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <pbuf_free_custom+0x30>)
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
  }
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	08012c10 	.word	0x08012c10
 8003594:	20004bcc 	.word	0x20004bcc

08003598 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800359c:	f7fd fc2c 	bl	8000df8 <HAL_GetTick>
 80035a0:	4603      	mov	r3, r0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08e      	sub	sp, #56	; 0x38
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_ETH_MspInit+0x158>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f040 8096 	bne.w	80036f8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80035cc:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4a4c      	ldr	r2, [pc, #304]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 80035d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d6:	6313      	str	r3, [r2, #48]	; 0x30
 80035d8:	4b4a      	ldr	r3, [pc, #296]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	4a46      	ldr	r2, [pc, #280]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 80035ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ee:	6313      	str	r3, [r2, #48]	; 0x30
 80035f0:	4b44      	ldr	r3, [pc, #272]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4a40      	ldr	r2, [pc, #256]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 8003602:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003606:	6313      	str	r3, [r2, #48]	; 0x30
 8003608:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003614:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	4a3a      	ldr	r2, [pc, #232]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	6313      	str	r3, [r2, #48]	; 0x30
 8003620:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4a34      	ldr	r2, [pc, #208]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6313      	str	r3, [r2, #48]	; 0x30
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003644:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 800364a:	f043 0302 	orr.w	r3, r3, #2
 800364e:	6313      	str	r3, [r2, #48]	; 0x30
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800365c:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 8003662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003666:	6313      	str	r3, [r2, #48]	; 0x30
 8003668:	4b26      	ldr	r3, [pc, #152]	; (8003704 <HAL_ETH_MspInit+0x15c>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003674:	2332      	movs	r3, #50	; 0x32
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003684:	230b      	movs	r3, #11
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368c:	4619      	mov	r1, r3
 800368e:	481e      	ldr	r0, [pc, #120]	; (8003708 <HAL_ETH_MspInit+0x160>)
 8003690:	f7fe fdba 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003694:	2386      	movs	r3, #134	; 0x86
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	2302      	movs	r3, #2
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a0:	2303      	movs	r3, #3
 80036a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036a4:	230b      	movs	r3, #11
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ac:	4619      	mov	r1, r3
 80036ae:	4817      	ldr	r0, [pc, #92]	; (800370c <HAL_ETH_MspInit+0x164>)
 80036b0:	f7fe fdaa 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036c6:	230b      	movs	r3, #11
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ce:	4619      	mov	r1, r3
 80036d0:	480f      	ldr	r0, [pc, #60]	; (8003710 <HAL_ETH_MspInit+0x168>)
 80036d2:	f7fe fd99 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80036d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e4:	2303      	movs	r3, #3
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036e8:	230b      	movs	r3, #11
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f0:	4619      	mov	r1, r3
 80036f2:	4808      	ldr	r0, [pc, #32]	; (8003714 <HAL_ETH_MspInit+0x16c>)
 80036f4:	f7fe fd88 	bl	8002208 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80036f8:	bf00      	nop
 80036fa:	3738      	adds	r7, #56	; 0x38
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40028000 	.word	0x40028000
 8003704:	40023800 	.word	0x40023800
 8003708:	40020800 	.word	0x40020800
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400
 8003714:	40021800 	.word	0x40021800

08003718 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800371c:	4802      	ldr	r0, [pc, #8]	; (8003728 <ETH_PHY_IO_Init+0x10>)
 800371e:	f7fe f919 	bl	8001954 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20004bd0 	.word	0x20004bd0

0800372c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return 0;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	4807      	ldr	r0, [pc, #28]	; (800376c <ETH_PHY_IO_ReadReg+0x30>)
 8003750:	f7fd ff68 	bl	8001624 <HAL_ETH_ReadPHYRegister>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	e000      	b.n	8003762 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20004bd0 	.word	0x20004bd0

08003770 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	4807      	ldr	r0, [pc, #28]	; (80037a0 <ETH_PHY_IO_WriteReg+0x30>)
 8003784:	f7fd ff99 	bl	80016ba <HAL_ETH_WritePHYRegister>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	e000      	b.n	8003796 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20004bd0 	.word	0x20004bd0

080037a4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80037a8:	f7fd fb26 	bl	8000df8 <HAL_GetTick>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b0a0      	sub	sp, #128	; 0x80
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	2264      	movs	r2, #100	; 0x64
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f00b fb95 	bl	800eef4 <memset>
  int32_t PHYLinkState = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037d2:	2300      	movs	r3, #0
 80037d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80037d6:	2300      	movs	r3, #0
 80037d8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80037da:	483a      	ldr	r0, [pc, #232]	; (80038c4 <ethernet_link_check_state+0x110>)
 80037dc:	f7fd fa33 	bl	8000c46 <LAN8742_GetLinkState>
 80037e0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00c      	beq.n	800380e <ethernet_link_check_state+0x5a>
 80037f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	dc09      	bgt.n	800380e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80037fa:	4833      	ldr	r0, [pc, #204]	; (80038c8 <ethernet_link_check_state+0x114>)
 80037fc:	f7fd fced 	bl	80011da <HAL_ETH_Stop>
    netif_set_down(netif);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f001 fe6d 	bl	80054e0 <netif_set_down>
    netif_set_link_down(netif);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f001 fed0 	bl	80055ac <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800380c:	e055      	b.n	80038ba <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d14e      	bne.n	80038ba <ethernet_link_check_state+0x106>
 800381c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800381e:	2b01      	cmp	r3, #1
 8003820:	dd4b      	ble.n	80038ba <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003824:	3b02      	subs	r3, #2
 8003826:	2b03      	cmp	r3, #3
 8003828:	d82a      	bhi.n	8003880 <ethernet_link_check_state+0xcc>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <ethernet_link_check_state+0x7c>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003841 	.word	0x08003841
 8003834:	08003853 	.word	0x08003853
 8003838:	08003863 	.word	0x08003863
 800383c:	08003873 	.word	0x08003873
      duplex = ETH_FULLDUPLEX_MODE;
 8003840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003844:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003846:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800384a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800384c:	2301      	movs	r3, #1
 800384e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003850:	e017      	b.n	8003882 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003852:	2300      	movs	r3, #0
 8003854:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003856:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800385a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800385c:	2301      	movs	r3, #1
 800385e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003860:	e00f      	b.n	8003882 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003866:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003868:	2300      	movs	r3, #0
 800386a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800386c:	2301      	movs	r3, #1
 800386e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003870:	e007      	b.n	8003882 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003872:	2300      	movs	r3, #0
 8003874:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003876:	2300      	movs	r3, #0
 8003878:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800387e:	e000      	b.n	8003882 <ethernet_link_check_state+0xce>
      break;
 8003880:	bf00      	nop
    if(linkchanged)
 8003882:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d018      	beq.n	80038ba <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003888:	f107 030c 	add.w	r3, r7, #12
 800388c:	4619      	mov	r1, r3
 800388e:	480e      	ldr	r0, [pc, #56]	; (80038c8 <ethernet_link_check_state+0x114>)
 8003890:	f7fd ff5c 	bl	800174c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800389a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	4619      	mov	r1, r3
 80038a2:	4809      	ldr	r0, [pc, #36]	; (80038c8 <ethernet_link_check_state+0x114>)
 80038a4:	f7fe f83c 	bl	8001920 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80038a8:	4807      	ldr	r0, [pc, #28]	; (80038c8 <ethernet_link_check_state+0x114>)
 80038aa:	f7fd fc37 	bl	800111c <HAL_ETH_Start>
      netif_set_up(netif);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f001 fdaa 	bl	8005408 <netif_set_up>
      netif_set_link_up(netif);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f001 fe45 	bl	8005544 <netif_set_link_up>
}
 80038ba:	bf00      	nop
 80038bc:	3780      	adds	r7, #128	; 0x80
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20004cb8 	.word	0x20004cb8
 80038c8:	20004bd0 	.word	0x20004bd0

080038cc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80038d4:	4812      	ldr	r0, [pc, #72]	; (8003920 <HAL_ETH_RxAllocateCallback+0x54>)
 80038d6:	f001 fb11 	bl	8004efc <memp_malloc_pool>
 80038da:	60f8      	str	r0, [r7, #12]
  if (p)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d014      	beq.n	800390c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f103 0220 	add.w	r2, r3, #32
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <HAL_ETH_RxAllocateCallback+0x58>)
 80038f0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80038fa:	9201      	str	r2, [sp, #4]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2241      	movs	r2, #65	; 0x41
 8003902:	2100      	movs	r1, #0
 8003904:	2000      	movs	r0, #0
 8003906:	f002 f847 	bl	8005998 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800390a:	e005      	b.n	8003918 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_ETH_RxAllocateCallback+0x5c>)
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	08012c10 	.word	0x08012c10
 8003924:	08003565 	.word	0x08003565
 8003928:	20004bcc 	.word	0x20004bcc

0800392c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3b20      	subs	r3, #32
 800394a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2200      	movs	r2, #0
 8003956:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e003      	b.n	8003976 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e009      	b.n	8003998 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	891a      	ldrh	r2, [r3, #8]
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	4413      	add	r3, r2
 800398c:	b29a      	uxth	r2, r3
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f2      	bne.n	8003984 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800399e:	887b      	ldrh	r3, [r7, #2]
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fc30 	bl	8003208 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80039a8:	bf00      	nop
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <fs_open+0x16>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <fs_open+0x1c>
    return ERR_ARG;
 80039c6:	f06f 030f 	mvn.w	r3, #15
 80039ca:	e028      	b.n	8003a1e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <fs_open+0x78>)
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e020      	b.n	8003a14 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4619      	mov	r1, r3
 80039d8:	6838      	ldr	r0, [r7, #0]
 80039da:	f7fc fc31 	bl	8000240 <strcmp>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d114      	bne.n	8003a0e <fs_open+0x5e>
      file->data = (const char *)f->data;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	7c1a      	ldrb	r2, [r3, #16]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e007      	b.n	8003a1e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1db      	bne.n	80039d2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003a1a:	f06f 0305 	mvn.w	r3, #5
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	080138a0 	.word	0x080138a0

08003a2c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003a66:	222c      	movs	r2, #44	; 0x2c
 8003a68:	2100      	movs	r1, #0
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f00b fa42 	bl	800eef4 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003a7e:	202c      	movs	r0, #44	; 0x2c
 8003a80:	f001 f8ce 	bl	8004c20 <mem_malloc>
 8003a84:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <http_state_alloc+0x1a>
    http_state_init(ret);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ffe6 	bl	8003a5e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003a92:	687b      	ldr	r3, [r7, #4]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ffbb 	bl	8003a2c <fs_close>
    hs->handle = NULL;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f002 f91f 	bl	8005d0c <pbuf_free>
    hs->req = NULL;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <http_state_free+0x1a>
    http_state_eof(hs);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ffd6 	bl	8003a9c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 ff2f 	bl	8004954 <mem_free>
  }
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <http_write+0x22>
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <http_write+0xc8>)
 8003b16:	f240 2219 	movw	r2, #537	; 0x219
 8003b1a:	492c      	ldr	r1, [pc, #176]	; (8003bcc <http_write+0xcc>)
 8003b1c:	482c      	ldr	r0, [pc, #176]	; (8003bd0 <http_write+0xd0>)
 8003b1e:	f00b f9f1 	bl	800ef04 <iprintf>
  len = *length;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003b28:	8afb      	ldrh	r3, [r7, #22]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <http_write+0x32>
    return ERR_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e045      	b.n	8003bbe <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003b38:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003b3a:	8aba      	ldrh	r2, [r7, #20]
 8003b3c:	8afb      	ldrh	r3, [r7, #22]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d201      	bcs.n	8003b46 <http_write+0x46>
    len = max_len;
 8003b42:	8abb      	ldrh	r3, [r7, #20]
 8003b44:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003b4e:	8afa      	ldrh	r2, [r7, #22]
 8003b50:	8abb      	ldrh	r3, [r7, #20]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d901      	bls.n	8003b5a <http_write+0x5a>
    len = max_len;
 8003b56:	8abb      	ldrh	r3, [r7, #20]
 8003b58:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	8afa      	ldrh	r2, [r7, #22]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f006 fe5b 	bl	800a81c <tcp_write>
 8003b66:	4603      	mov	r3, r0
 8003b68:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003b6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d10f      	bne.n	8003b94 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d902      	bls.n	8003b8e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	82fb      	strh	r3, [r7, #22]
 8003b8c:	e002      	b.n	8003b94 <http_write+0x94>
      } else {
        len /= 2;
 8003b8e:	8afb      	ldrh	r3, [r7, #22]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003b94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d102      	bne.n	8003ba4 <http_write+0xa4>
 8003b9e:	8afb      	ldrh	r3, [r7, #22]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d8da      	bhi.n	8003b5a <http_write+0x5a>

  if (err == ERR_OK) {
 8003ba4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8afa      	ldrh	r2, [r7, #22]
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	e002      	b.n	8003bba <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003bba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	08010094 	.word	0x08010094
 8003bcc:	080100cc 	.word	0x080100cc
 8003bd0:	080100dc 	.word	0x080100dc

08003bd4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003be2:	2100      	movs	r1, #0
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f003 fed7 	bl	8007998 <tcp_arg>
  altcp_recv(pcb, NULL);
 8003bea:	2100      	movs	r1, #0
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f003 fee5 	bl	80079bc <tcp_recv>
  altcp_err(pcb, NULL);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f003 ff25 	bl	8007a44 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f003 ff5a 	bl	8007ab8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8003c04:	2100      	movs	r1, #0
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f003 fefa 	bl	8007a00 <tcp_sent>
  if (hs != NULL) {
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8003c12:	68b8      	ldr	r0, [r7, #8]
 8003c14:	f7ff ff62 	bl	8003adc <http_state_free>
  }

  if (abort_conn) {
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f002 fdfc 	bl	800681c <tcp_abort>
    return ERR_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e00f      	b.n	8003c48 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f002 fd0d 	bl	8006648 <tcp_close>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	4904      	ldr	r1, [pc, #16]	; (8003c50 <http_close_or_abort_conn+0x7c>)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f003 ff3a 	bl	8007ab8 <tcp_poll>
  }
  return err;
 8003c44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	08004317 	.word	0x08004317

08003c54 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffb6 	bl	8003bd4 <http_close_or_abort_conn>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003c7c:	6839      	ldr	r1, [r7, #0]
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ffe8 	bl	8003c54 <http_close_conn>
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003c9e:	6839      	ldr	r1, [r7, #0]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ffe6 	bl	8003c72 <http_eof>
    return 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e016      	b.n	8003cd8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fec6 	bl	8003a40 <fs_bytes_left>
 8003cb4:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	dc05      	bgt.n	8003cc8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003cbc:	6839      	ldr	r1, [r7, #0]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff ffd7 	bl	8003c72 <http_eof>
    return 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e007      	b.n	8003cd8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <http_check_eof+0x54>)
 8003cca:	f240 429d 	movw	r2, #1181	; 0x49d
 8003cce:	4905      	ldr	r1, [pc, #20]	; (8003ce4 <http_check_eof+0x58>)
 8003cd0:	4805      	ldr	r0, [pc, #20]	; (8003ce8 <http_check_eof+0x5c>)
 8003cd2:	f00b f917 	bl	800ef04 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8003cd6:	2301      	movs	r3, #1
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	08010094 	.word	0x08010094
 8003ce4:	08010104 	.word	0x08010104
 8003ce8:	080100dc 	.word	0x080100dc

08003cec <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d803      	bhi.n	8003d0e <http_send_data_nonssi+0x22>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	e001      	b.n	8003d12 <http_send_data_nonssi+0x26>
 8003d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d12:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6999      	ldr	r1, [r3, #24]
 8003d18:	f107 020c 	add.w	r2, r7, #12
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff feee 	bl	8003b00 <http_write>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	89ba      	ldrh	r2, [r7, #12]
 8003d3a:	441a      	add	r2, r3
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	89ba      	ldrh	r2, [r7, #12]
 8003d46:	1a9a      	subs	r2, r3, r2
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <http_send+0x18>
    return 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e025      	b.n	8003dba <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8003d76:	6839      	ldr	r1, [r7, #0]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff87 	bl	8003c8c <http_check_eof>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <http_send+0x32>
      return 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e018      	b.n	8003dba <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ffae 	bl	8003cec <http_send_data_nonssi>
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10d      	bne.n	8003db8 <http_send+0x62>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fe4d 	bl	8003a40 <fs_bytes_left>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	dc05      	bgt.n	8003db8 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003dac:	6839      	ldr	r1, [r7, #0]
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ff5f 	bl	8003c72 <http_eof>
    return 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <http_get_404_file+0x80>)
 8003dd2:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7ff fde7 	bl	80039b0 <fs_open>
 8003de2:	4603      	mov	r3, r0
 8003de4:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8003de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d024      	beq.n	8003e38 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <http_get_404_file+0x84>)
 8003df2:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7ff fdd7 	bl	80039b0 <fs_open>
 8003e02:	4603      	mov	r3, r0
 8003e04:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d014      	beq.n	8003e38 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <http_get_404_file+0x88>)
 8003e12:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7ff fdc7 	bl	80039b0 <fs_open>
 8003e22:	4603      	mov	r3, r0
 8003e24:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8003e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
        return NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	0801013c 	.word	0x0801013c
 8003e48:	08010148 	.word	0x08010148
 8003e4c:	08010154 	.word	0x08010154

08003e50 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08e      	sub	sp, #56	; 0x38
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <http_parse_request+0x24>
 8003e66:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <http_parse_request+0x1ac>)
 8003e68:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8003e6c:	4964      	ldr	r1, [pc, #400]	; (8004000 <http_parse_request+0x1b0>)
 8003e6e:	4865      	ldr	r0, [pc, #404]	; (8004004 <http_parse_request+0x1b4>)
 8003e70:	f00b f848 	bl	800ef04 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <http_parse_request+0x38>
 8003e7a:	4b60      	ldr	r3, [pc, #384]	; (8003ffc <http_parse_request+0x1ac>)
 8003e7c:	f240 72af 	movw	r2, #1967	; 0x7af
 8003e80:	4961      	ldr	r1, [pc, #388]	; (8004008 <http_parse_request+0x1b8>)
 8003e82:	4860      	ldr	r0, [pc, #384]	; (8004004 <http_parse_request+0x1b4>)
 8003e84:	f00b f83e 	bl	800ef04 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <http_parse_request+0x48>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8003e98:	f06f 0307 	mvn.w	r3, #7
 8003e9c:	e0a9      	b.n	8003ff2 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eaa:	621a      	str	r2, [r3, #32]
 8003eac:	e005      	b.n	8003eba <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 ffeb 	bl	8005e90 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8003eba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ebc:	f001 ffc6 	bl	8005e4c <pbuf_ref>

  if (hs->req->next != NULL) {
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d012      	beq.n	8003ef0 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	891b      	ldrh	r3, [r3, #8]
 8003ed0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	bf28      	it	cs
 8003ed8:	4613      	movcs	r3, r2
 8003eda:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6a18      	ldr	r0, [r3, #32]
 8003ee0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	4949      	ldr	r1, [pc, #292]	; (800400c <http_parse_request+0x1bc>)
 8003ee6:	f002 f8fb 	bl	80060e0 <pbuf_copy_partial>
    data = httpd_req_buf;
 8003eea:	4b48      	ldr	r3, [pc, #288]	; (800400c <http_parse_request+0x1bc>)
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
 8003eee:	e005      	b.n	8003efc <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	895b      	ldrh	r3, [r3, #10]
 8003efa:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8003efc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d962      	bls.n	8003fc8 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8003f02:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f04:	461a      	mov	r2, r3
 8003f06:	4942      	ldr	r1, [pc, #264]	; (8004010 <http_parse_request+0x1c0>)
 8003f08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f0a:	f000 fb99 	bl	8004640 <lwip_strnstr>
 8003f0e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d058      	beq.n	8003fc8 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	493d      	ldr	r1, [pc, #244]	; (8004014 <http_parse_request+0x1c4>)
 8003f1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f20:	f00b f853 	bl	800efca <strncmp>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d116      	bne.n	8003f58 <http_parse_request+0x108>
        sp1 = data + 3;
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2c:	3303      	adds	r3, #3
 8003f2e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3301      	adds	r3, #1
 8003f44:	8b7a      	ldrh	r2, [r7, #26]
 8003f46:	4934      	ldr	r1, [pc, #208]	; (8004018 <http_parse_request+0x1c8>)
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fb79 	bl	8004640 <lwip_strnstr>
 8003f4e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d111      	bne.n	8003f7a <http_parse_request+0x12a>
 8003f56:	e006      	b.n	8003f66 <http_parse_request+0x116>
        data[4] = 0;
 8003f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8003f60:	f06f 030f 	mvn.w	r3, #15
 8003f64:	e045      	b.n	8003ff2 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	8b7a      	ldrh	r2, [r7, #26]
 8003f6c:	4928      	ldr	r1, [pc, #160]	; (8004010 <http_parse_request+0x1c0>)
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fb66 	bl	8004640 <lwip_strnstr>
 8003f74:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8003f76:	2301      	movs	r3, #1
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01e      	beq.n	8003fc8 <http_parse_request+0x178>
 8003f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d91a      	bls.n	8003fc8 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8003f92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f94:	461a      	mov	r2, r3
 8003f96:	4921      	ldr	r1, [pc, #132]	; (800401c <http_parse_request+0x1cc>)
 8003f98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f9a:	f000 fb51 	bl	8004640 <lwip_strnstr>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d011      	beq.n	8003fc8 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8003fb0:	8b3b      	ldrh	r3, [r7, #24]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8003fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbc:	6979      	ldr	r1, [r7, #20]
 8003fbe:	68b8      	ldr	r0, [r7, #8]
 8003fc0:	f000 f82e 	bl	8004020 <http_find_file>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	e014      	b.n	8003ff2 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 ff25 	bl	8005e1c <pbuf_clen>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	891b      	ldrh	r3, [r3, #8]
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe0:	d205      	bcs.n	8003fee <http_parse_request+0x19e>
 8003fe2:	8a7b      	ldrh	r3, [r7, #18]
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d802      	bhi.n	8003fee <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8003fe8:	f06f 0304 	mvn.w	r3, #4
 8003fec:	e001      	b.n	8003ff2 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8003fee:	f06f 030f 	mvn.w	r3, #15
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3738      	adds	r7, #56	; 0x38
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08010094 	.word	0x08010094
 8004000:	08010160 	.word	0x08010160
 8004004:	080100dc 	.word	0x080100dc
 8004008:	0801016c 	.word	0x0801016c
 800400c:	20004cd8 	.word	0x20004cd8
 8004010:	08010178 	.word	0x08010178
 8004014:	0801017c 	.word	0x0801017c
 8004018:	08010184 	.word	0x08010184
 800401c:	08010188 	.word	0x08010188

08004020 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b092      	sub	sp, #72	; 0x48
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800402c:	2300      	movs	r3, #0
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc f909 	bl	8000254 <strlen>
 8004042:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d06b      	beq.n	8004122 <http_find_file+0x102>
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	3b01      	subs	r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b2f      	cmp	r3, #47	; 0x2f
 8004056:	d164      	bne.n	8004122 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004058:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800405a:	4a53      	ldr	r2, [pc, #332]	; (80041a8 <http_find_file+0x188>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d102      	bne.n	8004066 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	2b01      	cmp	r3, #1
 8004064:	d15d      	bne.n	8004122 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	2b3f      	cmp	r3, #63	; 0x3f
 800406c:	bf28      	it	cs
 800406e:	233f      	movcs	r3, #63	; 0x3f
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	4619      	mov	r1, r3
 800407e:	484a      	ldr	r0, [pc, #296]	; (80041a8 <http_find_file+0x188>)
 8004080:	f00a ff2a 	bl	800eed8 <memcpy>
      http_uri_buf[copy_len] = 0;
 8004084:	4a48      	ldr	r2, [pc, #288]	; (80041a8 <http_find_file+0x188>)
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	4413      	add	r3, r2
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800408e:	2300      	movs	r3, #0
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004092:	e043      	b.n	800411c <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d028      	beq.n	80040ec <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80040a0:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01e      	beq.n	80040e6 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80040a8:	4a40      	ldr	r2, [pc, #256]	; (80041ac <http_find_file+0x18c>)
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc f8cf 	bl	8000254 <strlen>
 80040b6:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	4293      	cmp	r3, r2
 80040be:	bf28      	it	cs
 80040c0:	4613      	movcs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	4a38      	ldr	r2, [pc, #224]	; (80041a8 <http_find_file+0x188>)
 80040c8:	1898      	adds	r0, r3, r2
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <http_find_file+0x18c>)
 80040cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4619      	mov	r1, r3
 80040d6:	f00a feff 	bl	800eed8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <http_find_file+0x188>)
 80040e2:	2100      	movs	r1, #0
 80040e4:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80040e6:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <http_find_file+0x188>)
 80040e8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ea:	e004      	b.n	80040f6 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80040ec:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <http_find_file+0x18c>)
 80040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040f4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fc58 	bl	80039b0 <fs_open>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8004104:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <http_find_file+0xf6>
        uri = file_name;
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8004114:	e005      	b.n	8004122 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	3301      	adds	r3, #1
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411e:	2b04      	cmp	r3, #4
 8004120:	d9b8      	bls.n	8004094 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d124      	bne.n	8004172 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	213f      	movs	r1, #63	; 0x3f
 800412c:	4618      	mov	r0, r3
 800412e:	f00a ff3f 	bl	800efb0 <strchr>
 8004132:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800413a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
      params++;
 8004140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004142:	3301      	adds	r3, #1
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fc2f 	bl	80039b0 <fs_open>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d102      	bne.n	8004164 <http_find_file+0x144>
      file = &hs->file_handle;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
 8004162:	e006      	b.n	8004172 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8004164:	f107 0308 	add.w	r3, r7, #8
 8004168:	4619      	mov	r1, r3
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff fe2a 	bl	8003dc4 <http_get_404_file>
 8004170:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8004178:	f107 0308 	add.w	r3, r7, #8
 800417c:	4619      	mov	r1, r3
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff fe20 	bl	8003dc4 <http_get_404_file>
 8004184:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f809 	bl	80041b0 <http_init_file>
 800419e:	4603      	mov	r3, r0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3740      	adds	r7, #64	; 0x40
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200050d8 	.word	0x200050d8
 80041ac:	080138b4 	.word	0x080138b4

080041b0 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05c      	beq.n	800427e <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <http_init_file+0x2a>
 80041cc:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <http_init_file+0xf4>)
 80041ce:	f640 120b 	movw	r2, #2315	; 0x90b
 80041d2:	4935      	ldr	r1, [pc, #212]	; (80042a8 <http_init_file+0xf8>)
 80041d4:	4835      	ldr	r0, [pc, #212]	; (80042ac <http_init_file+0xfc>)
 80041d6:	f00a fe95 	bl	800ef04 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	da06      	bge.n	80041fe <http_init_file+0x4e>
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <http_init_file+0xf4>)
 80041f2:	f640 1234 	movw	r2, #2356	; 0x934
 80041f6:	492e      	ldr	r1, [pc, #184]	; (80042b0 <http_init_file+0x100>)
 80041f8:	482c      	ldr	r0, [pc, #176]	; (80042ac <http_init_file+0xfc>)
 80041fa:	f00a fe83 	bl	800ef04 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	7c1b      	ldrb	r3, [r3, #16]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <http_init_file+0x7c>
 800421e:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <http_init_file+0xf4>)
 8004220:	f640 1243 	movw	r2, #2371	; 0x943
 8004224:	4923      	ldr	r1, [pc, #140]	; (80042b4 <http_init_file+0x104>)
 8004226:	4821      	ldr	r0, [pc, #132]	; (80042ac <http_init_file+0xfc>)
 8004228:	f00a fe6c 	bl	800ef04 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d032      	beq.n	8004298 <http_init_file+0xe8>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	7c1b      	ldrb	r3, [r3, #16]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d02b      	beq.n	8004298 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6998      	ldr	r0, [r3, #24]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	461a      	mov	r2, r3
 800424a:	491b      	ldr	r1, [pc, #108]	; (80042b8 <http_init_file+0x108>)
 800424c:	f000 f9f8 	bl	8004640 <lwip_strnstr>
 8004250:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01f      	beq.n	8004298 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	441a      	add	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad2      	subs	r2, r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
 800427c:	e00c      	b.n	8004298 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	08010094 	.word	0x08010094
 80042a8:	08010190 	.word	0x08010190
 80042ac:	080100dc 	.word	0x080100dc
 80042b0:	080101a4 	.word	0x080101a4
 80042b4:	080101c4 	.word	0x080101c4
 80042b8:	08010188 	.word	0x08010188

080042bc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <http_err+0x1c>
    http_state_free(hs);
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fc02 	bl	8003adc <http_state_free>
  }
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <http_sent+0x1c>
    return ERR_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e008      	b.n	800430e <http_sent+0x2e>
  }

  hs->retries = 0;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f7ff fd25 	bl	8003d56 <http_send>

  return ERR_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800432a:	2100      	movs	r1, #0
 800432c:	6838      	ldr	r0, [r7, #0]
 800432e:	f7ff fc91 	bl	8003c54 <http_close_conn>
 8004332:	4603      	mov	r3, r0
 8004334:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e021      	b.n	800437e <http_poll+0x68>
  } else {
    hs->retries++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004340:	3301      	adds	r3, #1
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004350:	2b04      	cmp	r3, #4
 8004352:	d105      	bne.n	8004360 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	6838      	ldr	r0, [r7, #0]
 8004358:	f7ff fc7c 	bl	8003c54 <http_close_conn>
      return ERR_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e00e      	b.n	800437e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8004368:	68f9      	ldr	r1, [r7, #12]
 800436a:	6838      	ldr	r0, [r7, #0]
 800436c:	f7ff fcf3 	bl	8003d56 <http_send>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	f007 f83a 	bl	800b3f0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800439a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <http_recv+0x26>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <http_recv+0x26>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d111      	bne.n	80043d2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	891b      	ldrh	r3, [r3, #8]
 80043b8:	4619      	mov	r1, r3
 80043ba:	68b8      	ldr	r0, [r7, #8]
 80043bc:	f002 fc08 	bl	8006bd0 <tcp_recved>
      pbuf_free(p);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f001 fca3 	bl	8005d0c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	68b8      	ldr	r0, [r7, #8]
 80043ca:	f7ff fc43 	bl	8003c54 <http_close_conn>
    return ERR_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e055      	b.n	800447e <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	891b      	ldrh	r3, [r3, #8]
 80043d6:	4619      	mov	r1, r3
 80043d8:	68b8      	ldr	r0, [r7, #8]
 80043da:	f002 fbf9 	bl	8006bd0 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d147      	bne.n	8004476 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fd30 	bl	8003e50 <http_parse_request>
 80043f0:	4603      	mov	r3, r0
 80043f2:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80043f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <http_recv+0xa0>
 80043fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004400:	f113 0f05 	cmn.w	r3, #5
 8004404:	d010      	beq.n	8004428 <http_recv+0xa0>
 8004406:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800440a:	f113 0f10 	cmn.w	r3, #16
 800440e:	d00b      	beq.n	8004428 <http_recv+0xa0>
 8004410:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004414:	f113 0f08 	cmn.w	r3, #8
 8004418:	d006      	beq.n	8004428 <http_recv+0xa0>
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <http_recv+0x100>)
 800441c:	f640 2204 	movw	r2, #2564	; 0xa04
 8004420:	491a      	ldr	r1, [pc, #104]	; (800448c <http_recv+0x104>)
 8004422:	481b      	ldr	r0, [pc, #108]	; (8004490 <http_recv+0x108>)
 8004424:	f00a fd6e 	bl	800ef04 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8004428:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800442c:	f113 0f05 	cmn.w	r3, #5
 8004430:	d00b      	beq.n	800444a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <http_recv+0xc2>
          pbuf_free(hs->req);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4618      	mov	r0, r3
 8004440:	f001 fc64 	bl	8005d0c <pbuf_free>
          hs->req = NULL;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2200      	movs	r2, #0
 8004448:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f001 fc5e 	bl	8005d0c <pbuf_free>
      if (parsed == ERR_OK) {
 8004450:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8004458:	6979      	ldr	r1, [r7, #20]
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	f7ff fc7b 	bl	8003d56 <http_send>
 8004460:	e00c      	b.n	800447c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004462:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004466:	f113 0f10 	cmn.w	r3, #16
 800446a:	d107      	bne.n	800447c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800446c:	6979      	ldr	r1, [r7, #20]
 800446e:	68b8      	ldr	r0, [r7, #8]
 8004470:	f7ff fbf0 	bl	8003c54 <http_close_conn>
 8004474:	e002      	b.n	800447c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f001 fc48 	bl	8005d0c <pbuf_free>
    }
  }
  return ERR_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	08010094 	.word	0x08010094
 800448c:	080101f0 	.word	0x080101f0
 8004490:	080100dc 	.word	0x080100dc

08004494 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <http_accept+0x1c>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <http_accept+0x22>
    return ERR_VAL;
 80044b0:	f06f 0305 	mvn.w	r3, #5
 80044b4:	e025      	b.n	8004502 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80044b6:	2101      	movs	r1, #1
 80044b8:	68b8      	ldr	r0, [r7, #8]
 80044ba:	f003 f86d 	bl	8007598 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80044be:	f7ff fadb 	bl	8003a78 <http_state_alloc>
 80044c2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295
 80044ce:	e018      	b.n	8004502 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f003 fa5d 	bl	8007998 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80044de:	490b      	ldr	r1, [pc, #44]	; (800450c <http_accept+0x78>)
 80044e0:	68b8      	ldr	r0, [r7, #8]
 80044e2:	f003 fa6b 	bl	80079bc <tcp_recv>
  altcp_err(pcb, http_err);
 80044e6:	490a      	ldr	r1, [pc, #40]	; (8004510 <http_accept+0x7c>)
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f003 faab 	bl	8007a44 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80044ee:	2204      	movs	r2, #4
 80044f0:	4908      	ldr	r1, [pc, #32]	; (8004514 <http_accept+0x80>)
 80044f2:	68b8      	ldr	r0, [r7, #8]
 80044f4:	f003 fae0 	bl	8007ab8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80044f8:	4907      	ldr	r1, [pc, #28]	; (8004518 <http_accept+0x84>)
 80044fa:	68b8      	ldr	r0, [r7, #8]
 80044fc:	f003 fa80 	bl	8007a00 <tcp_sent>

  return ERR_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	08004389 	.word	0x08004389
 8004510:	080042bd 	.word	0x080042bd
 8004514:	08004317 	.word	0x08004317
 8004518:	080042e1 	.word	0x080042e1

0800451c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d029      	beq.n	8004582 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800452e:	2101      	movs	r1, #1
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f003 f831 	bl	8007598 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	461a      	mov	r2, r3
 800453a:	4914      	ldr	r1, [pc, #80]	; (800458c <httpd_init_pcb+0x70>)
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f002 f979 	bl	8006834 <tcp_bind>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <httpd_init_pcb+0x40>
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <httpd_init_pcb+0x74>)
 8004550:	f640 2257 	movw	r2, #2647	; 0xa57
 8004554:	490f      	ldr	r1, [pc, #60]	; (8004594 <httpd_init_pcb+0x78>)
 8004556:	4810      	ldr	r0, [pc, #64]	; (8004598 <httpd_init_pcb+0x7c>)
 8004558:	f00a fcd4 	bl	800ef04 <iprintf>
    pcb = altcp_listen(pcb);
 800455c:	21ff      	movs	r1, #255	; 0xff
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f002 fa20 	bl	80069a4 <tcp_listen_with_backlog>
 8004564:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <httpd_init_pcb+0x5e>
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <httpd_init_pcb+0x74>)
 800456e:	f640 2259 	movw	r2, #2649	; 0xa59
 8004572:	490a      	ldr	r1, [pc, #40]	; (800459c <httpd_init_pcb+0x80>)
 8004574:	4808      	ldr	r0, [pc, #32]	; (8004598 <httpd_init_pcb+0x7c>)
 8004576:	f00a fcc5 	bl	800ef04 <iprintf>
    altcp_accept(pcb, http_accept);
 800457a:	4909      	ldr	r1, [pc, #36]	; (80045a0 <httpd_init_pcb+0x84>)
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f003 fa83 	bl	8007a88 <tcp_accept>
  }
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	080139ac 	.word	0x080139ac
 8004590:	08010094 	.word	0x08010094
 8004594:	0801021c 	.word	0x0801021c
 8004598:	080100dc 	.word	0x080100dc
 800459c:	08010238 	.word	0x08010238
 80045a0:	08004495 	.word	0x08004495

080045a4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80045aa:	202e      	movs	r0, #46	; 0x2e
 80045ac:	f003 f9e6 	bl	800797c <tcp_new_ip_type>
 80045b0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <httpd_init+0x22>
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <httpd_init+0x34>)
 80045ba:	f640 2272 	movw	r2, #2674	; 0xa72
 80045be:	4907      	ldr	r1, [pc, #28]	; (80045dc <httpd_init+0x38>)
 80045c0:	4807      	ldr	r0, [pc, #28]	; (80045e0 <httpd_init+0x3c>)
 80045c2:	f00a fc9f 	bl	800ef04 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80045c6:	2150      	movs	r1, #80	; 0x50
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ffa7 	bl	800451c <httpd_init_pcb>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	08010094 	.word	0x08010094
 80045dc:	08010258 	.word	0x08010258
 80045e0:	080100dc 	.word	0x080100dc

080045e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	b21a      	sxth	r2, r3
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	b21b      	sxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b21b      	sxth	r3, r3
 8004600:	b29b      	uxth	r3, r3
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	061a      	lsls	r2, r3, #24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0e1b      	lsrs	r3, r3, #24
 8004632:	4313      	orrs	r3, r2
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800464c:	68b8      	ldr	r0, [r7, #8]
 800464e:	f7fb fe01 	bl	8000254 <strlen>
 8004652:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	e022      	b.n	80046a4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e012      	b.n	800468a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d109      	bne.n	8004684 <lwip_strnstr+0x44>
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f00a fca8 	bl	800efca <strncmp>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	e00f      	b.n	80046a4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <lwip_strnstr+0x62>
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	441a      	add	r2, r3
 8004698:	68f9      	ldr	r1, [r7, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	440b      	add	r3, r1
 800469e:	429a      	cmp	r2, r3
 80046a0:	d9e0      	bls.n	8004664 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80046b6:	f000 f8d5 	bl	8004864 <mem_init>
  memp_init();
 80046ba:	f000 fbdb 	bl	8004e74 <memp_init>
  pbuf_init();
  netif_init();
 80046be:	f000 fcd9 	bl	8005074 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80046c2:	f007 ff55 	bl	800c570 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80046c6:	f001 fdaf 	bl	8006228 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80046ca:	f007 fec7 	bl	800c45c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <ptr_to_mem+0x20>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	4413      	add	r3, r2
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20005784 	.word	0x20005784

080046fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <mem_to_ptr+0x20>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	b29b      	uxth	r3, r3
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20005784 	.word	0x20005784

08004720 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004728:	4b45      	ldr	r3, [pc, #276]	; (8004840 <plug_holes+0x120>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	d206      	bcs.n	8004740 <plug_holes+0x20>
 8004732:	4b44      	ldr	r3, [pc, #272]	; (8004844 <plug_holes+0x124>)
 8004734:	f240 12df 	movw	r2, #479	; 0x1df
 8004738:	4943      	ldr	r1, [pc, #268]	; (8004848 <plug_holes+0x128>)
 800473a:	4844      	ldr	r0, [pc, #272]	; (800484c <plug_holes+0x12c>)
 800473c:	f00a fbe2 	bl	800ef04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <plug_holes+0x130>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d306      	bcc.n	8004758 <plug_holes+0x38>
 800474a:	4b3e      	ldr	r3, [pc, #248]	; (8004844 <plug_holes+0x124>)
 800474c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004750:	4940      	ldr	r1, [pc, #256]	; (8004854 <plug_holes+0x134>)
 8004752:	483e      	ldr	r0, [pc, #248]	; (800484c <plug_holes+0x12c>)
 8004754:	f00a fbd6 	bl	800ef04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	791b      	ldrb	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <plug_holes+0x4e>
 8004760:	4b38      	ldr	r3, [pc, #224]	; (8004844 <plug_holes+0x124>)
 8004762:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004766:	493c      	ldr	r1, [pc, #240]	; (8004858 <plug_holes+0x138>)
 8004768:	4838      	ldr	r0, [pc, #224]	; (800484c <plug_holes+0x12c>)
 800476a:	f00a fbcb 	bl	800ef04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004776:	d906      	bls.n	8004786 <plug_holes+0x66>
 8004778:	4b32      	ldr	r3, [pc, #200]	; (8004844 <plug_holes+0x124>)
 800477a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800477e:	4937      	ldr	r1, [pc, #220]	; (800485c <plug_holes+0x13c>)
 8004780:	4832      	ldr	r0, [pc, #200]	; (800484c <plug_holes+0x12c>)
 8004782:	f00a fbbf 	bl	800ef04 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ffa4 	bl	80046d8 <ptr_to_mem>
 8004790:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	429a      	cmp	r2, r3
 8004798:	d024      	beq.n	80047e4 <plug_holes+0xc4>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	791b      	ldrb	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d120      	bne.n	80047e4 <plug_holes+0xc4>
 80047a2:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <plug_holes+0x130>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d01b      	beq.n	80047e4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <plug_holes+0x140>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d102      	bne.n	80047bc <plug_holes+0x9c>
      lfree = mem;
 80047b6:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <plug_holes+0x140>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	881a      	ldrh	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047cc:	d00a      	beq.n	80047e4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff ff80 	bl	80046d8 <ptr_to_mem>
 80047d8:	4604      	mov	r4, r0
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff ff8e 	bl	80046fc <mem_to_ptr>
 80047e0:	4603      	mov	r3, r0
 80047e2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	885b      	ldrh	r3, [r3, #2]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff75 	bl	80046d8 <ptr_to_mem>
 80047ee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d01f      	beq.n	8004838 <plug_holes+0x118>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	791b      	ldrb	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d11b      	bne.n	8004838 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <plug_holes+0x140>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d102      	bne.n	8004810 <plug_holes+0xf0>
      lfree = pmem;
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <plug_holes+0x140>)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	881a      	ldrh	r2, [r3, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004820:	d00a      	beq.n	8004838 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ff56 	bl	80046d8 <ptr_to_mem>
 800482c:	4604      	mov	r4, r0
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	f7ff ff64 	bl	80046fc <mem_to_ptr>
 8004834:	4603      	mov	r3, r0
 8004836:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	bd90      	pop	{r4, r7, pc}
 8004840:	20005784 	.word	0x20005784
 8004844:	08010274 	.word	0x08010274
 8004848:	080102a4 	.word	0x080102a4
 800484c:	080102bc 	.word	0x080102bc
 8004850:	20005788 	.word	0x20005788
 8004854:	080102e4 	.word	0x080102e4
 8004858:	08010300 	.word	0x08010300
 800485c:	0801031c 	.word	0x0801031c
 8004860:	2000578c 	.word	0x2000578c

08004864 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800486a:	4b18      	ldr	r3, [pc, #96]	; (80048cc <mem_init+0x68>)
 800486c:	3303      	adds	r3, #3
 800486e:	f023 0303 	bic.w	r3, r3, #3
 8004872:	461a      	mov	r2, r3
 8004874:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <mem_init+0x6c>)
 8004876:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004878:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <mem_init+0x6c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004884:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004892:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004896:	f7ff ff1f 	bl	80046d8 <ptr_to_mem>
 800489a:	4603      	mov	r3, r0
 800489c:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <mem_init+0x70>)
 800489e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <mem_init+0x70>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2201      	movs	r2, #1
 80048a6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <mem_init+0x70>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80048b0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <mem_init+0x70>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80048ba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <mem_init+0x6c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a05      	ldr	r2, [pc, #20]	; (80048d8 <mem_init+0x74>)
 80048c2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20005130 	.word	0x20005130
 80048d0:	20005784 	.word	0x20005784
 80048d4:	20005788 	.word	0x20005788
 80048d8:	2000578c 	.word	0x2000578c

080048dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff09 	bl	80046fc <mem_to_ptr>
 80048ea:	4603      	mov	r3, r0
 80048ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fef0 	bl	80046d8 <ptr_to_mem>
 80048f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	885b      	ldrh	r3, [r3, #2]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff feea 	bl	80046d8 <ptr_to_mem>
 8004904:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800490e:	d818      	bhi.n	8004942 <mem_link_valid+0x66>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	885b      	ldrh	r3, [r3, #2]
 8004914:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004918:	d813      	bhi.n	8004942 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800491e:	8afa      	ldrh	r2, [r7, #22]
 8004920:	429a      	cmp	r2, r3
 8004922:	d004      	beq.n	800492e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	8afa      	ldrh	r2, [r7, #22]
 800492a:	429a      	cmp	r2, r3
 800492c:	d109      	bne.n	8004942 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <mem_link_valid+0x74>)
 8004930:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	429a      	cmp	r2, r3
 8004936:	d006      	beq.n	8004946 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	885b      	ldrh	r3, [r3, #2]
 800493c:	8afa      	ldrh	r2, [r7, #22]
 800493e:	429a      	cmp	r2, r3
 8004940:	d001      	beq.n	8004946 <mem_link_valid+0x6a>
    return 0;
 8004942:	2300      	movs	r3, #0
 8004944:	e000      	b.n	8004948 <mem_link_valid+0x6c>
  }
  return 1;
 8004946:	2301      	movs	r3, #1
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20005788 	.word	0x20005788

08004954 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04c      	beq.n	80049fc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <mem_free+0xb0>)
 800496e:	f240 2273 	movw	r2, #627	; 0x273
 8004972:	4925      	ldr	r1, [pc, #148]	; (8004a08 <mem_free+0xb4>)
 8004974:	4825      	ldr	r0, [pc, #148]	; (8004a0c <mem_free+0xb8>)
 8004976:	f00a fac5 	bl	800ef04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800497a:	e040      	b.n	80049fe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3b08      	subs	r3, #8
 8004980:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004982:	4b23      	ldr	r3, [pc, #140]	; (8004a10 <mem_free+0xbc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d306      	bcc.n	800499a <mem_free+0x46>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f103 020c 	add.w	r2, r3, #12
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <mem_free+0xc0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d907      	bls.n	80049aa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800499a:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <mem_free+0xb0>)
 800499c:	f240 227f 	movw	r2, #639	; 0x27f
 80049a0:	491d      	ldr	r1, [pc, #116]	; (8004a18 <mem_free+0xc4>)
 80049a2:	481a      	ldr	r0, [pc, #104]	; (8004a0c <mem_free+0xb8>)
 80049a4:	f00a faae 	bl	800ef04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80049a8:	e029      	b.n	80049fe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	791b      	ldrb	r3, [r3, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80049b2:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <mem_free+0xb0>)
 80049b4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80049b8:	4918      	ldr	r1, [pc, #96]	; (8004a1c <mem_free+0xc8>)
 80049ba:	4814      	ldr	r0, [pc, #80]	; (8004a0c <mem_free+0xb8>)
 80049bc:	f00a faa2 	bl	800ef04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80049c0:	e01d      	b.n	80049fe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7ff ff8a 	bl	80048dc <mem_link_valid>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d107      	bne.n	80049de <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <mem_free+0xb0>)
 80049d0:	f240 2295 	movw	r2, #661	; 0x295
 80049d4:	4912      	ldr	r1, [pc, #72]	; (8004a20 <mem_free+0xcc>)
 80049d6:	480d      	ldr	r0, [pc, #52]	; (8004a0c <mem_free+0xb8>)
 80049d8:	f00a fa94 	bl	800ef04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80049dc:	e00f      	b.n	80049fe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <mem_free+0xd0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d202      	bcs.n	80049f4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80049ee:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <mem_free+0xd0>)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff fe93 	bl	8004720 <plug_holes>
 80049fa:	e000      	b.n	80049fe <mem_free+0xaa>
    return;
 80049fc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	08010274 	.word	0x08010274
 8004a08:	08010348 	.word	0x08010348
 8004a0c:	080102bc 	.word	0x080102bc
 8004a10:	20005784 	.word	0x20005784
 8004a14:	20005788 	.word	0x20005788
 8004a18:	0801036c 	.word	0x0801036c
 8004a1c:	08010388 	.word	0x08010388
 8004a20:	080103b0 	.word	0x080103b0
 8004a24:	2000578c 	.word	0x2000578c

08004a28 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004a34:	887b      	ldrh	r3, [r7, #2]
 8004a36:	3303      	adds	r3, #3
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f023 0303 	bic.w	r3, r3, #3
 8004a3e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004a40:	8bfb      	ldrh	r3, [r7, #30]
 8004a42:	2b0b      	cmp	r3, #11
 8004a44:	d801      	bhi.n	8004a4a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004a46:	230c      	movs	r3, #12
 8004a48:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004a4a:	8bfb      	ldrh	r3, [r7, #30]
 8004a4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a50:	d803      	bhi.n	8004a5a <mem_trim+0x32>
 8004a52:	8bfa      	ldrh	r2, [r7, #30]
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d201      	bcs.n	8004a5e <mem_trim+0x36>
    return NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e0cc      	b.n	8004bf8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004a5e:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <mem_trim+0x1d8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d304      	bcc.n	8004a72 <mem_trim+0x4a>
 8004a68:	4b66      	ldr	r3, [pc, #408]	; (8004c04 <mem_trim+0x1dc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d306      	bcc.n	8004a80 <mem_trim+0x58>
 8004a72:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <mem_trim+0x1e0>)
 8004a74:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004a78:	4964      	ldr	r1, [pc, #400]	; (8004c0c <mem_trim+0x1e4>)
 8004a7a:	4865      	ldr	r0, [pc, #404]	; (8004c10 <mem_trim+0x1e8>)
 8004a7c:	f00a fa42 	bl	800ef04 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004a80:	4b5f      	ldr	r3, [pc, #380]	; (8004c00 <mem_trim+0x1d8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d304      	bcc.n	8004a94 <mem_trim+0x6c>
 8004a8a:	4b5e      	ldr	r3, [pc, #376]	; (8004c04 <mem_trim+0x1dc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d301      	bcc.n	8004a98 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	e0af      	b.n	8004bf8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3b08      	subs	r3, #8
 8004a9c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004a9e:	69b8      	ldr	r0, [r7, #24]
 8004aa0:	f7ff fe2c 	bl	80046fc <mem_to_ptr>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	881a      	ldrh	r2, [r3, #0]
 8004aac:	8afb      	ldrh	r3, [r7, #22]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b08      	subs	r3, #8
 8004ab4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004ab6:	8bfa      	ldrh	r2, [r7, #30]
 8004ab8:	8abb      	ldrh	r3, [r7, #20]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d906      	bls.n	8004acc <mem_trim+0xa4>
 8004abe:	4b52      	ldr	r3, [pc, #328]	; (8004c08 <mem_trim+0x1e0>)
 8004ac0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004ac4:	4953      	ldr	r1, [pc, #332]	; (8004c14 <mem_trim+0x1ec>)
 8004ac6:	4852      	ldr	r0, [pc, #328]	; (8004c10 <mem_trim+0x1e8>)
 8004ac8:	f00a fa1c 	bl	800ef04 <iprintf>
  if (newsize > size) {
 8004acc:	8bfa      	ldrh	r2, [r7, #30]
 8004ace:	8abb      	ldrh	r3, [r7, #20]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d901      	bls.n	8004ad8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e08f      	b.n	8004bf8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004ad8:	8bfa      	ldrh	r2, [r7, #30]
 8004ada:	8abb      	ldrh	r3, [r7, #20]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d101      	bne.n	8004ae4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	e089      	b.n	8004bf8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fdf5 	bl	80046d8 <ptr_to_mem>
 8004aee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	791b      	ldrb	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d13f      	bne.n	8004b78 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b00:	d106      	bne.n	8004b10 <mem_trim+0xe8>
 8004b02:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <mem_trim+0x1e0>)
 8004b04:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004b08:	4943      	ldr	r1, [pc, #268]	; (8004c18 <mem_trim+0x1f0>)
 8004b0a:	4841      	ldr	r0, [pc, #260]	; (8004c10 <mem_trim+0x1e8>)
 8004b0c:	f00a f9fa 	bl	800ef04 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004b16:	8afa      	ldrh	r2, [r7, #22]
 8004b18:	8bfb      	ldrh	r3, [r7, #30]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3308      	adds	r3, #8
 8004b20:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004b22:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <mem_trim+0x1f4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d106      	bne.n	8004b3a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004b2c:	89fb      	ldrh	r3, [r7, #14]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fdd2 	bl	80046d8 <ptr_to_mem>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4a39      	ldr	r2, [pc, #228]	; (8004c1c <mem_trim+0x1f4>)
 8004b38:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004b3a:	89fb      	ldrh	r3, [r7, #14]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fdcb 	bl	80046d8 <ptr_to_mem>
 8004b42:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2200      	movs	r2, #0
 8004b48:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	89ba      	ldrh	r2, [r7, #12]
 8004b4e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	8afa      	ldrh	r2, [r7, #22]
 8004b54:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	89fa      	ldrh	r2, [r7, #14]
 8004b5a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b64:	d047      	beq.n	8004bf6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fdb4 	bl	80046d8 <ptr_to_mem>
 8004b70:	4602      	mov	r2, r0
 8004b72:	89fb      	ldrh	r3, [r7, #14]
 8004b74:	8053      	strh	r3, [r2, #2]
 8004b76:	e03e      	b.n	8004bf6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004b78:	8bfb      	ldrh	r3, [r7, #30]
 8004b7a:	f103 0214 	add.w	r2, r3, #20
 8004b7e:	8abb      	ldrh	r3, [r7, #20]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d838      	bhi.n	8004bf6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004b84:	8afa      	ldrh	r2, [r7, #22]
 8004b86:	8bfb      	ldrh	r3, [r7, #30]
 8004b88:	4413      	add	r3, r2
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b98:	d106      	bne.n	8004ba8 <mem_trim+0x180>
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <mem_trim+0x1e0>)
 8004b9c:	f240 3216 	movw	r2, #790	; 0x316
 8004ba0:	491d      	ldr	r1, [pc, #116]	; (8004c18 <mem_trim+0x1f0>)
 8004ba2:	481b      	ldr	r0, [pc, #108]	; (8004c10 <mem_trim+0x1e8>)
 8004ba4:	f00a f9ae 	bl	800ef04 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fd94 	bl	80046d8 <ptr_to_mem>
 8004bb0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <mem_trim+0x1f4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d202      	bcs.n	8004bc2 <mem_trim+0x19a>
      lfree = mem2;
 8004bbc:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <mem_trim+0x1f4>)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	8afa      	ldrh	r2, [r7, #22]
 8004bd4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	89fa      	ldrh	r2, [r7, #14]
 8004bda:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004be4:	d007      	beq.n	8004bf6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fd74 	bl	80046d8 <ptr_to_mem>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	89fb      	ldrh	r3, [r7, #14]
 8004bf4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004bf6:	687b      	ldr	r3, [r7, #4]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20005784 	.word	0x20005784
 8004c04:	20005788 	.word	0x20005788
 8004c08:	08010274 	.word	0x08010274
 8004c0c:	080103e4 	.word	0x080103e4
 8004c10:	080102bc 	.word	0x080102bc
 8004c14:	080103fc 	.word	0x080103fc
 8004c18:	0801041c 	.word	0x0801041c
 8004c1c:	2000578c 	.word	0x2000578c

08004c20 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <mem_malloc+0x14>
    return NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e0d9      	b.n	8004de8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	3303      	adds	r3, #3
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004c40:	8bbb      	ldrh	r3, [r7, #28]
 8004c42:	2b0b      	cmp	r3, #11
 8004c44:	d801      	bhi.n	8004c4a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004c46:	230c      	movs	r3, #12
 8004c48:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004c4a:	8bbb      	ldrh	r3, [r7, #28]
 8004c4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c50:	d803      	bhi.n	8004c5a <mem_malloc+0x3a>
 8004c52:	8bba      	ldrh	r2, [r7, #28]
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d201      	bcs.n	8004c5e <mem_malloc+0x3e>
    return NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e0c4      	b.n	8004de8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004c5e:	4b64      	ldr	r3, [pc, #400]	; (8004df0 <mem_malloc+0x1d0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fd4a 	bl	80046fc <mem_to_ptr>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	83fb      	strh	r3, [r7, #30]
 8004c6c:	e0b4      	b.n	8004dd8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004c6e:	8bfb      	ldrh	r3, [r7, #30]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fd31 	bl	80046d8 <ptr_to_mem>
 8004c76:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	791b      	ldrb	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 80a4 	bne.w	8004dca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	8bfb      	ldrh	r3, [r7, #30]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f1a3 0208 	sub.w	r2, r3, #8
 8004c90:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004c92:	429a      	cmp	r2, r3
 8004c94:	f0c0 8099 	bcc.w	8004dca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	8bfb      	ldrh	r3, [r7, #30]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f1a3 0208 	sub.w	r2, r3, #8
 8004ca6:	8bbb      	ldrh	r3, [r7, #28]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d333      	bcc.n	8004d16 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004cae:	8bfa      	ldrh	r2, [r7, #30]
 8004cb0:	8bbb      	ldrh	r3, [r7, #28]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004cba:	8a7b      	ldrh	r3, [r7, #18]
 8004cbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cc0:	d106      	bne.n	8004cd0 <mem_malloc+0xb0>
 8004cc2:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <mem_malloc+0x1d4>)
 8004cc4:	f240 3287 	movw	r2, #903	; 0x387
 8004cc8:	494b      	ldr	r1, [pc, #300]	; (8004df8 <mem_malloc+0x1d8>)
 8004cca:	484c      	ldr	r0, [pc, #304]	; (8004dfc <mem_malloc+0x1dc>)
 8004ccc:	f00a f91a 	bl	800ef04 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004cd0:	8a7b      	ldrh	r3, [r7, #18]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fd00 	bl	80046d8 <ptr_to_mem>
 8004cd8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8bfa      	ldrh	r2, [r7, #30]
 8004cec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	8a7a      	ldrh	r2, [r7, #18]
 8004cf2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d02:	d00b      	beq.n	8004d1c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fce5 	bl	80046d8 <ptr_to_mem>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	8a7b      	ldrh	r3, [r7, #18]
 8004d12:	8053      	strh	r3, [r2, #2]
 8004d14:	e002      	b.n	8004d1c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004d1c:	4b34      	ldr	r3, [pc, #208]	; (8004df0 <mem_malloc+0x1d0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d127      	bne.n	8004d76 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004d26:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <mem_malloc+0x1d0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004d2c:	e005      	b.n	8004d3a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fcd0 	bl	80046d8 <ptr_to_mem>
 8004d38:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	791b      	ldrb	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <mem_malloc+0x12c>
 8004d42:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <mem_malloc+0x1e0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1f0      	bne.n	8004d2e <mem_malloc+0x10e>
          }
          lfree = cur;
 8004d4c:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <mem_malloc+0x1d0>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004d52:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <mem_malloc+0x1d0>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <mem_malloc+0x1e0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d00b      	beq.n	8004d76 <mem_malloc+0x156>
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <mem_malloc+0x1d0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	791b      	ldrb	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d006      	beq.n	8004d76 <mem_malloc+0x156>
 8004d68:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <mem_malloc+0x1d4>)
 8004d6a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004d6e:	4925      	ldr	r1, [pc, #148]	; (8004e04 <mem_malloc+0x1e4>)
 8004d70:	4822      	ldr	r0, [pc, #136]	; (8004dfc <mem_malloc+0x1dc>)
 8004d72:	f00a f8c7 	bl	800ef04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004d76:	8bba      	ldrh	r2, [r7, #28]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <mem_malloc+0x1e0>)
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d906      	bls.n	8004d94 <mem_malloc+0x174>
 8004d86:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <mem_malloc+0x1d4>)
 8004d88:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004d8c:	491e      	ldr	r1, [pc, #120]	; (8004e08 <mem_malloc+0x1e8>)
 8004d8e:	481b      	ldr	r0, [pc, #108]	; (8004dfc <mem_malloc+0x1dc>)
 8004d90:	f00a f8b8 	bl	800ef04 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <mem_malloc+0x18c>
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <mem_malloc+0x1d4>)
 8004da0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004da4:	4919      	ldr	r1, [pc, #100]	; (8004e0c <mem_malloc+0x1ec>)
 8004da6:	4815      	ldr	r0, [pc, #84]	; (8004dfc <mem_malloc+0x1dc>)
 8004da8:	f00a f8ac 	bl	800ef04 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <mem_malloc+0x1a4>
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <mem_malloc+0x1d4>)
 8004db8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004dbc:	4914      	ldr	r1, [pc, #80]	; (8004e10 <mem_malloc+0x1f0>)
 8004dbe:	480f      	ldr	r0, [pc, #60]	; (8004dfc <mem_malloc+0x1dc>)
 8004dc0:	f00a f8a0 	bl	800ef04 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	e00e      	b.n	8004de8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004dca:	8bfb      	ldrh	r3, [r7, #30]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fc83 	bl	80046d8 <ptr_to_mem>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004dd8:	8bfa      	ldrh	r2, [r7, #30]
 8004dda:	8bbb      	ldrh	r3, [r7, #28]
 8004ddc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004de0:	429a      	cmp	r2, r3
 8004de2:	f4ff af44 	bcc.w	8004c6e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	2000578c 	.word	0x2000578c
 8004df4:	08010274 	.word	0x08010274
 8004df8:	0801041c 	.word	0x0801041c
 8004dfc:	080102bc 	.word	0x080102bc
 8004e00:	20005788 	.word	0x20005788
 8004e04:	08010430 	.word	0x08010430
 8004e08:	0801044c 	.word	0x0801044c
 8004e0c:	0801047c 	.word	0x0801047c
 8004e10:	080104ac 	.word	0x080104ac

08004e14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	3303      	adds	r3, #3
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e011      	b.n	8004e5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4413      	add	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	885b      	ldrh	r3, [r3, #2]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4293      	cmp	r3, r2
 8004e64:	dbe7      	blt.n	8004e36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	80fb      	strh	r3, [r7, #6]
 8004e7e:	e009      	b.n	8004e94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <memp_init+0x30>)
 8004e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff ffc3 	bl	8004e14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	3301      	adds	r3, #1
 8004e92:	80fb      	strh	r3, [r7, #6]
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d9f2      	bls.n	8004e80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	08013948 	.word	0x08013948

08004ea8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d012      	beq.n	8004ee4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d006      	beq.n	8004ee0 <do_memp_malloc_pool+0x38>
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <do_memp_malloc_pool+0x48>)
 8004ed4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004ed8:	4906      	ldr	r1, [pc, #24]	; (8004ef4 <do_memp_malloc_pool+0x4c>)
 8004eda:	4807      	ldr	r0, [pc, #28]	; (8004ef8 <do_memp_malloc_pool+0x50>)
 8004edc:	f00a f812 	bl	800ef04 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	e000      	b.n	8004ee6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	080104d0 	.word	0x080104d0
 8004ef4:	08010500 	.word	0x08010500
 8004ef8:	08010524 	.word	0x08010524

08004efc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <memp_malloc_pool+0x1c>
 8004f0a:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <memp_malloc_pool+0x38>)
 8004f0c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004f10:	4909      	ldr	r1, [pc, #36]	; (8004f38 <memp_malloc_pool+0x3c>)
 8004f12:	480a      	ldr	r0, [pc, #40]	; (8004f3c <memp_malloc_pool+0x40>)
 8004f14:	f009 fff6 	bl	800ef04 <iprintf>
  if (desc == NULL) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <memp_malloc_pool+0x26>
    return NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e003      	b.n	8004f2a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff ffc0 	bl	8004ea8 <do_memp_malloc_pool>
 8004f28:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	080104d0 	.word	0x080104d0
 8004f38:	0801054c 	.word	0x0801054c
 8004f3c:	08010524 	.word	0x08010524

08004f40 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d908      	bls.n	8004f62 <memp_malloc+0x22>
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <memp_malloc+0x3c>)
 8004f52:	f240 1257 	movw	r2, #343	; 0x157
 8004f56:	490a      	ldr	r1, [pc, #40]	; (8004f80 <memp_malloc+0x40>)
 8004f58:	480a      	ldr	r0, [pc, #40]	; (8004f84 <memp_malloc+0x44>)
 8004f5a:	f009 ffd3 	bl	800ef04 <iprintf>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e008      	b.n	8004f74 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <memp_malloc+0x48>)
 8004f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff ff9c 	bl	8004ea8 <do_memp_malloc_pool>
 8004f70:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004f72:	68fb      	ldr	r3, [r7, #12]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	080104d0 	.word	0x080104d0
 8004f80:	08010560 	.word	0x08010560
 8004f84:	08010524 	.word	0x08010524
 8004f88:	08013948 	.word	0x08013948

08004f8c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d006      	beq.n	8004fae <do_memp_free_pool+0x22>
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <do_memp_free_pool+0x40>)
 8004fa2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004fa6:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <do_memp_free_pool+0x44>)
 8004fa8:	480a      	ldr	r0, [pc, #40]	; (8004fd4 <do_memp_free_pool+0x48>)
 8004faa:	f009 ffab 	bl	800ef04 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	080104d0 	.word	0x080104d0
 8004fd0:	08010580 	.word	0x08010580
 8004fd4:	08010524 	.word	0x08010524

08004fd8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <memp_free_pool+0x1e>
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <memp_free_pool+0x3c>)
 8004fea:	f240 1295 	movw	r2, #405	; 0x195
 8004fee:	490a      	ldr	r1, [pc, #40]	; (8005018 <memp_free_pool+0x40>)
 8004ff0:	480a      	ldr	r0, [pc, #40]	; (800501c <memp_free_pool+0x44>)
 8004ff2:	f009 ff87 	bl	800ef04 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <memp_free_pool+0x34>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ffc1 	bl	8004f8c <do_memp_free_pool>
 800500a:	e000      	b.n	800500e <memp_free_pool+0x36>
    return;
 800500c:	bf00      	nop
}
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	080104d0 	.word	0x080104d0
 8005018:	0801054c 	.word	0x0801054c
 800501c:	08010524 	.word	0x08010524

08005020 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	2b08      	cmp	r3, #8
 8005030:	d907      	bls.n	8005042 <memp_free+0x22>
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <memp_free+0x44>)
 8005034:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005038:	490b      	ldr	r1, [pc, #44]	; (8005068 <memp_free+0x48>)
 800503a:	480c      	ldr	r0, [pc, #48]	; (800506c <memp_free+0x4c>)
 800503c:	f009 ff62 	bl	800ef04 <iprintf>
 8005040:	e00c      	b.n	800505c <memp_free+0x3c>

  if (mem == NULL) {
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	4a09      	ldr	r2, [pc, #36]	; (8005070 <memp_free+0x50>)
 800504c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff ff9a 	bl	8004f8c <do_memp_free_pool>
 8005058:	e000      	b.n	800505c <memp_free+0x3c>
    return;
 800505a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	080104d0 	.word	0x080104d0
 8005068:	080105a0 	.word	0x080105a0
 800506c:	08010524 	.word	0x08010524
 8005070:	08013948 	.word	0x08013948

08005074 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d108      	bne.n	80050aa <netif_add+0x26>
 8005098:	4b57      	ldr	r3, [pc, #348]	; (80051f8 <netif_add+0x174>)
 800509a:	f240 1227 	movw	r2, #295	; 0x127
 800509e:	4957      	ldr	r1, [pc, #348]	; (80051fc <netif_add+0x178>)
 80050a0:	4857      	ldr	r0, [pc, #348]	; (8005200 <netif_add+0x17c>)
 80050a2:	f009 ff2f 	bl	800ef04 <iprintf>
 80050a6:	2300      	movs	r3, #0
 80050a8:	e0a2      	b.n	80051f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d108      	bne.n	80050c2 <netif_add+0x3e>
 80050b0:	4b51      	ldr	r3, [pc, #324]	; (80051f8 <netif_add+0x174>)
 80050b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80050b6:	4953      	ldr	r1, [pc, #332]	; (8005204 <netif_add+0x180>)
 80050b8:	4851      	ldr	r0, [pc, #324]	; (8005200 <netif_add+0x17c>)
 80050ba:	f009 ff23 	bl	800ef04 <iprintf>
 80050be:	2300      	movs	r3, #0
 80050c0:	e096      	b.n	80051f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80050c8:	4b4f      	ldr	r3, [pc, #316]	; (8005208 <netif_add+0x184>)
 80050ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80050d2:	4b4d      	ldr	r3, [pc, #308]	; (8005208 <netif_add+0x184>)
 80050d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80050dc:	4b4a      	ldr	r3, [pc, #296]	; (8005208 <netif_add+0x184>)
 80050de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a45      	ldr	r2, [pc, #276]	; (800520c <netif_add+0x188>)
 80050f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005112:	4b3f      	ldr	r3, [pc, #252]	; (8005210 <netif_add+0x18c>)
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005120:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f913 	bl	8005354 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	4798      	blx	r3
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <netif_add+0xba>
    return NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	e058      	b.n	80051f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005144:	2bff      	cmp	r3, #255	; 0xff
 8005146:	d103      	bne.n	8005150 <netif_add+0xcc>
        netif->num = 0;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005154:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <netif_add+0x190>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e02b      	b.n	80051b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	429a      	cmp	r2, r3
 8005162:	d106      	bne.n	8005172 <netif_add+0xee>
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <netif_add+0x174>)
 8005166:	f240 128b 	movw	r2, #395	; 0x18b
 800516a:	492b      	ldr	r1, [pc, #172]	; (8005218 <netif_add+0x194>)
 800516c:	4824      	ldr	r0, [pc, #144]	; (8005200 <netif_add+0x17c>)
 800516e:	f009 fec9 	bl	800ef04 <iprintf>
        num_netifs++;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	3301      	adds	r3, #1
 8005176:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2bff      	cmp	r3, #255	; 0xff
 800517c:	dd06      	ble.n	800518c <netif_add+0x108>
 800517e:	4b1e      	ldr	r3, [pc, #120]	; (80051f8 <netif_add+0x174>)
 8005180:	f240 128d 	movw	r2, #397	; 0x18d
 8005184:	4925      	ldr	r1, [pc, #148]	; (800521c <netif_add+0x198>)
 8005186:	481e      	ldr	r0, [pc, #120]	; (8005200 <netif_add+0x17c>)
 8005188:	f009 febc 	bl	800ef04 <iprintf>
        if (netif2->num == netif->num) {
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005198:	429a      	cmp	r2, r3
 800519a:	d108      	bne.n	80051ae <netif_add+0x12a>
          netif->num++;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051a2:	3301      	adds	r3, #1
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80051ac:	e005      	b.n	80051ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1d0      	bne.n	800515c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1be      	bne.n	800513e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051c6:	2bfe      	cmp	r3, #254	; 0xfe
 80051c8:	d103      	bne.n	80051d2 <netif_add+0x14e>
    netif_num = 0;
 80051ca:	4b11      	ldr	r3, [pc, #68]	; (8005210 <netif_add+0x18c>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e006      	b.n	80051e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051d8:	3301      	adds	r3, #1
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <netif_add+0x18c>)
 80051de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <netif_add+0x190>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80051e8:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <netif_add+0x190>)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	080105bc 	.word	0x080105bc
 80051fc:	08010650 	.word	0x08010650
 8005200:	0801060c 	.word	0x0801060c
 8005204:	0801066c 	.word	0x0801066c
 8005208:	080139ac 	.word	0x080139ac
 800520c:	0800562f 	.word	0x0800562f
 8005210:	20008684 	.word	0x20008684
 8005214:	2000867c 	.word	0x2000867c
 8005218:	08010690 	.word	0x08010690
 800521c:	080106a4 	.word	0x080106a4

08005220 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f002 fde9 	bl	8007e04 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005232:	6839      	ldr	r1, [r7, #0]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f007 fb25 	bl	800c884 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <netif_do_set_ipaddr+0x20>
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <netif_do_set_ipaddr+0x88>)
 8005258:	f240 12cb 	movw	r2, #459	; 0x1cb
 800525c:	491c      	ldr	r1, [pc, #112]	; (80052d0 <netif_do_set_ipaddr+0x8c>)
 800525e:	481d      	ldr	r0, [pc, #116]	; (80052d4 <netif_do_set_ipaddr+0x90>)
 8005260:	f009 fe50 	bl	800ef04 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <netif_do_set_ipaddr+0x34>
 800526a:	4b18      	ldr	r3, [pc, #96]	; (80052cc <netif_do_set_ipaddr+0x88>)
 800526c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005270:	4917      	ldr	r1, [pc, #92]	; (80052d0 <netif_do_set_ipaddr+0x8c>)
 8005272:	4818      	ldr	r0, [pc, #96]	; (80052d4 <netif_do_set_ipaddr+0x90>)
 8005274:	f009 fe46 	bl	800ef04 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3304      	adds	r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d01c      	beq.n	80052c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3304      	adds	r3, #4
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005296:	f107 0314 	add.w	r3, r7, #20
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ffbf 	bl	8005220 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <netif_do_set_ipaddr+0x6a>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	e000      	b.n	80052b0 <netif_do_set_ipaddr+0x6c>
 80052ae:	2300      	movs	r3, #0
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80052b4:	2101      	movs	r1, #1
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f8d2 	bl	8005460 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	080105bc 	.word	0x080105bc
 80052d0:	080106d4 	.word	0x080106d4
 80052d4:	0801060c 	.word	0x0801060c

080052d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3308      	adds	r3, #8
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d00a      	beq.n	8005308 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <netif_do_set_netmask+0x26>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	e000      	b.n	8005300 <netif_do_set_netmask+0x28>
 80052fe:	2300      	movs	r3, #0
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	330c      	adds	r3, #12
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d00a      	beq.n	8005346 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <netif_do_set_gw+0x26>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	e000      	b.n	800533e <netif_do_set_gw+0x28>
 800533c:	2300      	movs	r3, #0
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005370:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <netif_set_addr+0x90>)
 8005372:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800537a:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <netif_set_addr+0x90>)
 800537c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <netif_set_addr+0x90>)
 8005386:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <netif_set_addr+0x42>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <netif_set_addr+0x46>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <netif_set_addr+0x48>
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80053a4:	f107 0310 	add.w	r3, r7, #16
 80053a8:	461a      	mov	r2, r3
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f7ff ff49 	bl	8005244 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff ff8e 	bl	80052d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ffa8 	bl	8005316 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80053cc:	f107 0310 	add.w	r3, r7, #16
 80053d0:	461a      	mov	r2, r3
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff ff35 	bl	8005244 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80053da:	bf00      	nop
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	080139ac 	.word	0x080139ac

080053e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <netif_set_default+0x1c>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20008680 	.word	0x20008680

08005408 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d107      	bne.n	8005426 <netif_set_up+0x1e>
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <netif_set_up+0x4c>)
 8005418:	f44f 7254 	mov.w	r2, #848	; 0x350
 800541c:	490e      	ldr	r1, [pc, #56]	; (8005458 <netif_set_up+0x50>)
 800541e:	480f      	ldr	r0, [pc, #60]	; (800545c <netif_set_up+0x54>)
 8005420:	f009 fd70 	bl	800ef04 <iprintf>
 8005424:	e013      	b.n	800544e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10c      	bne.n	800544e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005446:	2103      	movs	r1, #3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f809 	bl	8005460 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	080105bc 	.word	0x080105bc
 8005458:	08010744 	.word	0x08010744
 800545c:	0801060c 	.word	0x0801060c

08005460 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <netif_issue_reports+0x20>
 8005472:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <netif_issue_reports+0x74>)
 8005474:	f240 326d 	movw	r2, #877	; 0x36d
 8005478:	4917      	ldr	r1, [pc, #92]	; (80054d8 <netif_issue_reports+0x78>)
 800547a:	4818      	ldr	r0, [pc, #96]	; (80054dc <netif_issue_reports+0x7c>)
 800547c:	f009 fd42 	bl	800ef04 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01e      	beq.n	80054cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005494:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005498:	2b00      	cmp	r3, #0
 800549a:	d017      	beq.n	80054cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d013      	beq.n	80054ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3304      	adds	r3, #4
 80054aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00e      	beq.n	80054ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f008 f947 	bl	800d758 <etharp_request>
 80054ca:	e000      	b.n	80054ce <netif_issue_reports+0x6e>
    return;
 80054cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	080105bc 	.word	0x080105bc
 80054d8:	08010760 	.word	0x08010760
 80054dc:	0801060c 	.word	0x0801060c

080054e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d107      	bne.n	80054fe <netif_set_down+0x1e>
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <netif_set_down+0x58>)
 80054f0:	f240 329b 	movw	r2, #923	; 0x39b
 80054f4:	4911      	ldr	r1, [pc, #68]	; (800553c <netif_set_down+0x5c>)
 80054f6:	4812      	ldr	r0, [pc, #72]	; (8005540 <netif_set_down+0x60>)
 80054f8:	f009 fd04 	bl	800ef04 <iprintf>
 80054fc:	e019      	b.n	8005532 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d012      	beq.n	8005532 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f007 fcd1 	bl	800ced4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	080105bc 	.word	0x080105bc
 800553c:	08010784 	.word	0x08010784
 8005540:	0801060c 	.word	0x0801060c

08005544 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <netif_set_link_up+0x1e>
 8005552:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <netif_set_link_up+0x5c>)
 8005554:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005558:	4912      	ldr	r1, [pc, #72]	; (80055a4 <netif_set_link_up+0x60>)
 800555a:	4813      	ldr	r0, [pc, #76]	; (80055a8 <netif_set_link_up+0x64>)
 800555c:	f009 fcd2 	bl	800ef04 <iprintf>
 8005560:	e01b      	b.n	800559a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d114      	bne.n	800559a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005576:	f043 0304 	orr.w	r3, r3, #4
 800557a:	b2da      	uxtb	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005582:	2103      	movs	r1, #3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ff6b 	bl	8005460 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <netif_set_link_up+0x56>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	080105bc 	.word	0x080105bc
 80055a4:	080107a4 	.word	0x080107a4
 80055a8:	0801060c 	.word	0x0801060c

080055ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <netif_set_link_down+0x1e>
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <netif_set_link_down+0x54>)
 80055bc:	f240 4206 	movw	r2, #1030	; 0x406
 80055c0:	4910      	ldr	r1, [pc, #64]	; (8005604 <netif_set_link_down+0x58>)
 80055c2:	4811      	ldr	r0, [pc, #68]	; (8005608 <netif_set_link_down+0x5c>)
 80055c4:	f009 fc9e 	bl	800ef04 <iprintf>
 80055c8:	e017      	b.n	80055fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055de:	f023 0304 	bic.w	r3, r3, #4
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <netif_set_link_down+0x4e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	080105bc 	.word	0x080105bc
 8005604:	080107c8 	.word	0x080107c8
 8005608:	0801060c 	.word	0x0801060c

0800560c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	61da      	str	r2, [r3, #28]
  }
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800563a:	f06f 030b 	mvn.w	r3, #11
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d013      	beq.n	8005684 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <netif_get_by_index+0x48>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e00c      	b.n	800567e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800566a:	3301      	adds	r3, #1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	79fa      	ldrb	r2, [r7, #7]
 8005670:	429a      	cmp	r2, r3
 8005672:	d101      	bne.n	8005678 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	e006      	b.n	8005686 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1ef      	bne.n	8005664 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	2000867c 	.word	0x2000867c

08005698 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <pbuf_free_ooseq+0x38>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <pbuf_free_ooseq+0x3c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	e00a      	b.n	80056c2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f002 fbe3 	bl	8007e80 <tcp_free_ooseq>
      return;
 80056ba:	e005      	b.n	80056c8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f1      	bne.n	80056ac <pbuf_free_ooseq+0x14>
    }
  }
}
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20008685 	.word	0x20008685
 80056d4:	20008694 	.word	0x20008694

080056d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80056dc:	4b03      	ldr	r3, [pc, #12]	; (80056ec <pbuf_pool_is_empty+0x14>)
 80056de:	2201      	movs	r2, #1
 80056e0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80056e2:	bf00      	nop
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	20008685 	.word	0x20008685

080056f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4611      	mov	r1, r2
 80056fc:	461a      	mov	r2, r3
 80056fe:	460b      	mov	r3, r1
 8005700:	80fb      	strh	r3, [r7, #6]
 8005702:	4613      	mov	r3, r2
 8005704:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88ba      	ldrh	r2, [r7, #4]
 800571c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800571e:	8b3b      	ldrh	r3, [r7, #24]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	7f3a      	ldrb	r2, [r7, #28]
 800572a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	73da      	strb	r2, [r3, #15]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08c      	sub	sp, #48	; 0x30
 8005748:	af02      	add	r7, sp, #8
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
 800574e:	460b      	mov	r3, r1
 8005750:	80bb      	strh	r3, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005760:	d07f      	beq.n	8005862 <pbuf_alloc+0x11e>
 8005762:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005766:	f300 80c8 	bgt.w	80058fa <pbuf_alloc+0x1b6>
 800576a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800576e:	d010      	beq.n	8005792 <pbuf_alloc+0x4e>
 8005770:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005774:	f300 80c1 	bgt.w	80058fa <pbuf_alloc+0x1b6>
 8005778:	2b01      	cmp	r3, #1
 800577a:	d002      	beq.n	8005782 <pbuf_alloc+0x3e>
 800577c:	2b41      	cmp	r3, #65	; 0x41
 800577e:	f040 80bc 	bne.w	80058fa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005782:	887a      	ldrh	r2, [r7, #2]
 8005784:	88bb      	ldrh	r3, [r7, #4]
 8005786:	4619      	mov	r1, r3
 8005788:	2000      	movs	r0, #0
 800578a:	f000 f8d1 	bl	8005930 <pbuf_alloc_reference>
 800578e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005790:	e0bd      	b.n	800590e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800579a:	88bb      	ldrh	r3, [r7, #4]
 800579c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800579e:	2008      	movs	r0, #8
 80057a0:	f7ff fbce 	bl	8004f40 <memp_malloc>
 80057a4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d109      	bne.n	80057c0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80057ac:	f7ff ff94 	bl	80056d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <pbuf_alloc+0x78>
            pbuf_free(p);
 80057b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057b8:	f000 faa8 	bl	8005d0c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	e0a7      	b.n	8005910 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80057c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057c2:	3303      	adds	r3, #3
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	8b7a      	ldrh	r2, [r7, #26]
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bf28      	it	cs
 80057d8:	4613      	movcs	r3, r2
 80057da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80057dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057de:	3310      	adds	r3, #16
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	3303      	adds	r3, #3
 80057e6:	f023 0303 	bic.w	r3, r3, #3
 80057ea:	4618      	mov	r0, r3
 80057ec:	89f9      	ldrh	r1, [r7, #14]
 80057ee:	8b7a      	ldrh	r2, [r7, #26]
 80057f0:	2300      	movs	r3, #0
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	460b      	mov	r3, r1
 80057fa:	4601      	mov	r1, r0
 80057fc:	6938      	ldr	r0, [r7, #16]
 80057fe:	f7ff ff77 	bl	80056f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d006      	beq.n	800581c <pbuf_alloc+0xd8>
 800580e:	4b42      	ldr	r3, [pc, #264]	; (8005918 <pbuf_alloc+0x1d4>)
 8005810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005814:	4941      	ldr	r1, [pc, #260]	; (800591c <pbuf_alloc+0x1d8>)
 8005816:	4842      	ldr	r0, [pc, #264]	; (8005920 <pbuf_alloc+0x1dc>)
 8005818:	f009 fb74 	bl	800ef04 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800581c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800581e:	3303      	adds	r3, #3
 8005820:	f023 0303 	bic.w	r3, r3, #3
 8005824:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005828:	d106      	bne.n	8005838 <pbuf_alloc+0xf4>
 800582a:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <pbuf_alloc+0x1d4>)
 800582c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005830:	493c      	ldr	r1, [pc, #240]	; (8005924 <pbuf_alloc+0x1e0>)
 8005832:	483b      	ldr	r0, [pc, #236]	; (8005920 <pbuf_alloc+0x1dc>)
 8005834:	f009 fb66 	bl	800ef04 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
 8005842:	e002      	b.n	800584a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800584e:	8b7a      	ldrh	r2, [r7, #26]
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800585a:	8b7b      	ldrh	r3, [r7, #26]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d19e      	bne.n	800579e <pbuf_alloc+0x5a>
      break;
 8005860:	e055      	b.n	800590e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005864:	3303      	adds	r3, #3
 8005866:	b29b      	uxth	r3, r3
 8005868:	f023 0303 	bic.w	r3, r3, #3
 800586c:	b29a      	uxth	r2, r3
 800586e:	88bb      	ldrh	r3, [r7, #4]
 8005870:	3303      	adds	r3, #3
 8005872:	b29b      	uxth	r3, r3
 8005874:	f023 0303 	bic.w	r3, r3, #3
 8005878:	b29b      	uxth	r3, r3
 800587a:	4413      	add	r3, r2
 800587c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800587e:	8b3b      	ldrh	r3, [r7, #24]
 8005880:	3310      	adds	r3, #16
 8005882:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005884:	8b3a      	ldrh	r2, [r7, #24]
 8005886:	88bb      	ldrh	r3, [r7, #4]
 8005888:	3303      	adds	r3, #3
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	429a      	cmp	r2, r3
 8005890:	d306      	bcc.n	80058a0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005892:	8afa      	ldrh	r2, [r7, #22]
 8005894:	88bb      	ldrh	r3, [r7, #4]
 8005896:	3303      	adds	r3, #3
 8005898:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d201      	bcs.n	80058a4 <pbuf_alloc+0x160>
        return NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e035      	b.n	8005910 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80058a4:	8afb      	ldrh	r3, [r7, #22]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff f9ba 	bl	8004c20 <mem_malloc>
 80058ac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <pbuf_alloc+0x174>
        return NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e02b      	b.n	8005910 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80058b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058ba:	3310      	adds	r3, #16
 80058bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058be:	4413      	add	r3, r2
 80058c0:	3303      	adds	r3, #3
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	4618      	mov	r0, r3
 80058c8:	88b9      	ldrh	r1, [r7, #4]
 80058ca:	88ba      	ldrh	r2, [r7, #4]
 80058cc:	2300      	movs	r3, #0
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	887b      	ldrh	r3, [r7, #2]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	460b      	mov	r3, r1
 80058d6:	4601      	mov	r1, r0
 80058d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058da:	f7ff ff09 	bl	80056f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d010      	beq.n	800590c <pbuf_alloc+0x1c8>
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <pbuf_alloc+0x1d4>)
 80058ec:	f44f 7291 	mov.w	r2, #290	; 0x122
 80058f0:	490d      	ldr	r1, [pc, #52]	; (8005928 <pbuf_alloc+0x1e4>)
 80058f2:	480b      	ldr	r0, [pc, #44]	; (8005920 <pbuf_alloc+0x1dc>)
 80058f4:	f009 fb06 	bl	800ef04 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80058f8:	e008      	b.n	800590c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <pbuf_alloc+0x1d4>)
 80058fc:	f240 1227 	movw	r2, #295	; 0x127
 8005900:	490a      	ldr	r1, [pc, #40]	; (800592c <pbuf_alloc+0x1e8>)
 8005902:	4807      	ldr	r0, [pc, #28]	; (8005920 <pbuf_alloc+0x1dc>)
 8005904:	f009 fafe 	bl	800ef04 <iprintf>
      return NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	e001      	b.n	8005910 <pbuf_alloc+0x1cc>
      break;
 800590c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005910:	4618      	mov	r0, r3
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	080107ec 	.word	0x080107ec
 800591c:	0801081c 	.word	0x0801081c
 8005920:	0801084c 	.word	0x0801084c
 8005924:	08010874 	.word	0x08010874
 8005928:	080108a8 	.word	0x080108a8
 800592c:	080108d4 	.word	0x080108d4

08005930 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	807b      	strh	r3, [r7, #2]
 800593c:	4613      	mov	r3, r2
 800593e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005940:	883b      	ldrh	r3, [r7, #0]
 8005942:	2b41      	cmp	r3, #65	; 0x41
 8005944:	d009      	beq.n	800595a <pbuf_alloc_reference+0x2a>
 8005946:	883b      	ldrh	r3, [r7, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d006      	beq.n	800595a <pbuf_alloc_reference+0x2a>
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <pbuf_alloc_reference+0x5c>)
 800594e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005952:	490f      	ldr	r1, [pc, #60]	; (8005990 <pbuf_alloc_reference+0x60>)
 8005954:	480f      	ldr	r0, [pc, #60]	; (8005994 <pbuf_alloc_reference+0x64>)
 8005956:	f009 fad5 	bl	800ef04 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800595a:	2007      	movs	r0, #7
 800595c:	f7ff faf0 	bl	8004f40 <memp_malloc>
 8005960:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	e00b      	b.n	8005984 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800596c:	8879      	ldrh	r1, [r7, #2]
 800596e:	887a      	ldrh	r2, [r7, #2]
 8005970:	2300      	movs	r3, #0
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	883b      	ldrh	r3, [r7, #0]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	460b      	mov	r3, r1
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7ff feb7 	bl	80056f0 <pbuf_init_alloced_pbuf>
  return p;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	080107ec 	.word	0x080107ec
 8005990:	080108f0 	.word	0x080108f0
 8005994:	0801084c 	.word	0x0801084c

08005998 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af02      	add	r7, sp, #8
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	460b      	mov	r3, r1
 80059a6:	81bb      	strh	r3, [r7, #12]
 80059a8:	4613      	mov	r3, r2
 80059aa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80059b0:	8a7b      	ldrh	r3, [r7, #18]
 80059b2:	3303      	adds	r3, #3
 80059b4:	f023 0203 	bic.w	r2, r3, #3
 80059b8:	89bb      	ldrh	r3, [r7, #12]
 80059ba:	441a      	add	r2, r3
 80059bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059be:	429a      	cmp	r2, r3
 80059c0:	d901      	bls.n	80059c6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e018      	b.n	80059f8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80059cc:	8a7b      	ldrh	r3, [r7, #18]
 80059ce:	3303      	adds	r3, #3
 80059d0:	f023 0303 	bic.w	r3, r3, #3
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	4413      	add	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e001      	b.n	80059e0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	89b9      	ldrh	r1, [r7, #12]
 80059e4:	89ba      	ldrh	r2, [r7, #12]
 80059e6:	2302      	movs	r3, #2
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	897b      	ldrh	r3, [r7, #10]
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	460b      	mov	r3, r1
 80059f0:	6979      	ldr	r1, [r7, #20]
 80059f2:	f7ff fe7d 	bl	80056f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80059f6:	687b      	ldr	r3, [r7, #4]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <pbuf_realloc+0x20>
 8005a12:	4b3a      	ldr	r3, [pc, #232]	; (8005afc <pbuf_realloc+0xfc>)
 8005a14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005a18:	4939      	ldr	r1, [pc, #228]	; (8005b00 <pbuf_realloc+0x100>)
 8005a1a:	483a      	ldr	r0, [pc, #232]	; (8005b04 <pbuf_realloc+0x104>)
 8005a1c:	f009 fa72 	bl	800ef04 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	891b      	ldrh	r3, [r3, #8]
 8005a24:	887a      	ldrh	r2, [r7, #2]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d263      	bcs.n	8005af2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	891a      	ldrh	r2, [r3, #8]
 8005a2e:	887b      	ldrh	r3, [r7, #2]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005a34:	887b      	ldrh	r3, [r7, #2]
 8005a36:	817b      	strh	r3, [r7, #10]
  q = p;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005a3c:	e018      	b.n	8005a70 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	895b      	ldrh	r3, [r3, #10]
 8005a42:	897a      	ldrh	r2, [r7, #10]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	891a      	ldrh	r2, [r3, #8]
 8005a4c:	893b      	ldrh	r3, [r7, #8]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <pbuf_realloc+0x70>
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <pbuf_realloc+0xfc>)
 8005a64:	f240 12af 	movw	r2, #431	; 0x1af
 8005a68:	4927      	ldr	r1, [pc, #156]	; (8005b08 <pbuf_realloc+0x108>)
 8005a6a:	4826      	ldr	r0, [pc, #152]	; (8005b04 <pbuf_realloc+0x104>)
 8005a6c:	f009 fa4a 	bl	800ef04 <iprintf>
  while (rem_len > q->len) {
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	895b      	ldrh	r3, [r3, #10]
 8005a74:	897a      	ldrh	r2, [r7, #10]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d8e1      	bhi.n	8005a3e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	7b1b      	ldrb	r3, [r3, #12]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d121      	bne.n	8005aca <pbuf_realloc+0xca>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	895b      	ldrh	r3, [r3, #10]
 8005a8a:	897a      	ldrh	r2, [r7, #10]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d01c      	beq.n	8005aca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	7b5b      	ldrb	r3, [r3, #13]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d116      	bne.n	8005aca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	897b      	ldrh	r3, [r7, #10]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4619      	mov	r1, r3
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7fe ffba 	bl	8004a28 <mem_trim>
 8005ab4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <pbuf_realloc+0xca>
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <pbuf_realloc+0xfc>)
 8005abe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005ac2:	4912      	ldr	r1, [pc, #72]	; (8005b0c <pbuf_realloc+0x10c>)
 8005ac4:	480f      	ldr	r0, [pc, #60]	; (8005b04 <pbuf_realloc+0x104>)
 8005ac6:	f009 fa1d 	bl	800ef04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	897a      	ldrh	r2, [r7, #10]
 8005ace:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	895a      	ldrh	r2, [r3, #10]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f911 	bl	8005d0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e000      	b.n	8005af4 <pbuf_realloc+0xf4>
    return;
 8005af2:	bf00      	nop

}
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	080107ec 	.word	0x080107ec
 8005b00:	08010904 	.word	0x08010904
 8005b04:	0801084c 	.word	0x0801084c
 8005b08:	0801091c 	.word	0x0801091c
 8005b0c:	08010934 	.word	0x08010934

08005b10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <pbuf_add_header_impl+0x22>
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <pbuf_add_header_impl+0xc4>)
 8005b26:	f240 12df 	movw	r2, #479	; 0x1df
 8005b2a:	492b      	ldr	r1, [pc, #172]	; (8005bd8 <pbuf_add_header_impl+0xc8>)
 8005b2c:	482b      	ldr	r0, [pc, #172]	; (8005bdc <pbuf_add_header_impl+0xcc>)
 8005b2e:	f009 f9e9 	bl	800ef04 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <pbuf_add_header_impl+0x30>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3e:	d301      	bcc.n	8005b44 <pbuf_add_header_impl+0x34>
    return 1;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e043      	b.n	8005bcc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <pbuf_add_header_impl+0x3e>
    return 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e03e      	b.n	8005bcc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	891a      	ldrh	r2, [r3, #8]
 8005b56:	8a7b      	ldrh	r3, [r7, #18]
 8005b58:	4413      	add	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	8a7a      	ldrh	r2, [r7, #18]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d901      	bls.n	8005b66 <pbuf_add_header_impl+0x56>
    return 1;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e032      	b.n	8005bcc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	7b1b      	ldrb	r3, [r3, #12]
 8005b6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005b6c:	8a3b      	ldrh	r3, [r7, #16]
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	425b      	negs	r3, r3
 8005b7e:	4413      	add	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3310      	adds	r3, #16
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d20d      	bcs.n	8005ba8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e01d      	b.n	8005bcc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d006      	beq.n	8005ba4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	425b      	negs	r3, r3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	e001      	b.n	8005ba8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e011      	b.n	8005bcc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	895a      	ldrh	r2, [r3, #10]
 8005bb2:	8a7b      	ldrh	r3, [r7, #18]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	891a      	ldrh	r2, [r3, #8]
 8005bc0:	8a7b      	ldrh	r3, [r7, #18]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	811a      	strh	r2, [r3, #8]


  return 0;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	080107ec 	.word	0x080107ec
 8005bd8:	08010950 	.word	0x08010950
 8005bdc:	0801084c 	.word	0x0801084c

08005be0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005bea:	2200      	movs	r2, #0
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff ff8e 	bl	8005b10 <pbuf_add_header_impl>
 8005bf4:	4603      	mov	r3, r0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d106      	bne.n	8005c1e <pbuf_remove_header+0x1e>
 8005c10:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <pbuf_remove_header+0x94>)
 8005c12:	f240 224b 	movw	r2, #587	; 0x24b
 8005c16:	4920      	ldr	r1, [pc, #128]	; (8005c98 <pbuf_remove_header+0x98>)
 8005c18:	4820      	ldr	r0, [pc, #128]	; (8005c9c <pbuf_remove_header+0x9c>)
 8005c1a:	f009 f973 	bl	800ef04 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <pbuf_remove_header+0x2c>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2a:	d301      	bcc.n	8005c30 <pbuf_remove_header+0x30>
    return 1;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e02c      	b.n	8005c8a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <pbuf_remove_header+0x3a>
    return 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e027      	b.n	8005c8a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	895b      	ldrh	r3, [r3, #10]
 8005c42:	89fa      	ldrh	r2, [r7, #14]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d908      	bls.n	8005c5a <pbuf_remove_header+0x5a>
 8005c48:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <pbuf_remove_header+0x94>)
 8005c4a:	f240 2255 	movw	r2, #597	; 0x255
 8005c4e:	4914      	ldr	r1, [pc, #80]	; (8005ca0 <pbuf_remove_header+0xa0>)
 8005c50:	4812      	ldr	r0, [pc, #72]	; (8005c9c <pbuf_remove_header+0x9c>)
 8005c52:	f009 f957 	bl	800ef04 <iprintf>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e017      	b.n	8005c8a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	441a      	add	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	895a      	ldrh	r2, [r3, #10]
 8005c70:	89fb      	ldrh	r3, [r7, #14]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	891a      	ldrh	r2, [r3, #8]
 8005c7e:	89fb      	ldrh	r3, [r7, #14]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	080107ec 	.word	0x080107ec
 8005c98:	08010950 	.word	0x08010950
 8005c9c:	0801084c 	.word	0x0801084c
 8005ca0:	0801095c 	.word	0x0801095c

08005ca4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005cb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da08      	bge.n	8005cce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005cbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cc0:	425b      	negs	r3, r3
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff ff9b 	bl	8005c00 <pbuf_remove_header>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	e007      	b.n	8005cde <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005cce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cd2:	787a      	ldrb	r2, [r7, #1]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff ff1a 	bl	8005b10 <pbuf_add_header_impl>
 8005cdc:	4603      	mov	r3, r0
  }
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005cf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff ffd2 	bl	8005ca4 <pbuf_header_impl>
 8005d00:	4603      	mov	r3, r0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d106      	bne.n	8005d2e <pbuf_free+0x22>
 8005d20:	4b38      	ldr	r3, [pc, #224]	; (8005e04 <pbuf_free+0xf8>)
 8005d22:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005d26:	4938      	ldr	r1, [pc, #224]	; (8005e08 <pbuf_free+0xfc>)
 8005d28:	4838      	ldr	r0, [pc, #224]	; (8005e0c <pbuf_free+0x100>)
 8005d2a:	f009 f8eb 	bl	800ef04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e063      	b.n	8005dfa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005d36:	e05c      	b.n	8005df2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	7b9b      	ldrb	r3, [r3, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <pbuf_free+0x42>
 8005d40:	4b30      	ldr	r3, [pc, #192]	; (8005e04 <pbuf_free+0xf8>)
 8005d42:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005d46:	4932      	ldr	r1, [pc, #200]	; (8005e10 <pbuf_free+0x104>)
 8005d48:	4830      	ldr	r0, [pc, #192]	; (8005e0c <pbuf_free+0x100>)
 8005d4a:	f009 f8db 	bl	800ef04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	7b9b      	ldrb	r3, [r3, #14]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	739a      	strb	r2, [r3, #14]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7b9b      	ldrb	r3, [r3, #14]
 8005d5e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005d60:	7dbb      	ldrb	r3, [r7, #22]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d143      	bne.n	8005dee <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	7b1b      	ldrb	r3, [r3, #12]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	7b5b      	ldrb	r3, [r3, #13]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d011      	beq.n	8005da6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <pbuf_free+0x90>
 8005d8e:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <pbuf_free+0xf8>)
 8005d90:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005d94:	491f      	ldr	r1, [pc, #124]	; (8005e14 <pbuf_free+0x108>)
 8005d96:	481d      	ldr	r0, [pc, #116]	; (8005e0c <pbuf_free+0x100>)
 8005d98:	f009 f8b4 	bl	800ef04 <iprintf>
        pc->custom_free_function(p);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
 8005da4:	e01d      	b.n	8005de2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d104      	bne.n	8005db6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	2008      	movs	r0, #8
 8005db0:	f7ff f936 	bl	8005020 <memp_free>
 8005db4:	e015      	b.n	8005de2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d104      	bne.n	8005dc6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	2007      	movs	r0, #7
 8005dc0:	f7ff f92e 	bl	8005020 <memp_free>
 8005dc4:	e00d      	b.n	8005de2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <pbuf_free+0xc8>
          mem_free(p);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fe fdc1 	bl	8004954 <mem_free>
 8005dd2:	e006      	b.n	8005de2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <pbuf_free+0xf8>)
 8005dd6:	f240 320f 	movw	r2, #783	; 0x30f
 8005dda:	490f      	ldr	r1, [pc, #60]	; (8005e18 <pbuf_free+0x10c>)
 8005ddc:	480b      	ldr	r0, [pc, #44]	; (8005e0c <pbuf_free+0x100>)
 8005dde:	f009 f891 	bl	800ef04 <iprintf>
        }
      }
      count++;
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	3301      	adds	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	e001      	b.n	8005df2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d19f      	bne.n	8005d38 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	080107ec 	.word	0x080107ec
 8005e08:	08010950 	.word	0x08010950
 8005e0c:	0801084c 	.word	0x0801084c
 8005e10:	0801097c 	.word	0x0801097c
 8005e14:	08010994 	.word	0x08010994
 8005e18:	080109b8 	.word	0x080109b8

08005e1c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005e28:	e005      	b.n	8005e36 <pbuf_clen+0x1a>
    ++len;
 8005e2a:	89fb      	ldrh	r3, [r7, #14]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f6      	bne.n	8005e2a <pbuf_clen+0xe>
  }
  return len;
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
	...

08005e4c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d010      	beq.n	8005e7c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	7b9b      	ldrb	r3, [r3, #14]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	7b9b      	ldrb	r3, [r3, #14]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <pbuf_ref+0x30>
 8005e6e:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <pbuf_ref+0x38>)
 8005e70:	f240 3242 	movw	r2, #834	; 0x342
 8005e74:	4904      	ldr	r1, [pc, #16]	; (8005e88 <pbuf_ref+0x3c>)
 8005e76:	4805      	ldr	r0, [pc, #20]	; (8005e8c <pbuf_ref+0x40>)
 8005e78:	f009 f844 	bl	800ef04 <iprintf>
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	080107ec 	.word	0x080107ec
 8005e88:	080109cc 	.word	0x080109cc
 8005e8c:	0801084c 	.word	0x0801084c

08005e90 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <pbuf_cat+0x16>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d107      	bne.n	8005eb6 <pbuf_cat+0x26>
 8005ea6:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <pbuf_cat+0x98>)
 8005ea8:	f240 3259 	movw	r2, #857	; 0x359
 8005eac:	491f      	ldr	r1, [pc, #124]	; (8005f2c <pbuf_cat+0x9c>)
 8005eae:	4820      	ldr	r0, [pc, #128]	; (8005f30 <pbuf_cat+0xa0>)
 8005eb0:	f009 f828 	bl	800ef04 <iprintf>
 8005eb4:	e034      	b.n	8005f20 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e00a      	b.n	8005ed2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	891a      	ldrh	r2, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	891b      	ldrh	r3, [r3, #8]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1f0      	bne.n	8005ebc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	891a      	ldrh	r2, [r3, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	895b      	ldrh	r3, [r3, #10]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d006      	beq.n	8005ef4 <pbuf_cat+0x64>
 8005ee6:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <pbuf_cat+0x98>)
 8005ee8:	f240 3262 	movw	r2, #866	; 0x362
 8005eec:	4911      	ldr	r1, [pc, #68]	; (8005f34 <pbuf_cat+0xa4>)
 8005eee:	4810      	ldr	r0, [pc, #64]	; (8005f30 <pbuf_cat+0xa0>)
 8005ef0:	f009 f808 	bl	800ef04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <pbuf_cat+0x7a>
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <pbuf_cat+0x98>)
 8005efe:	f240 3263 	movw	r2, #867	; 0x363
 8005f02:	490d      	ldr	r1, [pc, #52]	; (8005f38 <pbuf_cat+0xa8>)
 8005f04:	480a      	ldr	r0, [pc, #40]	; (8005f30 <pbuf_cat+0xa0>)
 8005f06:	f008 fffd 	bl	800ef04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	891a      	ldrh	r2, [r3, #8]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	891b      	ldrh	r3, [r3, #8]
 8005f12:	4413      	add	r3, r2
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	080107ec 	.word	0x080107ec
 8005f2c:	080109e0 	.word	0x080109e0
 8005f30:	0801084c 	.word	0x0801084c
 8005f34:	08010a18 	.word	0x08010a18
 8005f38:	08010a48 	.word	0x08010a48

08005f3c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <pbuf_copy+0x2a>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <pbuf_copy+0x2a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	891a      	ldrh	r2, [r3, #8]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	891b      	ldrh	r3, [r3, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d209      	bcs.n	8005f7a <pbuf_copy+0x3e>
 8005f66:	4b57      	ldr	r3, [pc, #348]	; (80060c4 <pbuf_copy+0x188>)
 8005f68:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005f6c:	4956      	ldr	r1, [pc, #344]	; (80060c8 <pbuf_copy+0x18c>)
 8005f6e:	4857      	ldr	r0, [pc, #348]	; (80060cc <pbuf_copy+0x190>)
 8005f70:	f008 ffc8 	bl	800ef04 <iprintf>
 8005f74:	f06f 030f 	mvn.w	r3, #15
 8005f78:	e09f      	b.n	80060ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	895b      	ldrh	r3, [r3, #10]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	895b      	ldrh	r3, [r3, #10]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1acb      	subs	r3, r1, r3
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d306      	bcc.n	8005fa0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	895b      	ldrh	r3, [r3, #10]
 8005f96:	461a      	mov	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	e005      	b.n	8005fac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	895b      	ldrh	r3, [r3, #10]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	18d0      	adds	r0, r2, r3
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	f008 ff8a 	bl	800eed8 <memcpy>
    offset_to += len;
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	895b      	ldrh	r3, [r3, #10]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d906      	bls.n	8005fee <pbuf_copy+0xb2>
 8005fe0:	4b38      	ldr	r3, [pc, #224]	; (80060c4 <pbuf_copy+0x188>)
 8005fe2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005fe6:	493a      	ldr	r1, [pc, #232]	; (80060d0 <pbuf_copy+0x194>)
 8005fe8:	4838      	ldr	r0, [pc, #224]	; (80060cc <pbuf_copy+0x190>)
 8005fea:	f008 ff8b 	bl	800ef04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	895b      	ldrh	r3, [r3, #10]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d906      	bls.n	8006008 <pbuf_copy+0xcc>
 8005ffa:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <pbuf_copy+0x188>)
 8005ffc:	f240 32da 	movw	r2, #986	; 0x3da
 8006000:	4934      	ldr	r1, [pc, #208]	; (80060d4 <pbuf_copy+0x198>)
 8006002:	4832      	ldr	r0, [pc, #200]	; (80060cc <pbuf_copy+0x190>)
 8006004:	f008 ff7e 	bl	800ef04 <iprintf>
    if (offset_from >= p_from->len) {
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	895b      	ldrh	r3, [r3, #10]
 800600c:	461a      	mov	r2, r3
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4293      	cmp	r3, r2
 8006012:	d304      	bcc.n	800601e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	895b      	ldrh	r3, [r3, #10]
 8006022:	461a      	mov	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4293      	cmp	r3, r2
 8006028:	d114      	bne.n	8006054 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10c      	bne.n	8006054 <pbuf_copy+0x118>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <pbuf_copy+0x118>
 8006040:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <pbuf_copy+0x188>)
 8006042:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006046:	4924      	ldr	r1, [pc, #144]	; (80060d8 <pbuf_copy+0x19c>)
 8006048:	4820      	ldr	r0, [pc, #128]	; (80060cc <pbuf_copy+0x190>)
 800604a:	f008 ff5b 	bl	800ef04 <iprintf>
 800604e:	f06f 030f 	mvn.w	r3, #15
 8006052:	e032      	b.n	80060ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <pbuf_copy+0x146>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	895a      	ldrh	r2, [r3, #10]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	891b      	ldrh	r3, [r3, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d10d      	bne.n	8006082 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <pbuf_copy+0x146>
 800606e:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <pbuf_copy+0x188>)
 8006070:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006074:	4919      	ldr	r1, [pc, #100]	; (80060dc <pbuf_copy+0x1a0>)
 8006076:	4815      	ldr	r0, [pc, #84]	; (80060cc <pbuf_copy+0x190>)
 8006078:	f008 ff44 	bl	800ef04 <iprintf>
 800607c:	f06f 0305 	mvn.w	r3, #5
 8006080:	e01b      	b.n	80060ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d013      	beq.n	80060b0 <pbuf_copy+0x174>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	895a      	ldrh	r2, [r3, #10]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	891b      	ldrh	r3, [r3, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d10d      	bne.n	80060b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <pbuf_copy+0x174>
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <pbuf_copy+0x188>)
 800609e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80060a2:	490e      	ldr	r1, [pc, #56]	; (80060dc <pbuf_copy+0x1a0>)
 80060a4:	4809      	ldr	r0, [pc, #36]	; (80060cc <pbuf_copy+0x190>)
 80060a6:	f008 ff2d 	bl	800ef04 <iprintf>
 80060aa:	f06f 0305 	mvn.w	r3, #5
 80060ae:	e004      	b.n	80060ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f47f af61 	bne.w	8005f7a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	080107ec 	.word	0x080107ec
 80060c8:	08010a94 	.word	0x08010a94
 80060cc:	0801084c 	.word	0x0801084c
 80060d0:	08010ac4 	.word	0x08010ac4
 80060d4:	08010adc 	.word	0x08010adc
 80060d8:	08010af8 	.word	0x08010af8
 80060dc:	08010b08 	.word	0x08010b08

080060e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4611      	mov	r1, r2
 80060ec:	461a      	mov	r2, r3
 80060ee:	460b      	mov	r3, r1
 80060f0:	80fb      	strh	r3, [r7, #6]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d108      	bne.n	8006116 <pbuf_copy_partial+0x36>
 8006104:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <pbuf_copy_partial+0xd4>)
 8006106:	f240 420a 	movw	r2, #1034	; 0x40a
 800610a:	492b      	ldr	r1, [pc, #172]	; (80061b8 <pbuf_copy_partial+0xd8>)
 800610c:	482b      	ldr	r0, [pc, #172]	; (80061bc <pbuf_copy_partial+0xdc>)
 800610e:	f008 fef9 	bl	800ef04 <iprintf>
 8006112:	2300      	movs	r3, #0
 8006114:	e04a      	b.n	80061ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d108      	bne.n	800612e <pbuf_copy_partial+0x4e>
 800611c:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <pbuf_copy_partial+0xd4>)
 800611e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006122:	4927      	ldr	r1, [pc, #156]	; (80061c0 <pbuf_copy_partial+0xe0>)
 8006124:	4825      	ldr	r0, [pc, #148]	; (80061bc <pbuf_copy_partial+0xdc>)
 8006126:	f008 feed 	bl	800ef04 <iprintf>
 800612a:	2300      	movs	r3, #0
 800612c:	e03e      	b.n	80061ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	e034      	b.n	800619e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006134:	88bb      	ldrh	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <pbuf_copy_partial+0x70>
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	895b      	ldrh	r3, [r3, #10]
 800613e:	88ba      	ldrh	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d305      	bcc.n	8006150 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	895b      	ldrh	r3, [r3, #10]
 8006148:	88ba      	ldrh	r2, [r7, #4]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	80bb      	strh	r3, [r7, #4]
 800614e:	e023      	b.n	8006198 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	895a      	ldrh	r2, [r3, #10]
 8006154:	88bb      	ldrh	r3, [r7, #4]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800615a:	8b3a      	ldrh	r2, [r7, #24]
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	429a      	cmp	r2, r3
 8006160:	d901      	bls.n	8006166 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006166:	8b7b      	ldrh	r3, [r7, #26]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	18d0      	adds	r0, r2, r3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	88bb      	ldrh	r3, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	8b3a      	ldrh	r2, [r7, #24]
 8006176:	4619      	mov	r1, r3
 8006178:	f008 feae 	bl	800eed8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800617c:	8afa      	ldrh	r2, [r7, #22]
 800617e:	8b3b      	ldrh	r3, [r7, #24]
 8006180:	4413      	add	r3, r2
 8006182:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006184:	8b7a      	ldrh	r2, [r7, #26]
 8006186:	8b3b      	ldrh	r3, [r7, #24]
 8006188:	4413      	add	r3, r2
 800618a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	8b3b      	ldrh	r3, [r7, #24]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <pbuf_copy_partial+0xca>
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1c4      	bne.n	8006134 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80061aa:	8afb      	ldrh	r3, [r7, #22]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	080107ec 	.word	0x080107ec
 80061b8:	08010b34 	.word	0x08010b34
 80061bc:	0801084c 	.word	0x0801084c
 80061c0:	08010b54 	.word	0x08010b54

080061c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	603a      	str	r2, [r7, #0]
 80061ce:	71fb      	strb	r3, [r7, #7]
 80061d0:	460b      	mov	r3, r1
 80061d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	8919      	ldrh	r1, [r3, #8]
 80061d8:	88ba      	ldrh	r2, [r7, #4]
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fab1 	bl	8005744 <pbuf_alloc>
 80061e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <pbuf_clone+0x2a>
    return NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e011      	b.n	8006212 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fea3 	bl	8005f3c <pbuf_copy>
 80061f6:	4603      	mov	r3, r0
 80061f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80061fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d006      	beq.n	8006210 <pbuf_clone+0x4c>
 8006202:	4b06      	ldr	r3, [pc, #24]	; (800621c <pbuf_clone+0x58>)
 8006204:	f240 5224 	movw	r2, #1316	; 0x524
 8006208:	4905      	ldr	r1, [pc, #20]	; (8006220 <pbuf_clone+0x5c>)
 800620a:	4806      	ldr	r0, [pc, #24]	; (8006224 <pbuf_clone+0x60>)
 800620c:	f008 fe7a 	bl	800ef04 <iprintf>
  return q;
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	080107ec 	.word	0x080107ec
 8006220:	08010c60 	.word	0x08010c60
 8006224:	0801084c 	.word	0x0801084c

08006228 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800622c:	f008 fe82 	bl	800ef34 <rand>
 8006230:	4603      	mov	r3, r0
 8006232:	b29b      	uxth	r3, r3
 8006234:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006238:	b29b      	uxth	r3, r3
 800623a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800623e:	b29a      	uxth	r2, r3
 8006240:	4b01      	ldr	r3, [pc, #4]	; (8006248 <tcp_init+0x20>)
 8006242:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006244:	bf00      	nop
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000020 	.word	0x20000020

0800624c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	7d1b      	ldrb	r3, [r3, #20]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d105      	bne.n	8006268 <tcp_free+0x1c>
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <tcp_free+0x2c>)
 800625e:	22d4      	movs	r2, #212	; 0xd4
 8006260:	4906      	ldr	r1, [pc, #24]	; (800627c <tcp_free+0x30>)
 8006262:	4807      	ldr	r0, [pc, #28]	; (8006280 <tcp_free+0x34>)
 8006264:	f008 fe4e 	bl	800ef04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	2001      	movs	r0, #1
 800626c:	f7fe fed8 	bl	8005020 <memp_free>
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	08010cec 	.word	0x08010cec
 800627c:	08010d1c 	.word	0x08010d1c
 8006280:	08010d30 	.word	0x08010d30

08006284 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7d1b      	ldrb	r3, [r3, #20]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d105      	bne.n	80062a0 <tcp_free_listen+0x1c>
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <tcp_free_listen+0x2c>)
 8006296:	22df      	movs	r2, #223	; 0xdf
 8006298:	4906      	ldr	r1, [pc, #24]	; (80062b4 <tcp_free_listen+0x30>)
 800629a:	4807      	ldr	r0, [pc, #28]	; (80062b8 <tcp_free_listen+0x34>)
 800629c:	f008 fe32 	bl	800ef04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	2002      	movs	r0, #2
 80062a4:	f7fe febc 	bl	8005020 <memp_free>
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	08010cec 	.word	0x08010cec
 80062b4:	08010d58 	.word	0x08010d58
 80062b8:	08010d30 	.word	0x08010d30

080062bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80062c0:	f001 f85c 	bl	800737c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80062c4:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <tcp_tmr+0x28>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <tcp_tmr+0x28>)
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <tcp_tmr+0x28>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80062dc:	f000 fd0e 	bl	8006cfc <tcp_slowtmr>
  }
}
 80062e0:	bf00      	nop
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	2000869d 	.word	0x2000869d

080062e8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <tcp_remove_listener+0x1c>
 80062f8:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <tcp_remove_listener+0x48>)
 80062fa:	22ff      	movs	r2, #255	; 0xff
 80062fc:	490d      	ldr	r1, [pc, #52]	; (8006334 <tcp_remove_listener+0x4c>)
 80062fe:	480e      	ldr	r0, [pc, #56]	; (8006338 <tcp_remove_listener+0x50>)
 8006300:	f008 fe00 	bl	800ef04 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e00a      	b.n	8006320 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d102      	bne.n	800631a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f1      	bne.n	800630a <tcp_remove_listener+0x22>
    }
  }
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08010cec 	.word	0x08010cec
 8006334:	08010d74 	.word	0x08010d74
 8006338:	08010d30 	.word	0x08010d30

0800633c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <tcp_listen_closed+0x1c>
 800634a:	4b14      	ldr	r3, [pc, #80]	; (800639c <tcp_listen_closed+0x60>)
 800634c:	f240 1211 	movw	r2, #273	; 0x111
 8006350:	4913      	ldr	r1, [pc, #76]	; (80063a0 <tcp_listen_closed+0x64>)
 8006352:	4814      	ldr	r0, [pc, #80]	; (80063a4 <tcp_listen_closed+0x68>)
 8006354:	f008 fdd6 	bl	800ef04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7d1b      	ldrb	r3, [r3, #20]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d006      	beq.n	800636e <tcp_listen_closed+0x32>
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <tcp_listen_closed+0x60>)
 8006362:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006366:	4910      	ldr	r1, [pc, #64]	; (80063a8 <tcp_listen_closed+0x6c>)
 8006368:	480e      	ldr	r0, [pc, #56]	; (80063a4 <tcp_listen_closed+0x68>)
 800636a:	f008 fdcb 	bl	800ef04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800636e:	2301      	movs	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e00b      	b.n	800638c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006374:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <tcp_listen_closed+0x70>)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ffb1 	bl	80062e8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3301      	adds	r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d9f0      	bls.n	8006374 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006392:	bf00      	nop
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	08010cec 	.word	0x08010cec
 80063a0:	08010d9c 	.word	0x08010d9c
 80063a4:	08010d30 	.word	0x08010d30
 80063a8:	08010da8 	.word	0x08010da8
 80063ac:	08013984 	.word	0x08013984

080063b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af04      	add	r7, sp, #16
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <tcp_close_shutdown+0x20>
 80063c2:	4b63      	ldr	r3, [pc, #396]	; (8006550 <tcp_close_shutdown+0x1a0>)
 80063c4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80063c8:	4962      	ldr	r1, [pc, #392]	; (8006554 <tcp_close_shutdown+0x1a4>)
 80063ca:	4863      	ldr	r0, [pc, #396]	; (8006558 <tcp_close_shutdown+0x1a8>)
 80063cc:	f008 fd9a 	bl	800ef04 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d066      	beq.n	80064a4 <tcp_close_shutdown+0xf4>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7d1b      	ldrb	r3, [r3, #20]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d003      	beq.n	80063e6 <tcp_close_shutdown+0x36>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7d1b      	ldrb	r3, [r3, #20]
 80063e2:	2b07      	cmp	r3, #7
 80063e4:	d15e      	bne.n	80064a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <tcp_close_shutdown+0x48>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80063f6:	d055      	beq.n	80064a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8b5b      	ldrh	r3, [r3, #26]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <tcp_close_shutdown+0x62>
 8006404:	4b52      	ldr	r3, [pc, #328]	; (8006550 <tcp_close_shutdown+0x1a0>)
 8006406:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800640a:	4954      	ldr	r1, [pc, #336]	; (800655c <tcp_close_shutdown+0x1ac>)
 800640c:	4852      	ldr	r0, [pc, #328]	; (8006558 <tcp_close_shutdown+0x1a8>)
 800640e:	f008 fd79 	bl	800ef04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800641a:	687d      	ldr	r5, [r7, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	8ad2      	ldrh	r2, [r2, #22]
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	8b09      	ldrh	r1, [r1, #24]
 8006428:	9102      	str	r1, [sp, #8]
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	462b      	mov	r3, r5
 8006430:	4622      	mov	r2, r4
 8006432:	4601      	mov	r1, r0
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f005 fd8f 	bl	800bf58 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fb6c 	bl	8007b18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006440:	4b47      	ldr	r3, [pc, #284]	; (8006560 <tcp_close_shutdown+0x1b0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d105      	bne.n	8006456 <tcp_close_shutdown+0xa6>
 800644a:	4b45      	ldr	r3, [pc, #276]	; (8006560 <tcp_close_shutdown+0x1b0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	4a43      	ldr	r2, [pc, #268]	; (8006560 <tcp_close_shutdown+0x1b0>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	e013      	b.n	800647e <tcp_close_shutdown+0xce>
 8006456:	4b42      	ldr	r3, [pc, #264]	; (8006560 <tcp_close_shutdown+0x1b0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e00c      	b.n	8006478 <tcp_close_shutdown+0xc8>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d104      	bne.n	8006472 <tcp_close_shutdown+0xc2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	60da      	str	r2, [r3, #12]
 8006470:	e005      	b.n	800647e <tcp_close_shutdown+0xce>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1ef      	bne.n	800645e <tcp_close_shutdown+0xae>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	60da      	str	r2, [r3, #12]
 8006484:	4b37      	ldr	r3, [pc, #220]	; (8006564 <tcp_close_shutdown+0x1b4>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800648a:	4b37      	ldr	r3, [pc, #220]	; (8006568 <tcp_close_shutdown+0x1b8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	429a      	cmp	r2, r3
 8006492:	d102      	bne.n	800649a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006494:	f004 f804 	bl	800a4a0 <tcp_trigger_input_pcb_close>
 8006498:	e002      	b.n	80064a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fed6 	bl	800624c <tcp_free>
      }
      return ERR_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e050      	b.n	8006546 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	7d1b      	ldrb	r3, [r3, #20]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d03b      	beq.n	8006524 <tcp_close_shutdown+0x174>
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	dc44      	bgt.n	800653a <tcp_close_shutdown+0x18a>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <tcp_close_shutdown+0x10a>
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d02a      	beq.n	800650e <tcp_close_shutdown+0x15e>
 80064b8:	e03f      	b.n	800653a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8adb      	ldrh	r3, [r3, #22]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d021      	beq.n	8006506 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80064c2:	4b2a      	ldr	r3, [pc, #168]	; (800656c <tcp_close_shutdown+0x1bc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d105      	bne.n	80064d8 <tcp_close_shutdown+0x128>
 80064cc:	4b27      	ldr	r3, [pc, #156]	; (800656c <tcp_close_shutdown+0x1bc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	4a26      	ldr	r2, [pc, #152]	; (800656c <tcp_close_shutdown+0x1bc>)
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	e013      	b.n	8006500 <tcp_close_shutdown+0x150>
 80064d8:	4b24      	ldr	r3, [pc, #144]	; (800656c <tcp_close_shutdown+0x1bc>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	e00c      	b.n	80064fa <tcp_close_shutdown+0x14a>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d104      	bne.n	80064f4 <tcp_close_shutdown+0x144>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	e005      	b.n	8006500 <tcp_close_shutdown+0x150>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1ef      	bne.n	80064e0 <tcp_close_shutdown+0x130>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fea0 	bl	800624c <tcp_free>
      break;
 800650c:	e01a      	b.n	8006544 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ff14 	bl	800633c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4816      	ldr	r0, [pc, #88]	; (8006570 <tcp_close_shutdown+0x1c0>)
 8006518:	f001 fb4e 	bl	8007bb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff feb1 	bl	8006284 <tcp_free_listen>
      break;
 8006522:	e00f      	b.n	8006544 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	480e      	ldr	r0, [pc, #56]	; (8006560 <tcp_close_shutdown+0x1b0>)
 8006528:	f001 fb46 	bl	8007bb8 <tcp_pcb_remove>
 800652c:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <tcp_close_shutdown+0x1b4>)
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fe8a 	bl	800624c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006538:	e004      	b.n	8006544 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f81a 	bl	8006574 <tcp_close_shutdown_fin>
 8006540:	4603      	mov	r3, r0
 8006542:	e000      	b.n	8006546 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bdb0      	pop	{r4, r5, r7, pc}
 800654e:	bf00      	nop
 8006550:	08010cec 	.word	0x08010cec
 8006554:	08010dc0 	.word	0x08010dc0
 8006558:	08010d30 	.word	0x08010d30
 800655c:	08010de0 	.word	0x08010de0
 8006560:	20008694 	.word	0x20008694
 8006564:	2000869c 	.word	0x2000869c
 8006568:	200086d4 	.word	0x200086d4
 800656c:	2000868c 	.word	0x2000868c
 8006570:	20008690 	.word	0x20008690

08006574 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <tcp_close_shutdown_fin+0x1c>
 8006582:	4b2e      	ldr	r3, [pc, #184]	; (800663c <tcp_close_shutdown_fin+0xc8>)
 8006584:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006588:	492d      	ldr	r1, [pc, #180]	; (8006640 <tcp_close_shutdown_fin+0xcc>)
 800658a:	482e      	ldr	r0, [pc, #184]	; (8006644 <tcp_close_shutdown_fin+0xd0>)
 800658c:	f008 fcba 	bl	800ef04 <iprintf>

  switch (pcb->state) {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7d1b      	ldrb	r3, [r3, #20]
 8006594:	2b07      	cmp	r3, #7
 8006596:	d020      	beq.n	80065da <tcp_close_shutdown_fin+0x66>
 8006598:	2b07      	cmp	r3, #7
 800659a:	dc2b      	bgt.n	80065f4 <tcp_close_shutdown_fin+0x80>
 800659c:	2b03      	cmp	r3, #3
 800659e:	d002      	beq.n	80065a6 <tcp_close_shutdown_fin+0x32>
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d00d      	beq.n	80065c0 <tcp_close_shutdown_fin+0x4c>
 80065a4:	e026      	b.n	80065f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f004 fde4 	bl	800b174 <tcp_send_fin>
 80065ac:	4603      	mov	r3, r0
 80065ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80065b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d11f      	bne.n	80065f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2205      	movs	r2, #5
 80065bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065be:	e01b      	b.n	80065f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f004 fdd7 	bl	800b174 <tcp_send_fin>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80065ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d114      	bne.n	80065fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2205      	movs	r2, #5
 80065d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065d8:	e010      	b.n	80065fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f004 fdca 	bl	800b174 <tcp_send_fin>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80065e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2209      	movs	r2, #9
 80065f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065f2:	e005      	b.n	8006600 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e01c      	b.n	8006632 <tcp_close_shutdown_fin+0xbe>
      break;
 80065f8:	bf00      	nop
 80065fa:	e002      	b.n	8006602 <tcp_close_shutdown_fin+0x8e>
      break;
 80065fc:	bf00      	nop
 80065fe:	e000      	b.n	8006602 <tcp_close_shutdown_fin+0x8e>
      break;
 8006600:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f004 fef0 	bl	800b3f0 <tcp_output>
 8006610:	e00d      	b.n	800662e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d108      	bne.n	800662e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8b5b      	ldrh	r3, [r3, #26]
 8006620:	f043 0308 	orr.w	r3, r3, #8
 8006624:	b29a      	uxth	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e001      	b.n	8006632 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800662e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	08010cec 	.word	0x08010cec
 8006640:	08010d9c 	.word	0x08010d9c
 8006644:	08010d30 	.word	0x08010d30

08006648 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d109      	bne.n	800666a <tcp_close+0x22>
 8006656:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <tcp_close+0x4c>)
 8006658:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800665c:	490e      	ldr	r1, [pc, #56]	; (8006698 <tcp_close+0x50>)
 800665e:	480f      	ldr	r0, [pc, #60]	; (800669c <tcp_close+0x54>)
 8006660:	f008 fc50 	bl	800ef04 <iprintf>
 8006664:	f06f 030f 	mvn.w	r3, #15
 8006668:	e00f      	b.n	800668a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	7d1b      	ldrb	r3, [r3, #20]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d006      	beq.n	8006680 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8b5b      	ldrh	r3, [r3, #26]
 8006676:	f043 0310 	orr.w	r3, r3, #16
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006680:	2101      	movs	r1, #1
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fe94 	bl	80063b0 <tcp_close_shutdown>
 8006688:	4603      	mov	r3, r0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	08010cec 	.word	0x08010cec
 8006698:	08010dfc 	.word	0x08010dfc
 800669c:	08010d30 	.word	0x08010d30

080066a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08e      	sub	sp, #56	; 0x38
 80066a4:	af04      	add	r7, sp, #16
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d107      	bne.n	80066c0 <tcp_abandon+0x20>
 80066b0:	4b52      	ldr	r3, [pc, #328]	; (80067fc <tcp_abandon+0x15c>)
 80066b2:	f240 223d 	movw	r2, #573	; 0x23d
 80066b6:	4952      	ldr	r1, [pc, #328]	; (8006800 <tcp_abandon+0x160>)
 80066b8:	4852      	ldr	r0, [pc, #328]	; (8006804 <tcp_abandon+0x164>)
 80066ba:	f008 fc23 	bl	800ef04 <iprintf>
 80066be:	e099      	b.n	80067f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7d1b      	ldrb	r3, [r3, #20]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d106      	bne.n	80066d6 <tcp_abandon+0x36>
 80066c8:	4b4c      	ldr	r3, [pc, #304]	; (80067fc <tcp_abandon+0x15c>)
 80066ca:	f44f 7210 	mov.w	r2, #576	; 0x240
 80066ce:	494e      	ldr	r1, [pc, #312]	; (8006808 <tcp_abandon+0x168>)
 80066d0:	484c      	ldr	r0, [pc, #304]	; (8006804 <tcp_abandon+0x164>)
 80066d2:	f008 fc17 	bl	800ef04 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7d1b      	ldrb	r3, [r3, #20]
 80066da:	2b0a      	cmp	r3, #10
 80066dc:	d107      	bne.n	80066ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	484a      	ldr	r0, [pc, #296]	; (800680c <tcp_abandon+0x16c>)
 80066e2:	f001 fa69 	bl	8007bb8 <tcp_pcb_remove>
    tcp_free(pcb);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff fdb0 	bl	800624c <tcp_free>
 80066ec:	e082      	b.n	80067f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006708:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7d1b      	ldrb	r3, [r3, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d126      	bne.n	8006766 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8adb      	ldrh	r3, [r3, #22]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d02e      	beq.n	800677e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006720:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <tcp_abandon+0x170>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	429a      	cmp	r2, r3
 8006728:	d105      	bne.n	8006736 <tcp_abandon+0x96>
 800672a:	4b39      	ldr	r3, [pc, #228]	; (8006810 <tcp_abandon+0x170>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	4a37      	ldr	r2, [pc, #220]	; (8006810 <tcp_abandon+0x170>)
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	e013      	b.n	800675e <tcp_abandon+0xbe>
 8006736:	4b36      	ldr	r3, [pc, #216]	; (8006810 <tcp_abandon+0x170>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	e00c      	b.n	8006758 <tcp_abandon+0xb8>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	429a      	cmp	r2, r3
 8006746:	d104      	bne.n	8006752 <tcp_abandon+0xb2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	60da      	str	r2, [r3, #12]
 8006750:	e005      	b.n	800675e <tcp_abandon+0xbe>
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ef      	bne.n	800673e <tcp_abandon+0x9e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	60da      	str	r2, [r3, #12]
 8006764:	e00b      	b.n	800677e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8adb      	ldrh	r3, [r3, #22]
 800676e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4828      	ldr	r0, [pc, #160]	; (8006814 <tcp_abandon+0x174>)
 8006774:	f001 fa20 	bl	8007bb8 <tcp_pcb_remove>
 8006778:	4b27      	ldr	r3, [pc, #156]	; (8006818 <tcp_abandon+0x178>)
 800677a:	2201      	movs	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	2b00      	cmp	r3, #0
 8006784:	d004      	beq.n	8006790 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fed6 	bl	800753c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fecd 	bl	800753c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fec4 	bl	800753c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00e      	beq.n	80067d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	8b12      	ldrh	r2, [r2, #24]
 80067c4:	9202      	str	r2, [sp, #8]
 80067c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80067c8:	9201      	str	r2, [sp, #4]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	460b      	mov	r3, r1
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	69b9      	ldr	r1, [r7, #24]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f005 fbc0 	bl	800bf58 <tcp_rst>
    }
    last_state = pcb->state;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7d1b      	ldrb	r3, [r3, #20]
 80067dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fd34 	bl	800624c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <tcp_abandon+0x154>
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f06f 010c 	mvn.w	r1, #12
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	4798      	blx	r3
  }
}
 80067f4:	3728      	adds	r7, #40	; 0x28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	08010cec 	.word	0x08010cec
 8006800:	08010e30 	.word	0x08010e30
 8006804:	08010d30 	.word	0x08010d30
 8006808:	08010e4c 	.word	0x08010e4c
 800680c:	20008698 	.word	0x20008698
 8006810:	2000868c 	.word	0x2000868c
 8006814:	20008694 	.word	0x20008694
 8006818:	2000869c 	.word	0x2000869c

0800681c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006824:	2101      	movs	r1, #1
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff3a 	bl	80066a0 <tcp_abandon>
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006842:	2304      	movs	r3, #4
 8006844:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800684c:	4b3e      	ldr	r3, [pc, #248]	; (8006948 <tcp_bind+0x114>)
 800684e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <tcp_bind+0x36>
 8006856:	4b3d      	ldr	r3, [pc, #244]	; (800694c <tcp_bind+0x118>)
 8006858:	f240 22a9 	movw	r2, #681	; 0x2a9
 800685c:	493c      	ldr	r1, [pc, #240]	; (8006950 <tcp_bind+0x11c>)
 800685e:	483d      	ldr	r0, [pc, #244]	; (8006954 <tcp_bind+0x120>)
 8006860:	f008 fb50 	bl	800ef04 <iprintf>
 8006864:	f06f 030f 	mvn.w	r3, #15
 8006868:	e06a      	b.n	8006940 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	7d1b      	ldrb	r3, [r3, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <tcp_bind+0x52>
 8006872:	4b36      	ldr	r3, [pc, #216]	; (800694c <tcp_bind+0x118>)
 8006874:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006878:	4937      	ldr	r1, [pc, #220]	; (8006958 <tcp_bind+0x124>)
 800687a:	4836      	ldr	r0, [pc, #216]	; (8006954 <tcp_bind+0x120>)
 800687c:	f008 fb42 	bl	800ef04 <iprintf>
 8006880:	f06f 0305 	mvn.w	r3, #5
 8006884:	e05c      	b.n	8006940 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006886:	88fb      	ldrh	r3, [r7, #6]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800688c:	f000 f9f0 	bl	8006c70 <tcp_new_port>
 8006890:	4603      	mov	r3, r0
 8006892:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006894:	88fb      	ldrh	r3, [r7, #6]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d135      	bne.n	8006906 <tcp_bind+0xd2>
      return ERR_BUF;
 800689a:	f06f 0301 	mvn.w	r3, #1
 800689e:	e04f      	b.n	8006940 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	e02b      	b.n	80068fe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80068a6:	4a2d      	ldr	r2, [pc, #180]	; (800695c <tcp_bind+0x128>)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	e01e      	b.n	80068f2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	8adb      	ldrh	r3, [r3, #22]
 80068b8:	88fa      	ldrh	r2, [r7, #6]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d116      	bne.n	80068ec <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80068be:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d010      	beq.n	80068e6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00c      	beq.n	80068e6 <tcp_bind+0xb2>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d009      	beq.n	80068e6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d102      	bne.n	80068ec <tcp_bind+0xb8>
              return ERR_USE;
 80068e6:	f06f 0307 	mvn.w	r3, #7
 80068ea:	e029      	b.n	8006940 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1dd      	bne.n	80068b4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	3301      	adds	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	429a      	cmp	r2, r3
 8006904:	dbcf      	blt.n	80068a6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00c      	beq.n	8006926 <tcp_bind+0xf2>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <tcp_bind+0xec>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	e000      	b.n	8006922 <tcp_bind+0xee>
 8006920:	2300      	movs	r3, #0
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800692c:	4b0c      	ldr	r3, [pc, #48]	; (8006960 <tcp_bind+0x12c>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	60da      	str	r2, [r3, #12]
 8006934:	4a0a      	ldr	r2, [pc, #40]	; (8006960 <tcp_bind+0x12c>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	f005 fccf 	bl	800c2dc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	080139ac 	.word	0x080139ac
 800694c:	08010cec 	.word	0x08010cec
 8006950:	08010e80 	.word	0x08010e80
 8006954:	08010d30 	.word	0x08010d30
 8006958:	08010e98 	.word	0x08010e98
 800695c:	08013984 	.word	0x08013984
 8006960:	2000868c 	.word	0x2000868c

08006964 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	4613      	mov	r3, r2
 8006970:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <tcp_accept_null+0x22>
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <tcp_accept_null+0x34>)
 800697a:	f240 320f 	movw	r2, #783	; 0x30f
 800697e:	4907      	ldr	r1, [pc, #28]	; (800699c <tcp_accept_null+0x38>)
 8006980:	4807      	ldr	r0, [pc, #28]	; (80069a0 <tcp_accept_null+0x3c>)
 8006982:	f008 fabf 	bl	800ef04 <iprintf>

  tcp_abort(pcb);
 8006986:	68b8      	ldr	r0, [r7, #8]
 8006988:	f7ff ff48 	bl	800681c <tcp_abort>

  return ERR_ABRT;
 800698c:	f06f 030c 	mvn.w	r3, #12
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	08010cec 	.word	0x08010cec
 800699c:	08010ec0 	.word	0x08010ec0
 80069a0:	08010d30 	.word	0x08010d30

080069a4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	2200      	movs	r2, #0
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f806 	bl	80069c8 <tcp_listen_with_backlog_and_err>
 80069bc:	4603      	mov	r3, r0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	460b      	mov	r3, r1
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <tcp_listen_with_backlog_and_err+0x2c>
 80069e0:	4b47      	ldr	r3, [pc, #284]	; (8006b00 <tcp_listen_with_backlog_and_err+0x138>)
 80069e2:	f240 3259 	movw	r2, #857	; 0x359
 80069e6:	4947      	ldr	r1, [pc, #284]	; (8006b04 <tcp_listen_with_backlog_and_err+0x13c>)
 80069e8:	4847      	ldr	r0, [pc, #284]	; (8006b08 <tcp_listen_with_backlog_and_err+0x140>)
 80069ea:	f008 fa8b 	bl	800ef04 <iprintf>
 80069ee:	23f0      	movs	r3, #240	; 0xf0
 80069f0:	76fb      	strb	r3, [r7, #27]
 80069f2:	e079      	b.n	8006ae8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	7d1b      	ldrb	r3, [r3, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <tcp_listen_with_backlog_and_err+0x48>
 80069fc:	4b40      	ldr	r3, [pc, #256]	; (8006b00 <tcp_listen_with_backlog_and_err+0x138>)
 80069fe:	f240 325a 	movw	r2, #858	; 0x35a
 8006a02:	4942      	ldr	r1, [pc, #264]	; (8006b0c <tcp_listen_with_backlog_and_err+0x144>)
 8006a04:	4840      	ldr	r0, [pc, #256]	; (8006b08 <tcp_listen_with_backlog_and_err+0x140>)
 8006a06:	f008 fa7d 	bl	800ef04 <iprintf>
 8006a0a:	23f1      	movs	r3, #241	; 0xf1
 8006a0c:	76fb      	strb	r3, [r7, #27]
 8006a0e:	e06b      	b.n	8006ae8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	7d1b      	ldrb	r3, [r3, #20]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d104      	bne.n	8006a22 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006a1c:	23f7      	movs	r3, #247	; 0xf7
 8006a1e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006a20:	e062      	b.n	8006ae8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006a22:	2002      	movs	r0, #2
 8006a24:	f7fe fa8c 	bl	8004f40 <memp_malloc>
 8006a28:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006a30:	23ff      	movs	r3, #255	; 0xff
 8006a32:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006a34:	e058      	b.n	8006ae8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8ada      	ldrh	r2, [r3, #22]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	7d5a      	ldrb	r2, [r3, #21]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	7a5a      	ldrb	r2, [r3, #9]
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	7ada      	ldrb	r2, [r3, #11]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	7a9a      	ldrb	r2, [r3, #10]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8adb      	ldrh	r3, [r3, #22]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d021      	beq.n	8006ac6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006a82:	4b23      	ldr	r3, [pc, #140]	; (8006b10 <tcp_listen_with_backlog_and_err+0x148>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d105      	bne.n	8006a98 <tcp_listen_with_backlog_and_err+0xd0>
 8006a8c:	4b20      	ldr	r3, [pc, #128]	; (8006b10 <tcp_listen_with_backlog_and_err+0x148>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <tcp_listen_with_backlog_and_err+0x148>)
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e013      	b.n	8006ac0 <tcp_listen_with_backlog_and_err+0xf8>
 8006a98:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <tcp_listen_with_backlog_and_err+0x148>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e00c      	b.n	8006aba <tcp_listen_with_backlog_and_err+0xf2>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d104      	bne.n	8006ab4 <tcp_listen_with_backlog_and_err+0xec>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	60da      	str	r2, [r3, #12]
 8006ab2:	e005      	b.n	8006ac0 <tcp_listen_with_backlog_and_err+0xf8>
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1ef      	bne.n	8006aa0 <tcp_listen_with_backlog_and_err+0xd8>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff fbc0 	bl	800624c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4a11      	ldr	r2, [pc, #68]	; (8006b14 <tcp_listen_with_backlog_and_err+0x14c>)
 8006ad0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006ad2:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <tcp_listen_with_backlog_and_err+0x150>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	4a0f      	ldr	r2, [pc, #60]	; (8006b18 <tcp_listen_with_backlog_and_err+0x150>)
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	f005 fbfc 	bl	800c2dc <tcp_timer_needed>
  res = ERR_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	7efa      	ldrb	r2, [r7, #27]
 8006af2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006af4:	69fb      	ldr	r3, [r7, #28]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3720      	adds	r7, #32
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	08010cec 	.word	0x08010cec
 8006b04:	08010ee0 	.word	0x08010ee0
 8006b08:	08010d30 	.word	0x08010d30
 8006b0c:	08010f10 	.word	0x08010f10
 8006b10:	2000868c 	.word	0x2000868c
 8006b14:	08006965 	.word	0x08006965
 8006b18:	20008690 	.word	0x20008690

08006b1c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <tcp_update_rcv_ann_wnd+0x1c>
 8006b2a:	4b25      	ldr	r3, [pc, #148]	; (8006bc0 <tcp_update_rcv_ann_wnd+0xa4>)
 8006b2c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006b30:	4924      	ldr	r1, [pc, #144]	; (8006bc4 <tcp_update_rcv_ann_wnd+0xa8>)
 8006b32:	4825      	ldr	r0, [pc, #148]	; (8006bc8 <tcp_update_rcv_ann_wnd+0xac>)
 8006b34:	f008 f9e6 	bl	800ef04 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006b40:	4413      	add	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006b4c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006b50:	bf28      	it	cs
 8006b52:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006b56:	b292      	uxth	r2, r2
 8006b58:	4413      	add	r3, r2
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	db08      	blt.n	8006b74 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	e020      	b.n	8006bb6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dd03      	ble.n	8006b8a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b88:	e014      	b.n	8006bb4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9c:	d306      	bcc.n	8006bac <tcp_update_rcv_ann_wnd+0x90>
 8006b9e:	4b08      	ldr	r3, [pc, #32]	; (8006bc0 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ba0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006ba4:	4909      	ldr	r1, [pc, #36]	; (8006bcc <tcp_update_rcv_ann_wnd+0xb0>)
 8006ba6:	4808      	ldr	r0, [pc, #32]	; (8006bc8 <tcp_update_rcv_ann_wnd+0xac>)
 8006ba8:	f008 f9ac 	bl	800ef04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006bb4:	2300      	movs	r3, #0
  }
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08010cec 	.word	0x08010cec
 8006bc4:	08010f48 	.word	0x08010f48
 8006bc8:	08010d30 	.word	0x08010d30
 8006bcc:	08010f6c 	.word	0x08010f6c

08006bd0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d107      	bne.n	8006bf2 <tcp_recved+0x22>
 8006be2:	4b1f      	ldr	r3, [pc, #124]	; (8006c60 <tcp_recved+0x90>)
 8006be4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006be8:	491e      	ldr	r1, [pc, #120]	; (8006c64 <tcp_recved+0x94>)
 8006bea:	481f      	ldr	r0, [pc, #124]	; (8006c68 <tcp_recved+0x98>)
 8006bec:	f008 f98a 	bl	800ef04 <iprintf>
 8006bf0:	e032      	b.n	8006c58 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7d1b      	ldrb	r3, [r3, #20]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d106      	bne.n	8006c08 <tcp_recved+0x38>
 8006bfa:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <tcp_recved+0x90>)
 8006bfc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006c00:	491a      	ldr	r1, [pc, #104]	; (8006c6c <tcp_recved+0x9c>)
 8006c02:	4819      	ldr	r0, [pc, #100]	; (8006c68 <tcp_recved+0x98>)
 8006c04:	f008 f97e 	bl	800ef04 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006c0c:	887b      	ldrh	r3, [r7, #2]
 8006c0e:	4413      	add	r3, r2
 8006c10:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006c12:	89fb      	ldrh	r3, [r7, #14]
 8006c14:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006c18:	d804      	bhi.n	8006c24 <tcp_recved+0x54>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1e:	89fa      	ldrh	r2, [r7, #14]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d204      	bcs.n	8006c2e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006c2a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c2c:	e002      	b.n	8006c34 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	89fa      	ldrh	r2, [r7, #14]
 8006c32:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff ff71 	bl	8006b1c <tcp_update_rcv_ann_wnd>
 8006c3a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006c42:	d309      	bcc.n	8006c58 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8b5b      	ldrh	r3, [r3, #26]
 8006c48:	f043 0302 	orr.w	r3, r3, #2
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f004 fbcc 	bl	800b3f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	08010cec 	.word	0x08010cec
 8006c64:	08010f88 	.word	0x08010f88
 8006c68:	08010d30 	.word	0x08010d30
 8006c6c:	08010fa0 	.word	0x08010fa0

08006c70 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <tcp_new_port+0x84>)
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	4b1c      	ldr	r3, [pc, #112]	; (8006cf4 <tcp_new_port+0x84>)
 8006c84:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006c86:	4b1b      	ldr	r3, [pc, #108]	; (8006cf4 <tcp_new_port+0x84>)
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d103      	bne.n	8006c9a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006c92:	4b18      	ldr	r3, [pc, #96]	; (8006cf4 <tcp_new_port+0x84>)
 8006c94:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006c98:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	71fb      	strb	r3, [r7, #7]
 8006c9e:	e01e      	b.n	8006cde <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	4a15      	ldr	r2, [pc, #84]	; (8006cf8 <tcp_new_port+0x88>)
 8006ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	e011      	b.n	8006cd2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	8ada      	ldrh	r2, [r3, #22]
 8006cb2:	4b10      	ldr	r3, [pc, #64]	; (8006cf4 <tcp_new_port+0x84>)
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d108      	bne.n	8006ccc <tcp_new_port+0x5c>
        n++;
 8006cba:	88bb      	ldrh	r3, [r7, #4]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006cc0:	88bb      	ldrh	r3, [r7, #4]
 8006cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cc6:	d3d8      	bcc.n	8006c7a <tcp_new_port+0xa>
          return 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e00d      	b.n	8006ce8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1ea      	bne.n	8006cae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	71fb      	strb	r3, [r7, #7]
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d9dd      	bls.n	8006ca0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006ce4:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <tcp_new_port+0x84>)
 8006ce6:	881b      	ldrh	r3, [r3, #0]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	20000020 	.word	0x20000020
 8006cf8:	08013984 	.word	0x08013984

08006cfc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006cfc:	b5b0      	push	{r4, r5, r7, lr}
 8006cfe:	b090      	sub	sp, #64	; 0x40
 8006d00:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006d08:	4b94      	ldr	r3, [pc, #592]	; (8006f5c <tcp_slowtmr+0x260>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	4a93      	ldr	r2, [pc, #588]	; (8006f5c <tcp_slowtmr+0x260>)
 8006d10:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006d12:	4b93      	ldr	r3, [pc, #588]	; (8006f60 <tcp_slowtmr+0x264>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	3301      	adds	r3, #1
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	4b91      	ldr	r3, [pc, #580]	; (8006f60 <tcp_slowtmr+0x264>)
 8006d1c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006d22:	4b90      	ldr	r3, [pc, #576]	; (8006f64 <tcp_slowtmr+0x268>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006d28:	e29d      	b.n	8007266 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	7d1b      	ldrb	r3, [r3, #20]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <tcp_slowtmr+0x44>
 8006d32:	4b8d      	ldr	r3, [pc, #564]	; (8006f68 <tcp_slowtmr+0x26c>)
 8006d34:	f240 42be 	movw	r2, #1214	; 0x4be
 8006d38:	498c      	ldr	r1, [pc, #560]	; (8006f6c <tcp_slowtmr+0x270>)
 8006d3a:	488d      	ldr	r0, [pc, #564]	; (8006f70 <tcp_slowtmr+0x274>)
 8006d3c:	f008 f8e2 	bl	800ef04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	7d1b      	ldrb	r3, [r3, #20]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d106      	bne.n	8006d56 <tcp_slowtmr+0x5a>
 8006d48:	4b87      	ldr	r3, [pc, #540]	; (8006f68 <tcp_slowtmr+0x26c>)
 8006d4a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006d4e:	4989      	ldr	r1, [pc, #548]	; (8006f74 <tcp_slowtmr+0x278>)
 8006d50:	4887      	ldr	r0, [pc, #540]	; (8006f70 <tcp_slowtmr+0x274>)
 8006d52:	f008 f8d7 	bl	800ef04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	7d1b      	ldrb	r3, [r3, #20]
 8006d5a:	2b0a      	cmp	r3, #10
 8006d5c:	d106      	bne.n	8006d6c <tcp_slowtmr+0x70>
 8006d5e:	4b82      	ldr	r3, [pc, #520]	; (8006f68 <tcp_slowtmr+0x26c>)
 8006d60:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006d64:	4984      	ldr	r1, [pc, #528]	; (8006f78 <tcp_slowtmr+0x27c>)
 8006d66:	4882      	ldr	r0, [pc, #520]	; (8006f70 <tcp_slowtmr+0x274>)
 8006d68:	f008 f8cc 	bl	800ef04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	7f9a      	ldrb	r2, [r3, #30]
 8006d70:	4b7b      	ldr	r3, [pc, #492]	; (8006f60 <tcp_slowtmr+0x264>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d105      	bne.n	8006d84 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006d82:	e270      	b.n	8007266 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006d84:	4b76      	ldr	r3, [pc, #472]	; (8006f60 <tcp_slowtmr+0x264>)
 8006d86:	781a      	ldrb	r2, [r3, #0]
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	7d1b      	ldrb	r3, [r3, #20]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d10a      	bne.n	8006db6 <tcp_slowtmr+0xba>
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d905      	bls.n	8006db6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dae:	3301      	adds	r3, #1
 8006db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006db4:	e11e      	b.n	8006ff4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dbc:	2b0b      	cmp	r3, #11
 8006dbe:	d905      	bls.n	8006dcc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dca:	e113      	b.n	8006ff4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d075      	beq.n	8006ec2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <tcp_slowtmr+0xf0>
 8006dde:	4b62      	ldr	r3, [pc, #392]	; (8006f68 <tcp_slowtmr+0x26c>)
 8006de0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006de4:	4965      	ldr	r1, [pc, #404]	; (8006f7c <tcp_slowtmr+0x280>)
 8006de6:	4862      	ldr	r0, [pc, #392]	; (8006f70 <tcp_slowtmr+0x274>)
 8006de8:	f008 f88c 	bl	800ef04 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d106      	bne.n	8006e02 <tcp_slowtmr+0x106>
 8006df4:	4b5c      	ldr	r3, [pc, #368]	; (8006f68 <tcp_slowtmr+0x26c>)
 8006df6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006dfa:	4961      	ldr	r1, [pc, #388]	; (8006f80 <tcp_slowtmr+0x284>)
 8006dfc:	485c      	ldr	r0, [pc, #368]	; (8006f70 <tcp_slowtmr+0x274>)
 8006dfe:	f008 f881 	bl	800ef04 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006e08:	2b0b      	cmp	r3, #11
 8006e0a:	d905      	bls.n	8006e18 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e10:	3301      	adds	r3, #1
 8006e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e16:	e0ed      	b.n	8006ff4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	4a58      	ldr	r2, [pc, #352]	; (8006f84 <tcp_slowtmr+0x288>)
 8006e22:	5cd3      	ldrb	r3, [r2, r3]
 8006e24:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e2c:	7c7a      	ldrb	r2, [r7, #17]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d907      	bls.n	8006e42 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e38:	3301      	adds	r3, #1
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e48:	7c7a      	ldrb	r2, [r7, #17]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	f200 80d2 	bhi.w	8006ff4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006e50:	2301      	movs	r3, #1
 8006e52:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d108      	bne.n	8006e70 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e60:	f005 f96e 	bl	800c140 <tcp_zero_window_probe>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d014      	beq.n	8006e94 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	623b      	str	r3, [r7, #32]
 8006e6e:	e011      	b.n	8006e94 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e76:	4619      	mov	r1, r3
 8006e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e7a:	f004 f833 	bl	800aee4 <tcp_split_unsent_seg>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d107      	bne.n	8006e94 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e86:	f004 fab3 	bl	800b3f0 <tcp_output>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80ac 	beq.w	8006ff4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	f200 80a2 	bhi.w	8006ff4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006ec0:	e098      	b.n	8006ff4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	db0f      	blt.n	8006eec <tcp_slowtmr+0x1f0>
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ed2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d008      	beq.n	8006eec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	b21a      	sxth	r2, r3
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	db7b      	blt.n	8006ff4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006efe:	f004 fd69 	bl	800b9d4 <tcp_rexmit_rto_prepare>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <tcp_slowtmr+0x21c>
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d171      	bne.n	8006ff4 <tcp_slowtmr+0x2f8>
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d06d      	beq.n	8006ff4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	7d1b      	ldrb	r3, [r3, #20]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d03a      	beq.n	8006f96 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f26:	2b0c      	cmp	r3, #12
 8006f28:	bf28      	it	cs
 8006f2a:	230c      	movcs	r3, #12
 8006f2c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006f34:	10db      	asrs	r3, r3, #3
 8006f36:	b21b      	sxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006f40:	4413      	add	r3, r2
 8006f42:	7efa      	ldrb	r2, [r7, #27]
 8006f44:	4910      	ldr	r1, [pc, #64]	; (8006f88 <tcp_slowtmr+0x28c>)
 8006f46:	5c8a      	ldrb	r2, [r1, r2]
 8006f48:	4093      	lsls	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006f52:	4293      	cmp	r3, r2
 8006f54:	dc1a      	bgt.n	8006f8c <tcp_slowtmr+0x290>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	b21a      	sxth	r2, r3
 8006f5a:	e019      	b.n	8006f90 <tcp_slowtmr+0x294>
 8006f5c:	20008688 	.word	0x20008688
 8006f60:	2000869e 	.word	0x2000869e
 8006f64:	20008694 	.word	0x20008694
 8006f68:	08010cec 	.word	0x08010cec
 8006f6c:	08011030 	.word	0x08011030
 8006f70:	08010d30 	.word	0x08010d30
 8006f74:	0801105c 	.word	0x0801105c
 8006f78:	08011088 	.word	0x08011088
 8006f7c:	080110b8 	.word	0x080110b8
 8006f80:	080110ec 	.word	0x080110ec
 8006f84:	0801397c 	.word	0x0801397c
 8006f88:	0801396c 	.word	0x0801396c
 8006f8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2200      	movs	r2, #0
 8006f9a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	bf28      	it	cs
 8006fac:	4613      	movcs	r3, r2
 8006fae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006fb0:	8a7b      	ldrh	r3, [r7, #18]
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d206      	bcs.n	8006fdc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ff0:	f004 fd60 	bl	800bab4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff6:	7d1b      	ldrb	r3, [r3, #20]
 8006ff8:	2b06      	cmp	r3, #6
 8006ffa:	d111      	bne.n	8007020 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	8b5b      	ldrh	r3, [r3, #26]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00b      	beq.n	8007020 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007008:	4b9c      	ldr	r3, [pc, #624]	; (800727c <tcp_slowtmr+0x580>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b28      	cmp	r3, #40	; 0x28
 8007014:	d904      	bls.n	8007020 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800701a:	3301      	adds	r3, #1
 800701c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	7a5b      	ldrb	r3, [r3, #9]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d04a      	beq.n	80070c2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007030:	2b04      	cmp	r3, #4
 8007032:	d003      	beq.n	800703c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007038:	2b07      	cmp	r3, #7
 800703a:	d142      	bne.n	80070c2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800703c:	4b8f      	ldr	r3, [pc, #572]	; (800727c <tcp_slowtmr+0x580>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800704c:	4b8c      	ldr	r3, [pc, #560]	; (8007280 <tcp_slowtmr+0x584>)
 800704e:	440b      	add	r3, r1
 8007050:	498c      	ldr	r1, [pc, #560]	; (8007284 <tcp_slowtmr+0x588>)
 8007052:	fba1 1303 	umull	r1, r3, r1, r3
 8007056:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007058:	429a      	cmp	r2, r3
 800705a:	d90a      	bls.n	8007072 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800705c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007060:	3301      	adds	r3, #1
 8007062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800706a:	3301      	adds	r3, #1
 800706c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007070:	e027      	b.n	80070c2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007072:	4b82      	ldr	r3, [pc, #520]	; (800727c <tcp_slowtmr+0x580>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007088:	4618      	mov	r0, r3
 800708a:	4b7f      	ldr	r3, [pc, #508]	; (8007288 <tcp_slowtmr+0x58c>)
 800708c:	fb00 f303 	mul.w	r3, r0, r3
 8007090:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007092:	497c      	ldr	r1, [pc, #496]	; (8007284 <tcp_slowtmr+0x588>)
 8007094:	fba1 1303 	umull	r1, r3, r1, r3
 8007098:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800709a:	429a      	cmp	r2, r3
 800709c:	d911      	bls.n	80070c2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800709e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a0:	f005 f80e 	bl	800c0c0 <tcp_keepalive>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80070aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d107      	bne.n	80070c2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80070b8:	3301      	adds	r3, #1
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d011      	beq.n	80070ee <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80070ca:	4b6c      	ldr	r3, [pc, #432]	; (800727c <tcp_slowtmr+0x580>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	1ad2      	subs	r2, r2, r3
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80070da:	4619      	mov	r1, r3
 80070dc:	460b      	mov	r3, r1
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	440b      	add	r3, r1
 80070e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d302      	bcc.n	80070ee <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80070e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ea:	f000 fec9 	bl	8007e80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	7d1b      	ldrb	r3, [r3, #20]
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d10b      	bne.n	800710e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80070f6:	4b61      	ldr	r3, [pc, #388]	; (800727c <tcp_slowtmr+0x580>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b28      	cmp	r3, #40	; 0x28
 8007102:	d904      	bls.n	800710e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007108:	3301      	adds	r3, #1
 800710a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	7d1b      	ldrb	r3, [r3, #20]
 8007112:	2b09      	cmp	r3, #9
 8007114:	d10b      	bne.n	800712e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007116:	4b59      	ldr	r3, [pc, #356]	; (800727c <tcp_slowtmr+0x580>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2bf0      	cmp	r3, #240	; 0xf0
 8007122:	d904      	bls.n	800712e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007128:	3301      	adds	r3, #1
 800712a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800712e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007132:	2b00      	cmp	r3, #0
 8007134:	d060      	beq.n	80071f8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800713e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007140:	f000 fcea 	bl	8007b18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d010      	beq.n	800716c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800714a:	4b50      	ldr	r3, [pc, #320]	; (800728c <tcp_slowtmr+0x590>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007150:	429a      	cmp	r2, r3
 8007152:	d106      	bne.n	8007162 <tcp_slowtmr+0x466>
 8007154:	4b4e      	ldr	r3, [pc, #312]	; (8007290 <tcp_slowtmr+0x594>)
 8007156:	f240 526d 	movw	r2, #1389	; 0x56d
 800715a:	494e      	ldr	r1, [pc, #312]	; (8007294 <tcp_slowtmr+0x598>)
 800715c:	484e      	ldr	r0, [pc, #312]	; (8007298 <tcp_slowtmr+0x59c>)
 800715e:	f007 fed1 	bl	800ef04 <iprintf>
        prev->next = pcb->next;
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	60da      	str	r2, [r3, #12]
 800716a:	e00f      	b.n	800718c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800716c:	4b47      	ldr	r3, [pc, #284]	; (800728c <tcp_slowtmr+0x590>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007172:	429a      	cmp	r2, r3
 8007174:	d006      	beq.n	8007184 <tcp_slowtmr+0x488>
 8007176:	4b46      	ldr	r3, [pc, #280]	; (8007290 <tcp_slowtmr+0x594>)
 8007178:	f240 5271 	movw	r2, #1393	; 0x571
 800717c:	4947      	ldr	r1, [pc, #284]	; (800729c <tcp_slowtmr+0x5a0>)
 800717e:	4846      	ldr	r0, [pc, #280]	; (8007298 <tcp_slowtmr+0x59c>)
 8007180:	f007 fec0 	bl	800ef04 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4a40      	ldr	r2, [pc, #256]	; (800728c <tcp_slowtmr+0x590>)
 800718a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800718c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007190:	2b00      	cmp	r3, #0
 8007192:	d013      	beq.n	80071bc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800719c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	3304      	adds	r3, #4
 80071a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a4:	8ad2      	ldrh	r2, [r2, #22]
 80071a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071a8:	8b09      	ldrh	r1, [r1, #24]
 80071aa:	9102      	str	r1, [sp, #8]
 80071ac:	9201      	str	r2, [sp, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	462b      	mov	r3, r5
 80071b2:	4622      	mov	r2, r4
 80071b4:	4601      	mov	r1, r0
 80071b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071b8:	f004 fece 	bl	800bf58 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80071c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c4:	7d1b      	ldrb	r3, [r3, #20]
 80071c6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80071d2:	6838      	ldr	r0, [r7, #0]
 80071d4:	f7ff f83a 	bl	800624c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80071d8:	4b31      	ldr	r3, [pc, #196]	; (80072a0 <tcp_slowtmr+0x5a4>)
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <tcp_slowtmr+0x4f2>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f06f 010c 	mvn.w	r1, #12
 80071ea:	68b8      	ldr	r0, [r7, #8]
 80071ec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80071ee:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <tcp_slowtmr+0x5a4>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d037      	beq.n	8007266 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80071f6:	e592      	b.n	8006d1e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	7f1b      	ldrb	r3, [r3, #28]
 8007206:	3301      	adds	r3, #1
 8007208:	b2da      	uxtb	r2, r3
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	7f1a      	ldrb	r2, [r3, #28]
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	7f5b      	ldrb	r3, [r3, #29]
 8007216:	429a      	cmp	r2, r3
 8007218:	d325      	bcc.n	8007266 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007220:	4b1f      	ldr	r3, [pc, #124]	; (80072a0 <tcp_slowtmr+0x5a4>)
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <tcp_slowtmr+0x54c>
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007238:	6912      	ldr	r2, [r2, #16]
 800723a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	4603      	mov	r3, r0
 8007242:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007246:	e002      	b.n	800724e <tcp_slowtmr+0x552>
 8007248:	2300      	movs	r3, #0
 800724a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <tcp_slowtmr+0x5a4>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d000      	beq.n	8007258 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007256:	e562      	b.n	8006d1e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007258:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007262:	f004 f8c5 	bl	800b3f0 <tcp_output>
  while (pcb != NULL) {
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	2b00      	cmp	r3, #0
 800726a:	f47f ad5e 	bne.w	8006d2a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800726e:	2300      	movs	r3, #0
 8007270:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <tcp_slowtmr+0x5a8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007278:	e069      	b.n	800734e <tcp_slowtmr+0x652>
 800727a:	bf00      	nop
 800727c:	20008688 	.word	0x20008688
 8007280:	000a4cb8 	.word	0x000a4cb8
 8007284:	10624dd3 	.word	0x10624dd3
 8007288:	000124f8 	.word	0x000124f8
 800728c:	20008694 	.word	0x20008694
 8007290:	08010cec 	.word	0x08010cec
 8007294:	08011124 	.word	0x08011124
 8007298:	08010d30 	.word	0x08010d30
 800729c:	08011150 	.word	0x08011150
 80072a0:	2000869c 	.word	0x2000869c
 80072a4:	20008698 	.word	0x20008698
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	7d1b      	ldrb	r3, [r3, #20]
 80072ac:	2b0a      	cmp	r3, #10
 80072ae:	d006      	beq.n	80072be <tcp_slowtmr+0x5c2>
 80072b0:	4b2b      	ldr	r3, [pc, #172]	; (8007360 <tcp_slowtmr+0x664>)
 80072b2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80072b6:	492b      	ldr	r1, [pc, #172]	; (8007364 <tcp_slowtmr+0x668>)
 80072b8:	482b      	ldr	r0, [pc, #172]	; (8007368 <tcp_slowtmr+0x66c>)
 80072ba:	f007 fe23 	bl	800ef04 <iprintf>
    pcb_remove = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <tcp_slowtmr+0x670>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2bf0      	cmp	r3, #240	; 0xf0
 80072d0:	d904      	bls.n	80072dc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80072d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d6:	3301      	adds	r3, #1
 80072d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80072dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d02f      	beq.n	8007344 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80072e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e6:	f000 fc17 	bl	8007b18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d010      	beq.n	8007312 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80072f0:	4b1f      	ldr	r3, [pc, #124]	; (8007370 <tcp_slowtmr+0x674>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d106      	bne.n	8007308 <tcp_slowtmr+0x60c>
 80072fa:	4b19      	ldr	r3, [pc, #100]	; (8007360 <tcp_slowtmr+0x664>)
 80072fc:	f240 52af 	movw	r2, #1455	; 0x5af
 8007300:	491c      	ldr	r1, [pc, #112]	; (8007374 <tcp_slowtmr+0x678>)
 8007302:	4819      	ldr	r0, [pc, #100]	; (8007368 <tcp_slowtmr+0x66c>)
 8007304:	f007 fdfe 	bl	800ef04 <iprintf>
        prev->next = pcb->next;
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	60da      	str	r2, [r3, #12]
 8007310:	e00f      	b.n	8007332 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007312:	4b17      	ldr	r3, [pc, #92]	; (8007370 <tcp_slowtmr+0x674>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007318:	429a      	cmp	r2, r3
 800731a:	d006      	beq.n	800732a <tcp_slowtmr+0x62e>
 800731c:	4b10      	ldr	r3, [pc, #64]	; (8007360 <tcp_slowtmr+0x664>)
 800731e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007322:	4915      	ldr	r1, [pc, #84]	; (8007378 <tcp_slowtmr+0x67c>)
 8007324:	4810      	ldr	r0, [pc, #64]	; (8007368 <tcp_slowtmr+0x66c>)
 8007326:	f007 fded 	bl	800ef04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	4a10      	ldr	r2, [pc, #64]	; (8007370 <tcp_slowtmr+0x674>)
 8007330:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800733c:	69f8      	ldr	r0, [r7, #28]
 800733e:	f7fe ff85 	bl	800624c <tcp_free>
 8007342:	e004      	b.n	800734e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1a9      	bne.n	80072a8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3730      	adds	r7, #48	; 0x30
 800735a:	46bd      	mov	sp, r7
 800735c:	bdb0      	pop	{r4, r5, r7, pc}
 800735e:	bf00      	nop
 8007360:	08010cec 	.word	0x08010cec
 8007364:	0801117c 	.word	0x0801117c
 8007368:	08010d30 	.word	0x08010d30
 800736c:	20008688 	.word	0x20008688
 8007370:	20008698 	.word	0x20008698
 8007374:	080111ac 	.word	0x080111ac
 8007378:	080111d4 	.word	0x080111d4

0800737c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007382:	4b2d      	ldr	r3, [pc, #180]	; (8007438 <tcp_fasttmr+0xbc>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	3301      	adds	r3, #1
 8007388:	b2da      	uxtb	r2, r3
 800738a:	4b2b      	ldr	r3, [pc, #172]	; (8007438 <tcp_fasttmr+0xbc>)
 800738c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800738e:	4b2b      	ldr	r3, [pc, #172]	; (800743c <tcp_fasttmr+0xc0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007394:	e048      	b.n	8007428 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7f9a      	ldrb	r2, [r3, #30]
 800739a:	4b27      	ldr	r3, [pc, #156]	; (8007438 <tcp_fasttmr+0xbc>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d03f      	beq.n	8007422 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80073a2:	4b25      	ldr	r3, [pc, #148]	; (8007438 <tcp_fasttmr+0xbc>)
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	8b5b      	ldrh	r3, [r3, #26]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d010      	beq.n	80073d8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	8b5b      	ldrh	r3, [r3, #26]
 80073ba:	f043 0302 	orr.w	r3, r3, #2
 80073be:	b29a      	uxth	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f004 f813 	bl	800b3f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	8b5b      	ldrh	r3, [r3, #26]
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8b5b      	ldrh	r3, [r3, #26]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d009      	beq.n	80073f8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8b5b      	ldrh	r3, [r3, #26]
 80073e8:	f023 0308 	bic.w	r3, r3, #8
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff f8be 	bl	8006574 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007406:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <tcp_fasttmr+0xc4>)
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f819 	bl	8007444 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007412:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <tcp_fasttmr+0xc4>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d000      	beq.n	800741c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800741a:	e7b8      	b.n	800738e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	607b      	str	r3, [r7, #4]
 8007420:	e002      	b.n	8007428 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1b3      	bne.n	8007396 <tcp_fasttmr+0x1a>
    }
  }
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	2000869e 	.word	0x2000869e
 800743c:	20008694 	.word	0x20008694
 8007440:	2000869c 	.word	0x2000869c

08007444 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007444:	b590      	push	{r4, r7, lr}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <tcp_process_refused_data+0x22>
 8007452:	4b37      	ldr	r3, [pc, #220]	; (8007530 <tcp_process_refused_data+0xec>)
 8007454:	f240 6209 	movw	r2, #1545	; 0x609
 8007458:	4936      	ldr	r1, [pc, #216]	; (8007534 <tcp_process_refused_data+0xf0>)
 800745a:	4837      	ldr	r0, [pc, #220]	; (8007538 <tcp_process_refused_data+0xf4>)
 800745c:	f007 fd52 	bl	800ef04 <iprintf>
 8007460:	f06f 030f 	mvn.w	r3, #15
 8007464:	e060      	b.n	8007528 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746a:	7b5b      	ldrb	r3, [r3, #13]
 800746c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007472:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <tcp_process_refused_data+0x58>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6918      	ldr	r0, [r3, #16]
 800748e:	2300      	movs	r3, #0
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	47a0      	blx	r4
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
 800749a:	e007      	b.n	80074ac <tcp_process_refused_data+0x68>
 800749c:	2300      	movs	r3, #0
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	2000      	movs	r0, #0
 80074a4:	f000 f8c2 	bl	800762c <tcp_recv_null>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80074ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d12a      	bne.n	800750a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d033      	beq.n	8007526 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80074c6:	d005      	beq.n	80074d4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074cc:	3301      	adds	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <tcp_process_refused_data+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6918      	ldr	r0, [r3, #16]
 80074e8:	2300      	movs	r3, #0
 80074ea:	2200      	movs	r2, #0
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	47a0      	blx	r4
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	e001      	b.n	80074fa <tcp_process_refused_data+0xb6>
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80074fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074fe:	f113 0f0d 	cmn.w	r3, #13
 8007502:	d110      	bne.n	8007526 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007504:	f06f 030c 	mvn.w	r3, #12
 8007508:	e00e      	b.n	8007528 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800750a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800750e:	f113 0f0d 	cmn.w	r3, #13
 8007512:	d102      	bne.n	800751a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007514:	f06f 030c 	mvn.w	r3, #12
 8007518:	e006      	b.n	8007528 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007520:	f06f 0304 	mvn.w	r3, #4
 8007524:	e000      	b.n	8007528 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	bd90      	pop	{r4, r7, pc}
 8007530:	08010cec 	.word	0x08010cec
 8007534:	080111fc 	.word	0x080111fc
 8007538:	08010d30 	.word	0x08010d30

0800753c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007544:	e007      	b.n	8007556 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f80a 	bl	8007566 <tcp_seg_free>
    seg = next;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f4      	bne.n	8007546 <tcp_segs_free+0xa>
  }
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00c      	beq.n	800758e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	f7fe fbc3 	bl	8005d0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	2003      	movs	r0, #3
 800758a:	f7fd fd49 	bl	8005020 <memp_free>
  }
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <tcp_setprio+0x22>
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <tcp_setprio+0x30>)
 80075ac:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80075b0:	4906      	ldr	r1, [pc, #24]	; (80075cc <tcp_setprio+0x34>)
 80075b2:	4807      	ldr	r0, [pc, #28]	; (80075d0 <tcp_setprio+0x38>)
 80075b4:	f007 fca6 	bl	800ef04 <iprintf>
 80075b8:	e002      	b.n	80075c0 <tcp_setprio+0x28>

  pcb->prio = prio;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	755a      	strb	r2, [r3, #21]
}
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	08010cec 	.word	0x08010cec
 80075cc:	08011224 	.word	0x08011224
 80075d0:	08010d30 	.word	0x08010d30

080075d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <tcp_seg_copy+0x1c>
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <tcp_seg_copy+0x4c>)
 80075e4:	f240 6282 	movw	r2, #1666	; 0x682
 80075e8:	490e      	ldr	r1, [pc, #56]	; (8007624 <tcp_seg_copy+0x50>)
 80075ea:	480f      	ldr	r0, [pc, #60]	; (8007628 <tcp_seg_copy+0x54>)
 80075ec:	f007 fc8a 	bl	800ef04 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80075f0:	2003      	movs	r0, #3
 80075f2:	f7fd fca5 	bl	8004f40 <memp_malloc>
 80075f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <tcp_seg_copy+0x2e>
    return NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	e00a      	b.n	8007618 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007602:	2210      	movs	r2, #16
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f007 fc66 	bl	800eed8 <memcpy>
  pbuf_ref(cseg->p);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fc1b 	bl	8005e4c <pbuf_ref>
  return cseg;
 8007616:	68fb      	ldr	r3, [r7, #12]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08010cec 	.word	0x08010cec
 8007624:	08011240 	.word	0x08011240
 8007628:	08010d30 	.word	0x08010d30

0800762c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <tcp_recv_null+0x28>
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <tcp_recv_null+0x60>)
 8007642:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007646:	4912      	ldr	r1, [pc, #72]	; (8007690 <tcp_recv_null+0x64>)
 8007648:	4812      	ldr	r0, [pc, #72]	; (8007694 <tcp_recv_null+0x68>)
 800764a:	f007 fc5b 	bl	800ef04 <iprintf>
 800764e:	f06f 030f 	mvn.w	r3, #15
 8007652:	e016      	b.n	8007682 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	891b      	ldrh	r3, [r3, #8]
 800765e:	4619      	mov	r1, r3
 8007660:	68b8      	ldr	r0, [r7, #8]
 8007662:	f7ff fab5 	bl	8006bd0 <tcp_recved>
    pbuf_free(p);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fe fb50 	bl	8005d0c <pbuf_free>
 800766c:	e008      	b.n	8007680 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800766e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007676:	68b8      	ldr	r0, [r7, #8]
 8007678:	f7fe ffe6 	bl	8006648 <tcp_close>
 800767c:	4603      	mov	r3, r0
 800767e:	e000      	b.n	8007682 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	08010cec 	.word	0x08010cec
 8007690:	0801125c 	.word	0x0801125c
 8007694:	08010d30 	.word	0x08010d30

08007698 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80076a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	db01      	blt.n	80076ae <tcp_kill_prio+0x16>
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	e000      	b.n	80076b0 <tcp_kill_prio+0x18>
 80076ae:	237f      	movs	r3, #127	; 0x7f
 80076b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d034      	beq.n	8007722 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076c6:	4b19      	ldr	r3, [pc, #100]	; (800772c <tcp_kill_prio+0x94>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e01f      	b.n	800770e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	7d5b      	ldrb	r3, [r3, #21]
 80076d2:	7afa      	ldrb	r2, [r7, #11]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d80c      	bhi.n	80076f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80076dc:	7afa      	ldrb	r2, [r7, #11]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d112      	bne.n	8007708 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <tcp_kill_prio+0x98>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d80a      	bhi.n	8007708 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <tcp_kill_prio+0x98>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	7d5b      	ldrb	r3, [r3, #21]
 8007706:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1dc      	bne.n	80076ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800771a:	6938      	ldr	r0, [r7, #16]
 800771c:	f7ff f87e 	bl	800681c <tcp_abort>
 8007720:	e000      	b.n	8007724 <tcp_kill_prio+0x8c>
    return;
 8007722:	bf00      	nop
  }
}
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20008694 	.word	0x20008694
 8007730:	20008688 	.word	0x20008688

08007734 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b08      	cmp	r3, #8
 8007742:	d009      	beq.n	8007758 <tcp_kill_state+0x24>
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b09      	cmp	r3, #9
 8007748:	d006      	beq.n	8007758 <tcp_kill_state+0x24>
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <tcp_kill_state+0x80>)
 800774c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007750:	4919      	ldr	r1, [pc, #100]	; (80077b8 <tcp_kill_state+0x84>)
 8007752:	481a      	ldr	r0, [pc, #104]	; (80077bc <tcp_kill_state+0x88>)
 8007754:	f007 fbd6 	bl	800ef04 <iprintf>

  inactivity = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007760:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <tcp_kill_state+0x8c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	e017      	b.n	8007798 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	7d1b      	ldrb	r3, [r3, #20]
 800776c:	79fa      	ldrb	r2, [r7, #7]
 800776e:	429a      	cmp	r2, r3
 8007770:	d10f      	bne.n	8007792 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <tcp_kill_state+0x90>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	429a      	cmp	r2, r3
 8007780:	d807      	bhi.n	8007792 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007782:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <tcp_kill_state+0x90>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e4      	bne.n	8007768 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80077a4:	2100      	movs	r1, #0
 80077a6:	6938      	ldr	r0, [r7, #16]
 80077a8:	f7fe ff7a 	bl	80066a0 <tcp_abandon>
  }
}
 80077ac:	bf00      	nop
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	08010cec 	.word	0x08010cec
 80077b8:	08011278 	.word	0x08011278
 80077bc:	08010d30 	.word	0x08010d30
 80077c0:	20008694 	.word	0x20008694
 80077c4:	20008688 	.word	0x20008688

080077c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077d6:	4b12      	ldr	r3, [pc, #72]	; (8007820 <tcp_kill_timewait+0x58>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e012      	b.n	8007804 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80077de:	4b11      	ldr	r3, [pc, #68]	; (8007824 <tcp_kill_timewait+0x5c>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d807      	bhi.n	80077fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <tcp_kill_timewait+0x5c>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e9      	bne.n	80077de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f7ff f803 	bl	800681c <tcp_abort>
  }
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20008698 	.word	0x20008698
 8007824:	20008688 	.word	0x20008688

08007828 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800782e:	4b10      	ldr	r3, [pc, #64]	; (8007870 <tcp_handle_closepend+0x48>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007834:	e014      	b.n	8007860 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8b5b      	ldrh	r3, [r3, #26]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8b5b      	ldrh	r3, [r3, #26]
 800784c:	f023 0308 	bic.w	r3, r3, #8
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fe fe8c 	bl	8006574 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e7      	bne.n	8007836 <tcp_handle_closepend+0xe>
  }
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20008694 	.word	0x20008694

08007874 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800787e:	2001      	movs	r0, #1
 8007880:	f7fd fb5e 	bl	8004f40 <memp_malloc>
 8007884:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d126      	bne.n	80078da <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800788c:	f7ff ffcc 	bl	8007828 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007890:	f7ff ff9a 	bl	80077c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007894:	2001      	movs	r0, #1
 8007896:	f7fd fb53 	bl	8004f40 <memp_malloc>
 800789a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d11b      	bne.n	80078da <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80078a2:	2009      	movs	r0, #9
 80078a4:	f7ff ff46 	bl	8007734 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078a8:	2001      	movs	r0, #1
 80078aa:	f7fd fb49 	bl	8004f40 <memp_malloc>
 80078ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d111      	bne.n	80078da <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80078b6:	2008      	movs	r0, #8
 80078b8:	f7ff ff3c 	bl	8007734 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078bc:	2001      	movs	r0, #1
 80078be:	f7fd fb3f 	bl	8004f40 <memp_malloc>
 80078c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fee3 	bl	8007698 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078d2:	2001      	movs	r0, #1
 80078d4:	f7fd fb34 	bl	8004f40 <memp_malloc>
 80078d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d03f      	beq.n	8007960 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80078e0:	229c      	movs	r2, #156	; 0x9c
 80078e2:	2100      	movs	r1, #0
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f007 fb05 	bl	800eef4 <memset>
    pcb->prio = prio;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	79fa      	ldrb	r2, [r7, #7]
 80078ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80078f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007900:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	22ff      	movs	r2, #255	; 0xff
 800790e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007916:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2206      	movs	r2, #6
 800791c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2206      	movs	r2, #6
 8007924:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800792c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007936:	4b0d      	ldr	r3, [pc, #52]	; (800796c <tcp_alloc+0xf8>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <tcp_alloc+0xfc>)
 8007940:	781a      	ldrb	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800794c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a08      	ldr	r2, [pc, #32]	; (8007974 <tcp_alloc+0x100>)
 8007954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4a07      	ldr	r2, [pc, #28]	; (8007978 <tcp_alloc+0x104>)
 800795c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007960:	68fb      	ldr	r3, [r7, #12]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20008688 	.word	0x20008688
 8007970:	2000869e 	.word	0x2000869e
 8007974:	0800762d 	.word	0x0800762d
 8007978:	006ddd00 	.word	0x006ddd00

0800797c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8007986:	2040      	movs	r0, #64	; 0x40
 8007988:	f7ff ff74 	bl	8007874 <tcp_alloc>
 800798c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800798e:	68fb      	ldr	r3, [r7, #12]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	611a      	str	r2, [r3, #16]
  }
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
	...

080079bc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00e      	beq.n	80079ea <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7d1b      	ldrb	r3, [r3, #20]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d106      	bne.n	80079e2 <tcp_recv+0x26>
 80079d4:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <tcp_recv+0x38>)
 80079d6:	f240 72df 	movw	r2, #2015	; 0x7df
 80079da:	4907      	ldr	r1, [pc, #28]	; (80079f8 <tcp_recv+0x3c>)
 80079dc:	4807      	ldr	r0, [pc, #28]	; (80079fc <tcp_recv+0x40>)
 80079de:	f007 fa91 	bl	800ef04 <iprintf>
    pcb->recv = recv;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	08010cec 	.word	0x08010cec
 80079f8:	08011288 	.word	0x08011288
 80079fc:	08010d30 	.word	0x08010d30

08007a00 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00e      	beq.n	8007a2e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7d1b      	ldrb	r3, [r3, #20]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d106      	bne.n	8007a26 <tcp_sent+0x26>
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <tcp_sent+0x38>)
 8007a1a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007a1e:	4907      	ldr	r1, [pc, #28]	; (8007a3c <tcp_sent+0x3c>)
 8007a20:	4807      	ldr	r0, [pc, #28]	; (8007a40 <tcp_sent+0x40>)
 8007a22:	f007 fa6f 	bl	800ef04 <iprintf>
    pcb->sent = sent;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	08010cec 	.word	0x08010cec
 8007a3c:	080112b0 	.word	0x080112b0
 8007a40:	08010d30 	.word	0x08010d30

08007a44 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00e      	beq.n	8007a72 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	7d1b      	ldrb	r3, [r3, #20]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d106      	bne.n	8007a6a <tcp_err+0x26>
 8007a5c:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <tcp_err+0x38>)
 8007a5e:	f640 020d 	movw	r2, #2061	; 0x80d
 8007a62:	4907      	ldr	r1, [pc, #28]	; (8007a80 <tcp_err+0x3c>)
 8007a64:	4807      	ldr	r0, [pc, #28]	; (8007a84 <tcp_err+0x40>)
 8007a66:	f007 fa4d 	bl	800ef04 <iprintf>
    pcb->errf = err;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	08010cec 	.word	0x08010cec
 8007a80:	080112d8 	.word	0x080112d8
 8007a84:	08010d30 	.word	0x08010d30

08007a88 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d008      	beq.n	8007aaa <tcp_accept+0x22>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7d1b      	ldrb	r3, [r3, #20]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d104      	bne.n	8007aaa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	619a      	str	r2, [r3, #24]
  }
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d107      	bne.n	8007adc <tcp_poll+0x24>
 8007acc:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <tcp_poll+0x50>)
 8007ace:	f640 023d 	movw	r2, #2109	; 0x83d
 8007ad2:	490e      	ldr	r1, [pc, #56]	; (8007b0c <tcp_poll+0x54>)
 8007ad4:	480e      	ldr	r0, [pc, #56]	; (8007b10 <tcp_poll+0x58>)
 8007ad6:	f007 fa15 	bl	800ef04 <iprintf>
 8007ada:	e011      	b.n	8007b00 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	7d1b      	ldrb	r3, [r3, #20]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d106      	bne.n	8007af2 <tcp_poll+0x3a>
 8007ae4:	4b08      	ldr	r3, [pc, #32]	; (8007b08 <tcp_poll+0x50>)
 8007ae6:	f640 023e 	movw	r2, #2110	; 0x83e
 8007aea:	490a      	ldr	r1, [pc, #40]	; (8007b14 <tcp_poll+0x5c>)
 8007aec:	4808      	ldr	r0, [pc, #32]	; (8007b10 <tcp_poll+0x58>)
 8007aee:	f007 fa09 	bl	800ef04 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	79fa      	ldrb	r2, [r7, #7]
 8007afe:	775a      	strb	r2, [r3, #29]
}
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	08010cec 	.word	0x08010cec
 8007b0c:	08011300 	.word	0x08011300
 8007b10:	08010d30 	.word	0x08010d30
 8007b14:	08011318 	.word	0x08011318

08007b18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <tcp_pcb_purge+0x1e>
 8007b26:	4b21      	ldr	r3, [pc, #132]	; (8007bac <tcp_pcb_purge+0x94>)
 8007b28:	f640 0251 	movw	r2, #2129	; 0x851
 8007b2c:	4920      	ldr	r1, [pc, #128]	; (8007bb0 <tcp_pcb_purge+0x98>)
 8007b2e:	4821      	ldr	r0, [pc, #132]	; (8007bb4 <tcp_pcb_purge+0x9c>)
 8007b30:	f007 f9e8 	bl	800ef04 <iprintf>
 8007b34:	e037      	b.n	8007ba6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7d1b      	ldrb	r3, [r3, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d033      	beq.n	8007ba6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007b42:	2b0a      	cmp	r3, #10
 8007b44:	d02f      	beq.n	8007ba6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d02b      	beq.n	8007ba6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe f8d6 	bl	8005d0c <pbuf_free>
      pcb->refused_data = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f986 	bl	8007e80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fcdb 	bl	800753c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff fcd6 	bl	800753c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	66da      	str	r2, [r3, #108]	; 0x6c
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	08010cec 	.word	0x08010cec
 8007bb0:	08011338 	.word	0x08011338
 8007bb4:	08010d30 	.word	0x08010d30

08007bb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d106      	bne.n	8007bd6 <tcp_pcb_remove+0x1e>
 8007bc8:	4b3e      	ldr	r3, [pc, #248]	; (8007cc4 <tcp_pcb_remove+0x10c>)
 8007bca:	f640 0283 	movw	r2, #2179	; 0x883
 8007bce:	493e      	ldr	r1, [pc, #248]	; (8007cc8 <tcp_pcb_remove+0x110>)
 8007bd0:	483e      	ldr	r0, [pc, #248]	; (8007ccc <tcp_pcb_remove+0x114>)
 8007bd2:	f007 f997 	bl	800ef04 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <tcp_pcb_remove+0x32>
 8007bdc:	4b39      	ldr	r3, [pc, #228]	; (8007cc4 <tcp_pcb_remove+0x10c>)
 8007bde:	f640 0284 	movw	r2, #2180	; 0x884
 8007be2:	493b      	ldr	r1, [pc, #236]	; (8007cd0 <tcp_pcb_remove+0x118>)
 8007be4:	4839      	ldr	r0, [pc, #228]	; (8007ccc <tcp_pcb_remove+0x114>)
 8007be6:	f007 f98d 	bl	800ef04 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d105      	bne.n	8007c00 <tcp_pcb_remove+0x48>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e013      	b.n	8007c28 <tcp_pcb_remove+0x70>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e00c      	b.n	8007c22 <tcp_pcb_remove+0x6a>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d104      	bne.n	8007c1c <tcp_pcb_remove+0x64>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	60da      	str	r2, [r3, #12]
 8007c1a:	e005      	b.n	8007c28 <tcp_pcb_remove+0x70>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1ef      	bne.n	8007c08 <tcp_pcb_remove+0x50>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007c2e:	6838      	ldr	r0, [r7, #0]
 8007c30:	f7ff ff72 	bl	8007b18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	7d1b      	ldrb	r3, [r3, #20]
 8007c38:	2b0a      	cmp	r3, #10
 8007c3a:	d013      	beq.n	8007c64 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d00f      	beq.n	8007c64 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	8b5b      	ldrh	r3, [r3, #26]
 8007c48:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d009      	beq.n	8007c64 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	8b5b      	ldrh	r3, [r3, #26]
 8007c54:	f043 0302 	orr.w	r3, r3, #2
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007c5e:	6838      	ldr	r0, [r7, #0]
 8007c60:	f003 fbc6 	bl	800b3f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	7d1b      	ldrb	r3, [r3, #20]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d020      	beq.n	8007cae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d006      	beq.n	8007c82 <tcp_pcb_remove+0xca>
 8007c74:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <tcp_pcb_remove+0x10c>)
 8007c76:	f640 0293 	movw	r2, #2195	; 0x893
 8007c7a:	4916      	ldr	r1, [pc, #88]	; (8007cd4 <tcp_pcb_remove+0x11c>)
 8007c7c:	4813      	ldr	r0, [pc, #76]	; (8007ccc <tcp_pcb_remove+0x114>)
 8007c7e:	f007 f941 	bl	800ef04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d006      	beq.n	8007c98 <tcp_pcb_remove+0xe0>
 8007c8a:	4b0e      	ldr	r3, [pc, #56]	; (8007cc4 <tcp_pcb_remove+0x10c>)
 8007c8c:	f640 0294 	movw	r2, #2196	; 0x894
 8007c90:	4911      	ldr	r1, [pc, #68]	; (8007cd8 <tcp_pcb_remove+0x120>)
 8007c92:	480e      	ldr	r0, [pc, #56]	; (8007ccc <tcp_pcb_remove+0x114>)
 8007c94:	f007 f936 	bl	800ef04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <tcp_pcb_remove+0xf6>
 8007ca0:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <tcp_pcb_remove+0x10c>)
 8007ca2:	f640 0296 	movw	r2, #2198	; 0x896
 8007ca6:	490d      	ldr	r1, [pc, #52]	; (8007cdc <tcp_pcb_remove+0x124>)
 8007ca8:	4808      	ldr	r0, [pc, #32]	; (8007ccc <tcp_pcb_remove+0x114>)
 8007caa:	f007 f92b 	bl	800ef04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	08010cec 	.word	0x08010cec
 8007cc8:	08011354 	.word	0x08011354
 8007ccc:	08010d30 	.word	0x08010d30
 8007cd0:	08011370 	.word	0x08011370
 8007cd4:	08011390 	.word	0x08011390
 8007cd8:	080113a8 	.word	0x080113a8
 8007cdc:	080113c4 	.word	0x080113c4

08007ce0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d106      	bne.n	8007cfc <tcp_next_iss+0x1c>
 8007cee:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <tcp_next_iss+0x38>)
 8007cf0:	f640 02af 	movw	r2, #2223	; 0x8af
 8007cf4:	4909      	ldr	r1, [pc, #36]	; (8007d1c <tcp_next_iss+0x3c>)
 8007cf6:	480a      	ldr	r0, [pc, #40]	; (8007d20 <tcp_next_iss+0x40>)
 8007cf8:	f007 f904 	bl	800ef04 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007cfc:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <tcp_next_iss+0x44>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <tcp_next_iss+0x48>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4413      	add	r3, r2
 8007d06:	4a07      	ldr	r2, [pc, #28]	; (8007d24 <tcp_next_iss+0x44>)
 8007d08:	6013      	str	r3, [r2, #0]
  return iss;
 8007d0a:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <tcp_next_iss+0x44>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	08010cec 	.word	0x08010cec
 8007d1c:	080113dc 	.word	0x080113dc
 8007d20:	08010d30 	.word	0x08010d30
 8007d24:	20000024 	.word	0x20000024
 8007d28:	20008688 	.word	0x20008688

08007d2c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <tcp_eff_send_mss_netif+0x22>
 8007d40:	4b14      	ldr	r3, [pc, #80]	; (8007d94 <tcp_eff_send_mss_netif+0x68>)
 8007d42:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007d46:	4914      	ldr	r1, [pc, #80]	; (8007d98 <tcp_eff_send_mss_netif+0x6c>)
 8007d48:	4814      	ldr	r0, [pc, #80]	; (8007d9c <tcp_eff_send_mss_netif+0x70>)
 8007d4a:	f007 f8db 	bl	800ef04 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007d54:	89fb      	ldrh	r3, [r7, #14]
 8007d56:	e019      	b.n	8007d8c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d5c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007d5e:	8afb      	ldrh	r3, [r7, #22]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d012      	beq.n	8007d8a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007d64:	2328      	movs	r3, #40	; 0x28
 8007d66:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007d68:	8afa      	ldrh	r2, [r7, #22]
 8007d6a:	8abb      	ldrh	r3, [r7, #20]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d904      	bls.n	8007d7a <tcp_eff_send_mss_netif+0x4e>
 8007d70:	8afa      	ldrh	r2, [r7, #22]
 8007d72:	8abb      	ldrh	r3, [r7, #20]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	e000      	b.n	8007d7c <tcp_eff_send_mss_netif+0x50>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007d7e:	8a7a      	ldrh	r2, [r7, #18]
 8007d80:	89fb      	ldrh	r3, [r7, #14]
 8007d82:	4293      	cmp	r3, r2
 8007d84:	bf28      	it	cs
 8007d86:	4613      	movcs	r3, r2
 8007d88:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007d8a:	89fb      	ldrh	r3, [r7, #14]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	08010cec 	.word	0x08010cec
 8007d98:	080113f8 	.word	0x080113f8
 8007d9c:	08010d30 	.word	0x08010d30

08007da0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d119      	bne.n	8007de8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007db4:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007db6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007dba:	4910      	ldr	r1, [pc, #64]	; (8007dfc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007dbc:	4810      	ldr	r0, [pc, #64]	; (8007e00 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007dbe:	f007 f8a1 	bl	800ef04 <iprintf>

  while (pcb != NULL) {
 8007dc2:	e011      	b.n	8007de8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d108      	bne.n	8007de2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7fe fd20 	bl	800681c <tcp_abort>
      pcb = next;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	e002      	b.n	8007de8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1ea      	bne.n	8007dc4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007dee:	bf00      	nop
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	08010cec 	.word	0x08010cec
 8007dfc:	08011420 	.word	0x08011420
 8007e00:	08010d30 	.word	0x08010d30

08007e04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02a      	beq.n	8007e6a <tcp_netif_ip_addr_changed+0x66>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d026      	beq.n	8007e6a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007e1c:	4b15      	ldr	r3, [pc, #84]	; (8007e74 <tcp_netif_ip_addr_changed+0x70>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ffbc 	bl	8007da0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007e28:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <tcp_netif_ip_addr_changed+0x74>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff ffb6 	bl	8007da0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d017      	beq.n	8007e6a <tcp_netif_ip_addr_changed+0x66>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d013      	beq.n	8007e6a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e42:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <tcp_netif_ip_addr_changed+0x78>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	e00c      	b.n	8007e64 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d103      	bne.n	8007e5e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1ef      	bne.n	8007e4a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20008694 	.word	0x20008694
 8007e78:	2000868c 	.word	0x2000868c
 8007e7c:	20008690 	.word	0x20008690

08007e80 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff fb51 	bl	800753c <tcp_segs_free>
    pcb->ooseq = NULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007ea8:	b590      	push	{r4, r7, lr}
 8007eaa:	b08d      	sub	sp, #52	; 0x34
 8007eac:	af04      	add	r7, sp, #16
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d105      	bne.n	8007ec4 <tcp_input+0x1c>
 8007eb8:	4b9b      	ldr	r3, [pc, #620]	; (8008128 <tcp_input+0x280>)
 8007eba:	2283      	movs	r2, #131	; 0x83
 8007ebc:	499b      	ldr	r1, [pc, #620]	; (800812c <tcp_input+0x284>)
 8007ebe:	489c      	ldr	r0, [pc, #624]	; (8008130 <tcp_input+0x288>)
 8007ec0:	f007 f820 	bl	800ef04 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	4a9a      	ldr	r2, [pc, #616]	; (8008134 <tcp_input+0x28c>)
 8007eca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	895b      	ldrh	r3, [r3, #10]
 8007ed0:	2b13      	cmp	r3, #19
 8007ed2:	f240 83d1 	bls.w	8008678 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007ed6:	4b98      	ldr	r3, [pc, #608]	; (8008138 <tcp_input+0x290>)
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4a97      	ldr	r2, [pc, #604]	; (8008138 <tcp_input+0x290>)
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f006 f86f 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 83c7 	bne.w	800867c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007eee:	4b92      	ldr	r3, [pc, #584]	; (8008138 <tcp_input+0x290>)
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007ef6:	2be0      	cmp	r3, #224	; 0xe0
 8007ef8:	f000 83c0 	beq.w	800867c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007efc:	4b8d      	ldr	r3, [pc, #564]	; (8008134 <tcp_input+0x28c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	899b      	ldrh	r3, [r3, #12]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fc fb6d 	bl	80045e4 <lwip_htons>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	0b1b      	lsrs	r3, r3, #12
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007f16:	7cbb      	ldrb	r3, [r7, #18]
 8007f18:	2b13      	cmp	r3, #19
 8007f1a:	f240 83b1 	bls.w	8008680 <tcp_input+0x7d8>
 8007f1e:	7cbb      	ldrb	r3, [r7, #18]
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	891b      	ldrh	r3, [r3, #8]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	f200 83aa 	bhi.w	8008680 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007f2c:	7cbb      	ldrb	r3, [r7, #18]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b14      	subs	r3, #20
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	4b81      	ldr	r3, [pc, #516]	; (800813c <tcp_input+0x294>)
 8007f36:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007f38:	4b81      	ldr	r3, [pc, #516]	; (8008140 <tcp_input+0x298>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	895a      	ldrh	r2, [r3, #10]
 8007f42:	7cbb      	ldrb	r3, [r7, #18]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d309      	bcc.n	8007f5e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007f4a:	4b7c      	ldr	r3, [pc, #496]	; (800813c <tcp_input+0x294>)
 8007f4c:	881a      	ldrh	r2, [r3, #0]
 8007f4e:	4b7d      	ldr	r3, [pc, #500]	; (8008144 <tcp_input+0x29c>)
 8007f50:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007f52:	7cbb      	ldrb	r3, [r7, #18]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fd fe52 	bl	8005c00 <pbuf_remove_header>
 8007f5c:	e04e      	b.n	8007ffc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d105      	bne.n	8007f72 <tcp_input+0xca>
 8007f66:	4b70      	ldr	r3, [pc, #448]	; (8008128 <tcp_input+0x280>)
 8007f68:	22c2      	movs	r2, #194	; 0xc2
 8007f6a:	4977      	ldr	r1, [pc, #476]	; (8008148 <tcp_input+0x2a0>)
 8007f6c:	4870      	ldr	r0, [pc, #448]	; (8008130 <tcp_input+0x288>)
 8007f6e:	f006 ffc9 	bl	800ef04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007f72:	2114      	movs	r1, #20
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7fd fe43 	bl	8005c00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	895a      	ldrh	r2, [r3, #10]
 8007f7e:	4b71      	ldr	r3, [pc, #452]	; (8008144 <tcp_input+0x29c>)
 8007f80:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007f82:	4b6e      	ldr	r3, [pc, #440]	; (800813c <tcp_input+0x294>)
 8007f84:	881a      	ldrh	r2, [r3, #0]
 8007f86:	4b6f      	ldr	r3, [pc, #444]	; (8008144 <tcp_input+0x29c>)
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007f8e:	4b6d      	ldr	r3, [pc, #436]	; (8008144 <tcp_input+0x29c>)
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7fd fe33 	bl	8005c00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	895b      	ldrh	r3, [r3, #10]
 8007fa0:	8a3a      	ldrh	r2, [r7, #16]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	f200 836e 	bhi.w	8008684 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	4a64      	ldr	r2, [pc, #400]	; (8008140 <tcp_input+0x298>)
 8007fb0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	8a3a      	ldrh	r2, [r7, #16]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fd fe20 	bl	8005c00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	891a      	ldrh	r2, [r3, #8]
 8007fc4:	8a3b      	ldrh	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	895b      	ldrh	r3, [r3, #10]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <tcp_input+0x13a>
 8007fd6:	4b54      	ldr	r3, [pc, #336]	; (8008128 <tcp_input+0x280>)
 8007fd8:	22df      	movs	r2, #223	; 0xdf
 8007fda:	495c      	ldr	r1, [pc, #368]	; (800814c <tcp_input+0x2a4>)
 8007fdc:	4854      	ldr	r0, [pc, #336]	; (8008130 <tcp_input+0x288>)
 8007fde:	f006 ff91 	bl	800ef04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	891a      	ldrh	r2, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	891b      	ldrh	r3, [r3, #8]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d005      	beq.n	8007ffc <tcp_input+0x154>
 8007ff0:	4b4d      	ldr	r3, [pc, #308]	; (8008128 <tcp_input+0x280>)
 8007ff2:	22e0      	movs	r2, #224	; 0xe0
 8007ff4:	4956      	ldr	r1, [pc, #344]	; (8008150 <tcp_input+0x2a8>)
 8007ff6:	484e      	ldr	r0, [pc, #312]	; (8008130 <tcp_input+0x288>)
 8007ff8:	f006 ff84 	bl	800ef04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007ffc:	4b4d      	ldr	r3, [pc, #308]	; (8008134 <tcp_input+0x28c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	4a4b      	ldr	r2, [pc, #300]	; (8008134 <tcp_input+0x28c>)
 8008006:	6814      	ldr	r4, [r2, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f7fc faeb 	bl	80045e4 <lwip_htons>
 800800e:	4603      	mov	r3, r0
 8008010:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008012:	4b48      	ldr	r3, [pc, #288]	; (8008134 <tcp_input+0x28c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	885b      	ldrh	r3, [r3, #2]
 8008018:	b29b      	uxth	r3, r3
 800801a:	4a46      	ldr	r2, [pc, #280]	; (8008134 <tcp_input+0x28c>)
 800801c:	6814      	ldr	r4, [r2, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f7fc fae0 	bl	80045e4 <lwip_htons>
 8008024:	4603      	mov	r3, r0
 8008026:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008028:	4b42      	ldr	r3, [pc, #264]	; (8008134 <tcp_input+0x28c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	4a41      	ldr	r2, [pc, #260]	; (8008134 <tcp_input+0x28c>)
 8008030:	6814      	ldr	r4, [r2, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f7fc faeb 	bl	800460e <lwip_htonl>
 8008038:	4603      	mov	r3, r0
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	4a45      	ldr	r2, [pc, #276]	; (8008154 <tcp_input+0x2ac>)
 8008040:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008042:	4b3c      	ldr	r3, [pc, #240]	; (8008134 <tcp_input+0x28c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	4a3a      	ldr	r2, [pc, #232]	; (8008134 <tcp_input+0x28c>)
 800804a:	6814      	ldr	r4, [r2, #0]
 800804c:	4618      	mov	r0, r3
 800804e:	f7fc fade 	bl	800460e <lwip_htonl>
 8008052:	4603      	mov	r3, r0
 8008054:	60a3      	str	r3, [r4, #8]
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	4a3f      	ldr	r2, [pc, #252]	; (8008158 <tcp_input+0x2b0>)
 800805a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800805c:	4b35      	ldr	r3, [pc, #212]	; (8008134 <tcp_input+0x28c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	89db      	ldrh	r3, [r3, #14]
 8008062:	b29b      	uxth	r3, r3
 8008064:	4a33      	ldr	r2, [pc, #204]	; (8008134 <tcp_input+0x28c>)
 8008066:	6814      	ldr	r4, [r2, #0]
 8008068:	4618      	mov	r0, r3
 800806a:	f7fc fabb 	bl	80045e4 <lwip_htons>
 800806e:	4603      	mov	r3, r0
 8008070:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008072:	4b30      	ldr	r3, [pc, #192]	; (8008134 <tcp_input+0x28c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	899b      	ldrh	r3, [r3, #12]
 8008078:	b29b      	uxth	r3, r3
 800807a:	4618      	mov	r0, r3
 800807c:	f7fc fab2 	bl	80045e4 <lwip_htons>
 8008080:	4603      	mov	r3, r0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008088:	b2da      	uxtb	r2, r3
 800808a:	4b34      	ldr	r3, [pc, #208]	; (800815c <tcp_input+0x2b4>)
 800808c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	891a      	ldrh	r2, [r3, #8]
 8008092:	4b33      	ldr	r3, [pc, #204]	; (8008160 <tcp_input+0x2b8>)
 8008094:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008096:	4b31      	ldr	r3, [pc, #196]	; (800815c <tcp_input+0x2b4>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00c      	beq.n	80080bc <tcp_input+0x214>
    tcplen++;
 80080a2:	4b2f      	ldr	r3, [pc, #188]	; (8008160 <tcp_input+0x2b8>)
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	3301      	adds	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	4b2d      	ldr	r3, [pc, #180]	; (8008160 <tcp_input+0x2b8>)
 80080ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	891a      	ldrh	r2, [r3, #8]
 80080b2:	4b2b      	ldr	r3, [pc, #172]	; (8008160 <tcp_input+0x2b8>)
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	f200 82e6 	bhi.w	8008688 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80080c0:	4b28      	ldr	r3, [pc, #160]	; (8008164 <tcp_input+0x2bc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	61fb      	str	r3, [r7, #28]
 80080c6:	e09d      	b.n	8008204 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	7d1b      	ldrb	r3, [r3, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d105      	bne.n	80080dc <tcp_input+0x234>
 80080d0:	4b15      	ldr	r3, [pc, #84]	; (8008128 <tcp_input+0x280>)
 80080d2:	22fb      	movs	r2, #251	; 0xfb
 80080d4:	4924      	ldr	r1, [pc, #144]	; (8008168 <tcp_input+0x2c0>)
 80080d6:	4816      	ldr	r0, [pc, #88]	; (8008130 <tcp_input+0x288>)
 80080d8:	f006 ff14 	bl	800ef04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	7d1b      	ldrb	r3, [r3, #20]
 80080e0:	2b0a      	cmp	r3, #10
 80080e2:	d105      	bne.n	80080f0 <tcp_input+0x248>
 80080e4:	4b10      	ldr	r3, [pc, #64]	; (8008128 <tcp_input+0x280>)
 80080e6:	22fc      	movs	r2, #252	; 0xfc
 80080e8:	4920      	ldr	r1, [pc, #128]	; (800816c <tcp_input+0x2c4>)
 80080ea:	4811      	ldr	r0, [pc, #68]	; (8008130 <tcp_input+0x288>)
 80080ec:	f006 ff0a 	bl	800ef04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	7d1b      	ldrb	r3, [r3, #20]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d105      	bne.n	8008104 <tcp_input+0x25c>
 80080f8:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <tcp_input+0x280>)
 80080fa:	22fd      	movs	r2, #253	; 0xfd
 80080fc:	491c      	ldr	r1, [pc, #112]	; (8008170 <tcp_input+0x2c8>)
 80080fe:	480c      	ldr	r0, [pc, #48]	; (8008130 <tcp_input+0x288>)
 8008100:	f006 ff00 	bl	800ef04 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	7a1b      	ldrb	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d033      	beq.n	8008174 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	7a1a      	ldrb	r2, [r3, #8]
 8008110:	4b09      	ldr	r3, [pc, #36]	; (8008138 <tcp_input+0x290>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008118:	3301      	adds	r3, #1
 800811a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800811c:	429a      	cmp	r2, r3
 800811e:	d029      	beq.n	8008174 <tcp_input+0x2cc>
      prev = pcb;
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	61bb      	str	r3, [r7, #24]
      continue;
 8008124:	e06b      	b.n	80081fe <tcp_input+0x356>
 8008126:	bf00      	nop
 8008128:	08011454 	.word	0x08011454
 800812c:	08011488 	.word	0x08011488
 8008130:	080114a0 	.word	0x080114a0
 8008134:	200086b0 	.word	0x200086b0
 8008138:	20005118 	.word	0x20005118
 800813c:	200086b4 	.word	0x200086b4
 8008140:	200086b8 	.word	0x200086b8
 8008144:	200086b6 	.word	0x200086b6
 8008148:	080114c8 	.word	0x080114c8
 800814c:	080114d8 	.word	0x080114d8
 8008150:	080114e4 	.word	0x080114e4
 8008154:	200086c0 	.word	0x200086c0
 8008158:	200086c4 	.word	0x200086c4
 800815c:	200086cc 	.word	0x200086cc
 8008160:	200086ca 	.word	0x200086ca
 8008164:	20008694 	.word	0x20008694
 8008168:	08011504 	.word	0x08011504
 800816c:	0801152c 	.word	0x0801152c
 8008170:	08011558 	.word	0x08011558
    }

    if (pcb->remote_port == tcphdr->src &&
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	8b1a      	ldrh	r2, [r3, #24]
 8008178:	4b72      	ldr	r3, [pc, #456]	; (8008344 <tcp_input+0x49c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	429a      	cmp	r2, r3
 8008182:	d13a      	bne.n	80081fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	8ada      	ldrh	r2, [r3, #22]
 8008188:	4b6e      	ldr	r3, [pc, #440]	; (8008344 <tcp_input+0x49c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	885b      	ldrh	r3, [r3, #2]
 800818e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008190:	429a      	cmp	r2, r3
 8008192:	d132      	bne.n	80081fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	4b6b      	ldr	r3, [pc, #428]	; (8008348 <tcp_input+0x4a0>)
 800819a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800819c:	429a      	cmp	r2, r3
 800819e:	d12c      	bne.n	80081fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	4b68      	ldr	r3, [pc, #416]	; (8008348 <tcp_input+0x4a0>)
 80081a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d126      	bne.n	80081fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d106      	bne.n	80081c4 <tcp_input+0x31c>
 80081b6:	4b65      	ldr	r3, [pc, #404]	; (800834c <tcp_input+0x4a4>)
 80081b8:	f240 120d 	movw	r2, #269	; 0x10d
 80081bc:	4964      	ldr	r1, [pc, #400]	; (8008350 <tcp_input+0x4a8>)
 80081be:	4865      	ldr	r0, [pc, #404]	; (8008354 <tcp_input+0x4ac>)
 80081c0:	f006 fea0 	bl	800ef04 <iprintf>
      if (prev != NULL) {
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <tcp_input+0x338>
        prev->next = pcb->next;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80081d2:	4b61      	ldr	r3, [pc, #388]	; (8008358 <tcp_input+0x4b0>)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80081da:	4a5f      	ldr	r2, [pc, #380]	; (8008358 <tcp_input+0x4b0>)
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d111      	bne.n	800820e <tcp_input+0x366>
 80081ea:	4b58      	ldr	r3, [pc, #352]	; (800834c <tcp_input+0x4a4>)
 80081ec:	f240 1215 	movw	r2, #277	; 0x115
 80081f0:	495a      	ldr	r1, [pc, #360]	; (800835c <tcp_input+0x4b4>)
 80081f2:	4858      	ldr	r0, [pc, #352]	; (8008354 <tcp_input+0x4ac>)
 80081f4:	f006 fe86 	bl	800ef04 <iprintf>
      break;
 80081f8:	e009      	b.n	800820e <tcp_input+0x366>
    }
    prev = pcb;
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	61fb      	str	r3, [r7, #28]
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f47f af5e 	bne.w	80080c8 <tcp_input+0x220>
 800820c:	e000      	b.n	8008210 <tcp_input+0x368>
      break;
 800820e:	bf00      	nop
  }

  if (pcb == NULL) {
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 80aa 	bne.w	800836c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008218:	4b51      	ldr	r3, [pc, #324]	; (8008360 <tcp_input+0x4b8>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	e03f      	b.n	80082a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	7d1b      	ldrb	r3, [r3, #20]
 8008224:	2b0a      	cmp	r3, #10
 8008226:	d006      	beq.n	8008236 <tcp_input+0x38e>
 8008228:	4b48      	ldr	r3, [pc, #288]	; (800834c <tcp_input+0x4a4>)
 800822a:	f240 121f 	movw	r2, #287	; 0x11f
 800822e:	494d      	ldr	r1, [pc, #308]	; (8008364 <tcp_input+0x4bc>)
 8008230:	4848      	ldr	r0, [pc, #288]	; (8008354 <tcp_input+0x4ac>)
 8008232:	f006 fe67 	bl	800ef04 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	7a1b      	ldrb	r3, [r3, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	7a1a      	ldrb	r2, [r3, #8]
 8008242:	4b41      	ldr	r3, [pc, #260]	; (8008348 <tcp_input+0x4a0>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800824a:	3301      	adds	r3, #1
 800824c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800824e:	429a      	cmp	r2, r3
 8008250:	d122      	bne.n	8008298 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	8b1a      	ldrh	r2, [r3, #24]
 8008256:	4b3b      	ldr	r3, [pc, #236]	; (8008344 <tcp_input+0x49c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	429a      	cmp	r2, r3
 8008260:	d11b      	bne.n	800829a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	8ada      	ldrh	r2, [r3, #22]
 8008266:	4b37      	ldr	r3, [pc, #220]	; (8008344 <tcp_input+0x49c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	885b      	ldrh	r3, [r3, #2]
 800826c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800826e:	429a      	cmp	r2, r3
 8008270:	d113      	bne.n	800829a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	4b34      	ldr	r3, [pc, #208]	; (8008348 <tcp_input+0x4a0>)
 8008278:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800827a:	429a      	cmp	r2, r3
 800827c:	d10d      	bne.n	800829a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b31      	ldr	r3, [pc, #196]	; (8008348 <tcp_input+0x4a0>)
 8008284:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008286:	429a      	cmp	r2, r3
 8008288:	d107      	bne.n	800829a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800828a:	69f8      	ldr	r0, [r7, #28]
 800828c:	f000 fb56 	bl	800893c <tcp_timewait_input>
        }
        pbuf_free(p);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7fd fd3b 	bl	8005d0c <pbuf_free>
        return;
 8008296:	e1fd      	b.n	8008694 <tcp_input+0x7ec>
        continue;
 8008298:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1bc      	bne.n	8008220 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082aa:	4b2f      	ldr	r3, [pc, #188]	; (8008368 <tcp_input+0x4c0>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e02a      	b.n	8008308 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	7a1b      	ldrb	r3, [r3, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00c      	beq.n	80082d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	7a1a      	ldrb	r2, [r3, #8]
 80082be:	4b22      	ldr	r3, [pc, #136]	; (8008348 <tcp_input+0x4a0>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082c6:	3301      	adds	r3, #1
 80082c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d002      	beq.n	80082d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	61bb      	str	r3, [r7, #24]
        continue;
 80082d2:	e016      	b.n	8008302 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	8ada      	ldrh	r2, [r3, #22]
 80082d8:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <tcp_input+0x49c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	885b      	ldrh	r3, [r3, #2]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d10c      	bne.n	80082fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	4b17      	ldr	r3, [pc, #92]	; (8008348 <tcp_input+0x4a0>)
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d00f      	beq.n	8008310 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00d      	beq.n	8008312 <tcp_input+0x46a>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1d1      	bne.n	80082b2 <tcp_input+0x40a>
 800830e:	e000      	b.n	8008312 <tcp_input+0x46a>
            break;
 8008310:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d029      	beq.n	800836c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008326:	4b10      	ldr	r3, [pc, #64]	; (8008368 <tcp_input+0x4c0>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800832e:	4a0e      	ldr	r2, [pc, #56]	; (8008368 <tcp_input+0x4c0>)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008334:	6978      	ldr	r0, [r7, #20]
 8008336:	f000 fa03 	bl	8008740 <tcp_listen_input>
      }
      pbuf_free(p);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7fd fce6 	bl	8005d0c <pbuf_free>
      return;
 8008340:	e1a8      	b.n	8008694 <tcp_input+0x7ec>
 8008342:	bf00      	nop
 8008344:	200086b0 	.word	0x200086b0
 8008348:	20005118 	.word	0x20005118
 800834c:	08011454 	.word	0x08011454
 8008350:	08011580 	.word	0x08011580
 8008354:	080114a0 	.word	0x080114a0
 8008358:	20008694 	.word	0x20008694
 800835c:	080115ac 	.word	0x080115ac
 8008360:	20008698 	.word	0x20008698
 8008364:	080115d8 	.word	0x080115d8
 8008368:	20008690 	.word	0x20008690
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 8158 	beq.w	8008624 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008374:	4b95      	ldr	r3, [pc, #596]	; (80085cc <tcp_input+0x724>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	891a      	ldrh	r2, [r3, #8]
 800837e:	4b93      	ldr	r3, [pc, #588]	; (80085cc <tcp_input+0x724>)
 8008380:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008382:	4a92      	ldr	r2, [pc, #584]	; (80085cc <tcp_input+0x724>)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008388:	4b91      	ldr	r3, [pc, #580]	; (80085d0 <tcp_input+0x728>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a8f      	ldr	r2, [pc, #572]	; (80085cc <tcp_input+0x724>)
 800838e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008390:	4b90      	ldr	r3, [pc, #576]	; (80085d4 <tcp_input+0x72c>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008396:	4b90      	ldr	r3, [pc, #576]	; (80085d8 <tcp_input+0x730>)
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800839c:	4b8f      	ldr	r3, [pc, #572]	; (80085dc <tcp_input+0x734>)
 800839e:	2200      	movs	r2, #0
 80083a0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80083a2:	4b8f      	ldr	r3, [pc, #572]	; (80085e0 <tcp_input+0x738>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d006      	beq.n	80083bc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7b5b      	ldrb	r3, [r3, #13]
 80083b2:	f043 0301 	orr.w	r3, r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d017      	beq.n	80083f4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80083c4:	69f8      	ldr	r0, [r7, #28]
 80083c6:	f7ff f83d 	bl	8007444 <tcp_process_refused_data>
 80083ca:	4603      	mov	r3, r0
 80083cc:	f113 0f0d 	cmn.w	r3, #13
 80083d0:	d007      	beq.n	80083e2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00c      	beq.n	80083f4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80083da:	4b82      	ldr	r3, [pc, #520]	; (80085e4 <tcp_input+0x73c>)
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f040 80e3 	bne.w	80085b2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80083ec:	69f8      	ldr	r0, [r7, #28]
 80083ee:	f003 fe05 	bl	800bffc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80083f2:	e0de      	b.n	80085b2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80083f4:	4a7c      	ldr	r2, [pc, #496]	; (80085e8 <tcp_input+0x740>)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80083fa:	69f8      	ldr	r0, [r7, #28]
 80083fc:	f000 fb18 	bl	8008a30 <tcp_process>
 8008400:	4603      	mov	r3, r0
 8008402:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008404:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008408:	f113 0f0d 	cmn.w	r3, #13
 800840c:	f000 80d3 	beq.w	80085b6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008410:	4b71      	ldr	r3, [pc, #452]	; (80085d8 <tcp_input+0x730>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f003 0308 	and.w	r3, r3, #8
 8008418:	2b00      	cmp	r3, #0
 800841a:	d015      	beq.n	8008448 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <tcp_input+0x590>
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842c:	69fa      	ldr	r2, [r7, #28]
 800842e:	6912      	ldr	r2, [r2, #16]
 8008430:	f06f 010d 	mvn.w	r1, #13
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008438:	69f9      	ldr	r1, [r7, #28]
 800843a:	486c      	ldr	r0, [pc, #432]	; (80085ec <tcp_input+0x744>)
 800843c:	f7ff fbbc 	bl	8007bb8 <tcp_pcb_remove>
        tcp_free(pcb);
 8008440:	69f8      	ldr	r0, [r7, #28]
 8008442:	f7fd ff03 	bl	800624c <tcp_free>
 8008446:	e0da      	b.n	80085fe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800844c:	4b63      	ldr	r3, [pc, #396]	; (80085dc <tcp_input+0x734>)
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d01d      	beq.n	8008490 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008454:	4b61      	ldr	r3, [pc, #388]	; (80085dc <tcp_input+0x734>)
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <tcp_input+0x5d2>
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	6910      	ldr	r0, [r2, #16]
 800846e:	89fa      	ldrh	r2, [r7, #14]
 8008470:	69f9      	ldr	r1, [r7, #28]
 8008472:	4798      	blx	r3
 8008474:	4603      	mov	r3, r0
 8008476:	74fb      	strb	r3, [r7, #19]
 8008478:	e001      	b.n	800847e <tcp_input+0x5d6>
 800847a:	2300      	movs	r3, #0
 800847c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800847e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008482:	f113 0f0d 	cmn.w	r3, #13
 8008486:	f000 8098 	beq.w	80085ba <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800848a:	4b54      	ldr	r3, [pc, #336]	; (80085dc <tcp_input+0x734>)
 800848c:	2200      	movs	r2, #0
 800848e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008490:	69f8      	ldr	r0, [r7, #28]
 8008492:	f000 f915 	bl	80086c0 <tcp_input_delayed_close>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 8090 	bne.w	80085be <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800849e:	4b4d      	ldr	r3, [pc, #308]	; (80085d4 <tcp_input+0x72c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d041      	beq.n	800852a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d006      	beq.n	80084bc <tcp_input+0x614>
 80084ae:	4b50      	ldr	r3, [pc, #320]	; (80085f0 <tcp_input+0x748>)
 80084b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80084b4:	494f      	ldr	r1, [pc, #316]	; (80085f4 <tcp_input+0x74c>)
 80084b6:	4850      	ldr	r0, [pc, #320]	; (80085f8 <tcp_input+0x750>)
 80084b8:	f006 fd24 	bl	800ef04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	8b5b      	ldrh	r3, [r3, #26]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d008      	beq.n	80084da <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80084c8:	4b42      	ldr	r3, [pc, #264]	; (80085d4 <tcp_input+0x72c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fd fc1d 	bl	8005d0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80084d2:	69f8      	ldr	r0, [r7, #28]
 80084d4:	f7fe f9a2 	bl	800681c <tcp_abort>
            goto aborted;
 80084d8:	e091      	b.n	80085fe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00c      	beq.n	80084fe <tcp_input+0x656>
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	6918      	ldr	r0, [r3, #16]
 80084ee:	4b39      	ldr	r3, [pc, #228]	; (80085d4 <tcp_input+0x72c>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	2300      	movs	r3, #0
 80084f4:	69f9      	ldr	r1, [r7, #28]
 80084f6:	47a0      	blx	r4
 80084f8:	4603      	mov	r3, r0
 80084fa:	74fb      	strb	r3, [r7, #19]
 80084fc:	e008      	b.n	8008510 <tcp_input+0x668>
 80084fe:	4b35      	ldr	r3, [pc, #212]	; (80085d4 <tcp_input+0x72c>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	2300      	movs	r3, #0
 8008504:	69f9      	ldr	r1, [r7, #28]
 8008506:	2000      	movs	r0, #0
 8008508:	f7ff f890 	bl	800762c <tcp_recv_null>
 800850c:	4603      	mov	r3, r0
 800850e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008514:	f113 0f0d 	cmn.w	r3, #13
 8008518:	d053      	beq.n	80085c2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800851a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008522:	4b2c      	ldr	r3, [pc, #176]	; (80085d4 <tcp_input+0x72c>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800852a:	4b2b      	ldr	r3, [pc, #172]	; (80085d8 <tcp_input+0x730>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d030      	beq.n	8008598 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008542:	7b5a      	ldrb	r2, [r3, #13]
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008548:	f042 0220 	orr.w	r2, r2, #32
 800854c:	b2d2      	uxtb	r2, r2
 800854e:	735a      	strb	r2, [r3, #13]
 8008550:	e022      	b.n	8008598 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008556:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800855a:	d005      	beq.n	8008568 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008560:	3301      	adds	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <tcp_input+0x6e2>
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	6918      	ldr	r0, [r3, #16]
 800857c:	2300      	movs	r3, #0
 800857e:	2200      	movs	r2, #0
 8008580:	69f9      	ldr	r1, [r7, #28]
 8008582:	47a0      	blx	r4
 8008584:	4603      	mov	r3, r0
 8008586:	74fb      	strb	r3, [r7, #19]
 8008588:	e001      	b.n	800858e <tcp_input+0x6e6>
 800858a:	2300      	movs	r3, #0
 800858c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800858e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008592:	f113 0f0d 	cmn.w	r3, #13
 8008596:	d016      	beq.n	80085c6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008598:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <tcp_input+0x740>)
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800859e:	69f8      	ldr	r0, [r7, #28]
 80085a0:	f000 f88e 	bl	80086c0 <tcp_input_delayed_close>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d128      	bne.n	80085fc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80085aa:	69f8      	ldr	r0, [r7, #28]
 80085ac:	f002 ff20 	bl	800b3f0 <tcp_output>
 80085b0:	e025      	b.n	80085fe <tcp_input+0x756>
        goto aborted;
 80085b2:	bf00      	nop
 80085b4:	e023      	b.n	80085fe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80085b6:	bf00      	nop
 80085b8:	e021      	b.n	80085fe <tcp_input+0x756>
              goto aborted;
 80085ba:	bf00      	nop
 80085bc:	e01f      	b.n	80085fe <tcp_input+0x756>
          goto aborted;
 80085be:	bf00      	nop
 80085c0:	e01d      	b.n	80085fe <tcp_input+0x756>
            goto aborted;
 80085c2:	bf00      	nop
 80085c4:	e01b      	b.n	80085fe <tcp_input+0x756>
              goto aborted;
 80085c6:	bf00      	nop
 80085c8:	e019      	b.n	80085fe <tcp_input+0x756>
 80085ca:	bf00      	nop
 80085cc:	200086a0 	.word	0x200086a0
 80085d0:	200086b0 	.word	0x200086b0
 80085d4:	200086d0 	.word	0x200086d0
 80085d8:	200086cd 	.word	0x200086cd
 80085dc:	200086c8 	.word	0x200086c8
 80085e0:	200086cc 	.word	0x200086cc
 80085e4:	200086ca 	.word	0x200086ca
 80085e8:	200086d4 	.word	0x200086d4
 80085ec:	20008694 	.word	0x20008694
 80085f0:	08011454 	.word	0x08011454
 80085f4:	08011608 	.word	0x08011608
 80085f8:	080114a0 	.word	0x080114a0
          goto aborted;
 80085fc:	bf00      	nop
    tcp_input_pcb = NULL;
 80085fe:	4b27      	ldr	r3, [pc, #156]	; (800869c <tcp_input+0x7f4>)
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008604:	4b26      	ldr	r3, [pc, #152]	; (80086a0 <tcp_input+0x7f8>)
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800860a:	4b26      	ldr	r3, [pc, #152]	; (80086a4 <tcp_input+0x7fc>)
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d03f      	beq.n	8008692 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008612:	4b24      	ldr	r3, [pc, #144]	; (80086a4 <tcp_input+0x7fc>)
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	4618      	mov	r0, r3
 8008618:	f7fd fb78 	bl	8005d0c <pbuf_free>
      inseg.p = NULL;
 800861c:	4b21      	ldr	r3, [pc, #132]	; (80086a4 <tcp_input+0x7fc>)
 800861e:	2200      	movs	r2, #0
 8008620:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008622:	e036      	b.n	8008692 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008624:	4b20      	ldr	r3, [pc, #128]	; (80086a8 <tcp_input+0x800>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	899b      	ldrh	r3, [r3, #12]
 800862a:	b29b      	uxth	r3, r3
 800862c:	4618      	mov	r0, r3
 800862e:	f7fb ffd9 	bl	80045e4 <lwip_htons>
 8008632:	4603      	mov	r3, r0
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d118      	bne.n	8008670 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800863e:	4b1b      	ldr	r3, [pc, #108]	; (80086ac <tcp_input+0x804>)
 8008640:	6819      	ldr	r1, [r3, #0]
 8008642:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <tcp_input+0x808>)
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <tcp_input+0x80c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800864e:	4b16      	ldr	r3, [pc, #88]	; (80086a8 <tcp_input+0x800>)
 8008650:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008652:	885b      	ldrh	r3, [r3, #2]
 8008654:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008656:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <tcp_input+0x800>)
 8008658:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800865a:	8812      	ldrh	r2, [r2, #0]
 800865c:	b292      	uxth	r2, r2
 800865e:	9202      	str	r2, [sp, #8]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <tcp_input+0x810>)
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4b15      	ldr	r3, [pc, #84]	; (80086bc <tcp_input+0x814>)
 8008668:	4602      	mov	r2, r0
 800866a:	2000      	movs	r0, #0
 800866c:	f003 fc74 	bl	800bf58 <tcp_rst>
    pbuf_free(p);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7fd fb4b 	bl	8005d0c <pbuf_free>
  return;
 8008676:	e00c      	b.n	8008692 <tcp_input+0x7ea>
    goto dropped;
 8008678:	bf00      	nop
 800867a:	e006      	b.n	800868a <tcp_input+0x7e2>
    goto dropped;
 800867c:	bf00      	nop
 800867e:	e004      	b.n	800868a <tcp_input+0x7e2>
    goto dropped;
 8008680:	bf00      	nop
 8008682:	e002      	b.n	800868a <tcp_input+0x7e2>
      goto dropped;
 8008684:	bf00      	nop
 8008686:	e000      	b.n	800868a <tcp_input+0x7e2>
      goto dropped;
 8008688:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fd fb3e 	bl	8005d0c <pbuf_free>
 8008690:	e000      	b.n	8008694 <tcp_input+0x7ec>
  return;
 8008692:	bf00      	nop
}
 8008694:	3724      	adds	r7, #36	; 0x24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd90      	pop	{r4, r7, pc}
 800869a:	bf00      	nop
 800869c:	200086d4 	.word	0x200086d4
 80086a0:	200086d0 	.word	0x200086d0
 80086a4:	200086a0 	.word	0x200086a0
 80086a8:	200086b0 	.word	0x200086b0
 80086ac:	200086c4 	.word	0x200086c4
 80086b0:	200086ca 	.word	0x200086ca
 80086b4:	200086c0 	.word	0x200086c0
 80086b8:	20005128 	.word	0x20005128
 80086bc:	2000512c 	.word	0x2000512c

080086c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <tcp_input_delayed_close+0x1c>
 80086ce:	4b17      	ldr	r3, [pc, #92]	; (800872c <tcp_input_delayed_close+0x6c>)
 80086d0:	f240 225a 	movw	r2, #602	; 0x25a
 80086d4:	4916      	ldr	r1, [pc, #88]	; (8008730 <tcp_input_delayed_close+0x70>)
 80086d6:	4817      	ldr	r0, [pc, #92]	; (8008734 <tcp_input_delayed_close+0x74>)
 80086d8:	f006 fc14 	bl	800ef04 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80086dc:	4b16      	ldr	r3, [pc, #88]	; (8008738 <tcp_input_delayed_close+0x78>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	f003 0310 	and.w	r3, r3, #16
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01c      	beq.n	8008722 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	8b5b      	ldrh	r3, [r3, #26]
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10d      	bne.n	8008710 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d008      	beq.n	8008710 <tcp_input_delayed_close+0x50>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6912      	ldr	r2, [r2, #16]
 8008708:	f06f 010e 	mvn.w	r1, #14
 800870c:	4610      	mov	r0, r2
 800870e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	480a      	ldr	r0, [pc, #40]	; (800873c <tcp_input_delayed_close+0x7c>)
 8008714:	f7ff fa50 	bl	8007bb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7fd fd97 	bl	800624c <tcp_free>
    return 1;
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	08011454 	.word	0x08011454
 8008730:	08011624 	.word	0x08011624
 8008734:	080114a0 	.word	0x080114a0
 8008738:	200086cd 	.word	0x200086cd
 800873c:	20008694 	.word	0x20008694

08008740 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b08b      	sub	sp, #44	; 0x2c
 8008744:	af04      	add	r7, sp, #16
 8008746:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008748:	4b6f      	ldr	r3, [pc, #444]	; (8008908 <tcp_listen_input+0x1c8>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	2b00      	cmp	r3, #0
 8008752:	f040 80d2 	bne.w	80088fa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <tcp_listen_input+0x2a>
 800875c:	4b6b      	ldr	r3, [pc, #428]	; (800890c <tcp_listen_input+0x1cc>)
 800875e:	f240 2281 	movw	r2, #641	; 0x281
 8008762:	496b      	ldr	r1, [pc, #428]	; (8008910 <tcp_listen_input+0x1d0>)
 8008764:	486b      	ldr	r0, [pc, #428]	; (8008914 <tcp_listen_input+0x1d4>)
 8008766:	f006 fbcd 	bl	800ef04 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800876a:	4b67      	ldr	r3, [pc, #412]	; (8008908 <tcp_listen_input+0x1c8>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	f003 0310 	and.w	r3, r3, #16
 8008772:	2b00      	cmp	r3, #0
 8008774:	d019      	beq.n	80087aa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008776:	4b68      	ldr	r3, [pc, #416]	; (8008918 <tcp_listen_input+0x1d8>)
 8008778:	6819      	ldr	r1, [r3, #0]
 800877a:	4b68      	ldr	r3, [pc, #416]	; (800891c <tcp_listen_input+0x1dc>)
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	4b67      	ldr	r3, [pc, #412]	; (8008920 <tcp_listen_input+0x1e0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008786:	4b67      	ldr	r3, [pc, #412]	; (8008924 <tcp_listen_input+0x1e4>)
 8008788:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800878a:	885b      	ldrh	r3, [r3, #2]
 800878c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800878e:	4a65      	ldr	r2, [pc, #404]	; (8008924 <tcp_listen_input+0x1e4>)
 8008790:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008792:	8812      	ldrh	r2, [r2, #0]
 8008794:	b292      	uxth	r2, r2
 8008796:	9202      	str	r2, [sp, #8]
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	4b63      	ldr	r3, [pc, #396]	; (8008928 <tcp_listen_input+0x1e8>)
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	4b63      	ldr	r3, [pc, #396]	; (800892c <tcp_listen_input+0x1ec>)
 80087a0:	4602      	mov	r2, r0
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f003 fbd8 	bl	800bf58 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80087a8:	e0a9      	b.n	80088fe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80087aa:	4b57      	ldr	r3, [pc, #348]	; (8008908 <tcp_listen_input+0x1c8>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 80a3 	beq.w	80088fe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7d5b      	ldrb	r3, [r3, #21]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff f859 	bl	8007874 <tcp_alloc>
 80087c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d111      	bne.n	80087ee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <tcp_listen_input+0xa8>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6910      	ldr	r0, [r2, #16]
 80087da:	f04f 32ff 	mov.w	r2, #4294967295
 80087de:	2100      	movs	r1, #0
 80087e0:	4798      	blx	r3
 80087e2:	4603      	mov	r3, r0
 80087e4:	73bb      	strb	r3, [r7, #14]
      return;
 80087e6:	e08b      	b.n	8008900 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80087e8:	23f0      	movs	r3, #240	; 0xf0
 80087ea:	73bb      	strb	r3, [r7, #14]
      return;
 80087ec:	e088      	b.n	8008900 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80087ee:	4b50      	ldr	r3, [pc, #320]	; (8008930 <tcp_listen_input+0x1f0>)
 80087f0:	695a      	ldr	r2, [r3, #20]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80087f6:	4b4e      	ldr	r3, [pc, #312]	; (8008930 <tcp_listen_input+0x1f0>)
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	8ada      	ldrh	r2, [r3, #22]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008806:	4b47      	ldr	r3, [pc, #284]	; (8008924 <tcp_listen_input+0x1e4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	b29a      	uxth	r2, r3
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2203      	movs	r2, #3
 8008816:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008818:	4b41      	ldr	r3, [pc, #260]	; (8008920 <tcp_listen_input+0x1e0>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800882a:	6978      	ldr	r0, [r7, #20]
 800882c:	f7ff fa58 	bl	8007ce0 <tcp_next_iss>
 8008830:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800884a:	4b35      	ldr	r3, [pc, #212]	; (8008920 <tcp_listen_input+0x1e0>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	1e5a      	subs	r2, r3, #1
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	7a5b      	ldrb	r3, [r3, #9]
 8008866:	f003 030c 	and.w	r3, r3, #12
 800886a:	b2da      	uxtb	r2, r3
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7a1a      	ldrb	r2, [r3, #8]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008878:	4b2e      	ldr	r3, [pc, #184]	; (8008934 <tcp_listen_input+0x1f4>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	60da      	str	r2, [r3, #12]
 8008880:	4a2c      	ldr	r2, [pc, #176]	; (8008934 <tcp_listen_input+0x1f4>)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	f003 fd29 	bl	800c2dc <tcp_timer_needed>
 800888a:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <tcp_listen_input+0x1f8>)
 800888c:	2201      	movs	r2, #1
 800888e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008890:	6978      	ldr	r0, [r7, #20]
 8008892:	f001 fd8f 	bl	800a3b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008896:	4b23      	ldr	r3, [pc, #140]	; (8008924 <tcp_listen_input+0x1e4>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	89db      	ldrh	r3, [r3, #14]
 800889c:	b29a      	uxth	r2, r3
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	3304      	adds	r3, #4
 80088b8:	4618      	mov	r0, r3
 80088ba:	f005 f8ed 	bl	800da98 <ip4_route>
 80088be:	4601      	mov	r1, r0
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	3304      	adds	r3, #4
 80088c4:	461a      	mov	r2, r3
 80088c6:	4620      	mov	r0, r4
 80088c8:	f7ff fa30 	bl	8007d2c <tcp_eff_send_mss_netif>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80088d4:	2112      	movs	r1, #18
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f002 fc9c 	bl	800b214 <tcp_enqueue_flags>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80088e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80088e8:	2100      	movs	r1, #0
 80088ea:	6978      	ldr	r0, [r7, #20]
 80088ec:	f7fd fed8 	bl	80066a0 <tcp_abandon>
      return;
 80088f0:	e006      	b.n	8008900 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80088f2:	6978      	ldr	r0, [r7, #20]
 80088f4:	f002 fd7c 	bl	800b3f0 <tcp_output>
  return;
 80088f8:	e001      	b.n	80088fe <tcp_listen_input+0x1be>
    return;
 80088fa:	bf00      	nop
 80088fc:	e000      	b.n	8008900 <tcp_listen_input+0x1c0>
  return;
 80088fe:	bf00      	nop
}
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	bd90      	pop	{r4, r7, pc}
 8008906:	bf00      	nop
 8008908:	200086cc 	.word	0x200086cc
 800890c:	08011454 	.word	0x08011454
 8008910:	0801164c 	.word	0x0801164c
 8008914:	080114a0 	.word	0x080114a0
 8008918:	200086c4 	.word	0x200086c4
 800891c:	200086ca 	.word	0x200086ca
 8008920:	200086c0 	.word	0x200086c0
 8008924:	200086b0 	.word	0x200086b0
 8008928:	20005128 	.word	0x20005128
 800892c:	2000512c 	.word	0x2000512c
 8008930:	20005118 	.word	0x20005118
 8008934:	20008694 	.word	0x20008694
 8008938:	2000869c 	.word	0x2000869c

0800893c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af04      	add	r7, sp, #16
 8008942:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008944:	4b2f      	ldr	r3, [pc, #188]	; (8008a04 <tcp_timewait_input+0xc8>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d153      	bne.n	80089f8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <tcp_timewait_input+0x28>
 8008956:	4b2c      	ldr	r3, [pc, #176]	; (8008a08 <tcp_timewait_input+0xcc>)
 8008958:	f240 22ee 	movw	r2, #750	; 0x2ee
 800895c:	492b      	ldr	r1, [pc, #172]	; (8008a0c <tcp_timewait_input+0xd0>)
 800895e:	482c      	ldr	r0, [pc, #176]	; (8008a10 <tcp_timewait_input+0xd4>)
 8008960:	f006 fad0 	bl	800ef04 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008964:	4b27      	ldr	r3, [pc, #156]	; (8008a04 <tcp_timewait_input+0xc8>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d02a      	beq.n	80089c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008970:	4b28      	ldr	r3, [pc, #160]	; (8008a14 <tcp_timewait_input+0xd8>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	db2d      	blt.n	80089da <tcp_timewait_input+0x9e>
 800897e:	4b25      	ldr	r3, [pc, #148]	; (8008a14 <tcp_timewait_input+0xd8>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800898a:	440b      	add	r3, r1
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	dc23      	bgt.n	80089da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008992:	4b21      	ldr	r3, [pc, #132]	; (8008a18 <tcp_timewait_input+0xdc>)
 8008994:	6819      	ldr	r1, [r3, #0]
 8008996:	4b21      	ldr	r3, [pc, #132]	; (8008a1c <tcp_timewait_input+0xe0>)
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <tcp_timewait_input+0xd8>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089a2:	4b1f      	ldr	r3, [pc, #124]	; (8008a20 <tcp_timewait_input+0xe4>)
 80089a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089a6:	885b      	ldrh	r3, [r3, #2]
 80089a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089aa:	4a1d      	ldr	r2, [pc, #116]	; (8008a20 <tcp_timewait_input+0xe4>)
 80089ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089ae:	8812      	ldrh	r2, [r2, #0]
 80089b0:	b292      	uxth	r2, r2
 80089b2:	9202      	str	r2, [sp, #8]
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <tcp_timewait_input+0xe8>)
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <tcp_timewait_input+0xec>)
 80089bc:	4602      	mov	r2, r0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f003 faca 	bl	800bf58 <tcp_rst>
      return;
 80089c4:	e01b      	b.n	80089fe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80089c6:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <tcp_timewait_input+0xc8>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80089d2:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <tcp_timewait_input+0xf0>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80089da:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <tcp_timewait_input+0xe0>)
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00c      	beq.n	80089fc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8b5b      	ldrh	r3, [r3, #26]
 80089e6:	f043 0302 	orr.w	r3, r3, #2
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f002 fcfd 	bl	800b3f0 <tcp_output>
  }
  return;
 80089f6:	e001      	b.n	80089fc <tcp_timewait_input+0xc0>
    return;
 80089f8:	bf00      	nop
 80089fa:	e000      	b.n	80089fe <tcp_timewait_input+0xc2>
  return;
 80089fc:	bf00      	nop
}
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	200086cc 	.word	0x200086cc
 8008a08:	08011454 	.word	0x08011454
 8008a0c:	0801166c 	.word	0x0801166c
 8008a10:	080114a0 	.word	0x080114a0
 8008a14:	200086c0 	.word	0x200086c0
 8008a18:	200086c4 	.word	0x200086c4
 8008a1c:	200086ca 	.word	0x200086ca
 8008a20:	200086b0 	.word	0x200086b0
 8008a24:	20005128 	.word	0x20005128
 8008a28:	2000512c 	.word	0x2000512c
 8008a2c:	20008688 	.word	0x20008688

08008a30 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008a30:	b590      	push	{r4, r7, lr}
 8008a32:	b08d      	sub	sp, #52	; 0x34
 8008a34:	af04      	add	r7, sp, #16
 8008a36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d106      	bne.n	8008a54 <tcp_process+0x24>
 8008a46:	4b9d      	ldr	r3, [pc, #628]	; (8008cbc <tcp_process+0x28c>)
 8008a48:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008a4c:	499c      	ldr	r1, [pc, #624]	; (8008cc0 <tcp_process+0x290>)
 8008a4e:	489d      	ldr	r0, [pc, #628]	; (8008cc4 <tcp_process+0x294>)
 8008a50:	f006 fa58 	bl	800ef04 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008a54:	4b9c      	ldr	r3, [pc, #624]	; (8008cc8 <tcp_process+0x298>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d04e      	beq.n	8008afe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7d1b      	ldrb	r3, [r3, #20]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d108      	bne.n	8008a7a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a6c:	4b97      	ldr	r3, [pc, #604]	; (8008ccc <tcp_process+0x29c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d123      	bne.n	8008abc <tcp_process+0x8c>
        acceptable = 1;
 8008a74:	2301      	movs	r3, #1
 8008a76:	76fb      	strb	r3, [r7, #27]
 8008a78:	e020      	b.n	8008abc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a7e:	4b94      	ldr	r3, [pc, #592]	; (8008cd0 <tcp_process+0x2a0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d102      	bne.n	8008a8c <tcp_process+0x5c>
        acceptable = 1;
 8008a86:	2301      	movs	r3, #1
 8008a88:	76fb      	strb	r3, [r7, #27]
 8008a8a:	e017      	b.n	8008abc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008a8c:	4b90      	ldr	r3, [pc, #576]	; (8008cd0 <tcp_process+0x2a0>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	db10      	blt.n	8008abc <tcp_process+0x8c>
 8008a9a:	4b8d      	ldr	r3, [pc, #564]	; (8008cd0 <tcp_process+0x2a0>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008aa6:	440b      	add	r3, r1
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dc06      	bgt.n	8008abc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	8b5b      	ldrh	r3, [r3, #26]
 8008ab2:	f043 0302 	orr.w	r3, r3, #2
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008abc:	7efb      	ldrb	r3, [r7, #27]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01b      	beq.n	8008afa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7d1b      	ldrb	r3, [r3, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d106      	bne.n	8008ad8 <tcp_process+0xa8>
 8008aca:	4b7c      	ldr	r3, [pc, #496]	; (8008cbc <tcp_process+0x28c>)
 8008acc:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008ad0:	4980      	ldr	r1, [pc, #512]	; (8008cd4 <tcp_process+0x2a4>)
 8008ad2:	487c      	ldr	r0, [pc, #496]	; (8008cc4 <tcp_process+0x294>)
 8008ad4:	f006 fa16 	bl	800ef04 <iprintf>
      recv_flags |= TF_RESET;
 8008ad8:	4b7f      	ldr	r3, [pc, #508]	; (8008cd8 <tcp_process+0x2a8>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f043 0308 	orr.w	r3, r3, #8
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	4b7d      	ldr	r3, [pc, #500]	; (8008cd8 <tcp_process+0x2a8>)
 8008ae4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	8b5b      	ldrh	r3, [r3, #26]
 8008aea:	f023 0301 	bic.w	r3, r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008af4:	f06f 030d 	mvn.w	r3, #13
 8008af8:	e37a      	b.n	80091f0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	e378      	b.n	80091f0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008afe:	4b72      	ldr	r3, [pc, #456]	; (8008cc8 <tcp_process+0x298>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d010      	beq.n	8008b2c <tcp_process+0xfc>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	7d1b      	ldrb	r3, [r3, #20]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d00c      	beq.n	8008b2c <tcp_process+0xfc>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	7d1b      	ldrb	r3, [r3, #20]
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d008      	beq.n	8008b2c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	8b5b      	ldrh	r3, [r3, #26]
 8008b1e:	f043 0302 	orr.w	r3, r3, #2
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e361      	b.n	80091f0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8b5b      	ldrh	r3, [r3, #26]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d103      	bne.n	8008b40 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008b38:	4b68      	ldr	r3, [pc, #416]	; (8008cdc <tcp_process+0x2ac>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 fc2f 	bl	800a3b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7d1b      	ldrb	r3, [r3, #20]
 8008b5a:	3b02      	subs	r3, #2
 8008b5c:	2b07      	cmp	r3, #7
 8008b5e:	f200 8337 	bhi.w	80091d0 <tcp_process+0x7a0>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <tcp_process+0x138>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b89 	.word	0x08008b89
 8008b6c:	08008db9 	.word	0x08008db9
 8008b70:	08008f31 	.word	0x08008f31
 8008b74:	08008f5b 	.word	0x08008f5b
 8008b78:	0800907f 	.word	0x0800907f
 8008b7c:	08008f31 	.word	0x08008f31
 8008b80:	0800910b 	.word	0x0800910b
 8008b84:	0800919b 	.word	0x0800919b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008b88:	4b4f      	ldr	r3, [pc, #316]	; (8008cc8 <tcp_process+0x298>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80e4 	beq.w	8008d5e <tcp_process+0x32e>
 8008b96:	4b4c      	ldr	r3, [pc, #304]	; (8008cc8 <tcp_process+0x298>)
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 80dd 	beq.w	8008d5e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	4b48      	ldr	r3, [pc, #288]	; (8008ccc <tcp_process+0x29c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	f040 80d5 	bne.w	8008d5e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008bb4:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <tcp_process+0x2a0>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008bc6:	4b41      	ldr	r3, [pc, #260]	; (8008ccc <tcp_process+0x29c>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008bce:	4b44      	ldr	r3, [pc, #272]	; (8008ce0 <tcp_process+0x2b0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	89db      	ldrh	r3, [r3, #14]
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008be8:	4b39      	ldr	r3, [pc, #228]	; (8008cd0 <tcp_process+0x2a0>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	1e5a      	subs	r2, r3, #1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2204      	movs	r2, #4
 8008bf6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	4618      	mov	r0, r3
 8008c02:	f004 ff49 	bl	800da98 <ip4_route>
 8008c06:	4601      	mov	r1, r0
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7ff f88c 	bl	8007d2c <tcp_eff_send_mss_netif>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c20:	009a      	lsls	r2, r3, #2
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	f241 111c 	movw	r1, #4380	; 0x111c
 8008c2c:	428b      	cmp	r3, r1
 8008c2e:	bf38      	it	cc
 8008c30:	460b      	movcc	r3, r1
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d204      	bcs.n	8008c40 <tcp_process+0x210>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	e00d      	b.n	8008c5c <tcp_process+0x22c>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	f241 121c 	movw	r2, #4380	; 0x111c
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d904      	bls.n	8008c58 <tcp_process+0x228>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	e001      	b.n	8008c5c <tcp_process+0x22c>
 8008c58:	f241 131c 	movw	r3, #4380	; 0x111c
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <tcp_process+0x24a>
 8008c6c:	4b13      	ldr	r3, [pc, #76]	; (8008cbc <tcp_process+0x28c>)
 8008c6e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008c72:	491c      	ldr	r1, [pc, #112]	; (8008ce4 <tcp_process+0x2b4>)
 8008c74:	4813      	ldr	r0, [pc, #76]	; (8008cc4 <tcp_process+0x294>)
 8008c76:	f006 f945 	bl	800ef04 <iprintf>
        --pcb->snd_queuelen;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d12a      	bne.n	8008cec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c9a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d106      	bne.n	8008cb0 <tcp_process+0x280>
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <tcp_process+0x28c>)
 8008ca4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008ca8:	490f      	ldr	r1, [pc, #60]	; (8008ce8 <tcp_process+0x2b8>)
 8008caa:	4806      	ldr	r0, [pc, #24]	; (8008cc4 <tcp_process+0x294>)
 8008cac:	f006 f92a 	bl	800ef04 <iprintf>
          pcb->unsent = rseg->next;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	66da      	str	r2, [r3, #108]	; 0x6c
 8008cb8:	e01c      	b.n	8008cf4 <tcp_process+0x2c4>
 8008cba:	bf00      	nop
 8008cbc:	08011454 	.word	0x08011454
 8008cc0:	0801168c 	.word	0x0801168c
 8008cc4:	080114a0 	.word	0x080114a0
 8008cc8:	200086cc 	.word	0x200086cc
 8008ccc:	200086c4 	.word	0x200086c4
 8008cd0:	200086c0 	.word	0x200086c0
 8008cd4:	080116a8 	.word	0x080116a8
 8008cd8:	200086cd 	.word	0x200086cd
 8008cdc:	20008688 	.word	0x20008688
 8008ce0:	200086b0 	.word	0x200086b0
 8008ce4:	080116c8 	.word	0x080116c8
 8008ce8:	080116e0 	.word	0x080116e0
        } else {
          pcb->unacked = rseg->next;
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008cf4:	69f8      	ldr	r0, [r7, #28]
 8008cf6:	f7fe fc36 	bl	8007566 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d104      	bne.n	8008d0c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d08:	861a      	strh	r2, [r3, #48]	; 0x30
 8008d0a:	e006      	b.n	8008d1a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <tcp_process+0x30a>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	6910      	ldr	r0, [r2, #16]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	4798      	blx	r3
 8008d34:	4603      	mov	r3, r0
 8008d36:	76bb      	strb	r3, [r7, #26]
 8008d38:	e001      	b.n	8008d3e <tcp_process+0x30e>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008d3e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008d42:	f113 0f0d 	cmn.w	r3, #13
 8008d46:	d102      	bne.n	8008d4e <tcp_process+0x31e>
          return ERR_ABRT;
 8008d48:	f06f 030c 	mvn.w	r3, #12
 8008d4c:	e250      	b.n	80091f0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8b5b      	ldrh	r3, [r3, #26]
 8008d52:	f043 0302 	orr.w	r3, r3, #2
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008d5c:	e23a      	b.n	80091d4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008d5e:	4b98      	ldr	r3, [pc, #608]	; (8008fc0 <tcp_process+0x590>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	f003 0310 	and.w	r3, r3, #16
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 8234 	beq.w	80091d4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d6c:	4b95      	ldr	r3, [pc, #596]	; (8008fc4 <tcp_process+0x594>)
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	4b95      	ldr	r3, [pc, #596]	; (8008fc8 <tcp_process+0x598>)
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	4b95      	ldr	r3, [pc, #596]	; (8008fcc <tcp_process+0x59c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d7c:	4b94      	ldr	r3, [pc, #592]	; (8008fd0 <tcp_process+0x5a0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d80:	885b      	ldrh	r3, [r3, #2]
 8008d82:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d84:	4a92      	ldr	r2, [pc, #584]	; (8008fd0 <tcp_process+0x5a0>)
 8008d86:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d88:	8812      	ldrh	r2, [r2, #0]
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	9202      	str	r2, [sp, #8]
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	4b90      	ldr	r3, [pc, #576]	; (8008fd4 <tcp_process+0x5a4>)
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	4b90      	ldr	r3, [pc, #576]	; (8008fd8 <tcp_process+0x5a8>)
 8008d96:	4602      	mov	r2, r0
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f003 f8dd 	bl	800bf58 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008da4:	2b05      	cmp	r3, #5
 8008da6:	f200 8215 	bhi.w	80091d4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f002 fea7 	bl	800bb04 <tcp_rexmit_rto>
      break;
 8008db6:	e20d      	b.n	80091d4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008db8:	4b81      	ldr	r3, [pc, #516]	; (8008fc0 <tcp_process+0x590>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	f003 0310 	and.w	r3, r3, #16
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80a1 	beq.w	8008f08 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008dc6:	4b7f      	ldr	r3, [pc, #508]	; (8008fc4 <tcp_process+0x594>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	db7e      	blt.n	8008ed4 <tcp_process+0x4a4>
 8008dd6:	4b7b      	ldr	r3, [pc, #492]	; (8008fc4 <tcp_process+0x594>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dc77      	bgt.n	8008ed4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2204      	movs	r2, #4
 8008de8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008df2:	23fa      	movs	r3, #250	; 0xfa
 8008df4:	76bb      	strb	r3, [r7, #26]
 8008df6:	e01d      	b.n	8008e34 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d106      	bne.n	8008e10 <tcp_process+0x3e0>
 8008e02:	4b76      	ldr	r3, [pc, #472]	; (8008fdc <tcp_process+0x5ac>)
 8008e04:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008e08:	4975      	ldr	r1, [pc, #468]	; (8008fe0 <tcp_process+0x5b0>)
 8008e0a:	4876      	ldr	r0, [pc, #472]	; (8008fe4 <tcp_process+0x5b4>)
 8008e0c:	f006 f87a 	bl	800ef04 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <tcp_process+0x400>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	6910      	ldr	r0, [r2, #16]
 8008e24:	2200      	movs	r2, #0
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	4798      	blx	r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	76bb      	strb	r3, [r7, #26]
 8008e2e:	e001      	b.n	8008e34 <tcp_process+0x404>
 8008e30:	23f0      	movs	r3, #240	; 0xf0
 8008e32:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008e34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008e3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e40:	f113 0f0d 	cmn.w	r3, #13
 8008e44:	d002      	beq.n	8008e4c <tcp_process+0x41c>
              tcp_abort(pcb);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fd fce8 	bl	800681c <tcp_abort>
            }
            return ERR_ABRT;
 8008e4c:	f06f 030c 	mvn.w	r3, #12
 8008e50:	e1ce      	b.n	80091f0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fae0 	bl	8009418 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008e58:	4b63      	ldr	r3, [pc, #396]	; (8008fe8 <tcp_process+0x5b8>)
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <tcp_process+0x43c>
            recv_acked--;
 8008e60:	4b61      	ldr	r3, [pc, #388]	; (8008fe8 <tcp_process+0x5b8>)
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	4b5f      	ldr	r3, [pc, #380]	; (8008fe8 <tcp_process+0x5b8>)
 8008e6a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e70:	009a      	lsls	r2, r3, #2
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	f241 111c 	movw	r1, #4380	; 0x111c
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	bf38      	it	cc
 8008e80:	460b      	movcc	r3, r1
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d204      	bcs.n	8008e90 <tcp_process+0x460>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	e00d      	b.n	8008eac <tcp_process+0x47c>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	f241 121c 	movw	r2, #4380	; 0x111c
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d904      	bls.n	8008ea8 <tcp_process+0x478>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	e001      	b.n	8008eac <tcp_process+0x47c>
 8008ea8:	f241 131c 	movw	r3, #4380	; 0x111c
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008eb2:	4b4e      	ldr	r3, [pc, #312]	; (8008fec <tcp_process+0x5bc>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d037      	beq.n	8008f2e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8b5b      	ldrh	r3, [r3, #26]
 8008ec2:	f043 0302 	orr.w	r3, r3, #2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2207      	movs	r2, #7
 8008ed0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008ed2:	e02c      	b.n	8008f2e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ed4:	4b3b      	ldr	r3, [pc, #236]	; (8008fc4 <tcp_process+0x594>)
 8008ed6:	6819      	ldr	r1, [r3, #0]
 8008ed8:	4b3b      	ldr	r3, [pc, #236]	; (8008fc8 <tcp_process+0x598>)
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	4b3b      	ldr	r3, [pc, #236]	; (8008fcc <tcp_process+0x59c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ee4:	4b3a      	ldr	r3, [pc, #232]	; (8008fd0 <tcp_process+0x5a0>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ee8:	885b      	ldrh	r3, [r3, #2]
 8008eea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008eec:	4a38      	ldr	r2, [pc, #224]	; (8008fd0 <tcp_process+0x5a0>)
 8008eee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ef0:	8812      	ldrh	r2, [r2, #0]
 8008ef2:	b292      	uxth	r2, r2
 8008ef4:	9202      	str	r2, [sp, #8]
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <tcp_process+0x5a4>)
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	4b36      	ldr	r3, [pc, #216]	; (8008fd8 <tcp_process+0x5a8>)
 8008efe:	4602      	mov	r2, r0
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f003 f829 	bl	800bf58 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008f06:	e167      	b.n	80091d8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008f08:	4b2d      	ldr	r3, [pc, #180]	; (8008fc0 <tcp_process+0x590>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 8161 	beq.w	80091d8 <tcp_process+0x7a8>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	1e5a      	subs	r2, r3, #1
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <tcp_process+0x59c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	f040 8159 	bne.w	80091d8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f002 fe0e 	bl	800bb48 <tcp_rexmit>
      break;
 8008f2c:	e154      	b.n	80091d8 <tcp_process+0x7a8>
 8008f2e:	e153      	b.n	80091d8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fa71 	bl	8009418 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008f36:	4b2d      	ldr	r3, [pc, #180]	; (8008fec <tcp_process+0x5bc>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 814c 	beq.w	80091dc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	8b5b      	ldrh	r3, [r3, #26]
 8008f48:	f043 0302 	orr.w	r3, r3, #2
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2207      	movs	r2, #7
 8008f56:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008f58:	e140      	b.n	80091dc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa5c 	bl	8009418 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008f60:	4b22      	ldr	r3, [pc, #136]	; (8008fec <tcp_process+0x5bc>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	f003 0320 	and.w	r3, r3, #32
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d071      	beq.n	8009050 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f6c:	4b14      	ldr	r3, [pc, #80]	; (8008fc0 <tcp_process+0x590>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d060      	beq.n	800903a <tcp_process+0x60a>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f7c:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <tcp_process+0x594>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d15a      	bne.n	800903a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d156      	bne.n	800903a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	8b5b      	ldrh	r3, [r3, #26]
 8008f90:	f043 0302 	orr.w	r3, r3, #2
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7fe fdbc 	bl	8007b18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008fa0:	4b13      	ldr	r3, [pc, #76]	; (8008ff0 <tcp_process+0x5c0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d105      	bne.n	8008fb6 <tcp_process+0x586>
 8008faa:	4b11      	ldr	r3, [pc, #68]	; (8008ff0 <tcp_process+0x5c0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	4a0f      	ldr	r2, [pc, #60]	; (8008ff0 <tcp_process+0x5c0>)
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	e02e      	b.n	8009014 <tcp_process+0x5e4>
 8008fb6:	4b0e      	ldr	r3, [pc, #56]	; (8008ff0 <tcp_process+0x5c0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	e027      	b.n	800900e <tcp_process+0x5de>
 8008fbe:	bf00      	nop
 8008fc0:	200086cc 	.word	0x200086cc
 8008fc4:	200086c4 	.word	0x200086c4
 8008fc8:	200086ca 	.word	0x200086ca
 8008fcc:	200086c0 	.word	0x200086c0
 8008fd0:	200086b0 	.word	0x200086b0
 8008fd4:	20005128 	.word	0x20005128
 8008fd8:	2000512c 	.word	0x2000512c
 8008fdc:	08011454 	.word	0x08011454
 8008fe0:	080116f4 	.word	0x080116f4
 8008fe4:	080114a0 	.word	0x080114a0
 8008fe8:	200086c8 	.word	0x200086c8
 8008fec:	200086cd 	.word	0x200086cd
 8008ff0:	20008694 	.word	0x20008694
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d104      	bne.n	8009008 <tcp_process+0x5d8>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	60da      	str	r2, [r3, #12]
 8009006:	e005      	b.n	8009014 <tcp_process+0x5e4>
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1ef      	bne.n	8008ff4 <tcp_process+0x5c4>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	60da      	str	r2, [r3, #12]
 800901a:	4b77      	ldr	r3, [pc, #476]	; (80091f8 <tcp_process+0x7c8>)
 800901c:	2201      	movs	r2, #1
 800901e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	220a      	movs	r2, #10
 8009024:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009026:	4b75      	ldr	r3, [pc, #468]	; (80091fc <tcp_process+0x7cc>)
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	4a73      	ldr	r2, [pc, #460]	; (80091fc <tcp_process+0x7cc>)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	f003 f952 	bl	800c2dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009038:	e0d2      	b.n	80091e0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8b5b      	ldrh	r3, [r3, #26]
 800903e:	f043 0302 	orr.w	r3, r3, #2
 8009042:	b29a      	uxth	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2208      	movs	r2, #8
 800904c:	751a      	strb	r2, [r3, #20]
      break;
 800904e:	e0c7      	b.n	80091e0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009050:	4b6b      	ldr	r3, [pc, #428]	; (8009200 <tcp_process+0x7d0>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80c1 	beq.w	80091e0 <tcp_process+0x7b0>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009062:	4b68      	ldr	r3, [pc, #416]	; (8009204 <tcp_process+0x7d4>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	429a      	cmp	r2, r3
 8009068:	f040 80ba 	bne.w	80091e0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 80b5 	bne.w	80091e0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2206      	movs	r2, #6
 800907a:	751a      	strb	r2, [r3, #20]
      break;
 800907c:	e0b0      	b.n	80091e0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f9ca 	bl	8009418 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009084:	4b60      	ldr	r3, [pc, #384]	; (8009208 <tcp_process+0x7d8>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 80a9 	beq.w	80091e4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	8b5b      	ldrh	r3, [r3, #26]
 8009096:	f043 0302 	orr.w	r3, r3, #2
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fe fd39 	bl	8007b18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80090a6:	4b59      	ldr	r3, [pc, #356]	; (800920c <tcp_process+0x7dc>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d105      	bne.n	80090bc <tcp_process+0x68c>
 80090b0:	4b56      	ldr	r3, [pc, #344]	; (800920c <tcp_process+0x7dc>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	4a55      	ldr	r2, [pc, #340]	; (800920c <tcp_process+0x7dc>)
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	e013      	b.n	80090e4 <tcp_process+0x6b4>
 80090bc:	4b53      	ldr	r3, [pc, #332]	; (800920c <tcp_process+0x7dc>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	613b      	str	r3, [r7, #16]
 80090c2:	e00c      	b.n	80090de <tcp_process+0x6ae>
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d104      	bne.n	80090d8 <tcp_process+0x6a8>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	60da      	str	r2, [r3, #12]
 80090d6:	e005      	b.n	80090e4 <tcp_process+0x6b4>
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1ef      	bne.n	80090c4 <tcp_process+0x694>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	60da      	str	r2, [r3, #12]
 80090ea:	4b43      	ldr	r3, [pc, #268]	; (80091f8 <tcp_process+0x7c8>)
 80090ec:	2201      	movs	r2, #1
 80090ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	220a      	movs	r2, #10
 80090f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80090f6:	4b41      	ldr	r3, [pc, #260]	; (80091fc <tcp_process+0x7cc>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	4a3f      	ldr	r2, [pc, #252]	; (80091fc <tcp_process+0x7cc>)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	f003 f8ea 	bl	800c2dc <tcp_timer_needed>
      }
      break;
 8009108:	e06c      	b.n	80091e4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f984 	bl	8009418 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009110:	4b3b      	ldr	r3, [pc, #236]	; (8009200 <tcp_process+0x7d0>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	f003 0310 	and.w	r3, r3, #16
 8009118:	2b00      	cmp	r3, #0
 800911a:	d065      	beq.n	80091e8 <tcp_process+0x7b8>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009120:	4b38      	ldr	r3, [pc, #224]	; (8009204 <tcp_process+0x7d4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d15f      	bne.n	80091e8 <tcp_process+0x7b8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800912c:	2b00      	cmp	r3, #0
 800912e:	d15b      	bne.n	80091e8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7fe fcf1 	bl	8007b18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009136:	4b35      	ldr	r3, [pc, #212]	; (800920c <tcp_process+0x7dc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d105      	bne.n	800914c <tcp_process+0x71c>
 8009140:	4b32      	ldr	r3, [pc, #200]	; (800920c <tcp_process+0x7dc>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	4a31      	ldr	r2, [pc, #196]	; (800920c <tcp_process+0x7dc>)
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	e013      	b.n	8009174 <tcp_process+0x744>
 800914c:	4b2f      	ldr	r3, [pc, #188]	; (800920c <tcp_process+0x7dc>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	e00c      	b.n	800916e <tcp_process+0x73e>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	429a      	cmp	r2, r3
 800915c:	d104      	bne.n	8009168 <tcp_process+0x738>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	60da      	str	r2, [r3, #12]
 8009166:	e005      	b.n	8009174 <tcp_process+0x744>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1ef      	bne.n	8009154 <tcp_process+0x724>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	60da      	str	r2, [r3, #12]
 800917a:	4b1f      	ldr	r3, [pc, #124]	; (80091f8 <tcp_process+0x7c8>)
 800917c:	2201      	movs	r2, #1
 800917e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	220a      	movs	r2, #10
 8009184:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009186:	4b1d      	ldr	r3, [pc, #116]	; (80091fc <tcp_process+0x7cc>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60da      	str	r2, [r3, #12]
 800918e:	4a1b      	ldr	r2, [pc, #108]	; (80091fc <tcp_process+0x7cc>)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	f003 f8a2 	bl	800c2dc <tcp_timer_needed>
      }
      break;
 8009198:	e026      	b.n	80091e8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f93c 	bl	8009418 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80091a0:	4b17      	ldr	r3, [pc, #92]	; (8009200 <tcp_process+0x7d0>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01f      	beq.n	80091ec <tcp_process+0x7bc>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091b0:	4b14      	ldr	r3, [pc, #80]	; (8009204 <tcp_process+0x7d4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d119      	bne.n	80091ec <tcp_process+0x7bc>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d115      	bne.n	80091ec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80091c0:	4b11      	ldr	r3, [pc, #68]	; (8009208 <tcp_process+0x7d8>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	f043 0310 	orr.w	r3, r3, #16
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	4b0f      	ldr	r3, [pc, #60]	; (8009208 <tcp_process+0x7d8>)
 80091cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80091ce:	e00d      	b.n	80091ec <tcp_process+0x7bc>
    default:
      break;
 80091d0:	bf00      	nop
 80091d2:	e00c      	b.n	80091ee <tcp_process+0x7be>
      break;
 80091d4:	bf00      	nop
 80091d6:	e00a      	b.n	80091ee <tcp_process+0x7be>
      break;
 80091d8:	bf00      	nop
 80091da:	e008      	b.n	80091ee <tcp_process+0x7be>
      break;
 80091dc:	bf00      	nop
 80091de:	e006      	b.n	80091ee <tcp_process+0x7be>
      break;
 80091e0:	bf00      	nop
 80091e2:	e004      	b.n	80091ee <tcp_process+0x7be>
      break;
 80091e4:	bf00      	nop
 80091e6:	e002      	b.n	80091ee <tcp_process+0x7be>
      break;
 80091e8:	bf00      	nop
 80091ea:	e000      	b.n	80091ee <tcp_process+0x7be>
      break;
 80091ec:	bf00      	nop
  }
  return ERR_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3724      	adds	r7, #36	; 0x24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd90      	pop	{r4, r7, pc}
 80091f8:	2000869c 	.word	0x2000869c
 80091fc:	20008698 	.word	0x20008698
 8009200:	200086cc 	.word	0x200086cc
 8009204:	200086c4 	.word	0x200086c4
 8009208:	200086cd 	.word	0x200086cd
 800920c:	20008694 	.word	0x20008694

08009210 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <tcp_oos_insert_segment+0x1e>
 8009220:	4b3b      	ldr	r3, [pc, #236]	; (8009310 <tcp_oos_insert_segment+0x100>)
 8009222:	f240 421f 	movw	r2, #1055	; 0x41f
 8009226:	493b      	ldr	r1, [pc, #236]	; (8009314 <tcp_oos_insert_segment+0x104>)
 8009228:	483b      	ldr	r0, [pc, #236]	; (8009318 <tcp_oos_insert_segment+0x108>)
 800922a:	f005 fe6b 	bl	800ef04 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	899b      	ldrh	r3, [r3, #12]
 8009234:	b29b      	uxth	r3, r3
 8009236:	4618      	mov	r0, r3
 8009238:	f7fb f9d4 	bl	80045e4 <lwip_htons>
 800923c:	4603      	mov	r3, r0
 800923e:	b2db      	uxtb	r3, r3
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d028      	beq.n	800929a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009248:	6838      	ldr	r0, [r7, #0]
 800924a:	f7fe f977 	bl	800753c <tcp_segs_free>
    next = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	603b      	str	r3, [r7, #0]
 8009252:	e056      	b.n	8009302 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	899b      	ldrh	r3, [r3, #12]
 800925a:	b29b      	uxth	r3, r3
 800925c:	4618      	mov	r0, r3
 800925e:	f7fb f9c1 	bl	80045e4 <lwip_htons>
 8009262:	4603      	mov	r3, r0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00d      	beq.n	800928a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	899b      	ldrh	r3, [r3, #12]
 8009274:	b29c      	uxth	r4, r3
 8009276:	2001      	movs	r0, #1
 8009278:	f7fb f9b4 	bl	80045e4 <lwip_htons>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	4322      	orrs	r2, r4
 8009286:	b292      	uxth	r2, r2
 8009288:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7fe f966 	bl	8007566 <tcp_seg_free>
    while (next &&
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00e      	beq.n	80092be <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	891b      	ldrh	r3, [r3, #8]
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b1d      	ldr	r3, [pc, #116]	; (800931c <tcp_oos_insert_segment+0x10c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	441a      	add	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	8909      	ldrh	r1, [r1, #8]
 80092b6:	440b      	add	r3, r1
 80092b8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	daca      	bge.n	8009254 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01e      	beq.n	8009302 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	891b      	ldrh	r3, [r3, #8]
 80092c8:	461a      	mov	r2, r3
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <tcp_oos_insert_segment+0x10c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	441a      	add	r2, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80092d8:	2b00      	cmp	r3, #0
 80092da:	dd12      	ble.n	8009302 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	4b0d      	ldr	r3, [pc, #52]	; (800931c <tcp_oos_insert_segment+0x10c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	891b      	ldrh	r3, [r3, #8]
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f7fc fb7f 	bl	8005a00 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	601a      	str	r2, [r3, #0]
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	bd90      	pop	{r4, r7, pc}
 8009310:	08011454 	.word	0x08011454
 8009314:	08011714 	.word	0x08011714
 8009318:	080114a0 	.word	0x080114a0
 800931c:	200086c0 	.word	0x200086c0

08009320 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009320:	b5b0      	push	{r4, r5, r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800932e:	e03e      	b.n	80093ae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	4618      	mov	r0, r3
 8009340:	f7fc fd6c 	bl	8005e1c <pbuf_clen>
 8009344:	4603      	mov	r3, r0
 8009346:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800934e:	8a7a      	ldrh	r2, [r7, #18]
 8009350:	429a      	cmp	r2, r3
 8009352:	d906      	bls.n	8009362 <tcp_free_acked_segments+0x42>
 8009354:	4b2a      	ldr	r3, [pc, #168]	; (8009400 <tcp_free_acked_segments+0xe0>)
 8009356:	f240 4257 	movw	r2, #1111	; 0x457
 800935a:	492a      	ldr	r1, [pc, #168]	; (8009404 <tcp_free_acked_segments+0xe4>)
 800935c:	482a      	ldr	r0, [pc, #168]	; (8009408 <tcp_free_acked_segments+0xe8>)
 800935e:	f005 fdd1 	bl	800ef04 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009368:	8a7b      	ldrh	r3, [r7, #18]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	891a      	ldrh	r2, [r3, #8]
 8009378:	4b24      	ldr	r3, [pc, #144]	; (800940c <tcp_free_acked_segments+0xec>)
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	4413      	add	r3, r2
 800937e:	b29a      	uxth	r2, r3
 8009380:	4b22      	ldr	r3, [pc, #136]	; (800940c <tcp_free_acked_segments+0xec>)
 8009382:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009384:	6978      	ldr	r0, [r7, #20]
 8009386:	f7fe f8ee 	bl	8007566 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d109      	bne.n	80093ae <tcp_free_acked_segments+0x8e>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <tcp_free_acked_segments+0x8e>
 80093a0:	4b17      	ldr	r3, [pc, #92]	; (8009400 <tcp_free_acked_segments+0xe0>)
 80093a2:	f240 4261 	movw	r2, #1121	; 0x461
 80093a6:	491a      	ldr	r1, [pc, #104]	; (8009410 <tcp_free_acked_segments+0xf0>)
 80093a8:	4817      	ldr	r0, [pc, #92]	; (8009408 <tcp_free_acked_segments+0xe8>)
 80093aa:	f005 fdab 	bl	800ef04 <iprintf>
  while (seg_list != NULL &&
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d020      	beq.n	80093f6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fb f927 	bl	800460e <lwip_htonl>
 80093c0:	4604      	mov	r4, r0
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	891b      	ldrh	r3, [r3, #8]
 80093c6:	461d      	mov	r5, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	899b      	ldrh	r3, [r3, #12]
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fb f907 	bl	80045e4 <lwip_htons>
 80093d6:	4603      	mov	r3, r0
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f003 0303 	and.w	r3, r3, #3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <tcp_free_acked_segments+0xc6>
 80093e2:	2301      	movs	r3, #1
 80093e4:	e000      	b.n	80093e8 <tcp_free_acked_segments+0xc8>
 80093e6:	2300      	movs	r3, #0
 80093e8:	442b      	add	r3, r5
 80093ea:	18e2      	adds	r2, r4, r3
 80093ec:	4b09      	ldr	r3, [pc, #36]	; (8009414 <tcp_free_acked_segments+0xf4>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dd9c      	ble.n	8009330 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80093f6:	68bb      	ldr	r3, [r7, #8]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009400:	08011454 	.word	0x08011454
 8009404:	0801173c 	.word	0x0801173c
 8009408:	080114a0 	.word	0x080114a0
 800940c:	200086c8 	.word	0x200086c8
 8009410:	08011764 	.word	0x08011764
 8009414:	200086c4 	.word	0x200086c4

08009418 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009418:	b5b0      	push	{r4, r5, r7, lr}
 800941a:	b094      	sub	sp, #80	; 0x50
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d106      	bne.n	8009438 <tcp_receive+0x20>
 800942a:	4b91      	ldr	r3, [pc, #580]	; (8009670 <tcp_receive+0x258>)
 800942c:	f240 427b 	movw	r2, #1147	; 0x47b
 8009430:	4990      	ldr	r1, [pc, #576]	; (8009674 <tcp_receive+0x25c>)
 8009432:	4891      	ldr	r0, [pc, #580]	; (8009678 <tcp_receive+0x260>)
 8009434:	f005 fd66 	bl	800ef04 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	7d1b      	ldrb	r3, [r3, #20]
 800943c:	2b03      	cmp	r3, #3
 800943e:	d806      	bhi.n	800944e <tcp_receive+0x36>
 8009440:	4b8b      	ldr	r3, [pc, #556]	; (8009670 <tcp_receive+0x258>)
 8009442:	f240 427c 	movw	r2, #1148	; 0x47c
 8009446:	498d      	ldr	r1, [pc, #564]	; (800967c <tcp_receive+0x264>)
 8009448:	488b      	ldr	r0, [pc, #556]	; (8009678 <tcp_receive+0x260>)
 800944a:	f005 fd5b 	bl	800ef04 <iprintf>

  if (flags & TCP_ACK) {
 800944e:	4b8c      	ldr	r3, [pc, #560]	; (8009680 <tcp_receive+0x268>)
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	f003 0310 	and.w	r3, r3, #16
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 8264 	beq.w	8009924 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009462:	461a      	mov	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009468:	4413      	add	r3, r2
 800946a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009470:	4b84      	ldr	r3, [pc, #528]	; (8009684 <tcp_receive+0x26c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	db1b      	blt.n	80094b2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800947e:	4b81      	ldr	r3, [pc, #516]	; (8009684 <tcp_receive+0x26c>)
 8009480:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009482:	429a      	cmp	r2, r3
 8009484:	d106      	bne.n	8009494 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800948a:	4b7f      	ldr	r3, [pc, #508]	; (8009688 <tcp_receive+0x270>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	db0e      	blt.n	80094b2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009498:	4b7b      	ldr	r3, [pc, #492]	; (8009688 <tcp_receive+0x270>)
 800949a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800949c:	429a      	cmp	r2, r3
 800949e:	d125      	bne.n	80094ec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80094a0:	4b7a      	ldr	r3, [pc, #488]	; (800968c <tcp_receive+0x274>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	89db      	ldrh	r3, [r3, #14]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d91c      	bls.n	80094ec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80094b2:	4b76      	ldr	r3, [pc, #472]	; (800968c <tcp_receive+0x274>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	89db      	ldrh	r3, [r3, #14]
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d205      	bcs.n	80094dc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80094dc:	4b69      	ldr	r3, [pc, #420]	; (8009684 <tcp_receive+0x26c>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80094e4:	4b68      	ldr	r3, [pc, #416]	; (8009688 <tcp_receive+0x270>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80094ec:	4b66      	ldr	r3, [pc, #408]	; (8009688 <tcp_receive+0x270>)
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	dc58      	bgt.n	80095ac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80094fa:	4b65      	ldr	r3, [pc, #404]	; (8009690 <tcp_receive+0x278>)
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d14b      	bne.n	800959a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800950c:	4413      	add	r3, r2
 800950e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009510:	429a      	cmp	r2, r3
 8009512:	d142      	bne.n	800959a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800951a:	2b00      	cmp	r3, #0
 800951c:	db3d      	blt.n	800959a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009522:	4b59      	ldr	r3, [pc, #356]	; (8009688 <tcp_receive+0x270>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	429a      	cmp	r2, r3
 8009528:	d137      	bne.n	800959a <tcp_receive+0x182>
              found_dupack = 1;
 800952a:	2301      	movs	r3, #1
 800952c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009534:	2bff      	cmp	r3, #255	; 0xff
 8009536:	d007      	beq.n	8009548 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800953e:	3301      	adds	r3, #1
 8009540:	b2da      	uxtb	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800954e:	2b03      	cmp	r3, #3
 8009550:	d91b      	bls.n	800958a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800955c:	4413      	add	r3, r2
 800955e:	b29a      	uxth	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009566:	429a      	cmp	r2, r3
 8009568:	d30a      	bcc.n	8009580 <tcp_receive+0x168>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009574:	4413      	add	r3, r2
 8009576:	b29a      	uxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800957e:	e004      	b.n	800958a <tcp_receive+0x172>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009586:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009590:	2b02      	cmp	r3, #2
 8009592:	d902      	bls.n	800959a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f002 fb43 	bl	800bc20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800959a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 8161 	bne.w	8009864 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095aa:	e15b      	b.n	8009864 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095ac:	4b36      	ldr	r3, [pc, #216]	; (8009688 <tcp_receive+0x270>)
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	3b01      	subs	r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f2c0 814e 	blt.w	800985a <tcp_receive+0x442>
 80095be:	4b32      	ldr	r3, [pc, #200]	; (8009688 <tcp_receive+0x270>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f300 8146 	bgt.w	800985a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	8b5b      	ldrh	r3, [r3, #26]
 80095d2:	f003 0304 	and.w	r3, r3, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d010      	beq.n	80095fc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8b5b      	ldrh	r3, [r3, #26]
 80095de:	f023 0304 	bic.w	r3, r3, #4
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800960a:	10db      	asrs	r3, r3, #3
 800960c:	b21b      	sxth	r3, r3
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009616:	b29b      	uxth	r3, r3
 8009618:	4413      	add	r3, r2
 800961a:	b29b      	uxth	r3, r3
 800961c:	b21a      	sxth	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009624:	4b18      	ldr	r3, [pc, #96]	; (8009688 <tcp_receive+0x270>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962e:	b29b      	uxth	r3, r3
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800963c:	4b12      	ldr	r3, [pc, #72]	; (8009688 <tcp_receive+0x270>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	7d1b      	ldrb	r3, [r3, #20]
 8009648:	2b03      	cmp	r3, #3
 800964a:	f240 8097 	bls.w	800977c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800965a:	429a      	cmp	r2, r3
 800965c:	d245      	bcs.n	80096ea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	8b5b      	ldrh	r3, [r3, #26]
 8009662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009666:	2b00      	cmp	r3, #0
 8009668:	d014      	beq.n	8009694 <tcp_receive+0x27c>
 800966a:	2301      	movs	r3, #1
 800966c:	e013      	b.n	8009696 <tcp_receive+0x27e>
 800966e:	bf00      	nop
 8009670:	08011454 	.word	0x08011454
 8009674:	08011784 	.word	0x08011784
 8009678:	080114a0 	.word	0x080114a0
 800967c:	080117a0 	.word	0x080117a0
 8009680:	200086cc 	.word	0x200086cc
 8009684:	200086c0 	.word	0x200086c0
 8009688:	200086c4 	.word	0x200086c4
 800968c:	200086b0 	.word	0x200086b0
 8009690:	200086ca 	.word	0x200086ca
 8009694:	2302      	movs	r3, #2
 8009696:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800969a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800969e:	b29a      	uxth	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096a4:	fb12 f303 	smulbb	r3, r2, r3
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096ac:	4293      	cmp	r3, r2
 80096ae:	bf28      	it	cs
 80096b0:	4613      	movcs	r3, r2
 80096b2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80096ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096bc:	4413      	add	r3, r2
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d309      	bcc.n	80096de <tcp_receive+0x2c6>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80096d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096d2:	4413      	add	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80096dc:	e04e      	b.n	800977c <tcp_receive+0x364>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80096e8:	e048      	b.n	800977c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096f2:	4413      	add	r3, r2
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d309      	bcc.n	8009714 <tcp_receive+0x2fc>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009708:	4413      	add	r3, r2
 800970a:	b29a      	uxth	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009712:	e004      	b.n	800971e <tcp_receive+0x306>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800971a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800972a:	429a      	cmp	r2, r3
 800972c:	d326      	bcc.n	800977c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800974e:	4413      	add	r3, r2
 8009750:	b29a      	uxth	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009758:	429a      	cmp	r2, r3
 800975a:	d30a      	bcc.n	8009772 <tcp_receive+0x35a>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009766:	4413      	add	r3, r2
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009770:	e004      	b.n	800977c <tcp_receive+0x364>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009778:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009784:	4a98      	ldr	r2, [pc, #608]	; (80099e8 <tcp_receive+0x5d0>)
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff fdca 	bl	8009320 <tcp_free_acked_segments>
 800978c:	4602      	mov	r2, r0
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	4a94      	ldr	r2, [pc, #592]	; (80099ec <tcp_receive+0x5d4>)
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff fdbf 	bl	8009320 <tcp_free_acked_segments>
 80097a2:	4602      	mov	r2, r0
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d104      	bne.n	80097ba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097b6:	861a      	strh	r2, [r3, #48]	; 0x30
 80097b8:	e002      	b.n	80097c0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d103      	bne.n	80097d6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80097dc:	4b84      	ldr	r3, [pc, #528]	; (80099f0 <tcp_receive+0x5d8>)
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	4413      	add	r3, r2
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	8b5b      	ldrh	r3, [r3, #26]
 80097ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d035      	beq.n	8009862 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d118      	bne.n	8009830 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00c      	beq.n	8009820 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	4618      	mov	r0, r3
 8009814:	f7fa fefb 	bl	800460e <lwip_htonl>
 8009818:	4603      	mov	r3, r0
 800981a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800981c:	2b00      	cmp	r3, #0
 800981e:	dc20      	bgt.n	8009862 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	8b5b      	ldrh	r3, [r3, #26]
 8009824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800982e:	e018      	b.n	8009862 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	4618      	mov	r0, r3
 800983e:	f7fa fee6 	bl	800460e <lwip_htonl>
 8009842:	4603      	mov	r3, r0
 8009844:	1ae3      	subs	r3, r4, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc0b      	bgt.n	8009862 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8b5b      	ldrh	r3, [r3, #26]
 800984e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009858:	e003      	b.n	8009862 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f002 fbce 	bl	800bffc <tcp_send_empty_ack>
 8009860:	e000      	b.n	8009864 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009862:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009868:	2b00      	cmp	r3, #0
 800986a:	d05b      	beq.n	8009924 <tcp_receive+0x50c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009870:	4b60      	ldr	r3, [pc, #384]	; (80099f4 <tcp_receive+0x5dc>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	da54      	bge.n	8009924 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800987a:	4b5f      	ldr	r3, [pc, #380]	; (80099f8 <tcp_receive+0x5e0>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	b29a      	uxth	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009884:	b29b      	uxth	r3, r3
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	b29b      	uxth	r3, r3
 800988a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800988e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009898:	10db      	asrs	r3, r3, #3
 800989a:	b21b      	sxth	r3, r3
 800989c:	b29b      	uxth	r3, r3
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80098b2:	4413      	add	r3, r2
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	b21a      	sxth	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80098bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	da05      	bge.n	80098d0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80098c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80098c8:	425b      	negs	r3, r3
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80098d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098da:	109b      	asrs	r3, r3, #2
 80098dc:	b21b      	sxth	r3, r3
 80098de:	b29b      	uxth	r3, r3
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80098f4:	4413      	add	r3, r2
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	b21a      	sxth	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009904:	10db      	asrs	r3, r3, #3
 8009906:	b21b      	sxth	r3, r3
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009910:	b29b      	uxth	r3, r3
 8009912:	4413      	add	r3, r2
 8009914:	b29b      	uxth	r3, r3
 8009916:	b21a      	sxth	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009924:	4b35      	ldr	r3, [pc, #212]	; (80099fc <tcp_receive+0x5e4>)
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 84e2 	beq.w	800a2f2 <tcp_receive+0xeda>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7d1b      	ldrb	r3, [r3, #20]
 8009932:	2b06      	cmp	r3, #6
 8009934:	f200 84dd 	bhi.w	800a2f2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800993c:	4b30      	ldr	r3, [pc, #192]	; (8009a00 <tcp_receive+0x5e8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	3b01      	subs	r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	f2c0 808f 	blt.w	8009a68 <tcp_receive+0x650>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800994e:	4b2b      	ldr	r3, [pc, #172]	; (80099fc <tcp_receive+0x5e4>)
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	4619      	mov	r1, r3
 8009954:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <tcp_receive+0x5e8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	440b      	add	r3, r1
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	3301      	adds	r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	f300 8082 	bgt.w	8009a68 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009964:	4b27      	ldr	r3, [pc, #156]	; (8009a04 <tcp_receive+0x5ec>)
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800996e:	4b24      	ldr	r3, [pc, #144]	; (8009a00 <tcp_receive+0x5e8>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009976:	4b23      	ldr	r3, [pc, #140]	; (8009a04 <tcp_receive+0x5ec>)
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <tcp_receive+0x574>
 800997e:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <tcp_receive+0x5f0>)
 8009980:	f240 5294 	movw	r2, #1428	; 0x594
 8009984:	4921      	ldr	r1, [pc, #132]	; (8009a0c <tcp_receive+0x5f4>)
 8009986:	4822      	ldr	r0, [pc, #136]	; (8009a10 <tcp_receive+0x5f8>)
 8009988:	f005 fabc 	bl	800ef04 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009992:	4293      	cmp	r3, r2
 8009994:	d906      	bls.n	80099a4 <tcp_receive+0x58c>
 8009996:	4b1c      	ldr	r3, [pc, #112]	; (8009a08 <tcp_receive+0x5f0>)
 8009998:	f240 5295 	movw	r2, #1429	; 0x595
 800999c:	491d      	ldr	r1, [pc, #116]	; (8009a14 <tcp_receive+0x5fc>)
 800999e:	481c      	ldr	r0, [pc, #112]	; (8009a10 <tcp_receive+0x5f8>)
 80099a0:	f005 fab0 	bl	800ef04 <iprintf>
      off = (u16_t)off32;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80099aa:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <tcp_receive+0x5ec>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	891b      	ldrh	r3, [r3, #8]
 80099b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d906      	bls.n	80099c6 <tcp_receive+0x5ae>
 80099b8:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <tcp_receive+0x5f0>)
 80099ba:	f240 5297 	movw	r2, #1431	; 0x597
 80099be:	4916      	ldr	r1, [pc, #88]	; (8009a18 <tcp_receive+0x600>)
 80099c0:	4813      	ldr	r0, [pc, #76]	; (8009a10 <tcp_receive+0x5f8>)
 80099c2:	f005 fa9f 	bl	800ef04 <iprintf>
      inseg.len -= off;
 80099c6:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <tcp_receive+0x5ec>)
 80099c8:	891a      	ldrh	r2, [r3, #8]
 80099ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	4b0c      	ldr	r3, [pc, #48]	; (8009a04 <tcp_receive+0x5ec>)
 80099d4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80099d6:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <tcp_receive+0x5ec>)
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	891a      	ldrh	r2, [r3, #8]
 80099dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80099e4:	e02a      	b.n	8009a3c <tcp_receive+0x624>
 80099e6:	bf00      	nop
 80099e8:	080117bc 	.word	0x080117bc
 80099ec:	080117c4 	.word	0x080117c4
 80099f0:	200086c8 	.word	0x200086c8
 80099f4:	200086c4 	.word	0x200086c4
 80099f8:	20008688 	.word	0x20008688
 80099fc:	200086ca 	.word	0x200086ca
 8009a00:	200086c0 	.word	0x200086c0
 8009a04:	200086a0 	.word	0x200086a0
 8009a08:	08011454 	.word	0x08011454
 8009a0c:	080117cc 	.word	0x080117cc
 8009a10:	080114a0 	.word	0x080114a0
 8009a14:	080117dc 	.word	0x080117dc
 8009a18:	080117ec 	.word	0x080117ec
        off -= p->len;
 8009a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a1e:	895b      	ldrh	r3, [r3, #10]
 8009a20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a32:	2200      	movs	r2, #0
 8009a34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3e:	895b      	ldrh	r3, [r3, #10]
 8009a40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d8e9      	bhi.n	8009a1c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009a48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009a50:	f7fc f8d6 	bl	8005c00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	4a91      	ldr	r2, [pc, #580]	; (8009ca0 <tcp_receive+0x888>)
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	4b91      	ldr	r3, [pc, #580]	; (8009ca4 <tcp_receive+0x88c>)
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	4a8f      	ldr	r2, [pc, #572]	; (8009ca0 <tcp_receive+0x888>)
 8009a62:	6812      	ldr	r2, [r2, #0]
 8009a64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a66:	e00d      	b.n	8009a84 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009a68:	4b8d      	ldr	r3, [pc, #564]	; (8009ca0 <tcp_receive+0x888>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	da06      	bge.n	8009a84 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	8b5b      	ldrh	r3, [r3, #26]
 8009a7a:	f043 0302 	orr.w	r3, r3, #2
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a84:	4b86      	ldr	r3, [pc, #536]	; (8009ca0 <tcp_receive+0x888>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f2c0 842a 	blt.w	800a2e8 <tcp_receive+0xed0>
 8009a94:	4b82      	ldr	r3, [pc, #520]	; (8009ca0 <tcp_receive+0x888>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	6879      	ldr	r1, [r7, #4]
 8009a9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009aa0:	440b      	add	r3, r1
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f300 841e 	bgt.w	800a2e8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ab0:	4b7b      	ldr	r3, [pc, #492]	; (8009ca0 <tcp_receive+0x888>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	f040 829a 	bne.w	8009fee <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009aba:	4b7a      	ldr	r3, [pc, #488]	; (8009ca4 <tcp_receive+0x88c>)
 8009abc:	891c      	ldrh	r4, [r3, #8]
 8009abe:	4b79      	ldr	r3, [pc, #484]	; (8009ca4 <tcp_receive+0x88c>)
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	899b      	ldrh	r3, [r3, #12]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fa fd8c 	bl	80045e4 <lwip_htons>
 8009acc:	4603      	mov	r3, r0
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <tcp_receive+0x6c4>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e000      	b.n	8009ade <tcp_receive+0x6c6>
 8009adc:	2300      	movs	r3, #0
 8009ade:	4423      	add	r3, r4
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	4b71      	ldr	r3, [pc, #452]	; (8009ca8 <tcp_receive+0x890>)
 8009ae4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009aea:	4b6f      	ldr	r3, [pc, #444]	; (8009ca8 <tcp_receive+0x890>)
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d275      	bcs.n	8009bde <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009af2:	4b6c      	ldr	r3, [pc, #432]	; (8009ca4 <tcp_receive+0x88c>)
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	899b      	ldrh	r3, [r3, #12]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fa fd72 	bl	80045e4 <lwip_htons>
 8009b00:	4603      	mov	r3, r0
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01f      	beq.n	8009b4c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009b0c:	4b65      	ldr	r3, [pc, #404]	; (8009ca4 <tcp_receive+0x88c>)
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	899b      	ldrh	r3, [r3, #12]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	b21b      	sxth	r3, r3
 8009b16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b1a:	b21c      	sxth	r4, r3
 8009b1c:	4b61      	ldr	r3, [pc, #388]	; (8009ca4 <tcp_receive+0x88c>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	899b      	ldrh	r3, [r3, #12]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fa fd5d 	bl	80045e4 <lwip_htons>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fa fd54 	bl	80045e4 <lwip_htons>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	b21b      	sxth	r3, r3
 8009b40:	4323      	orrs	r3, r4
 8009b42:	b21a      	sxth	r2, r3
 8009b44:	4b57      	ldr	r3, [pc, #348]	; (8009ca4 <tcp_receive+0x88c>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	b292      	uxth	r2, r2
 8009b4a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b50:	4b54      	ldr	r3, [pc, #336]	; (8009ca4 <tcp_receive+0x88c>)
 8009b52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009b54:	4b53      	ldr	r3, [pc, #332]	; (8009ca4 <tcp_receive+0x88c>)
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	899b      	ldrh	r3, [r3, #12]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fa fd41 	bl	80045e4 <lwip_htons>
 8009b62:	4603      	mov	r3, r0
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <tcp_receive+0x762>
            inseg.len -= 1;
 8009b6e:	4b4d      	ldr	r3, [pc, #308]	; (8009ca4 <tcp_receive+0x88c>)
 8009b70:	891b      	ldrh	r3, [r3, #8]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	4b4b      	ldr	r3, [pc, #300]	; (8009ca4 <tcp_receive+0x88c>)
 8009b78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009b7a:	4b4a      	ldr	r3, [pc, #296]	; (8009ca4 <tcp_receive+0x88c>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	4a49      	ldr	r2, [pc, #292]	; (8009ca4 <tcp_receive+0x88c>)
 8009b80:	8912      	ldrh	r2, [r2, #8]
 8009b82:	4611      	mov	r1, r2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fb ff3b 	bl	8005a00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009b8a:	4b46      	ldr	r3, [pc, #280]	; (8009ca4 <tcp_receive+0x88c>)
 8009b8c:	891c      	ldrh	r4, [r3, #8]
 8009b8e:	4b45      	ldr	r3, [pc, #276]	; (8009ca4 <tcp_receive+0x88c>)
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	899b      	ldrh	r3, [r3, #12]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fa fd24 	bl	80045e4 <lwip_htons>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <tcp_receive+0x794>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e000      	b.n	8009bae <tcp_receive+0x796>
 8009bac:	2300      	movs	r3, #0
 8009bae:	4423      	add	r3, r4
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	4b3d      	ldr	r3, [pc, #244]	; (8009ca8 <tcp_receive+0x890>)
 8009bb4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009bb6:	4b3c      	ldr	r3, [pc, #240]	; (8009ca8 <tcp_receive+0x890>)
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	4b38      	ldr	r3, [pc, #224]	; (8009ca0 <tcp_receive+0x888>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	441a      	add	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009bca:	440b      	add	r3, r1
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d006      	beq.n	8009bde <tcp_receive+0x7c6>
 8009bd0:	4b36      	ldr	r3, [pc, #216]	; (8009cac <tcp_receive+0x894>)
 8009bd2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009bd6:	4936      	ldr	r1, [pc, #216]	; (8009cb0 <tcp_receive+0x898>)
 8009bd8:	4836      	ldr	r0, [pc, #216]	; (8009cb4 <tcp_receive+0x89c>)
 8009bda:	f005 f993 	bl	800ef04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 80e7 	beq.w	8009db6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009be8:	4b2e      	ldr	r3, [pc, #184]	; (8009ca4 <tcp_receive+0x88c>)
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	899b      	ldrh	r3, [r3, #12]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fa fcf7 	bl	80045e4 <lwip_htons>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d010      	beq.n	8009c24 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009c02:	e00a      	b.n	8009c1a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c08:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f7fd fca6 	bl	8007566 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f0      	bne.n	8009c04 <tcp_receive+0x7ec>
 8009c22:	e0c8      	b.n	8009db6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c28:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009c2a:	e052      	b.n	8009cd2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	899b      	ldrh	r3, [r3, #12]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fa fcd5 	bl	80045e4 <lwip_htons>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d03d      	beq.n	8009cc2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009c46:	4b17      	ldr	r3, [pc, #92]	; (8009ca4 <tcp_receive+0x88c>)
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	899b      	ldrh	r3, [r3, #12]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fa fcc8 	bl	80045e4 <lwip_htons>
 8009c54:	4603      	mov	r3, r0
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d130      	bne.n	8009cc2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009c60:	4b10      	ldr	r3, [pc, #64]	; (8009ca4 <tcp_receive+0x88c>)
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	899b      	ldrh	r3, [r3, #12]
 8009c66:	b29c      	uxth	r4, r3
 8009c68:	2001      	movs	r0, #1
 8009c6a:	f7fa fcbb 	bl	80045e4 <lwip_htons>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	461a      	mov	r2, r3
 8009c72:	4b0c      	ldr	r3, [pc, #48]	; (8009ca4 <tcp_receive+0x88c>)
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	4322      	orrs	r2, r4
 8009c78:	b292      	uxth	r2, r2
 8009c7a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009c7c:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <tcp_receive+0x88c>)
 8009c7e:	891c      	ldrh	r4, [r3, #8]
 8009c80:	4b08      	ldr	r3, [pc, #32]	; (8009ca4 <tcp_receive+0x88c>)
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	899b      	ldrh	r3, [r3, #12]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fa fcab 	bl	80045e4 <lwip_htons>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00e      	beq.n	8009cb8 <tcp_receive+0x8a0>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e00d      	b.n	8009cba <tcp_receive+0x8a2>
 8009c9e:	bf00      	nop
 8009ca0:	200086c0 	.word	0x200086c0
 8009ca4:	200086a0 	.word	0x200086a0
 8009ca8:	200086ca 	.word	0x200086ca
 8009cac:	08011454 	.word	0x08011454
 8009cb0:	080117fc 	.word	0x080117fc
 8009cb4:	080114a0 	.word	0x080114a0
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4423      	add	r3, r4
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	4b98      	ldr	r3, [pc, #608]	; (8009f20 <tcp_receive+0xb08>)
 8009cc0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009ccc:	6938      	ldr	r0, [r7, #16]
 8009cce:	f7fd fc4a 	bl	8007566 <tcp_seg_free>
            while (next &&
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00e      	beq.n	8009cf6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009cd8:	4b91      	ldr	r3, [pc, #580]	; (8009f20 <tcp_receive+0xb08>)
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	4b91      	ldr	r3, [pc, #580]	; (8009f24 <tcp_receive+0xb0c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	441a      	add	r2, r3
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cec:	8909      	ldrh	r1, [r1, #8]
 8009cee:	440b      	add	r3, r1
 8009cf0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	da9a      	bge.n	8009c2c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d059      	beq.n	8009db0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009cfc:	4b88      	ldr	r3, [pc, #544]	; (8009f20 <tcp_receive+0xb08>)
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	4b88      	ldr	r3, [pc, #544]	; (8009f24 <tcp_receive+0xb0c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	441a      	add	r2, r3
 8009d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dd4d      	ble.n	8009db0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	4b81      	ldr	r3, [pc, #516]	; (8009f24 <tcp_receive+0xb0c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	4b80      	ldr	r3, [pc, #512]	; (8009f28 <tcp_receive+0xb10>)
 8009d28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009d2a:	4b7f      	ldr	r3, [pc, #508]	; (8009f28 <tcp_receive+0xb10>)
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	899b      	ldrh	r3, [r3, #12]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fa fc56 	bl	80045e4 <lwip_htons>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <tcp_receive+0x938>
                inseg.len -= 1;
 8009d44:	4b78      	ldr	r3, [pc, #480]	; (8009f28 <tcp_receive+0xb10>)
 8009d46:	891b      	ldrh	r3, [r3, #8]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	4b76      	ldr	r3, [pc, #472]	; (8009f28 <tcp_receive+0xb10>)
 8009d4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009d50:	4b75      	ldr	r3, [pc, #468]	; (8009f28 <tcp_receive+0xb10>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	4a74      	ldr	r2, [pc, #464]	; (8009f28 <tcp_receive+0xb10>)
 8009d56:	8912      	ldrh	r2, [r2, #8]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fb fe50 	bl	8005a00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009d60:	4b71      	ldr	r3, [pc, #452]	; (8009f28 <tcp_receive+0xb10>)
 8009d62:	891c      	ldrh	r4, [r3, #8]
 8009d64:	4b70      	ldr	r3, [pc, #448]	; (8009f28 <tcp_receive+0xb10>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	899b      	ldrh	r3, [r3, #12]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fa fc39 	bl	80045e4 <lwip_htons>
 8009d72:	4603      	mov	r3, r0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <tcp_receive+0x96a>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e000      	b.n	8009d84 <tcp_receive+0x96c>
 8009d82:	2300      	movs	r3, #0
 8009d84:	4423      	add	r3, r4
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	4b65      	ldr	r3, [pc, #404]	; (8009f20 <tcp_receive+0xb08>)
 8009d8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009d8c:	4b64      	ldr	r3, [pc, #400]	; (8009f20 <tcp_receive+0xb08>)
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	4b64      	ldr	r3, [pc, #400]	; (8009f24 <tcp_receive+0xb0c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	441a      	add	r2, r3
 8009d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d006      	beq.n	8009db0 <tcp_receive+0x998>
 8009da2:	4b62      	ldr	r3, [pc, #392]	; (8009f2c <tcp_receive+0xb14>)
 8009da4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009da8:	4961      	ldr	r1, [pc, #388]	; (8009f30 <tcp_receive+0xb18>)
 8009daa:	4862      	ldr	r0, [pc, #392]	; (8009f34 <tcp_receive+0xb1c>)
 8009dac:	f005 f8aa 	bl	800ef04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009db4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009db6:	4b5a      	ldr	r3, [pc, #360]	; (8009f20 <tcp_receive+0xb08>)
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	4b59      	ldr	r3, [pc, #356]	; (8009f24 <tcp_receive+0xb0c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009dca:	4b55      	ldr	r3, [pc, #340]	; (8009f20 <tcp_receive+0xb08>)
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d206      	bcs.n	8009de0 <tcp_receive+0x9c8>
 8009dd2:	4b56      	ldr	r3, [pc, #344]	; (8009f2c <tcp_receive+0xb14>)
 8009dd4:	f240 6207 	movw	r2, #1543	; 0x607
 8009dd8:	4957      	ldr	r1, [pc, #348]	; (8009f38 <tcp_receive+0xb20>)
 8009dda:	4856      	ldr	r0, [pc, #344]	; (8009f34 <tcp_receive+0xb1c>)
 8009ddc:	f005 f892 	bl	800ef04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009de4:	4b4e      	ldr	r3, [pc, #312]	; (8009f20 <tcp_receive+0xb08>)
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fc fe93 	bl	8006b1c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009df6:	4b4c      	ldr	r3, [pc, #304]	; (8009f28 <tcp_receive+0xb10>)
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	891b      	ldrh	r3, [r3, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009e00:	4b49      	ldr	r3, [pc, #292]	; (8009f28 <tcp_receive+0xb10>)
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	4a4d      	ldr	r2, [pc, #308]	; (8009f3c <tcp_receive+0xb24>)
 8009e06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009e08:	4b47      	ldr	r3, [pc, #284]	; (8009f28 <tcp_receive+0xb10>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e0e:	4b46      	ldr	r3, [pc, #280]	; (8009f28 <tcp_receive+0xb10>)
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	899b      	ldrh	r3, [r3, #12]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fa fbe4 	bl	80045e4 <lwip_htons>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 80b8 	beq.w	8009f9a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009e2a:	4b45      	ldr	r3, [pc, #276]	; (8009f40 <tcp_receive+0xb28>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	f043 0320 	orr.w	r3, r3, #32
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	4b42      	ldr	r3, [pc, #264]	; (8009f40 <tcp_receive+0xb28>)
 8009e36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009e38:	e0af      	b.n	8009f9a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	4a36      	ldr	r2, [pc, #216]	; (8009f24 <tcp_receive+0xb0c>)
 8009e4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	891b      	ldrh	r3, [r3, #8]
 8009e50:	461c      	mov	r4, r3
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	899b      	ldrh	r3, [r3, #12]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fa fbc2 	bl	80045e4 <lwip_htons>
 8009e60:	4603      	mov	r3, r0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <tcp_receive+0xa58>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <tcp_receive+0xa5a>
 8009e70:	2300      	movs	r3, #0
 8009e72:	191a      	adds	r2, r3, r4
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	441a      	add	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e82:	461c      	mov	r4, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	891b      	ldrh	r3, [r3, #8]
 8009e88:	461d      	mov	r5, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	899b      	ldrh	r3, [r3, #12]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fa fba6 	bl	80045e4 <lwip_htons>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <tcp_receive+0xa90>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <tcp_receive+0xa92>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	442b      	add	r3, r5
 8009eac:	429c      	cmp	r4, r3
 8009eae:	d206      	bcs.n	8009ebe <tcp_receive+0xaa6>
 8009eb0:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <tcp_receive+0xb14>)
 8009eb2:	f240 622b 	movw	r2, #1579	; 0x62b
 8009eb6:	4923      	ldr	r1, [pc, #140]	; (8009f44 <tcp_receive+0xb2c>)
 8009eb8:	481e      	ldr	r0, [pc, #120]	; (8009f34 <tcp_receive+0xb1c>)
 8009eba:	f005 f823 	bl	800ef04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	891b      	ldrh	r3, [r3, #8]
 8009ec2:	461c      	mov	r4, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	899b      	ldrh	r3, [r3, #12]
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fa fb89 	bl	80045e4 <lwip_htons>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	f003 0303 	and.w	r3, r3, #3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <tcp_receive+0xaca>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e000      	b.n	8009ee4 <tcp_receive+0xacc>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	1919      	adds	r1, r3, r4
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009eea:	b28b      	uxth	r3, r1
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7fc fe11 	bl	8006b1c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	891b      	ldrh	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d028      	beq.n	8009f56 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009f04:	4b0d      	ldr	r3, [pc, #52]	; (8009f3c <tcp_receive+0xb24>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d01d      	beq.n	8009f48 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	; (8009f3c <tcp_receive+0xb24>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fb ffba 	bl	8005e90 <pbuf_cat>
 8009f1c:	e018      	b.n	8009f50 <tcp_receive+0xb38>
 8009f1e:	bf00      	nop
 8009f20:	200086ca 	.word	0x200086ca
 8009f24:	200086c0 	.word	0x200086c0
 8009f28:	200086a0 	.word	0x200086a0
 8009f2c:	08011454 	.word	0x08011454
 8009f30:	08011834 	.word	0x08011834
 8009f34:	080114a0 	.word	0x080114a0
 8009f38:	08011870 	.word	0x08011870
 8009f3c:	200086d0 	.word	0x200086d0
 8009f40:	200086cd 	.word	0x200086cd
 8009f44:	08011890 	.word	0x08011890
            } else {
              recv_data = cseg->p;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4a70      	ldr	r2, [pc, #448]	; (800a110 <tcp_receive+0xcf8>)
 8009f4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	899b      	ldrh	r3, [r3, #12]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fa fb40 	bl	80045e4 <lwip_htons>
 8009f64:	4603      	mov	r3, r0
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00d      	beq.n	8009f8c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009f70:	4b68      	ldr	r3, [pc, #416]	; (800a114 <tcp_receive+0xcfc>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	f043 0320 	orr.w	r3, r3, #32
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	4b66      	ldr	r3, [pc, #408]	; (800a114 <tcp_receive+0xcfc>)
 8009f7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7d1b      	ldrb	r3, [r3, #20]
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d102      	bne.n	8009f8c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2207      	movs	r2, #7
 8009f8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009f94:	68b8      	ldr	r0, [r7, #8]
 8009f96:	f7fd fae6 	bl	8007566 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d008      	beq.n	8009fb4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	f43f af43 	beq.w	8009e3a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8b5b      	ldrh	r3, [r3, #26]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00e      	beq.n	8009fde <tcp_receive+0xbc6>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	8b5b      	ldrh	r3, [r3, #26]
 8009fc4:	f023 0301 	bic.w	r3, r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	835a      	strh	r2, [r3, #26]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	8b5b      	ldrh	r3, [r3, #26]
 8009fd2:	f043 0302 	orr.w	r3, r3, #2
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009fdc:	e188      	b.n	800a2f0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	8b5b      	ldrh	r3, [r3, #26]
 8009fe2:	f043 0301 	orr.w	r3, r3, #1
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009fec:	e180      	b.n	800a2f0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009ff6:	4848      	ldr	r0, [pc, #288]	; (800a118 <tcp_receive+0xd00>)
 8009ff8:	f7fd faec 	bl	80075d4 <tcp_seg_copy>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	675a      	str	r2, [r3, #116]	; 0x74
 800a002:	e16d      	b.n	800a2e0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a004:	2300      	movs	r3, #0
 800a006:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a00c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a00e:	e157      	b.n	800a2c0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	4b41      	ldr	r3, [pc, #260]	; (800a11c <tcp_receive+0xd04>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d11d      	bne.n	800a05a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a01e:	4b3e      	ldr	r3, [pc, #248]	; (800a118 <tcp_receive+0xd00>)
 800a020:	891a      	ldrh	r2, [r3, #8]
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	891b      	ldrh	r3, [r3, #8]
 800a026:	429a      	cmp	r2, r3
 800a028:	f240 814f 	bls.w	800a2ca <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a02c:	483a      	ldr	r0, [pc, #232]	; (800a118 <tcp_receive+0xd00>)
 800a02e:	f7fd fad1 	bl	80075d4 <tcp_seg_copy>
 800a032:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 8149 	beq.w	800a2ce <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d003      	beq.n	800a04a <tcp_receive+0xc32>
                    prev->next = cseg;
 800a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e002      	b.n	800a050 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a050:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a052:	6978      	ldr	r0, [r7, #20]
 800a054:	f7ff f8dc 	bl	8009210 <tcp_oos_insert_segment>
                }
                break;
 800a058:	e139      	b.n	800a2ce <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d117      	bne.n	800a090 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a060:	4b2e      	ldr	r3, [pc, #184]	; (800a11c <tcp_receive+0xd04>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	da57      	bge.n	800a120 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a070:	4829      	ldr	r0, [pc, #164]	; (800a118 <tcp_receive+0xd00>)
 800a072:	f7fd faaf 	bl	80075d4 <tcp_seg_copy>
 800a076:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 8129 	beq.w	800a2d2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a088:	69b8      	ldr	r0, [r7, #24]
 800a08a:	f7ff f8c1 	bl	8009210 <tcp_oos_insert_segment>
                  }
                  break;
 800a08e:	e120      	b.n	800a2d2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a090:	4b22      	ldr	r3, [pc, #136]	; (800a11c <tcp_receive+0xd04>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	3b01      	subs	r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	db3e      	blt.n	800a120 <tcp_receive+0xd08>
 800a0a2:	4b1e      	ldr	r3, [pc, #120]	; (800a11c <tcp_receive+0xd04>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dc35      	bgt.n	800a120 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a0b4:	4818      	ldr	r0, [pc, #96]	; (800a118 <tcp_receive+0xd00>)
 800a0b6:	f7fd fa8d 	bl	80075d4 <tcp_seg_copy>
 800a0ba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 8109 	beq.w	800a2d6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0cc:	8912      	ldrh	r2, [r2, #8]
 800a0ce:	441a      	add	r2, r3
 800a0d0:	4b12      	ldr	r3, [pc, #72]	; (800a11c <tcp_receive+0xd04>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	dd12      	ble.n	800a100 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a0da:	4b10      	ldr	r3, [pc, #64]	; (800a11c <tcp_receive+0xd04>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f6:	891b      	ldrh	r3, [r3, #8]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fb fc80 	bl	8005a00 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a106:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a108:	69f8      	ldr	r0, [r7, #28]
 800a10a:	f7ff f881 	bl	8009210 <tcp_oos_insert_segment>
                  }
                  break;
 800a10e:	e0e2      	b.n	800a2d6 <tcp_receive+0xebe>
 800a110:	200086d0 	.word	0x200086d0
 800a114:	200086cd 	.word	0x200086cd
 800a118:	200086a0 	.word	0x200086a0
 800a11c:	200086c0 	.word	0x200086c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f040 80c6 	bne.w	800a2ba <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a12e:	4b80      	ldr	r3, [pc, #512]	; (800a330 <tcp_receive+0xf18>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f340 80bd 	ble.w	800a2ba <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	899b      	ldrh	r3, [r3, #12]
 800a146:	b29b      	uxth	r3, r3
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fa fa4b 	bl	80045e4 <lwip_htons>
 800a14e:	4603      	mov	r3, r0
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	f040 80bf 	bne.w	800a2da <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a15c:	4875      	ldr	r0, [pc, #468]	; (800a334 <tcp_receive+0xf1c>)
 800a15e:	f7fd fa39 	bl	80075d4 <tcp_seg_copy>
 800a162:	4602      	mov	r2, r0
 800a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a166:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 80b6 	beq.w	800a2de <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a17a:	8912      	ldrh	r2, [r2, #8]
 800a17c:	441a      	add	r2, r3
 800a17e:	4b6c      	ldr	r3, [pc, #432]	; (800a330 <tcp_receive+0xf18>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	dd12      	ble.n	800a1ae <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a188:	4b69      	ldr	r3, [pc, #420]	; (800a330 <tcp_receive+0xf18>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	b29b      	uxth	r3, r3
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	b29a      	uxth	r2, r3
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a4:	891b      	ldrh	r3, [r3, #8]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	f7fb fc29 	bl	8005a00 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a1ae:	4b62      	ldr	r3, [pc, #392]	; (800a338 <tcp_receive+0xf20>)
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	4b5e      	ldr	r3, [pc, #376]	; (800a330 <tcp_receive+0xf18>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	441a      	add	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1c2:	440b      	add	r3, r1
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f340 8089 	ble.w	800a2de <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	899b      	ldrh	r3, [r3, #12]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fa fa04 	bl	80045e4 <lwip_htons>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d022      	beq.n	800a22e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	899b      	ldrh	r3, [r3, #12]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	b21b      	sxth	r3, r3
 800a1f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1f8:	b21c      	sxth	r4, r3
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	899b      	ldrh	r3, [r3, #12]
 800a202:	b29b      	uxth	r3, r3
 800a204:	4618      	mov	r0, r3
 800a206:	f7fa f9ed 	bl	80045e4 <lwip_htons>
 800a20a:	4603      	mov	r3, r0
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	b29b      	uxth	r3, r3
 800a210:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a214:	b29b      	uxth	r3, r3
 800a216:	4618      	mov	r0, r3
 800a218:	f7fa f9e4 	bl	80045e4 <lwip_htons>
 800a21c:	4603      	mov	r3, r0
 800a21e:	b21b      	sxth	r3, r3
 800a220:	4323      	orrs	r3, r4
 800a222:	b21a      	sxth	r2, r3
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	b292      	uxth	r2, r2
 800a22c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	b29a      	uxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a238:	4413      	add	r3, r2
 800a23a:	b299      	uxth	r1, r3
 800a23c:	4b3c      	ldr	r3, [pc, #240]	; (800a330 <tcp_receive+0xf18>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	b29a      	uxth	r2, r3
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	1a8a      	subs	r2, r1, r2
 800a248:	b292      	uxth	r2, r2
 800a24a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	891b      	ldrh	r3, [r3, #8]
 800a258:	4619      	mov	r1, r3
 800a25a:	4610      	mov	r0, r2
 800a25c:	f7fb fbd0 	bl	8005a00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	891c      	ldrh	r4, [r3, #8]
 800a266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	899b      	ldrh	r3, [r3, #12]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	4618      	mov	r0, r3
 800a272:	f7fa f9b7 	bl	80045e4 <lwip_htons>
 800a276:	4603      	mov	r3, r0
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <tcp_receive+0xe6e>
 800a282:	2301      	movs	r3, #1
 800a284:	e000      	b.n	800a288 <tcp_receive+0xe70>
 800a286:	2300      	movs	r3, #0
 800a288:	4423      	add	r3, r4
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	4b2a      	ldr	r3, [pc, #168]	; (800a338 <tcp_receive+0xf20>)
 800a28e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a290:	4b29      	ldr	r3, [pc, #164]	; (800a338 <tcp_receive+0xf20>)
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	4b26      	ldr	r3, [pc, #152]	; (800a330 <tcp_receive+0xf18>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	441a      	add	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2a4:	440b      	add	r3, r1
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d019      	beq.n	800a2de <tcp_receive+0xec6>
 800a2aa:	4b24      	ldr	r3, [pc, #144]	; (800a33c <tcp_receive+0xf24>)
 800a2ac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a2b0:	4923      	ldr	r1, [pc, #140]	; (800a340 <tcp_receive+0xf28>)
 800a2b2:	4824      	ldr	r0, [pc, #144]	; (800a344 <tcp_receive+0xf2c>)
 800a2b4:	f004 fe26 	bl	800ef04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a2b8:	e011      	b.n	800a2de <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f47f aea4 	bne.w	800a010 <tcp_receive+0xbf8>
 800a2c8:	e00a      	b.n	800a2e0 <tcp_receive+0xec8>
                break;
 800a2ca:	bf00      	nop
 800a2cc:	e008      	b.n	800a2e0 <tcp_receive+0xec8>
                break;
 800a2ce:	bf00      	nop
 800a2d0:	e006      	b.n	800a2e0 <tcp_receive+0xec8>
                  break;
 800a2d2:	bf00      	nop
 800a2d4:	e004      	b.n	800a2e0 <tcp_receive+0xec8>
                  break;
 800a2d6:	bf00      	nop
 800a2d8:	e002      	b.n	800a2e0 <tcp_receive+0xec8>
                  break;
 800a2da:	bf00      	nop
 800a2dc:	e000      	b.n	800a2e0 <tcp_receive+0xec8>
                break;
 800a2de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 fe8b 	bl	800bffc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a2e6:	e003      	b.n	800a2f0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 fe87 	bl	800bffc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a2ee:	e01a      	b.n	800a326 <tcp_receive+0xf0e>
 800a2f0:	e019      	b.n	800a326 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a2f2:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <tcp_receive+0xf18>)
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	db0a      	blt.n	800a316 <tcp_receive+0xefe>
 800a300:	4b0b      	ldr	r3, [pc, #44]	; (800a330 <tcp_receive+0xf18>)
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a30c:	440b      	add	r3, r1
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	3301      	adds	r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	dd07      	ble.n	800a326 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	8b5b      	ldrh	r3, [r3, #26]
 800a31a:	f043 0302 	orr.w	r3, r3, #2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a324:	e7ff      	b.n	800a326 <tcp_receive+0xf0e>
 800a326:	bf00      	nop
 800a328:	3750      	adds	r7, #80	; 0x50
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bdb0      	pop	{r4, r5, r7, pc}
 800a32e:	bf00      	nop
 800a330:	200086c0 	.word	0x200086c0
 800a334:	200086a0 	.word	0x200086a0
 800a338:	200086ca 	.word	0x200086ca
 800a33c:	08011454 	.word	0x08011454
 800a340:	080117fc 	.word	0x080117fc
 800a344:	080114a0 	.word	0x080114a0

0800a348 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a34e:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <tcp_get_next_optbyte+0x5c>)
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	b291      	uxth	r1, r2
 800a356:	4a13      	ldr	r2, [pc, #76]	; (800a3a4 <tcp_get_next_optbyte+0x5c>)
 800a358:	8011      	strh	r1, [r2, #0]
 800a35a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a35c:	4b12      	ldr	r3, [pc, #72]	; (800a3a8 <tcp_get_next_optbyte+0x60>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <tcp_get_next_optbyte+0x26>
 800a364:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <tcp_get_next_optbyte+0x64>)
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	88fa      	ldrh	r2, [r7, #6]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d208      	bcs.n	800a380 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <tcp_get_next_optbyte+0x68>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3314      	adds	r3, #20
 800a374:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	4413      	add	r3, r2
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	e00b      	b.n	800a398 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a380:	88fb      	ldrh	r3, [r7, #6]
 800a382:	b2da      	uxtb	r2, r3
 800a384:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <tcp_get_next_optbyte+0x64>)
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a38e:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <tcp_get_next_optbyte+0x60>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	797b      	ldrb	r3, [r7, #5]
 800a394:	4413      	add	r3, r2
 800a396:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	200086bc 	.word	0x200086bc
 800a3a8:	200086b8 	.word	0x200086b8
 800a3ac:	200086b6 	.word	0x200086b6
 800a3b0:	200086b0 	.word	0x200086b0

0800a3b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d106      	bne.n	800a3d0 <tcp_parseopt+0x1c>
 800a3c2:	4b32      	ldr	r3, [pc, #200]	; (800a48c <tcp_parseopt+0xd8>)
 800a3c4:	f240 727d 	movw	r2, #1917	; 0x77d
 800a3c8:	4931      	ldr	r1, [pc, #196]	; (800a490 <tcp_parseopt+0xdc>)
 800a3ca:	4832      	ldr	r0, [pc, #200]	; (800a494 <tcp_parseopt+0xe0>)
 800a3cc:	f004 fd9a 	bl	800ef04 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a3d0:	4b31      	ldr	r3, [pc, #196]	; (800a498 <tcp_parseopt+0xe4>)
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d055      	beq.n	800a484 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a3d8:	4b30      	ldr	r3, [pc, #192]	; (800a49c <tcp_parseopt+0xe8>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	e045      	b.n	800a46c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a3e0:	f7ff ffb2 	bl	800a348 <tcp_get_next_optbyte>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d006      	beq.n	800a3fc <tcp_parseopt+0x48>
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	dc2b      	bgt.n	800a44a <tcp_parseopt+0x96>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d041      	beq.n	800a47a <tcp_parseopt+0xc6>
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d127      	bne.n	800a44a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a3fa:	e037      	b.n	800a46c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a3fc:	f7ff ffa4 	bl	800a348 <tcp_get_next_optbyte>
 800a400:	4603      	mov	r3, r0
 800a402:	2b04      	cmp	r3, #4
 800a404:	d13b      	bne.n	800a47e <tcp_parseopt+0xca>
 800a406:	4b25      	ldr	r3, [pc, #148]	; (800a49c <tcp_parseopt+0xe8>)
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	4a22      	ldr	r2, [pc, #136]	; (800a498 <tcp_parseopt+0xe4>)
 800a40e:	8812      	ldrh	r2, [r2, #0]
 800a410:	4293      	cmp	r3, r2
 800a412:	da34      	bge.n	800a47e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a414:	f7ff ff98 	bl	800a348 <tcp_get_next_optbyte>
 800a418:	4603      	mov	r3, r0
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a420:	f7ff ff92 	bl	800a348 <tcp_get_next_optbyte>
 800a424:	4603      	mov	r3, r0
 800a426:	b29a      	uxth	r2, r3
 800a428:	89bb      	ldrh	r3, [r7, #12]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a42e:	89bb      	ldrh	r3, [r7, #12]
 800a430:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a434:	d804      	bhi.n	800a440 <tcp_parseopt+0x8c>
 800a436:	89bb      	ldrh	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <tcp_parseopt+0x8c>
 800a43c:	89ba      	ldrh	r2, [r7, #12]
 800a43e:	e001      	b.n	800a444 <tcp_parseopt+0x90>
 800a440:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a448:	e010      	b.n	800a46c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a44a:	f7ff ff7d 	bl	800a348 <tcp_get_next_optbyte>
 800a44e:	4603      	mov	r3, r0
 800a450:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a452:	7afb      	ldrb	r3, [r7, #11]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d914      	bls.n	800a482 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a458:	7afb      	ldrb	r3, [r7, #11]
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	4b0f      	ldr	r3, [pc, #60]	; (800a49c <tcp_parseopt+0xe8>)
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	4413      	add	r3, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	3b02      	subs	r3, #2
 800a466:	b29a      	uxth	r2, r3
 800a468:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <tcp_parseopt+0xe8>)
 800a46a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a46c:	4b0b      	ldr	r3, [pc, #44]	; (800a49c <tcp_parseopt+0xe8>)
 800a46e:	881a      	ldrh	r2, [r3, #0]
 800a470:	4b09      	ldr	r3, [pc, #36]	; (800a498 <tcp_parseopt+0xe4>)
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d3b3      	bcc.n	800a3e0 <tcp_parseopt+0x2c>
 800a478:	e004      	b.n	800a484 <tcp_parseopt+0xd0>
          return;
 800a47a:	bf00      	nop
 800a47c:	e002      	b.n	800a484 <tcp_parseopt+0xd0>
            return;
 800a47e:	bf00      	nop
 800a480:	e000      	b.n	800a484 <tcp_parseopt+0xd0>
            return;
 800a482:	bf00      	nop
      }
    }
  }
}
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	08011454 	.word	0x08011454
 800a490:	080118b8 	.word	0x080118b8
 800a494:	080114a0 	.word	0x080114a0
 800a498:	200086b4 	.word	0x200086b4
 800a49c:	200086bc 	.word	0x200086bc

0800a4a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a4a4:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <tcp_trigger_input_pcb_close+0x1c>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	f043 0310 	orr.w	r3, r3, #16
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	4b03      	ldr	r3, [pc, #12]	; (800a4bc <tcp_trigger_input_pcb_close+0x1c>)
 800a4b0:	701a      	strb	r2, [r3, #0]
}
 800a4b2:	bf00      	nop
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	200086cd 	.word	0x200086cd

0800a4c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00a      	beq.n	800a4e8 <tcp_route+0x28>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	7a1b      	ldrb	r3, [r3, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d006      	beq.n	800a4e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	7a1b      	ldrb	r3, [r3, #8]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fb f8b4 	bl	800564c <netif_get_by_index>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	e003      	b.n	800a4f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f003 fad5 	bl	800da98 <ip4_route>
 800a4ee:	4603      	mov	r3, r0
  }
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a4f8:	b590      	push	{r4, r7, lr}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	4613      	mov	r3, r2
 800a506:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <tcp_create_segment+0x22>
 800a50e:	4b44      	ldr	r3, [pc, #272]	; (800a620 <tcp_create_segment+0x128>)
 800a510:	22a3      	movs	r2, #163	; 0xa3
 800a512:	4944      	ldr	r1, [pc, #272]	; (800a624 <tcp_create_segment+0x12c>)
 800a514:	4844      	ldr	r0, [pc, #272]	; (800a628 <tcp_create_segment+0x130>)
 800a516:	f004 fcf5 	bl	800ef04 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d105      	bne.n	800a52c <tcp_create_segment+0x34>
 800a520:	4b3f      	ldr	r3, [pc, #252]	; (800a620 <tcp_create_segment+0x128>)
 800a522:	22a4      	movs	r2, #164	; 0xa4
 800a524:	4941      	ldr	r1, [pc, #260]	; (800a62c <tcp_create_segment+0x134>)
 800a526:	4840      	ldr	r0, [pc, #256]	; (800a628 <tcp_create_segment+0x130>)
 800a528:	f004 fcec 	bl	800ef04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a52c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a53a:	2003      	movs	r0, #3
 800a53c:	f7fa fd00 	bl	8004f40 <memp_malloc>
 800a540:	6138      	str	r0, [r7, #16]
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d104      	bne.n	800a552 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a548:	68b8      	ldr	r0, [r7, #8]
 800a54a:	f7fb fbdf 	bl	8005d0c <pbuf_free>
    return NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	e061      	b.n	800a616 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a558:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2200      	movs	r2, #0
 800a55e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	891a      	ldrh	r2, [r3, #8]
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	429a      	cmp	r2, r3
 800a570:	d205      	bcs.n	800a57e <tcp_create_segment+0x86>
 800a572:	4b2b      	ldr	r3, [pc, #172]	; (800a620 <tcp_create_segment+0x128>)
 800a574:	22b0      	movs	r2, #176	; 0xb0
 800a576:	492e      	ldr	r1, [pc, #184]	; (800a630 <tcp_create_segment+0x138>)
 800a578:	482b      	ldr	r0, [pc, #172]	; (800a628 <tcp_create_segment+0x130>)
 800a57a:	f004 fcc3 	bl	800ef04 <iprintf>
  seg->len = p->tot_len - optlen;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	891a      	ldrh	r2, [r3, #8]
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	b29b      	uxth	r3, r3
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	b29a      	uxth	r2, r3
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a58e:	2114      	movs	r1, #20
 800a590:	68b8      	ldr	r0, [r7, #8]
 800a592:	f7fb fb25 	bl	8005be0 <pbuf_add_header>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a59c:	6938      	ldr	r0, [r7, #16]
 800a59e:	f7fc ffe2 	bl	8007566 <tcp_seg_free>
    return NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e037      	b.n	800a616 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8ada      	ldrh	r2, [r3, #22]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	68dc      	ldr	r4, [r3, #12]
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f7fa f813 	bl	80045e4 <lwip_htons>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	8b1a      	ldrh	r2, [r3, #24]
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	68dc      	ldr	r4, [r3, #12]
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f7fa f80a 	bl	80045e4 <lwip_htons>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	68dc      	ldr	r4, [r3, #12]
 800a5d8:	6838      	ldr	r0, [r7, #0]
 800a5da:	f7fa f818 	bl	800460e <lwip_htonl>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
 800a5e4:	089b      	lsrs	r3, r3, #2
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	3305      	adds	r3, #5
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	031b      	lsls	r3, r3, #12
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	79fb      	ldrb	r3, [r7, #7]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	68dc      	ldr	r4, [r3, #12]
 800a5fe:	4610      	mov	r0, r2
 800a600:	f7f9 fff0 	bl	80045e4 <lwip_htons>
 800a604:	4603      	mov	r3, r0
 800a606:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	749a      	strb	r2, [r3, #18]
 800a610:	2200      	movs	r2, #0
 800a612:	74da      	strb	r2, [r3, #19]
  return seg;
 800a614:	693b      	ldr	r3, [r7, #16]
}
 800a616:	4618      	mov	r0, r3
 800a618:	371c      	adds	r7, #28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd90      	pop	{r4, r7, pc}
 800a61e:	bf00      	nop
 800a620:	080118d4 	.word	0x080118d4
 800a624:	08011908 	.word	0x08011908
 800a628:	08011928 	.word	0x08011928
 800a62c:	08011950 	.word	0x08011950
 800a630:	08011974 	.word	0x08011974

0800a634 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	607b      	str	r3, [r7, #4]
 800a63c:	4603      	mov	r3, r0
 800a63e:	73fb      	strb	r3, [r7, #15]
 800a640:	460b      	mov	r3, r1
 800a642:	81bb      	strh	r3, [r7, #12]
 800a644:	4613      	mov	r3, r2
 800a646:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a648:	89bb      	ldrh	r3, [r7, #12]
 800a64a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d105      	bne.n	800a65e <tcp_pbuf_prealloc+0x2a>
 800a652:	4b30      	ldr	r3, [pc, #192]	; (800a714 <tcp_pbuf_prealloc+0xe0>)
 800a654:	22e8      	movs	r2, #232	; 0xe8
 800a656:	4930      	ldr	r1, [pc, #192]	; (800a718 <tcp_pbuf_prealloc+0xe4>)
 800a658:	4830      	ldr	r0, [pc, #192]	; (800a71c <tcp_pbuf_prealloc+0xe8>)
 800a65a:	f004 fc53 	bl	800ef04 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d105      	bne.n	800a670 <tcp_pbuf_prealloc+0x3c>
 800a664:	4b2b      	ldr	r3, [pc, #172]	; (800a714 <tcp_pbuf_prealloc+0xe0>)
 800a666:	22e9      	movs	r2, #233	; 0xe9
 800a668:	492d      	ldr	r1, [pc, #180]	; (800a720 <tcp_pbuf_prealloc+0xec>)
 800a66a:	482c      	ldr	r0, [pc, #176]	; (800a71c <tcp_pbuf_prealloc+0xe8>)
 800a66c:	f004 fc4a 	bl	800ef04 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a670:	89ba      	ldrh	r2, [r7, #12]
 800a672:	897b      	ldrh	r3, [r7, #10]
 800a674:	429a      	cmp	r2, r3
 800a676:	d221      	bcs.n	800a6bc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a678:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d111      	bne.n	800a6a8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	8b5b      	ldrh	r3, [r3, #26]
 800a688:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d115      	bne.n	800a6bc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a690:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d103      	bne.n	800a6a8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d009      	beq.n	800a6bc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a6a8:	89bb      	ldrh	r3, [r7, #12]
 800a6aa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800a6ae:	f023 0203 	bic.w	r2, r3, #3
 800a6b2:	897b      	ldrh	r3, [r7, #10]
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	bf28      	it	cs
 800a6b8:	4613      	movcs	r3, r2
 800a6ba:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a6bc:	8af9      	ldrh	r1, [r7, #22]
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fb f83d 	bl	8005744 <pbuf_alloc>
 800a6ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e019      	b.n	800a70a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <tcp_pbuf_prealloc+0xb8>
 800a6de:	4b0d      	ldr	r3, [pc, #52]	; (800a714 <tcp_pbuf_prealloc+0xe0>)
 800a6e0:	f240 120b 	movw	r2, #267	; 0x10b
 800a6e4:	490f      	ldr	r1, [pc, #60]	; (800a724 <tcp_pbuf_prealloc+0xf0>)
 800a6e6:	480d      	ldr	r0, [pc, #52]	; (800a71c <tcp_pbuf_prealloc+0xe8>)
 800a6e8:	f004 fc0c 	bl	800ef04 <iprintf>
  *oversize = p->len - length;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	895a      	ldrh	r2, [r3, #10]
 800a6f0:	89bb      	ldrh	r3, [r7, #12]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	89ba      	ldrh	r2, [r7, #12]
 800a6fe:	811a      	strh	r2, [r3, #8]
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	891a      	ldrh	r2, [r3, #8]
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	815a      	strh	r2, [r3, #10]
  return p;
 800a708:	693b      	ldr	r3, [r7, #16]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	080118d4 	.word	0x080118d4
 800a718:	0801198c 	.word	0x0801198c
 800a71c:	08011928 	.word	0x08011928
 800a720:	080119b0 	.word	0x080119b0
 800a724:	080119d0 	.word	0x080119d0

0800a728 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d106      	bne.n	800a748 <tcp_write_checks+0x20>
 800a73a:	4b33      	ldr	r3, [pc, #204]	; (800a808 <tcp_write_checks+0xe0>)
 800a73c:	f240 1233 	movw	r2, #307	; 0x133
 800a740:	4932      	ldr	r1, [pc, #200]	; (800a80c <tcp_write_checks+0xe4>)
 800a742:	4833      	ldr	r0, [pc, #204]	; (800a810 <tcp_write_checks+0xe8>)
 800a744:	f004 fbde 	bl	800ef04 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	7d1b      	ldrb	r3, [r3, #20]
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d00e      	beq.n	800a76e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a754:	2b07      	cmp	r3, #7
 800a756:	d00a      	beq.n	800a76e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d006      	beq.n	800a76e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a764:	2b03      	cmp	r3, #3
 800a766:	d002      	beq.n	800a76e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a768:	f06f 030a 	mvn.w	r3, #10
 800a76c:	e048      	b.n	800a800 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a76e:	887b      	ldrh	r3, [r7, #2]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <tcp_write_checks+0x50>
    return ERR_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	e043      	b.n	800a800 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a77e:	887a      	ldrh	r2, [r7, #2]
 800a780:	429a      	cmp	r2, r3
 800a782:	d909      	bls.n	800a798 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	8b5b      	ldrh	r3, [r3, #26]
 800a788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295
 800a796:	e033      	b.n	800a800 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a79e:	2b08      	cmp	r3, #8
 800a7a0:	d909      	bls.n	800a7b6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8b5b      	ldrh	r3, [r3, #26]
 800a7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b4:	e024      	b.n	800a800 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00f      	beq.n	800a7e0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d11a      	bne.n	800a7fe <tcp_write_checks+0xd6>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d116      	bne.n	800a7fe <tcp_write_checks+0xd6>
 800a7d0:	4b0d      	ldr	r3, [pc, #52]	; (800a808 <tcp_write_checks+0xe0>)
 800a7d2:	f240 1255 	movw	r2, #341	; 0x155
 800a7d6:	490f      	ldr	r1, [pc, #60]	; (800a814 <tcp_write_checks+0xec>)
 800a7d8:	480d      	ldr	r0, [pc, #52]	; (800a810 <tcp_write_checks+0xe8>)
 800a7da:	f004 fb93 	bl	800ef04 <iprintf>
 800a7de:	e00e      	b.n	800a7fe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <tcp_write_checks+0xc8>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <tcp_write_checks+0xd6>
 800a7f0:	4b05      	ldr	r3, [pc, #20]	; (800a808 <tcp_write_checks+0xe0>)
 800a7f2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a7f6:	4908      	ldr	r1, [pc, #32]	; (800a818 <tcp_write_checks+0xf0>)
 800a7f8:	4805      	ldr	r0, [pc, #20]	; (800a810 <tcp_write_checks+0xe8>)
 800a7fa:	f004 fb83 	bl	800ef04 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	080118d4 	.word	0x080118d4
 800a80c:	080119e4 	.word	0x080119e4
 800a810:	08011928 	.word	0x08011928
 800a814:	08011a04 	.word	0x08011a04
 800a818:	08011a40 	.word	0x08011a40

0800a81c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a81c:	b590      	push	{r4, r7, lr}
 800a81e:	b09b      	sub	sp, #108	; 0x6c
 800a820:	af04      	add	r7, sp, #16
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	4611      	mov	r1, r2
 800a828:	461a      	mov	r2, r3
 800a82a:	460b      	mov	r3, r1
 800a82c:	80fb      	strh	r3, [r7, #6]
 800a82e:	4613      	mov	r3, r2
 800a830:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a832:	2300      	movs	r3, #0
 800a834:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a836:	2300      	movs	r3, #0
 800a838:	653b      	str	r3, [r7, #80]	; 0x50
 800a83a:	2300      	movs	r3, #0
 800a83c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a83e:	2300      	movs	r3, #0
 800a840:	64bb      	str	r3, [r7, #72]	; 0x48
 800a842:	2300      	movs	r3, #0
 800a844:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a846:	2300      	movs	r3, #0
 800a848:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d109      	bne.n	800a878 <tcp_write+0x5c>
 800a864:	4ba4      	ldr	r3, [pc, #656]	; (800aaf8 <tcp_write+0x2dc>)
 800a866:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800a86a:	49a4      	ldr	r1, [pc, #656]	; (800aafc <tcp_write+0x2e0>)
 800a86c:	48a4      	ldr	r0, [pc, #656]	; (800ab00 <tcp_write+0x2e4>)
 800a86e:	f004 fb49 	bl	800ef04 <iprintf>
 800a872:	f06f 030f 	mvn.w	r3, #15
 800a876:	e32a      	b.n	800aece <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a886:	4293      	cmp	r3, r2
 800a888:	bf28      	it	cs
 800a88a:	4613      	movcs	r3, r2
 800a88c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a88e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <tcp_write+0x7e>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a898:	e000      	b.n	800a89c <tcp_write+0x80>
 800a89a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a89c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d109      	bne.n	800a8b8 <tcp_write+0x9c>
 800a8a4:	4b94      	ldr	r3, [pc, #592]	; (800aaf8 <tcp_write+0x2dc>)
 800a8a6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800a8aa:	4996      	ldr	r1, [pc, #600]	; (800ab04 <tcp_write+0x2e8>)
 800a8ac:	4894      	ldr	r0, [pc, #592]	; (800ab00 <tcp_write+0x2e4>)
 800a8ae:	f004 fb29 	bl	800ef04 <iprintf>
 800a8b2:	f06f 030f 	mvn.w	r3, #15
 800a8b6:	e30a      	b.n	800aece <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a8b8:	88fb      	ldrh	r3, [r7, #6]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f7ff ff33 	bl	800a728 <tcp_write_checks>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a8c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <tcp_write+0xba>
    return err;
 800a8d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a8d4:	e2fb      	b.n	800aece <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 80f6 	beq.w	800aadc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8f4:	653b      	str	r3, [r7, #80]	; 0x50
 800a8f6:	e002      	b.n	800a8fe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800a8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1f8      	bne.n	800a8f8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a908:	7a9b      	ldrb	r3, [r3, #10]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	f003 0304 	and.w	r3, r3, #4
 800a912:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a914:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a918:	891b      	ldrh	r3, [r3, #8]
 800a91a:	4619      	mov	r1, r3
 800a91c:	8c3b      	ldrh	r3, [r7, #32]
 800a91e:	440b      	add	r3, r1
 800a920:	429a      	cmp	r2, r3
 800a922:	da06      	bge.n	800a932 <tcp_write+0x116>
 800a924:	4b74      	ldr	r3, [pc, #464]	; (800aaf8 <tcp_write+0x2dc>)
 800a926:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a92a:	4977      	ldr	r1, [pc, #476]	; (800ab08 <tcp_write+0x2ec>)
 800a92c:	4874      	ldr	r0, [pc, #464]	; (800ab00 <tcp_write+0x2e4>)
 800a92e:	f004 fae9 	bl	800ef04 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a934:	891a      	ldrh	r2, [r3, #8]
 800a936:	8c3b      	ldrh	r3, [r7, #32]
 800a938:	4413      	add	r3, r2
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a948:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a94a:	8a7b      	ldrh	r3, [r7, #18]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d026      	beq.n	800a99e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a950:	8a7b      	ldrh	r3, [r7, #18]
 800a952:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a954:	429a      	cmp	r2, r3
 800a956:	d206      	bcs.n	800a966 <tcp_write+0x14a>
 800a958:	4b67      	ldr	r3, [pc, #412]	; (800aaf8 <tcp_write+0x2dc>)
 800a95a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800a95e:	496b      	ldr	r1, [pc, #428]	; (800ab0c <tcp_write+0x2f0>)
 800a960:	4867      	ldr	r0, [pc, #412]	; (800ab00 <tcp_write+0x2e4>)
 800a962:	f004 facf 	bl	800ef04 <iprintf>
      seg = last_unsent;
 800a966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a968:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a96a:	8a7b      	ldrh	r3, [r7, #18]
 800a96c:	88fa      	ldrh	r2, [r7, #6]
 800a96e:	4293      	cmp	r3, r2
 800a970:	bf28      	it	cs
 800a972:	4613      	movcs	r3, r2
 800a974:	b29b      	uxth	r3, r3
 800a976:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a978:	4293      	cmp	r3, r2
 800a97a:	bf28      	it	cs
 800a97c:	4613      	movcs	r3, r2
 800a97e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a980:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a984:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a986:	4413      	add	r3, r2
 800a988:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a98c:	8a7a      	ldrh	r2, [r7, #18]
 800a98e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	b29b      	uxth	r3, r3
 800a994:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a996:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a998:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a99e:	8a7b      	ldrh	r3, [r7, #18]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00b      	beq.n	800a9bc <tcp_write+0x1a0>
 800a9a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a9a8:	88fb      	ldrh	r3, [r7, #6]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d006      	beq.n	800a9bc <tcp_write+0x1a0>
 800a9ae:	4b52      	ldr	r3, [pc, #328]	; (800aaf8 <tcp_write+0x2dc>)
 800a9b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9b4:	4956      	ldr	r1, [pc, #344]	; (800ab10 <tcp_write+0x2f4>)
 800a9b6:	4852      	ldr	r0, [pc, #328]	; (800ab00 <tcp_write+0x2e4>)
 800a9b8:	f004 faa4 	bl	800ef04 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a9bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a9c0:	88fb      	ldrh	r3, [r7, #6]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	f080 8167 	bcs.w	800ac96 <tcp_write+0x47a>
 800a9c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 8163 	beq.w	800ac96 <tcp_write+0x47a>
 800a9d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9d2:	891b      	ldrh	r3, [r3, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 815e 	beq.w	800ac96 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a9da:	88fa      	ldrh	r2, [r7, #6]
 800a9dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a9e0:	1ad2      	subs	r2, r2, r3
 800a9e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	bfa8      	it	ge
 800a9e8:	4613      	movge	r3, r2
 800a9ea:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ee:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a9f0:	797b      	ldrb	r3, [r7, #5]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d027      	beq.n	800aa4a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a9fa:	f107 0012 	add.w	r0, r7, #18
 800a9fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800aa00:	8bf9      	ldrh	r1, [r7, #30]
 800aa02:	2301      	movs	r3, #1
 800aa04:	9302      	str	r3, [sp, #8]
 800aa06:	797b      	ldrb	r3, [r7, #5]
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2000      	movs	r0, #0
 800aa12:	f7ff fe0f 	bl	800a634 <tcp_pbuf_prealloc>
 800aa16:	6578      	str	r0, [r7, #84]	; 0x54
 800aa18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 8225 	beq.w	800ae6a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800aa20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa22:	6858      	ldr	r0, [r3, #4]
 800aa24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	8bfa      	ldrh	r2, [r7, #30]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	f004 fa52 	bl	800eed8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800aa34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aa36:	f7fb f9f1 	bl	8005e1c <pbuf_clen>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aa42:	4413      	add	r3, r2
 800aa44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800aa48:	e041      	b.n	800aace <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800aa4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa50:	e002      	b.n	800aa58 <tcp_write+0x23c>
 800aa52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
 800aa58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1f8      	bne.n	800aa52 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800aa60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa62:	7b1b      	ldrb	r3, [r3, #12]
 800aa64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d115      	bne.n	800aa98 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800aa6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa72:	8952      	ldrh	r2, [r2, #10]
 800aa74:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d10d      	bne.n	800aa98 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800aa7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d006      	beq.n	800aa92 <tcp_write+0x276>
 800aa84:	4b1c      	ldr	r3, [pc, #112]	; (800aaf8 <tcp_write+0x2dc>)
 800aa86:	f240 2231 	movw	r2, #561	; 0x231
 800aa8a:	4922      	ldr	r1, [pc, #136]	; (800ab14 <tcp_write+0x2f8>)
 800aa8c:	481c      	ldr	r0, [pc, #112]	; (800ab00 <tcp_write+0x2e4>)
 800aa8e:	f004 fa39 	bl	800ef04 <iprintf>
          extendlen = seglen;
 800aa92:	8bfb      	ldrh	r3, [r7, #30]
 800aa94:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800aa96:	e01a      	b.n	800aace <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800aa98:	8bfb      	ldrh	r3, [r7, #30]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	f7fa fe50 	bl	8005744 <pbuf_alloc>
 800aaa4:	6578      	str	r0, [r7, #84]	; 0x54
 800aaa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 81e0 	beq.w	800ae6e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800aaae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	441a      	add	r2, r3
 800aab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aab8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800aaba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aabc:	f7fb f9ae 	bl	8005e1c <pbuf_clen>
 800aac0:	4603      	mov	r3, r0
 800aac2:	461a      	mov	r2, r3
 800aac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aac8:	4413      	add	r3, r2
 800aaca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800aace:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aad2:	8bfb      	ldrh	r3, [r7, #30]
 800aad4:	4413      	add	r3, r2
 800aad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800aada:	e0dc      	b.n	800ac96 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 80d7 	beq.w	800ac96 <tcp_write+0x47a>
 800aae8:	4b03      	ldr	r3, [pc, #12]	; (800aaf8 <tcp_write+0x2dc>)
 800aaea:	f240 224a 	movw	r2, #586	; 0x24a
 800aaee:	490a      	ldr	r1, [pc, #40]	; (800ab18 <tcp_write+0x2fc>)
 800aaf0:	4803      	ldr	r0, [pc, #12]	; (800ab00 <tcp_write+0x2e4>)
 800aaf2:	f004 fa07 	bl	800ef04 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800aaf6:	e0ce      	b.n	800ac96 <tcp_write+0x47a>
 800aaf8:	080118d4 	.word	0x080118d4
 800aafc:	08011a74 	.word	0x08011a74
 800ab00:	08011928 	.word	0x08011928
 800ab04:	08011a8c 	.word	0x08011a8c
 800ab08:	08011ac0 	.word	0x08011ac0
 800ab0c:	08011ad8 	.word	0x08011ad8
 800ab10:	08011af8 	.word	0x08011af8
 800ab14:	08011b18 	.word	0x08011b18
 800ab18:	08011b44 	.word	0x08011b44
    struct pbuf *p;
    u16_t left = len - pos;
 800ab1c:	88fa      	ldrh	r2, [r7, #6]
 800ab1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ab26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ab32:	8b7a      	ldrh	r2, [r7, #26]
 800ab34:	8bbb      	ldrh	r3, [r7, #28]
 800ab36:	4293      	cmp	r3, r2
 800ab38:	bf28      	it	cs
 800ab3a:	4613      	movcs	r3, r2
 800ab3c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ab3e:	797b      	ldrb	r3, [r7, #5]
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d036      	beq.n	800abb6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ab48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	8b3b      	ldrh	r3, [r7, #24]
 800ab50:	4413      	add	r3, r2
 800ab52:	b299      	uxth	r1, r3
 800ab54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	bf0c      	ite	eq
 800ab5a:	2301      	moveq	r3, #1
 800ab5c:	2300      	movne	r3, #0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f107 0012 	add.w	r0, r7, #18
 800ab64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab66:	9302      	str	r3, [sp, #8]
 800ab68:	797b      	ldrb	r3, [r7, #5]
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	4603      	mov	r3, r0
 800ab72:	2036      	movs	r0, #54	; 0x36
 800ab74:	f7ff fd5e 	bl	800a634 <tcp_pbuf_prealloc>
 800ab78:	6338      	str	r0, [r7, #48]	; 0x30
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 8178 	beq.w	800ae72 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	895b      	ldrh	r3, [r3, #10]
 800ab86:	8b3a      	ldrh	r2, [r7, #24]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d906      	bls.n	800ab9a <tcp_write+0x37e>
 800ab8c:	4b8c      	ldr	r3, [pc, #560]	; (800adc0 <tcp_write+0x5a4>)
 800ab8e:	f240 2266 	movw	r2, #614	; 0x266
 800ab92:	498c      	ldr	r1, [pc, #560]	; (800adc4 <tcp_write+0x5a8>)
 800ab94:	488c      	ldr	r0, [pc, #560]	; (800adc8 <tcp_write+0x5ac>)
 800ab96:	f004 f9b5 	bl	800ef04 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aba2:	18d0      	adds	r0, r2, r3
 800aba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	4413      	add	r3, r2
 800abac:	8b3a      	ldrh	r2, [r7, #24]
 800abae:	4619      	mov	r1, r3
 800abb0:	f004 f992 	bl	800eed8 <memcpy>
 800abb4:	e02f      	b.n	800ac16 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800abb6:	8a7b      	ldrh	r3, [r7, #18]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d006      	beq.n	800abca <tcp_write+0x3ae>
 800abbc:	4b80      	ldr	r3, [pc, #512]	; (800adc0 <tcp_write+0x5a4>)
 800abbe:	f240 2271 	movw	r2, #625	; 0x271
 800abc2:	4982      	ldr	r1, [pc, #520]	; (800adcc <tcp_write+0x5b0>)
 800abc4:	4880      	ldr	r0, [pc, #512]	; (800adc8 <tcp_write+0x5ac>)
 800abc6:	f004 f99d 	bl	800ef04 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800abca:	8b3b      	ldrh	r3, [r7, #24]
 800abcc:	2201      	movs	r2, #1
 800abce:	4619      	mov	r1, r3
 800abd0:	2036      	movs	r0, #54	; 0x36
 800abd2:	f7fa fdb7 	bl	8005744 <pbuf_alloc>
 800abd6:	6178      	str	r0, [r7, #20]
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 814b 	beq.w	800ae76 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800abe0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	441a      	add	r2, r3
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800abec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800abf6:	4619      	mov	r1, r3
 800abf8:	2036      	movs	r0, #54	; 0x36
 800abfa:	f7fa fda3 	bl	8005744 <pbuf_alloc>
 800abfe:	6338      	str	r0, [r7, #48]	; 0x30
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ac06:	6978      	ldr	r0, [r7, #20]
 800ac08:	f7fb f880 	bl	8005d0c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ac0c:	e136      	b.n	800ae7c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ac0e:	6979      	ldr	r1, [r7, #20]
 800ac10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac12:	f7fb f93d 	bl	8005e90 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ac16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac18:	f7fb f900 	bl	8005e1c <pbuf_clen>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac24:	4413      	add	r3, r2
 800ac26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ac2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac2e:	2b09      	cmp	r3, #9
 800ac30:	d903      	bls.n	800ac3a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ac32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac34:	f7fb f86a 	bl	8005d0c <pbuf_free>
      goto memerr;
 800ac38:	e120      	b.n	800ae7c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac42:	441a      	add	r2, r3
 800ac44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7ff fc51 	bl	800a4f8 <tcp_create_segment>
 800ac56:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ac58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 810d 	beq.w	800ae7a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ac60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <tcp_write+0x450>
      queue = seg;
 800ac66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac68:	647b      	str	r3, [r7, #68]	; 0x44
 800ac6a:	e00c      	b.n	800ac86 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ac6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d106      	bne.n	800ac80 <tcp_write+0x464>
 800ac72:	4b53      	ldr	r3, [pc, #332]	; (800adc0 <tcp_write+0x5a4>)
 800ac74:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ac78:	4955      	ldr	r1, [pc, #340]	; (800add0 <tcp_write+0x5b4>)
 800ac7a:	4853      	ldr	r0, [pc, #332]	; (800adc8 <tcp_write+0x5ac>)
 800ac7c:	f004 f942 	bl	800ef04 <iprintf>
      prev_seg->next = seg;
 800ac80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac84:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ac86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac88:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ac8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ac8e:	8b3b      	ldrh	r3, [r7, #24]
 800ac90:	4413      	add	r3, r2
 800ac92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ac96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ac9a:	88fb      	ldrh	r3, [r7, #6]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	f4ff af3d 	bcc.w	800ab1c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800aca2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d02c      	beq.n	800ad02 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800aca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acae:	e01e      	b.n	800acee <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	891a      	ldrh	r2, [r3, #8]
 800acb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800acb6:	4413      	add	r3, r2
 800acb8:	b29a      	uxth	r2, r3
 800acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d110      	bne.n	800ace8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800accc:	8952      	ldrh	r2, [r2, #10]
 800acce:	4413      	add	r3, r2
 800acd0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800acd2:	68b9      	ldr	r1, [r7, #8]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f004 f8ff 	bl	800eed8 <memcpy>
        p->len += oversize_used;
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	895a      	ldrh	r2, [r3, #10]
 800acde:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ace0:	4413      	add	r3, r2
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1dd      	bne.n	800acb0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800acf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf6:	891a      	ldrh	r2, [r3, #8]
 800acf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800acfa:	4413      	add	r3, r2
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad00:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ad02:	8a7a      	ldrh	r2, [r7, #18]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ad0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d018      	beq.n	800ad42 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ad10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d106      	bne.n	800ad24 <tcp_write+0x508>
 800ad16:	4b2a      	ldr	r3, [pc, #168]	; (800adc0 <tcp_write+0x5a4>)
 800ad18:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ad1c:	492d      	ldr	r1, [pc, #180]	; (800add4 <tcp_write+0x5b8>)
 800ad1e:	482a      	ldr	r0, [pc, #168]	; (800adc8 <tcp_write+0x5ac>)
 800ad20:	f004 f8f0 	bl	800ef04 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ad24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fb f8b0 	bl	8005e90 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ad30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad32:	891a      	ldrh	r2, [r3, #8]
 800ad34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad36:	891b      	ldrh	r3, [r3, #8]
 800ad38:	4413      	add	r3, r2
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad3e:	811a      	strh	r2, [r3, #8]
 800ad40:	e037      	b.n	800adb2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800ad42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d034      	beq.n	800adb2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ad48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <tcp_write+0x53a>
 800ad4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <tcp_write+0x548>
 800ad56:	4b1a      	ldr	r3, [pc, #104]	; (800adc0 <tcp_write+0x5a4>)
 800ad58:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ad5c:	491e      	ldr	r1, [pc, #120]	; (800add8 <tcp_write+0x5bc>)
 800ad5e:	481a      	ldr	r0, [pc, #104]	; (800adc8 <tcp_write+0x5ac>)
 800ad60:	f004 f8d0 	bl	800ef04 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ad64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad6a:	e009      	b.n	800ad80 <tcp_write+0x564>
      p->tot_len += extendlen;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	891a      	ldrh	r2, [r3, #8]
 800ad70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad72:	4413      	add	r3, r2
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ad7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1f1      	bne.n	800ad6c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8a:	891a      	ldrh	r2, [r3, #8]
 800ad8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad8e:	4413      	add	r3, r2
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	895a      	ldrh	r2, [r3, #10]
 800ad9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad9c:	4413      	add	r3, r2
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ada4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ada6:	891a      	ldrh	r2, [r3, #8]
 800ada8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800adaa:	4413      	add	r3, r2
 800adac:	b29a      	uxth	r2, r3
 800adae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adb0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800adb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d111      	bne.n	800addc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adbc:	66da      	str	r2, [r3, #108]	; 0x6c
 800adbe:	e010      	b.n	800ade2 <tcp_write+0x5c6>
 800adc0:	080118d4 	.word	0x080118d4
 800adc4:	08011b74 	.word	0x08011b74
 800adc8:	08011928 	.word	0x08011928
 800adcc:	08011bb4 	.word	0x08011bb4
 800add0:	08011bc4 	.word	0x08011bc4
 800add4:	08011bd8 	.word	0x08011bd8
 800add8:	08011c10 	.word	0x08011c10
  } else {
    last_unsent->next = queue;
 800addc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ade0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ade6:	88fb      	ldrh	r3, [r7, #6]
 800ade8:	441a      	add	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800adf4:	88fb      	ldrh	r3, [r7, #6]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ae06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00e      	beq.n	800ae32 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10a      	bne.n	800ae32 <tcp_write+0x616>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d106      	bne.n	800ae32 <tcp_write+0x616>
 800ae24:	4b2c      	ldr	r3, [pc, #176]	; (800aed8 <tcp_write+0x6bc>)
 800ae26:	f240 3212 	movw	r2, #786	; 0x312
 800ae2a:	492c      	ldr	r1, [pc, #176]	; (800aedc <tcp_write+0x6c0>)
 800ae2c:	482c      	ldr	r0, [pc, #176]	; (800aee0 <tcp_write+0x6c4>)
 800ae2e:	f004 f869 	bl	800ef04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ae32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d016      	beq.n	800ae66 <tcp_write+0x64a>
 800ae38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d012      	beq.n	800ae66 <tcp_write+0x64a>
 800ae40:	797b      	ldrb	r3, [r7, #5]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10d      	bne.n	800ae66 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ae4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	899b      	ldrh	r3, [r3, #12]
 800ae50:	b29c      	uxth	r4, r3
 800ae52:	2008      	movs	r0, #8
 800ae54:	f7f9 fbc6 	bl	80045e4 <lwip_htons>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	4322      	orrs	r2, r4
 800ae62:	b292      	uxth	r2, r2
 800ae64:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	e031      	b.n	800aece <tcp_write+0x6b2>
          goto memerr;
 800ae6a:	bf00      	nop
 800ae6c:	e006      	b.n	800ae7c <tcp_write+0x660>
            goto memerr;
 800ae6e:	bf00      	nop
 800ae70:	e004      	b.n	800ae7c <tcp_write+0x660>
        goto memerr;
 800ae72:	bf00      	nop
 800ae74:	e002      	b.n	800ae7c <tcp_write+0x660>
        goto memerr;
 800ae76:	bf00      	nop
 800ae78:	e000      	b.n	800ae7c <tcp_write+0x660>
      goto memerr;
 800ae7a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	8b5b      	ldrh	r3, [r3, #26]
 800ae80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ae8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ae90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ae92:	f7fa ff3b 	bl	8005d0c <pbuf_free>
  }
  if (queue != NULL) {
 800ae96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800ae9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae9e:	f7fc fb4d 	bl	800753c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00e      	beq.n	800aeca <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10a      	bne.n	800aeca <tcp_write+0x6ae>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <tcp_write+0x6ae>
 800aebc:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <tcp_write+0x6bc>)
 800aebe:	f240 3227 	movw	r2, #807	; 0x327
 800aec2:	4906      	ldr	r1, [pc, #24]	; (800aedc <tcp_write+0x6c0>)
 800aec4:	4806      	ldr	r0, [pc, #24]	; (800aee0 <tcp_write+0x6c4>)
 800aec6:	f004 f81d 	bl	800ef04 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800aeca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aece:	4618      	mov	r0, r3
 800aed0:	375c      	adds	r7, #92	; 0x5c
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd90      	pop	{r4, r7, pc}
 800aed6:	bf00      	nop
 800aed8:	080118d4 	.word	0x080118d4
 800aedc:	08011c48 	.word	0x08011c48
 800aee0:	08011928 	.word	0x08011928

0800aee4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800aee4:	b590      	push	{r4, r7, lr}
 800aee6:	b08b      	sub	sp, #44	; 0x2c
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800aef0:	2300      	movs	r3, #0
 800aef2:	61fb      	str	r3, [r7, #28]
 800aef4:	2300      	movs	r3, #0
 800aef6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800aef8:	2300      	movs	r3, #0
 800aefa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <tcp_split_unsent_seg+0x2c>
 800af02:	4b95      	ldr	r3, [pc, #596]	; (800b158 <tcp_split_unsent_seg+0x274>)
 800af04:	f240 324b 	movw	r2, #843	; 0x34b
 800af08:	4994      	ldr	r1, [pc, #592]	; (800b15c <tcp_split_unsent_seg+0x278>)
 800af0a:	4895      	ldr	r0, [pc, #596]	; (800b160 <tcp_split_unsent_seg+0x27c>)
 800af0c:	f003 fffa 	bl	800ef04 <iprintf>

  useg = pcb->unsent;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800af1c:	f04f 33ff 	mov.w	r3, #4294967295
 800af20:	e116      	b.n	800b150 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800af22:	887b      	ldrh	r3, [r7, #2]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800af28:	4b8b      	ldr	r3, [pc, #556]	; (800b158 <tcp_split_unsent_seg+0x274>)
 800af2a:	f240 3253 	movw	r2, #851	; 0x353
 800af2e:	498d      	ldr	r1, [pc, #564]	; (800b164 <tcp_split_unsent_seg+0x280>)
 800af30:	488b      	ldr	r0, [pc, #556]	; (800b160 <tcp_split_unsent_seg+0x27c>)
 800af32:	f003 ffe7 	bl	800ef04 <iprintf>
    return ERR_VAL;
 800af36:	f06f 0305 	mvn.w	r3, #5
 800af3a:	e109      	b.n	800b150 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	891b      	ldrh	r3, [r3, #8]
 800af40:	887a      	ldrh	r2, [r7, #2]
 800af42:	429a      	cmp	r2, r3
 800af44:	d301      	bcc.n	800af4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	e102      	b.n	800b150 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af4e:	887a      	ldrh	r2, [r7, #2]
 800af50:	429a      	cmp	r2, r3
 800af52:	d906      	bls.n	800af62 <tcp_split_unsent_seg+0x7e>
 800af54:	4b80      	ldr	r3, [pc, #512]	; (800b158 <tcp_split_unsent_seg+0x274>)
 800af56:	f240 325b 	movw	r2, #859	; 0x35b
 800af5a:	4983      	ldr	r1, [pc, #524]	; (800b168 <tcp_split_unsent_seg+0x284>)
 800af5c:	4880      	ldr	r0, [pc, #512]	; (800b160 <tcp_split_unsent_seg+0x27c>)
 800af5e:	f003 ffd1 	bl	800ef04 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	891b      	ldrh	r3, [r3, #8]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <tcp_split_unsent_seg+0x94>
 800af6a:	4b7b      	ldr	r3, [pc, #492]	; (800b158 <tcp_split_unsent_seg+0x274>)
 800af6c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800af70:	497e      	ldr	r1, [pc, #504]	; (800b16c <tcp_split_unsent_seg+0x288>)
 800af72:	487b      	ldr	r0, [pc, #492]	; (800b160 <tcp_split_unsent_seg+0x27c>)
 800af74:	f003 ffc6 	bl	800ef04 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	7a9b      	ldrb	r3, [r3, #10]
 800af7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	b2db      	uxtb	r3, r3
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	891a      	ldrh	r2, [r3, #8]
 800af8e:	887b      	ldrh	r3, [r7, #2]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	b29a      	uxth	r2, r3
 800af98:	89bb      	ldrh	r3, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800afa2:	4619      	mov	r1, r3
 800afa4:	2036      	movs	r0, #54	; 0x36
 800afa6:	f7fa fbcd 	bl	8005744 <pbuf_alloc>
 800afaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 80b7 	beq.w	800b122 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	891a      	ldrh	r2, [r3, #8]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	891b      	ldrh	r3, [r3, #8]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	887b      	ldrh	r3, [r7, #2]
 800afc4:	4413      	add	r3, r2
 800afc6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	6858      	ldr	r0, [r3, #4]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	18d1      	adds	r1, r2, r3
 800afd4:	897b      	ldrh	r3, [r7, #10]
 800afd6:	89ba      	ldrh	r2, [r7, #12]
 800afd8:	f7fb f882 	bl	80060e0 <pbuf_copy_partial>
 800afdc:	4603      	mov	r3, r0
 800afde:	461a      	mov	r2, r3
 800afe0:	89bb      	ldrh	r3, [r7, #12]
 800afe2:	4293      	cmp	r3, r2
 800afe4:	f040 809f 	bne.w	800b126 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	899b      	ldrh	r3, [r3, #12]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7f9 faf7 	bl	80045e4 <lwip_htons>
 800aff6:	4603      	mov	r3, r0
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800affe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b000:	2300      	movs	r3, #0
 800b002:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b004:	7efb      	ldrb	r3, [r7, #27]
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b00e:	7efb      	ldrb	r3, [r7, #27]
 800b010:	f023 0308 	bic.w	r3, r3, #8
 800b014:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b016:	7ebb      	ldrb	r3, [r7, #26]
 800b018:	f043 0308 	orr.w	r3, r3, #8
 800b01c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b01e:	7efb      	ldrb	r3, [r7, #27]
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	2b00      	cmp	r3, #0
 800b026:	d007      	beq.n	800b038 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b028:	7efb      	ldrb	r3, [r7, #27]
 800b02a:	f023 0301 	bic.w	r3, r3, #1
 800b02e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b030:	7ebb      	ldrb	r3, [r7, #26]
 800b032:	f043 0301 	orr.w	r3, r3, #1
 800b036:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	4618      	mov	r0, r3
 800b040:	f7f9 fae5 	bl	800460e <lwip_htonl>
 800b044:	4602      	mov	r2, r0
 800b046:	887b      	ldrh	r3, [r7, #2]
 800b048:	18d1      	adds	r1, r2, r3
 800b04a:	7eba      	ldrb	r2, [r7, #26]
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	460b      	mov	r3, r1
 800b052:	6939      	ldr	r1, [r7, #16]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff fa4f 	bl	800a4f8 <tcp_create_segment>
 800b05a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d063      	beq.n	800b12a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	4618      	mov	r0, r3
 800b068:	f7fa fed8 	bl	8005e1c <pbuf_clen>
 800b06c:	4603      	mov	r3, r0
 800b06e:	461a      	mov	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	6858      	ldr	r0, [r3, #4]
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	891a      	ldrh	r2, [r3, #8]
 800b08a:	89bb      	ldrh	r3, [r7, #12]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	b29b      	uxth	r3, r3
 800b090:	4619      	mov	r1, r3
 800b092:	f7fa fcb5 	bl	8005a00 <pbuf_realloc>
  useg->len -= remainder;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	891a      	ldrh	r2, [r3, #8]
 800b09a:	89bb      	ldrh	r3, [r7, #12]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	899b      	ldrh	r3, [r3, #12]
 800b0aa:	b29c      	uxth	r4, r3
 800b0ac:	7efb      	ldrb	r3, [r7, #27]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f9 fa97 	bl	80045e4 <lwip_htons>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	4322      	orrs	r2, r4
 800b0c0:	b292      	uxth	r2, r2
 800b0c2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fa fea7 	bl	8005e1c <pbuf_clen>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0d8:	4413      	add	r3, r2
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fa fe98 	bl	8005e1c <pbuf_clen>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0f6:	4413      	add	r3, r2
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d103      	bne.n	800b11e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	e016      	b.n	800b150 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b122:	bf00      	nop
 800b124:	e002      	b.n	800b12c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b126:	bf00      	nop
 800b128:	e000      	b.n	800b12c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b12a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d006      	beq.n	800b140 <tcp_split_unsent_seg+0x25c>
 800b132:	4b09      	ldr	r3, [pc, #36]	; (800b158 <tcp_split_unsent_seg+0x274>)
 800b134:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b138:	490d      	ldr	r1, [pc, #52]	; (800b170 <tcp_split_unsent_seg+0x28c>)
 800b13a:	4809      	ldr	r0, [pc, #36]	; (800b160 <tcp_split_unsent_seg+0x27c>)
 800b13c:	f003 fee2 	bl	800ef04 <iprintf>
  if (p != NULL) {
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b146:	6938      	ldr	r0, [r7, #16]
 800b148:	f7fa fde0 	bl	8005d0c <pbuf_free>
  }

  return ERR_MEM;
 800b14c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b150:	4618      	mov	r0, r3
 800b152:	3724      	adds	r7, #36	; 0x24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd90      	pop	{r4, r7, pc}
 800b158:	080118d4 	.word	0x080118d4
 800b15c:	08011c68 	.word	0x08011c68
 800b160:	08011928 	.word	0x08011928
 800b164:	08011c8c 	.word	0x08011c8c
 800b168:	08011cb0 	.word	0x08011cb0
 800b16c:	08011cc0 	.word	0x08011cc0
 800b170:	08011cd0 	.word	0x08011cd0

0800b174 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b174:	b590      	push	{r4, r7, lr}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <tcp_send_fin+0x1c>
 800b182:	4b21      	ldr	r3, [pc, #132]	; (800b208 <tcp_send_fin+0x94>)
 800b184:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b188:	4920      	ldr	r1, [pc, #128]	; (800b20c <tcp_send_fin+0x98>)
 800b18a:	4821      	ldr	r0, [pc, #132]	; (800b210 <tcp_send_fin+0x9c>)
 800b18c:	f003 feba 	bl	800ef04 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b194:	2b00      	cmp	r3, #0
 800b196:	d02e      	beq.n	800b1f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19c:	60fb      	str	r3, [r7, #12]
 800b19e:	e002      	b.n	800b1a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1f8      	bne.n	800b1a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	899b      	ldrh	r3, [r3, #12]
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7f9 fa14 	bl	80045e4 <lwip_htons>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	f003 0307 	and.w	r3, r3, #7
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d116      	bne.n	800b1f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	899b      	ldrh	r3, [r3, #12]
 800b1ce:	b29c      	uxth	r4, r3
 800b1d0:	2001      	movs	r0, #1
 800b1d2:	f7f9 fa07 	bl	80045e4 <lwip_htons>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	461a      	mov	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	4322      	orrs	r2, r4
 800b1e0:	b292      	uxth	r2, r2
 800b1e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	8b5b      	ldrh	r3, [r3, #26]
 800b1e8:	f043 0320 	orr.w	r3, r3, #32
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e004      	b.n	800b200 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f80b 	bl	800b214 <tcp_enqueue_flags>
 800b1fe:	4603      	mov	r3, r0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	bd90      	pop	{r4, r7, pc}
 800b208:	080118d4 	.word	0x080118d4
 800b20c:	08011cdc 	.word	0x08011cdc
 800b210:	08011928 	.word	0x08011928

0800b214 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08a      	sub	sp, #40	; 0x28
 800b218:	af02      	add	r7, sp, #8
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d106      	bne.n	800b240 <tcp_enqueue_flags+0x2c>
 800b232:	4b67      	ldr	r3, [pc, #412]	; (800b3d0 <tcp_enqueue_flags+0x1bc>)
 800b234:	f240 4211 	movw	r2, #1041	; 0x411
 800b238:	4966      	ldr	r1, [pc, #408]	; (800b3d4 <tcp_enqueue_flags+0x1c0>)
 800b23a:	4867      	ldr	r0, [pc, #412]	; (800b3d8 <tcp_enqueue_flags+0x1c4>)
 800b23c:	f003 fe62 	bl	800ef04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <tcp_enqueue_flags+0x40>
 800b246:	4b62      	ldr	r3, [pc, #392]	; (800b3d0 <tcp_enqueue_flags+0x1bc>)
 800b248:	f240 4213 	movw	r2, #1043	; 0x413
 800b24c:	4963      	ldr	r1, [pc, #396]	; (800b3dc <tcp_enqueue_flags+0x1c8>)
 800b24e:	4862      	ldr	r0, [pc, #392]	; (800b3d8 <tcp_enqueue_flags+0x1c4>)
 800b250:	f003 fe58 	bl	800ef04 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b254:	78fb      	ldrb	r3, [r7, #3]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b25e:	2301      	movs	r3, #1
 800b260:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b262:	7ffb      	ldrb	r3, [r7, #31]
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	b2db      	uxtb	r3, r3
 800b268:	f003 0304 	and.w	r3, r3, #4
 800b26c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	b29b      	uxth	r3, r3
 800b272:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b276:	4619      	mov	r1, r3
 800b278:	2036      	movs	r0, #54	; 0x36
 800b27a:	f7fa fa63 	bl	8005744 <pbuf_alloc>
 800b27e:	6138      	str	r0, [r7, #16]
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d109      	bne.n	800b29a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8b5b      	ldrh	r3, [r3, #26]
 800b28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b28e:	b29a      	uxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b294:	f04f 33ff 	mov.w	r3, #4294967295
 800b298:	e095      	b.n	800b3c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	895a      	ldrh	r2, [r3, #10]
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d206      	bcs.n	800b2b4 <tcp_enqueue_flags+0xa0>
 800b2a6:	4b4a      	ldr	r3, [pc, #296]	; (800b3d0 <tcp_enqueue_flags+0x1bc>)
 800b2a8:	f240 4239 	movw	r2, #1081	; 0x439
 800b2ac:	494c      	ldr	r1, [pc, #304]	; (800b3e0 <tcp_enqueue_flags+0x1cc>)
 800b2ae:	484a      	ldr	r0, [pc, #296]	; (800b3d8 <tcp_enqueue_flags+0x1c4>)
 800b2b0:	f003 fe28 	bl	800ef04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b2b8:	78fa      	ldrb	r2, [r7, #3]
 800b2ba:	7ffb      	ldrb	r3, [r7, #31]
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	460b      	mov	r3, r1
 800b2c0:	6939      	ldr	r1, [r7, #16]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff f918 	bl	800a4f8 <tcp_create_segment>
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d109      	bne.n	800b2e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	8b5b      	ldrh	r3, [r3, #26]
 800b2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b2de:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e2:	e070      	b.n	800b3c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f003 0303 	and.w	r3, r3, #3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <tcp_enqueue_flags+0xea>
 800b2f0:	4b37      	ldr	r3, [pc, #220]	; (800b3d0 <tcp_enqueue_flags+0x1bc>)
 800b2f2:	f240 4242 	movw	r2, #1090	; 0x442
 800b2f6:	493b      	ldr	r1, [pc, #236]	; (800b3e4 <tcp_enqueue_flags+0x1d0>)
 800b2f8:	4837      	ldr	r0, [pc, #220]	; (800b3d8 <tcp_enqueue_flags+0x1c4>)
 800b2fa:	f003 fe03 	bl	800ef04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	891b      	ldrh	r3, [r3, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d006      	beq.n	800b314 <tcp_enqueue_flags+0x100>
 800b306:	4b32      	ldr	r3, [pc, #200]	; (800b3d0 <tcp_enqueue_flags+0x1bc>)
 800b308:	f240 4243 	movw	r2, #1091	; 0x443
 800b30c:	4936      	ldr	r1, [pc, #216]	; (800b3e8 <tcp_enqueue_flags+0x1d4>)
 800b30e:	4832      	ldr	r0, [pc, #200]	; (800b3d8 <tcp_enqueue_flags+0x1c4>)
 800b310:	f003 fdf8 	bl	800ef04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d103      	bne.n	800b324 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	66da      	str	r2, [r3, #108]	; 0x6c
 800b322:	e00d      	b.n	800b340 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b328:	61bb      	str	r3, [r7, #24]
 800b32a:	e002      	b.n	800b332 <tcp_enqueue_flags+0x11e>
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1f8      	bne.n	800b32c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b348:	78fb      	ldrb	r3, [r7, #3]
 800b34a:	f003 0302 	and.w	r3, r3, #2
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d104      	bne.n	800b35c <tcp_enqueue_flags+0x148>
 800b352:	78fb      	ldrb	r3, [r7, #3]
 800b354:	f003 0301 	and.w	r3, r3, #1
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d004      	beq.n	800b366 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b366:	78fb      	ldrb	r3, [r7, #3]
 800b368:	f003 0301 	and.w	r3, r3, #1
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d006      	beq.n	800b37e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	8b5b      	ldrh	r3, [r3, #26]
 800b374:	f043 0320 	orr.w	r3, r3, #32
 800b378:	b29a      	uxth	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	4618      	mov	r0, r3
 800b384:	f7fa fd4a 	bl	8005e1c <pbuf_clen>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b392:	4413      	add	r3, r2
 800b394:	b29a      	uxth	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00e      	beq.n	800b3c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10a      	bne.n	800b3c4 <tcp_enqueue_flags+0x1b0>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <tcp_enqueue_flags+0x1b0>
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <tcp_enqueue_flags+0x1bc>)
 800b3b8:	f240 4265 	movw	r2, #1125	; 0x465
 800b3bc:	490b      	ldr	r1, [pc, #44]	; (800b3ec <tcp_enqueue_flags+0x1d8>)
 800b3be:	4806      	ldr	r0, [pc, #24]	; (800b3d8 <tcp_enqueue_flags+0x1c4>)
 800b3c0:	f003 fda0 	bl	800ef04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3720      	adds	r7, #32
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	080118d4 	.word	0x080118d4
 800b3d4:	08011cf8 	.word	0x08011cf8
 800b3d8:	08011928 	.word	0x08011928
 800b3dc:	08011d50 	.word	0x08011d50
 800b3e0:	08011d70 	.word	0x08011d70
 800b3e4:	08011dac 	.word	0x08011dac
 800b3e8:	08011dc4 	.word	0x08011dc4
 800b3ec:	08011df0 	.word	0x08011df0

0800b3f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b3f0:	b5b0      	push	{r4, r5, r7, lr}
 800b3f2:	b08a      	sub	sp, #40	; 0x28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d106      	bne.n	800b40c <tcp_output+0x1c>
 800b3fe:	4b8a      	ldr	r3, [pc, #552]	; (800b628 <tcp_output+0x238>)
 800b400:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b404:	4989      	ldr	r1, [pc, #548]	; (800b62c <tcp_output+0x23c>)
 800b406:	488a      	ldr	r0, [pc, #552]	; (800b630 <tcp_output+0x240>)
 800b408:	f003 fd7c 	bl	800ef04 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7d1b      	ldrb	r3, [r3, #20]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d106      	bne.n	800b422 <tcp_output+0x32>
 800b414:	4b84      	ldr	r3, [pc, #528]	; (800b628 <tcp_output+0x238>)
 800b416:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b41a:	4986      	ldr	r1, [pc, #536]	; (800b634 <tcp_output+0x244>)
 800b41c:	4884      	ldr	r0, [pc, #528]	; (800b630 <tcp_output+0x240>)
 800b41e:	f003 fd71 	bl	800ef04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b422:	4b85      	ldr	r3, [pc, #532]	; (800b638 <tcp_output+0x248>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d101      	bne.n	800b430 <tcp_output+0x40>
    return ERR_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	e1ce      	b.n	800b7ce <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b43c:	4293      	cmp	r3, r2
 800b43e:	bf28      	it	cs
 800b440:	4613      	movcs	r3, r2
 800b442:	b29b      	uxth	r3, r3
 800b444:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10b      	bne.n	800b46a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	8b5b      	ldrh	r3, [r3, #26]
 800b456:	f003 0302 	and.w	r3, r3, #2
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 81aa 	beq.w	800b7b4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fdcb 	bl	800bffc <tcp_send_empty_ack>
 800b466:	4603      	mov	r3, r0
 800b468:	e1b1      	b.n	800b7ce <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b46a:	6879      	ldr	r1, [r7, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3304      	adds	r3, #4
 800b470:	461a      	mov	r2, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff f824 	bl	800a4c0 <tcp_route>
 800b478:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d102      	bne.n	800b486 <tcp_output+0x96>
    return ERR_RTE;
 800b480:	f06f 0303 	mvn.w	r3, #3
 800b484:	e1a3      	b.n	800b7ce <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <tcp_output+0xa4>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d111      	bne.n	800b4b8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <tcp_output+0xb0>
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	3304      	adds	r3, #4
 800b49e:	e000      	b.n	800b4a2 <tcp_output+0xb2>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <tcp_output+0xc0>
      return ERR_RTE;
 800b4aa:	f06f 0303 	mvn.w	r3, #3
 800b4ae:	e18e      	b.n	800b7ce <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f9 f8a5 	bl	800460e <lwip_htonl>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ce:	8912      	ldrh	r2, [r2, #8]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	69ba      	ldr	r2, [r7, #24]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d227      	bcs.n	800b528 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4de:	461a      	mov	r2, r3
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d114      	bne.n	800b510 <tcp_output+0x120>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d110      	bne.n	800b510 <tcp_output+0x120>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10b      	bne.n	800b510 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	8b5b      	ldrh	r3, [r3, #26]
 800b514:	f003 0302 	and.w	r3, r3, #2
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 814d 	beq.w	800b7b8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fd6c 	bl	800bffc <tcp_send_empty_ack>
 800b524:	4603      	mov	r3, r0
 800b526:	e152      	b.n	800b7ce <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b534:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b536:	6a3b      	ldr	r3, [r7, #32]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 811c 	beq.w	800b776 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b53e:	e002      	b.n	800b546 <tcp_output+0x156>
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	623b      	str	r3, [r7, #32]
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1f8      	bne.n	800b540 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b54e:	e112      	b.n	800b776 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	899b      	ldrh	r3, [r3, #12]
 800b556:	b29b      	uxth	r3, r3
 800b558:	4618      	mov	r0, r3
 800b55a:	f7f9 f843 	bl	80045e4 <lwip_htons>
 800b55e:	4603      	mov	r3, r0
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 0304 	and.w	r3, r3, #4
 800b566:	2b00      	cmp	r3, #0
 800b568:	d006      	beq.n	800b578 <tcp_output+0x188>
 800b56a:	4b2f      	ldr	r3, [pc, #188]	; (800b628 <tcp_output+0x238>)
 800b56c:	f240 5236 	movw	r2, #1334	; 0x536
 800b570:	4932      	ldr	r1, [pc, #200]	; (800b63c <tcp_output+0x24c>)
 800b572:	482f      	ldr	r0, [pc, #188]	; (800b630 <tcp_output+0x240>)
 800b574:	f003 fcc6 	bl	800ef04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01f      	beq.n	800b5c0 <tcp_output+0x1d0>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	8b5b      	ldrh	r3, [r3, #26]
 800b584:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d119      	bne.n	800b5c0 <tcp_output+0x1d0>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <tcp_output+0x1bc>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d110      	bne.n	800b5c0 <tcp_output+0x1d0>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5a2:	891a      	ldrh	r2, [r3, #8]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d209      	bcs.n	800b5c0 <tcp_output+0x1d0>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d004      	beq.n	800b5c0 <tcp_output+0x1d0>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5bc:	2b08      	cmp	r3, #8
 800b5be:	d901      	bls.n	800b5c4 <tcp_output+0x1d4>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e000      	b.n	800b5c6 <tcp_output+0x1d6>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d106      	bne.n	800b5d8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8b5b      	ldrh	r3, [r3, #26]
 800b5ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80e4 	beq.w	800b7a0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	7d1b      	ldrb	r3, [r3, #20]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d00d      	beq.n	800b5fc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	899b      	ldrh	r3, [r3, #12]
 800b5e6:	b29c      	uxth	r4, r3
 800b5e8:	2010      	movs	r0, #16
 800b5ea:	f7f8 fffb 	bl	80045e4 <lwip_htons>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	4322      	orrs	r2, r4
 800b5f8:	b292      	uxth	r2, r2
 800b5fa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	6879      	ldr	r1, [r7, #4]
 800b600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b602:	f000 f909 	bl	800b818 <tcp_output_segment>
 800b606:	4603      	mov	r3, r0
 800b608:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d016      	beq.n	800b640 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	8b5b      	ldrh	r3, [r3, #26]
 800b616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	835a      	strh	r2, [r3, #26]
      return err;
 800b620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b624:	e0d3      	b.n	800b7ce <tcp_output+0x3de>
 800b626:	bf00      	nop
 800b628:	080118d4 	.word	0x080118d4
 800b62c:	08011e18 	.word	0x08011e18
 800b630:	08011928 	.word	0x08011928
 800b634:	08011e30 	.word	0x08011e30
 800b638:	200086d4 	.word	0x200086d4
 800b63c:	08011e58 	.word	0x08011e58
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	7d1b      	ldrb	r3, [r3, #20]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d006      	beq.n	800b65e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	8b5b      	ldrh	r3, [r3, #26]
 800b654:	f023 0303 	bic.w	r3, r3, #3
 800b658:	b29a      	uxth	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	4618      	mov	r0, r3
 800b666:	f7f8 ffd2 	bl	800460e <lwip_htonl>
 800b66a:	4604      	mov	r4, r0
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	891b      	ldrh	r3, [r3, #8]
 800b670:	461d      	mov	r5, r3
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	899b      	ldrh	r3, [r3, #12]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7f8 ffb2 	bl	80045e4 <lwip_htons>
 800b680:	4603      	mov	r3, r0
 800b682:	b2db      	uxtb	r3, r3
 800b684:	f003 0303 	and.w	r3, r3, #3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <tcp_output+0x2a0>
 800b68c:	2301      	movs	r3, #1
 800b68e:	e000      	b.n	800b692 <tcp_output+0x2a2>
 800b690:	2300      	movs	r3, #0
 800b692:	442b      	add	r3, r5
 800b694:	4423      	add	r3, r4
 800b696:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	da02      	bge.n	800b6aa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	891b      	ldrh	r3, [r3, #8]
 800b6ae:	461c      	mov	r4, r3
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	899b      	ldrh	r3, [r3, #12]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7f8 ff93 	bl	80045e4 <lwip_htons>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	f003 0303 	and.w	r3, r3, #3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <tcp_output+0x2de>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e000      	b.n	800b6d0 <tcp_output+0x2e0>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4423      	add	r3, r4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d049      	beq.n	800b76a <tcp_output+0x37a>
      seg->next = NULL;
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d105      	bne.n	800b6f0 <tcp_output+0x300>
        pcb->unacked = seg;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	623b      	str	r3, [r7, #32]
 800b6ee:	e03f      	b.n	800b770 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7f8 ff89 	bl	800460e <lwip_htonl>
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	4618      	mov	r0, r3
 800b706:	f7f8 ff82 	bl	800460e <lwip_htonl>
 800b70a:	4603      	mov	r3, r0
 800b70c:	1ae3      	subs	r3, r4, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	da24      	bge.n	800b75c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3370      	adds	r3, #112	; 0x70
 800b716:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b718:	e002      	b.n	800b720 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d011      	beq.n	800b74c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	4618      	mov	r0, r3
 800b732:	f7f8 ff6c 	bl	800460e <lwip_htonl>
 800b736:	4604      	mov	r4, r0
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	4618      	mov	r0, r3
 800b740:	f7f8 ff65 	bl	800460e <lwip_htonl>
 800b744:	4603      	mov	r3, r0
 800b746:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b748:	2b00      	cmp	r3, #0
 800b74a:	dbe6      	blt.n	800b71a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	e009      	b.n	800b770 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b760:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	623b      	str	r3, [r7, #32]
 800b768:	e002      	b.n	800b770 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b76a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b76c:	f7fb fefb 	bl	8007566 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b774:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d012      	beq.n	800b7a2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	4618      	mov	r0, r3
 800b784:	f7f8 ff43 	bl	800460e <lwip_htonl>
 800b788:	4602      	mov	r2, r0
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b792:	8912      	ldrh	r2, [r2, #8]
 800b794:	4413      	add	r3, r2
  while (seg != NULL &&
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	429a      	cmp	r2, r3
 800b79a:	f4bf aed9 	bcs.w	800b550 <tcp_output+0x160>
 800b79e:	e000      	b.n	800b7a2 <tcp_output+0x3b2>
      break;
 800b7a0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d108      	bne.n	800b7bc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b7b2:	e004      	b.n	800b7be <tcp_output+0x3ce>
    goto output_done;
 800b7b4:	bf00      	nop
 800b7b6:	e002      	b.n	800b7be <tcp_output+0x3ce>
    goto output_done;
 800b7b8:	bf00      	nop
 800b7ba:	e000      	b.n	800b7be <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b7bc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	8b5b      	ldrh	r3, [r3, #26]
 800b7c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3728      	adds	r7, #40	; 0x28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d6:	bf00      	nop

0800b7d8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <tcp_output_segment_busy+0x1c>
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <tcp_output_segment_busy+0x34>)
 800b7e8:	f240 529a 	movw	r2, #1434	; 0x59a
 800b7ec:	4908      	ldr	r1, [pc, #32]	; (800b810 <tcp_output_segment_busy+0x38>)
 800b7ee:	4809      	ldr	r0, [pc, #36]	; (800b814 <tcp_output_segment_busy+0x3c>)
 800b7f0:	f003 fb88 	bl	800ef04 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	7b9b      	ldrb	r3, [r3, #14]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d001      	beq.n	800b802 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e000      	b.n	800b804 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	080118d4 	.word	0x080118d4
 800b810:	08011e70 	.word	0x08011e70
 800b814:	08011928 	.word	0x08011928

0800b818 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b818:	b5b0      	push	{r4, r5, r7, lr}
 800b81a:	b08c      	sub	sp, #48	; 0x30
 800b81c:	af04      	add	r7, sp, #16
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <tcp_output_segment+0x20>
 800b82a:	4b63      	ldr	r3, [pc, #396]	; (800b9b8 <tcp_output_segment+0x1a0>)
 800b82c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b830:	4962      	ldr	r1, [pc, #392]	; (800b9bc <tcp_output_segment+0x1a4>)
 800b832:	4863      	ldr	r0, [pc, #396]	; (800b9c0 <tcp_output_segment+0x1a8>)
 800b834:	f003 fb66 	bl	800ef04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d106      	bne.n	800b84c <tcp_output_segment+0x34>
 800b83e:	4b5e      	ldr	r3, [pc, #376]	; (800b9b8 <tcp_output_segment+0x1a0>)
 800b840:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b844:	495f      	ldr	r1, [pc, #380]	; (800b9c4 <tcp_output_segment+0x1ac>)
 800b846:	485e      	ldr	r0, [pc, #376]	; (800b9c0 <tcp_output_segment+0x1a8>)
 800b848:	f003 fb5c 	bl	800ef04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <tcp_output_segment+0x48>
 800b852:	4b59      	ldr	r3, [pc, #356]	; (800b9b8 <tcp_output_segment+0x1a0>)
 800b854:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b858:	495b      	ldr	r1, [pc, #364]	; (800b9c8 <tcp_output_segment+0x1b0>)
 800b85a:	4859      	ldr	r0, [pc, #356]	; (800b9c0 <tcp_output_segment+0x1a8>)
 800b85c:	f003 fb52 	bl	800ef04 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f7ff ffb9 	bl	800b7d8 <tcp_output_segment_busy>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	e09f      	b.n	800b9b0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	68dc      	ldr	r4, [r3, #12]
 800b878:	4610      	mov	r0, r2
 800b87a:	f7f8 fec8 	bl	800460e <lwip_htonl>
 800b87e:	4603      	mov	r3, r0
 800b880:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68dc      	ldr	r4, [r3, #12]
 800b88a:	4610      	mov	r0, r2
 800b88c:	f7f8 feaa 	bl	80045e4 <lwip_htons>
 800b890:	4603      	mov	r3, r0
 800b892:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b89c:	441a      	add	r2, r3
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	3314      	adds	r3, #20
 800b8a8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	7a9b      	ldrb	r3, [r3, #10]
 800b8ae:	f003 0301 	and.w	r3, r3, #1
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d015      	beq.n	800b8e2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	6879      	ldr	r1, [r7, #4]
 800b8be:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b8c2:	f7fc fa33 	bl	8007d2c <tcp_eff_send_mss_netif>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b8ca:	8b7b      	ldrh	r3, [r7, #26]
 800b8cc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7f8 fe9c 	bl	800460e <lwip_htonl>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	da02      	bge.n	800b8f2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10c      	bne.n	800b914 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b8fa:	4b34      	ldr	r3, [pc, #208]	; (800b9cc <tcp_output_segment+0x1b4>)
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	4618      	mov	r0, r3
 800b90a:	f7f8 fe80 	bl	800460e <lwip_htonl>
 800b90e:	4602      	mov	r2, r0
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68da      	ldr	r2, [r3, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	8959      	ldrh	r1, [r3, #10]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	8b3a      	ldrh	r2, [r7, #24]
 800b92e:	1a8a      	subs	r2, r1, r2
 800b930:	b292      	uxth	r2, r2
 800b932:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	8919      	ldrh	r1, [r3, #8]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	8b3a      	ldrh	r2, [r7, #24]
 800b940:	1a8a      	subs	r2, r1, r2
 800b942:	b292      	uxth	r2, r2
 800b944:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	68d2      	ldr	r2, [r2, #12]
 800b94e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	741a      	strb	r2, [r3, #16]
 800b958:	2200      	movs	r2, #0
 800b95a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f103 0214 	add.w	r2, r3, #20
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	7a9b      	ldrb	r3, [r3, #10]
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	f003 0304 	and.w	r3, r3, #4
 800b96e:	4413      	add	r3, r2
 800b970:	69fa      	ldr	r2, [r7, #28]
 800b972:	429a      	cmp	r2, r3
 800b974:	d006      	beq.n	800b984 <tcp_output_segment+0x16c>
 800b976:	4b10      	ldr	r3, [pc, #64]	; (800b9b8 <tcp_output_segment+0x1a0>)
 800b978:	f240 621c 	movw	r2, #1564	; 0x61c
 800b97c:	4914      	ldr	r1, [pc, #80]	; (800b9d0 <tcp_output_segment+0x1b8>)
 800b97e:	4810      	ldr	r0, [pc, #64]	; (800b9c0 <tcp_output_segment+0x1a8>)
 800b980:	f003 fac0 	bl	800ef04 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6858      	ldr	r0, [r3, #4]
 800b988:	68b9      	ldr	r1, [r7, #8]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	1d1c      	adds	r4, r3, #4
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	7add      	ldrb	r5, [r3, #11]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	7a9b      	ldrb	r3, [r3, #10]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	9202      	str	r2, [sp, #8]
 800b99a:	2206      	movs	r2, #6
 800b99c:	9201      	str	r2, [sp, #4]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	462b      	mov	r3, r5
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	f002 fa36 	bl	800de14 <ip4_output_if>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b9ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3720      	adds	r7, #32
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bdb0      	pop	{r4, r5, r7, pc}
 800b9b8:	080118d4 	.word	0x080118d4
 800b9bc:	08011e98 	.word	0x08011e98
 800b9c0:	08011928 	.word	0x08011928
 800b9c4:	08011eb8 	.word	0x08011eb8
 800b9c8:	08011ed8 	.word	0x08011ed8
 800b9cc:	20008688 	.word	0x20008688
 800b9d0:	08011efc 	.word	0x08011efc

0800b9d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b9d4:	b5b0      	push	{r4, r5, r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d106      	bne.n	800b9f0 <tcp_rexmit_rto_prepare+0x1c>
 800b9e2:	4b31      	ldr	r3, [pc, #196]	; (800baa8 <tcp_rexmit_rto_prepare+0xd4>)
 800b9e4:	f240 6263 	movw	r2, #1635	; 0x663
 800b9e8:	4930      	ldr	r1, [pc, #192]	; (800baac <tcp_rexmit_rto_prepare+0xd8>)
 800b9ea:	4831      	ldr	r0, [pc, #196]	; (800bab0 <tcp_rexmit_rto_prepare+0xdc>)
 800b9ec:	f003 fa8a 	bl	800ef04 <iprintf>

  if (pcb->unacked == NULL) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d102      	bne.n	800b9fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b9f8:	f06f 0305 	mvn.w	r3, #5
 800b9fc:	e050      	b.n	800baa0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	e00b      	b.n	800ba1e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f7ff fee6 	bl	800b7d8 <tcp_output_segment_busy>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ba12:	f06f 0305 	mvn.w	r3, #5
 800ba16:	e043      	b.n	800baa0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1ef      	bne.n	800ba06 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff fed6 	bl	800b7d8 <tcp_output_segment_busy>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ba32:	f06f 0305 	mvn.w	r3, #5
 800ba36:	e033      	b.n	800baa0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	8b5b      	ldrh	r3, [r3, #26]
 800ba52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f8 fdd3 	bl	800460e <lwip_htonl>
 800ba68:	4604      	mov	r4, r0
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	891b      	ldrh	r3, [r3, #8]
 800ba6e:	461d      	mov	r5, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	899b      	ldrh	r3, [r3, #12]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f8 fdb3 	bl	80045e4 <lwip_htons>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <tcp_rexmit_rto_prepare+0xba>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <tcp_rexmit_rto_prepare+0xbc>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	442b      	add	r3, r5
 800ba92:	18e2      	adds	r2, r4, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bdb0      	pop	{r4, r5, r7, pc}
 800baa8:	080118d4 	.word	0x080118d4
 800baac:	08011f10 	.word	0x08011f10
 800bab0:	08011928 	.word	0x08011928

0800bab4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <tcp_rexmit_rto_commit+0x1c>
 800bac2:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <tcp_rexmit_rto_commit+0x44>)
 800bac4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bac8:	490c      	ldr	r1, [pc, #48]	; (800bafc <tcp_rexmit_rto_commit+0x48>)
 800baca:	480d      	ldr	r0, [pc, #52]	; (800bb00 <tcp_rexmit_rto_commit+0x4c>)
 800bacc:	f003 fa1a 	bl	800ef04 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bad6:	2bff      	cmp	r3, #255	; 0xff
 800bad8:	d007      	beq.n	800baea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bae0:	3301      	adds	r3, #1
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff fc80 	bl	800b3f0 <tcp_output>
}
 800baf0:	bf00      	nop
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	080118d4 	.word	0x080118d4
 800bafc:	08011f34 	.word	0x08011f34
 800bb00:	08011928 	.word	0x08011928

0800bb04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d106      	bne.n	800bb20 <tcp_rexmit_rto+0x1c>
 800bb12:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <tcp_rexmit_rto+0x38>)
 800bb14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bb18:	4909      	ldr	r1, [pc, #36]	; (800bb40 <tcp_rexmit_rto+0x3c>)
 800bb1a:	480a      	ldr	r0, [pc, #40]	; (800bb44 <tcp_rexmit_rto+0x40>)
 800bb1c:	f003 f9f2 	bl	800ef04 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f7ff ff57 	bl	800b9d4 <tcp_rexmit_rto_prepare>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff ffc1 	bl	800bab4 <tcp_rexmit_rto_commit>
  }
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	080118d4 	.word	0x080118d4
 800bb40:	08011f58 	.word	0x08011f58
 800bb44:	08011928 	.word	0x08011928

0800bb48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bb48:	b590      	push	{r4, r7, lr}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <tcp_rexmit+0x1c>
 800bb56:	4b2f      	ldr	r3, [pc, #188]	; (800bc14 <tcp_rexmit+0xcc>)
 800bb58:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bb5c:	492e      	ldr	r1, [pc, #184]	; (800bc18 <tcp_rexmit+0xd0>)
 800bb5e:	482f      	ldr	r0, [pc, #188]	; (800bc1c <tcp_rexmit+0xd4>)
 800bb60:	f003 f9d0 	bl	800ef04 <iprintf>

  if (pcb->unacked == NULL) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d102      	bne.n	800bb72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bb6c:	f06f 0305 	mvn.w	r3, #5
 800bb70:	e04c      	b.n	800bc0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bb78:	68b8      	ldr	r0, [r7, #8]
 800bb7a:	f7ff fe2d 	bl	800b7d8 <tcp_output_segment_busy>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bb84:	f06f 0305 	mvn.w	r3, #5
 800bb88:	e040      	b.n	800bc0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	336c      	adds	r3, #108	; 0x6c
 800bb96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bb98:	e002      	b.n	800bba0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d011      	beq.n	800bbcc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7f8 fd2c 	bl	800460e <lwip_htonl>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7f8 fd25 	bl	800460e <lwip_htonl>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dbe6      	blt.n	800bb9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d103      	bne.n	800bbea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbf0:	2bff      	cmp	r3, #255	; 0xff
 800bbf2:	d007      	beq.n	800bc04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd90      	pop	{r4, r7, pc}
 800bc14:	080118d4 	.word	0x080118d4
 800bc18:	08011f74 	.word	0x08011f74
 800bc1c:	08011928 	.word	0x08011928

0800bc20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d106      	bne.n	800bc3c <tcp_rexmit_fast+0x1c>
 800bc2e:	4b2a      	ldr	r3, [pc, #168]	; (800bcd8 <tcp_rexmit_fast+0xb8>)
 800bc30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bc34:	4929      	ldr	r1, [pc, #164]	; (800bcdc <tcp_rexmit_fast+0xbc>)
 800bc36:	482a      	ldr	r0, [pc, #168]	; (800bce0 <tcp_rexmit_fast+0xc0>)
 800bc38:	f003 f964 	bl	800ef04 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d045      	beq.n	800bcd0 <tcp_rexmit_fast+0xb0>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	8b5b      	ldrh	r3, [r3, #26]
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d13f      	bne.n	800bcd0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff ff79 	bl	800bb48 <tcp_rexmit>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d139      	bne.n	800bcd0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	bf28      	it	cs
 800bc6c:	4613      	movcs	r3, r2
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	da00      	bge.n	800bc76 <tcp_rexmit_fast+0x56>
 800bc74:	3301      	adds	r3, #1
 800bc76:	105b      	asrs	r3, r3, #1
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bc86:	461a      	mov	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc8c:	005b      	lsls	r3, r3, #1
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d206      	bcs.n	800bca0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcaa:	4619      	mov	r1, r3
 800bcac:	0049      	lsls	r1, r1, #1
 800bcae:	440b      	add	r3, r1
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	4413      	add	r3, r2
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8b5b      	ldrh	r3, [r3, #26]
 800bcc0:	f043 0304 	orr.w	r3, r3, #4
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	080118d4 	.word	0x080118d4
 800bcdc:	08011f8c 	.word	0x08011f8c
 800bce0:	08011928 	.word	0x08011928

0800bce4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	607b      	str	r3, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	817b      	strh	r3, [r7, #10]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bcf6:	897a      	ldrh	r2, [r7, #10]
 800bcf8:	893b      	ldrh	r3, [r7, #8]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	3314      	adds	r3, #20
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd06:	4619      	mov	r1, r3
 800bd08:	2022      	movs	r0, #34	; 0x22
 800bd0a:	f7f9 fd1b 	bl	8005744 <pbuf_alloc>
 800bd0e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d04d      	beq.n	800bdb2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bd16:	897b      	ldrh	r3, [r7, #10]
 800bd18:	3313      	adds	r3, #19
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	8952      	ldrh	r2, [r2, #10]
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	db06      	blt.n	800bd30 <tcp_output_alloc_header_common+0x4c>
 800bd22:	4b26      	ldr	r3, [pc, #152]	; (800bdbc <tcp_output_alloc_header_common+0xd8>)
 800bd24:	f240 7223 	movw	r2, #1827	; 0x723
 800bd28:	4925      	ldr	r1, [pc, #148]	; (800bdc0 <tcp_output_alloc_header_common+0xdc>)
 800bd2a:	4826      	ldr	r0, [pc, #152]	; (800bdc4 <tcp_output_alloc_header_common+0xe0>)
 800bd2c:	f003 f8ea 	bl	800ef04 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800bd36:	8c3b      	ldrh	r3, [r7, #32]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7f8 fc53 	bl	80045e4 <lwip_htons>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	461a      	mov	r2, r3
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bd46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7f8 fc4b 	bl	80045e4 <lwip_htons>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	461a      	mov	r2, r3
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7f8 fc56 	bl	800460e <lwip_htonl>
 800bd62:	4602      	mov	r2, r0
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bd68:	897b      	ldrh	r3, [r7, #10]
 800bd6a:	089b      	lsrs	r3, r3, #2
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	3305      	adds	r3, #5
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	031b      	lsls	r3, r3, #12
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7f8 fc2f 	bl	80045e4 <lwip_htons>
 800bd86:	4603      	mov	r3, r0
 800bd88:	461a      	mov	r2, r3
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bd8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7f8 fc27 	bl	80045e4 <lwip_htons>
 800bd96:	4603      	mov	r3, r0
 800bd98:	461a      	mov	r2, r3
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	2200      	movs	r2, #0
 800bda2:	741a      	strb	r2, [r3, #16]
 800bda4:	2200      	movs	r2, #0
 800bda6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	749a      	strb	r2, [r3, #18]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bdb2:	697b      	ldr	r3, [r7, #20]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	080118d4 	.word	0x080118d4
 800bdc0:	08011fac 	.word	0x08011fac
 800bdc4:	08011928 	.word	0x08011928

0800bdc8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bdc8:	b5b0      	push	{r4, r5, r7, lr}
 800bdca:	b08a      	sub	sp, #40	; 0x28
 800bdcc:	af04      	add	r7, sp, #16
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	607b      	str	r3, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	817b      	strh	r3, [r7, #10]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d106      	bne.n	800bdee <tcp_output_alloc_header+0x26>
 800bde0:	4b15      	ldr	r3, [pc, #84]	; (800be38 <tcp_output_alloc_header+0x70>)
 800bde2:	f240 7242 	movw	r2, #1858	; 0x742
 800bde6:	4915      	ldr	r1, [pc, #84]	; (800be3c <tcp_output_alloc_header+0x74>)
 800bde8:	4815      	ldr	r0, [pc, #84]	; (800be40 <tcp_output_alloc_header+0x78>)
 800bdea:	f003 f88b 	bl	800ef04 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	8adb      	ldrh	r3, [r3, #22]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	8b12      	ldrh	r2, [r2, #24]
 800bdfa:	68f9      	ldr	r1, [r7, #12]
 800bdfc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800bdfe:	893d      	ldrh	r5, [r7, #8]
 800be00:	897c      	ldrh	r4, [r7, #10]
 800be02:	9103      	str	r1, [sp, #12]
 800be04:	2110      	movs	r1, #16
 800be06:	9102      	str	r1, [sp, #8]
 800be08:	9201      	str	r2, [sp, #4]
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	462a      	mov	r2, r5
 800be10:	4621      	mov	r1, r4
 800be12:	f7ff ff67 	bl	800bce4 <tcp_output_alloc_header_common>
 800be16:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d006      	beq.n	800be2c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800be26:	441a      	add	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800be2c:	697b      	ldr	r3, [r7, #20]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bdb0      	pop	{r4, r5, r7, pc}
 800be36:	bf00      	nop
 800be38:	080118d4 	.word	0x080118d4
 800be3c:	08011fdc 	.word	0x08011fdc
 800be40:	08011928 	.word	0x08011928

0800be44 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b088      	sub	sp, #32
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4611      	mov	r1, r2
 800be50:	461a      	mov	r2, r3
 800be52:	460b      	mov	r3, r1
 800be54:	71fb      	strb	r3, [r7, #7]
 800be56:	4613      	mov	r3, r2
 800be58:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d106      	bne.n	800be72 <tcp_output_fill_options+0x2e>
 800be64:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <tcp_output_fill_options+0x70>)
 800be66:	f240 7256 	movw	r2, #1878	; 0x756
 800be6a:	4913      	ldr	r1, [pc, #76]	; (800beb8 <tcp_output_fill_options+0x74>)
 800be6c:	4813      	ldr	r0, [pc, #76]	; (800bebc <tcp_output_fill_options+0x78>)
 800be6e:	f003 f849 	bl	800ef04 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	3314      	adds	r3, #20
 800be7c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	f103 0214 	add.w	r2, r3, #20
 800be84:	8bfb      	ldrh	r3, [r7, #30]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4619      	mov	r1, r3
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	f003 0304 	and.w	r3, r3, #4
 800be92:	440b      	add	r3, r1
 800be94:	4413      	add	r3, r2
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d006      	beq.n	800beaa <tcp_output_fill_options+0x66>
 800be9c:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <tcp_output_fill_options+0x70>)
 800be9e:	f240 7275 	movw	r2, #1909	; 0x775
 800bea2:	4907      	ldr	r1, [pc, #28]	; (800bec0 <tcp_output_fill_options+0x7c>)
 800bea4:	4805      	ldr	r0, [pc, #20]	; (800bebc <tcp_output_fill_options+0x78>)
 800bea6:	f003 f82d 	bl	800ef04 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800beaa:	bf00      	nop
 800beac:	3720      	adds	r7, #32
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	080118d4 	.word	0x080118d4
 800beb8:	08012004 	.word	0x08012004
 800bebc:	08011928 	.word	0x08011928
 800bec0:	08011efc 	.word	0x08011efc

0800bec4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	; 0x28
 800bec8:	af04      	add	r7, sp, #16
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
 800bed0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d106      	bne.n	800bee6 <tcp_output_control_segment+0x22>
 800bed8:	4b1c      	ldr	r3, [pc, #112]	; (800bf4c <tcp_output_control_segment+0x88>)
 800beda:	f240 7287 	movw	r2, #1927	; 0x787
 800bede:	491c      	ldr	r1, [pc, #112]	; (800bf50 <tcp_output_control_segment+0x8c>)
 800bee0:	481c      	ldr	r0, [pc, #112]	; (800bf54 <tcp_output_control_segment+0x90>)
 800bee2:	f003 f80f 	bl	800ef04 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	6879      	ldr	r1, [r7, #4]
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f7fe fae8 	bl	800a4c0 <tcp_route>
 800bef0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d102      	bne.n	800befe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bef8:	23fc      	movs	r3, #252	; 0xfc
 800befa:	75fb      	strb	r3, [r7, #23]
 800befc:	e01c      	b.n	800bf38 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d006      	beq.n	800bf12 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	7adb      	ldrb	r3, [r3, #11]
 800bf08:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	7a9b      	ldrb	r3, [r3, #10]
 800bf0e:	757b      	strb	r3, [r7, #21]
 800bf10:	e003      	b.n	800bf1a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bf12:	23ff      	movs	r3, #255	; 0xff
 800bf14:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bf1a:	7dba      	ldrb	r2, [r7, #22]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	9302      	str	r3, [sp, #8]
 800bf20:	2306      	movs	r3, #6
 800bf22:	9301      	str	r3, [sp, #4]
 800bf24:	7d7b      	ldrb	r3, [r7, #21]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	6879      	ldr	r1, [r7, #4]
 800bf2e:	68b8      	ldr	r0, [r7, #8]
 800bf30:	f001 ff70 	bl	800de14 <ip4_output_if>
 800bf34:	4603      	mov	r3, r0
 800bf36:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bf38:	68b8      	ldr	r0, [r7, #8]
 800bf3a:	f7f9 fee7 	bl	8005d0c <pbuf_free>
  return err;
 800bf3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3718      	adds	r7, #24
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	080118d4 	.word	0x080118d4
 800bf50:	0801202c 	.word	0x0801202c
 800bf54:	08011928 	.word	0x08011928

0800bf58 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bf58:	b590      	push	{r4, r7, lr}
 800bf5a:	b08b      	sub	sp, #44	; 0x2c
 800bf5c:	af04      	add	r7, sp, #16
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
 800bf64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d106      	bne.n	800bf7a <tcp_rst+0x22>
 800bf6c:	4b1f      	ldr	r3, [pc, #124]	; (800bfec <tcp_rst+0x94>)
 800bf6e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bf72:	491f      	ldr	r1, [pc, #124]	; (800bff0 <tcp_rst+0x98>)
 800bf74:	481f      	ldr	r0, [pc, #124]	; (800bff4 <tcp_rst+0x9c>)
 800bf76:	f002 ffc5 	bl	800ef04 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d106      	bne.n	800bf8e <tcp_rst+0x36>
 800bf80:	4b1a      	ldr	r3, [pc, #104]	; (800bfec <tcp_rst+0x94>)
 800bf82:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bf86:	491c      	ldr	r1, [pc, #112]	; (800bff8 <tcp_rst+0xa0>)
 800bf88:	481a      	ldr	r0, [pc, #104]	; (800bff4 <tcp_rst+0x9c>)
 800bf8a:	f002 ffbb 	bl	800ef04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bf8e:	2300      	movs	r3, #0
 800bf90:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bf92:	f246 0308 	movw	r3, #24584	; 0x6008
 800bf96:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bf98:	7dfb      	ldrb	r3, [r7, #23]
 800bf9a:	b29c      	uxth	r4, r3
 800bf9c:	68b8      	ldr	r0, [r7, #8]
 800bf9e:	f7f8 fb36 	bl	800460e <lwip_htonl>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	8abb      	ldrh	r3, [r7, #20]
 800bfa6:	9303      	str	r3, [sp, #12]
 800bfa8:	2314      	movs	r3, #20
 800bfaa:	9302      	str	r3, [sp, #8]
 800bfac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	4621      	mov	r1, r4
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff fe92 	bl	800bce4 <tcp_output_alloc_header_common>
 800bfc0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00c      	beq.n	800bfe2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bfc8:	7dfb      	ldrb	r3, [r7, #23]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	6939      	ldr	r1, [r7, #16]
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f7ff ff38 	bl	800be44 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	6939      	ldr	r1, [r7, #16]
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f7ff ff72 	bl	800bec4 <tcp_output_control_segment>
 800bfe0:	e000      	b.n	800bfe4 <tcp_rst+0x8c>
    return;
 800bfe2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bfe4:	371c      	adds	r7, #28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd90      	pop	{r4, r7, pc}
 800bfea:	bf00      	nop
 800bfec:	080118d4 	.word	0x080118d4
 800bff0:	08012058 	.word	0x08012058
 800bff4:	08011928 	.word	0x08011928
 800bff8:	08012074 	.word	0x08012074

0800bffc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bffc:	b590      	push	{r4, r7, lr}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d106      	bne.n	800c020 <tcp_send_empty_ack+0x24>
 800c012:	4b28      	ldr	r3, [pc, #160]	; (800c0b4 <tcp_send_empty_ack+0xb8>)
 800c014:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c018:	4927      	ldr	r1, [pc, #156]	; (800c0b8 <tcp_send_empty_ack+0xbc>)
 800c01a:	4828      	ldr	r0, [pc, #160]	; (800c0bc <tcp_send_empty_ack+0xc0>)
 800c01c:	f002 ff72 	bl	800ef04 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	b2db      	uxtb	r3, r3
 800c026:	f003 0304 	and.w	r3, r3, #4
 800c02a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c02c:	7d7b      	ldrb	r3, [r7, #21]
 800c02e:	b29c      	uxth	r4, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c034:	4618      	mov	r0, r3
 800c036:	f7f8 faea 	bl	800460e <lwip_htonl>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2200      	movs	r2, #0
 800c03e:	4621      	mov	r1, r4
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7ff fec1 	bl	800bdc8 <tcp_output_alloc_header>
 800c046:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	8b5b      	ldrh	r3, [r3, #26]
 800c052:	f043 0303 	orr.w	r3, r3, #3
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c05c:	f06f 0301 	mvn.w	r3, #1
 800c060:	e023      	b.n	800c0aa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c062:	7dbb      	ldrb	r3, [r7, #22]
 800c064:	7dfa      	ldrb	r2, [r7, #23]
 800c066:	6939      	ldr	r1, [r7, #16]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff feeb 	bl	800be44 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3304      	adds	r3, #4
 800c074:	6939      	ldr	r1, [r7, #16]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7ff ff24 	bl	800bec4 <tcp_output_control_segment>
 800c07c:	4603      	mov	r3, r0
 800c07e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d007      	beq.n	800c098 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	8b5b      	ldrh	r3, [r3, #26]
 800c08c:	f043 0303 	orr.w	r3, r3, #3
 800c090:	b29a      	uxth	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	835a      	strh	r2, [r3, #26]
 800c096:	e006      	b.n	800c0a6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	8b5b      	ldrh	r3, [r3, #26]
 800c09c:	f023 0303 	bic.w	r3, r3, #3
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	371c      	adds	r7, #28
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd90      	pop	{r4, r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	080118d4 	.word	0x080118d4
 800c0b8:	08012090 	.word	0x08012090
 800c0bc:	08011928 	.word	0x08011928

0800c0c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d106      	bne.n	800c0e0 <tcp_keepalive+0x20>
 800c0d2:	4b18      	ldr	r3, [pc, #96]	; (800c134 <tcp_keepalive+0x74>)
 800c0d4:	f640 0224 	movw	r2, #2084	; 0x824
 800c0d8:	4917      	ldr	r1, [pc, #92]	; (800c138 <tcp_keepalive+0x78>)
 800c0da:	4818      	ldr	r0, [pc, #96]	; (800c13c <tcp_keepalive+0x7c>)
 800c0dc:	f002 ff12 	bl	800ef04 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	b29c      	uxth	r4, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7f8 fa8f 	bl	800460e <lwip_htonl>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff fe66 	bl	800bdc8 <tcp_output_alloc_header>
 800c0fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d102      	bne.n	800c10a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c104:	f04f 33ff 	mov.w	r3, #4294967295
 800c108:	e010      	b.n	800c12c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
 800c10c:	2200      	movs	r2, #0
 800c10e:	6939      	ldr	r1, [r7, #16]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff fe97 	bl	800be44 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3304      	adds	r3, #4
 800c11c:	6939      	ldr	r1, [r7, #16]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff fed0 	bl	800bec4 <tcp_output_control_segment>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	371c      	adds	r7, #28
 800c130:	46bd      	mov	sp, r7
 800c132:	bd90      	pop	{r4, r7, pc}
 800c134:	080118d4 	.word	0x080118d4
 800c138:	080120b0 	.word	0x080120b0
 800c13c:	08011928 	.word	0x08011928

0800c140 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c140:	b590      	push	{r4, r7, lr}
 800c142:	b08b      	sub	sp, #44	; 0x2c
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c148:	2300      	movs	r3, #0
 800c14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d106      	bne.n	800c162 <tcp_zero_window_probe+0x22>
 800c154:	4b4c      	ldr	r3, [pc, #304]	; (800c288 <tcp_zero_window_probe+0x148>)
 800c156:	f640 024f 	movw	r2, #2127	; 0x84f
 800c15a:	494c      	ldr	r1, [pc, #304]	; (800c28c <tcp_zero_window_probe+0x14c>)
 800c15c:	484c      	ldr	r0, [pc, #304]	; (800c290 <tcp_zero_window_probe+0x150>)
 800c15e:	f002 fed1 	bl	800ef04 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c166:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	e086      	b.n	800c280 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c178:	2bff      	cmp	r3, #255	; 0xff
 800c17a:	d007      	beq.n	800c18c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c182:	3301      	adds	r3, #1
 800c184:	b2da      	uxtb	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	899b      	ldrh	r3, [r3, #12]
 800c192:	b29b      	uxth	r3, r3
 800c194:	4618      	mov	r0, r3
 800c196:	f7f8 fa25 	bl	80045e4 <lwip_htons>
 800c19a:	4603      	mov	r3, r0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d005      	beq.n	800c1b2 <tcp_zero_window_probe+0x72>
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	891b      	ldrh	r3, [r3, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <tcp_zero_window_probe+0x72>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e000      	b.n	800c1b4 <tcp_zero_window_probe+0x74>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c1b6:	7ffb      	ldrb	r3, [r7, #31]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	bf0c      	ite	eq
 800c1bc:	2301      	moveq	r3, #1
 800c1be:	2300      	movne	r3, #0
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c8:	b299      	uxth	r1, r3
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	8bba      	ldrh	r2, [r7, #28]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7ff fdf8 	bl	800bdc8 <tcp_output_alloc_header>
 800c1d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d102      	bne.n	800c1e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e4:	e04c      	b.n	800c280 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c1ec:	7ffb      	ldrb	r3, [r7, #31]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d011      	beq.n	800c216 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	899b      	ldrh	r3, [r3, #12]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	b21b      	sxth	r3, r3
 800c1fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c1fe:	b21c      	sxth	r4, r3
 800c200:	2011      	movs	r0, #17
 800c202:	f7f8 f9ef 	bl	80045e4 <lwip_htons>
 800c206:	4603      	mov	r3, r0
 800c208:	b21b      	sxth	r3, r3
 800c20a:	4323      	orrs	r3, r4
 800c20c:	b21b      	sxth	r3, r3
 800c20e:	b29a      	uxth	r2, r3
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	819a      	strh	r2, [r3, #12]
 800c214:	e010      	b.n	800c238 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	3314      	adds	r3, #20
 800c21c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c21e:	6a3b      	ldr	r3, [r7, #32]
 800c220:	6858      	ldr	r0, [r3, #4]
 800c222:	6a3b      	ldr	r3, [r7, #32]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	891a      	ldrh	r2, [r3, #8]
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	891b      	ldrh	r3, [r3, #8]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	b29b      	uxth	r3, r3
 800c230:	2201      	movs	r2, #1
 800c232:	6939      	ldr	r1, [r7, #16]
 800c234:	f7f9 ff54 	bl	80060e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c238:	6a3b      	ldr	r3, [r7, #32]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	4618      	mov	r0, r3
 800c240:	f7f8 f9e5 	bl	800460e <lwip_htonl>
 800c244:	4603      	mov	r3, r0
 800c246:	3301      	adds	r3, #1
 800c248:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	2b00      	cmp	r3, #0
 800c254:	da02      	bge.n	800c25c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c260:	2200      	movs	r2, #0
 800c262:	69b9      	ldr	r1, [r7, #24]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f7ff fded 	bl	800be44 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3304      	adds	r3, #4
 800c270:	69b9      	ldr	r1, [r7, #24]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff fe26 	bl	800bec4 <tcp_output_control_segment>
 800c278:	4603      	mov	r3, r0
 800c27a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c27c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c280:	4618      	mov	r0, r3
 800c282:	372c      	adds	r7, #44	; 0x2c
 800c284:	46bd      	mov	sp, r7
 800c286:	bd90      	pop	{r4, r7, pc}
 800c288:	080118d4 	.word	0x080118d4
 800c28c:	080120cc 	.word	0x080120cc
 800c290:	08011928 	.word	0x08011928

0800c294 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c29c:	f7fa f80e 	bl	80062bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c2a0:	4b0a      	ldr	r3, [pc, #40]	; (800c2cc <tcpip_tcp_timer+0x38>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d103      	bne.n	800c2b0 <tcpip_tcp_timer+0x1c>
 800c2a8:	4b09      	ldr	r3, [pc, #36]	; (800c2d0 <tcpip_tcp_timer+0x3c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d005      	beq.n	800c2bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4908      	ldr	r1, [pc, #32]	; (800c2d4 <tcpip_tcp_timer+0x40>)
 800c2b4:	20fa      	movs	r0, #250	; 0xfa
 800c2b6:	f000 f8f3 	bl	800c4a0 <sys_timeout>
 800c2ba:	e003      	b.n	800c2c4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c2bc:	4b06      	ldr	r3, [pc, #24]	; (800c2d8 <tcpip_tcp_timer+0x44>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	601a      	str	r2, [r3, #0]
  }
}
 800c2c2:	bf00      	nop
 800c2c4:	bf00      	nop
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20008694 	.word	0x20008694
 800c2d0:	20008698 	.word	0x20008698
 800c2d4:	0800c295 	.word	0x0800c295
 800c2d8:	200086e0 	.word	0x200086e0

0800c2dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <tcp_timer_needed+0x30>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10f      	bne.n	800c308 <tcp_timer_needed+0x2c>
 800c2e8:	4b09      	ldr	r3, [pc, #36]	; (800c310 <tcp_timer_needed+0x34>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <tcp_timer_needed+0x1c>
 800c2f0:	4b08      	ldr	r3, [pc, #32]	; (800c314 <tcp_timer_needed+0x38>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d007      	beq.n	800c308 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c2f8:	4b04      	ldr	r3, [pc, #16]	; (800c30c <tcp_timer_needed+0x30>)
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c2fe:	2200      	movs	r2, #0
 800c300:	4905      	ldr	r1, [pc, #20]	; (800c318 <tcp_timer_needed+0x3c>)
 800c302:	20fa      	movs	r0, #250	; 0xfa
 800c304:	f000 f8cc 	bl	800c4a0 <sys_timeout>
  }
}
 800c308:	bf00      	nop
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	200086e0 	.word	0x200086e0
 800c310:	20008694 	.word	0x20008694
 800c314:	20008698 	.word	0x20008698
 800c318:	0800c295 	.word	0x0800c295

0800c31c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c328:	2006      	movs	r0, #6
 800c32a:	f7f8 fe09 	bl	8004f40 <memp_malloc>
 800c32e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d109      	bne.n	800c34a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d151      	bne.n	800c3e0 <sys_timeout_abs+0xc4>
 800c33c:	4b2a      	ldr	r3, [pc, #168]	; (800c3e8 <sys_timeout_abs+0xcc>)
 800c33e:	22be      	movs	r2, #190	; 0xbe
 800c340:	492a      	ldr	r1, [pc, #168]	; (800c3ec <sys_timeout_abs+0xd0>)
 800c342:	482b      	ldr	r0, [pc, #172]	; (800c3f0 <sys_timeout_abs+0xd4>)
 800c344:	f002 fdde 	bl	800ef04 <iprintf>
    return;
 800c348:	e04a      	b.n	800c3e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	2200      	movs	r2, #0
 800c34e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c362:	4b24      	ldr	r3, [pc, #144]	; (800c3f4 <sys_timeout_abs+0xd8>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d103      	bne.n	800c372 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c36a:	4a22      	ldr	r2, [pc, #136]	; (800c3f4 <sys_timeout_abs+0xd8>)
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	6013      	str	r3, [r2, #0]
    return;
 800c370:	e037      	b.n	800c3e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	4b1f      	ldr	r3, [pc, #124]	; (800c3f4 <sys_timeout_abs+0xd8>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	0fdb      	lsrs	r3, r3, #31
 800c380:	f003 0301 	and.w	r3, r3, #1
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d007      	beq.n	800c39a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c38a:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <sys_timeout_abs+0xd8>)
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c392:	4a18      	ldr	r2, [pc, #96]	; (800c3f4 <sys_timeout_abs+0xd8>)
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	e023      	b.n	800c3e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c39a:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <sys_timeout_abs+0xd8>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	617b      	str	r3, [r7, #20]
 800c3a0:	e01a      	b.n	800c3d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00b      	beq.n	800c3c2 <sys_timeout_abs+0xa6>
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	0fdb      	lsrs	r3, r3, #31
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	601a      	str	r2, [r3, #0]
        break;
 800c3d0:	e007      	b.n	800c3e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	617b      	str	r3, [r7, #20]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1e1      	bne.n	800c3a2 <sys_timeout_abs+0x86>
 800c3de:	e000      	b.n	800c3e2 <sys_timeout_abs+0xc6>
    return;
 800c3e0:	bf00      	nop
      }
    }
  }
}
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	080120f0 	.word	0x080120f0
 800c3ec:	08012124 	.word	0x08012124
 800c3f0:	08012164 	.word	0x08012164
 800c3f4:	200086d8 	.word	0x200086d8

0800c3f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	4798      	blx	r3

  now = sys_now();
 800c40a:	f7f7 f8c5 	bl	8003598 <sys_now>
 800c40e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <lwip_cyclic_timer+0x5c>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4413      	add	r3, r2
 800c41a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	0fdb      	lsrs	r3, r3, #31
 800c424:	f003 0301 	and.w	r3, r3, #1
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d009      	beq.n	800c442 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	4413      	add	r3, r2
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	4907      	ldr	r1, [pc, #28]	; (800c458 <lwip_cyclic_timer+0x60>)
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff ff6e 	bl	800c31c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c440:	e004      	b.n	800c44c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	4904      	ldr	r1, [pc, #16]	; (800c458 <lwip_cyclic_timer+0x60>)
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f7ff ff68 	bl	800c31c <sys_timeout_abs>
}
 800c44c:	bf00      	nop
 800c44e:	3718      	adds	r7, #24
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	200086dc 	.word	0x200086dc
 800c458:	0800c3f9 	.word	0x0800c3f9

0800c45c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c462:	2301      	movs	r3, #1
 800c464:	607b      	str	r3, [r7, #4]
 800c466:	e00e      	b.n	800c486 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c468:	4a0b      	ldr	r2, [pc, #44]	; (800c498 <sys_timeouts_init+0x3c>)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	4a08      	ldr	r2, [pc, #32]	; (800c498 <sys_timeouts_init+0x3c>)
 800c476:	4413      	add	r3, r2
 800c478:	461a      	mov	r2, r3
 800c47a:	4908      	ldr	r1, [pc, #32]	; (800c49c <sys_timeouts_init+0x40>)
 800c47c:	f000 f810 	bl	800c4a0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	3301      	adds	r3, #1
 800c484:	607b      	str	r3, [r7, #4]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d9ed      	bls.n	800c468 <sys_timeouts_init+0xc>
  }
}
 800c48c:	bf00      	nop
 800c48e:	bf00      	nop
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	08013994 	.word	0x08013994
 800c49c:	0800c3f9 	.word	0x0800c3f9

0800c4a0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4b2:	d306      	bcc.n	800c4c2 <sys_timeout+0x22>
 800c4b4:	4b0a      	ldr	r3, [pc, #40]	; (800c4e0 <sys_timeout+0x40>)
 800c4b6:	f240 1229 	movw	r2, #297	; 0x129
 800c4ba:	490a      	ldr	r1, [pc, #40]	; (800c4e4 <sys_timeout+0x44>)
 800c4bc:	480a      	ldr	r0, [pc, #40]	; (800c4e8 <sys_timeout+0x48>)
 800c4be:	f002 fd21 	bl	800ef04 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c4c2:	f7f7 f869 	bl	8003598 <sys_now>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	68b9      	ldr	r1, [r7, #8]
 800c4d2:	6978      	ldr	r0, [r7, #20]
 800c4d4:	f7ff ff22 	bl	800c31c <sys_timeout_abs>
#endif
}
 800c4d8:	bf00      	nop
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	080120f0 	.word	0x080120f0
 800c4e4:	0801218c 	.word	0x0801218c
 800c4e8:	08012164 	.word	0x08012164

0800c4ec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c4f2:	f7f7 f851 	bl	8003598 <sys_now>
 800c4f6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c4f8:	4b1a      	ldr	r3, [pc, #104]	; (800c564 <sys_check_timeouts+0x78>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <sys_check_timeouts+0x1a>
 800c502:	f7f9 f8c9 	bl	8005698 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c506:	4b18      	ldr	r3, [pc, #96]	; (800c568 <sys_check_timeouts+0x7c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d022      	beq.n	800c558 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	0fdb      	lsrs	r3, r3, #31
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	b2db      	uxtb	r3, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d11a      	bne.n	800c55c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a0f      	ldr	r2, [pc, #60]	; (800c568 <sys_check_timeouts+0x7c>)
 800c52c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	4a0b      	ldr	r2, [pc, #44]	; (800c56c <sys_check_timeouts+0x80>)
 800c540:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c542:	68b9      	ldr	r1, [r7, #8]
 800c544:	2006      	movs	r0, #6
 800c546:	f7f8 fd6b 	bl	8005020 <memp_free>
    if (handler != NULL) {
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d0d3      	beq.n	800c4f8 <sys_check_timeouts+0xc>
      handler(arg);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6838      	ldr	r0, [r7, #0]
 800c554:	4798      	blx	r3
  do {
 800c556:	e7cf      	b.n	800c4f8 <sys_check_timeouts+0xc>
      return;
 800c558:	bf00      	nop
 800c55a:	e000      	b.n	800c55e <sys_check_timeouts+0x72>
      return;
 800c55c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20008685 	.word	0x20008685
 800c568:	200086d8 	.word	0x200086d8
 800c56c:	200086dc 	.word	0x200086dc

0800c570 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c574:	f002 fcde 	bl	800ef34 <rand>
 800c578:	4603      	mov	r3, r0
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c580:	b29b      	uxth	r3, r3
 800c582:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c586:	b29a      	uxth	r2, r3
 800c588:	4b01      	ldr	r3, [pc, #4]	; (800c590 <udp_init+0x20>)
 800c58a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c58c:	bf00      	nop
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20000028 	.word	0x20000028

0800c594 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d105      	bne.n	800c5b4 <udp_input_local_match+0x20>
 800c5a8:	4b27      	ldr	r3, [pc, #156]	; (800c648 <udp_input_local_match+0xb4>)
 800c5aa:	2287      	movs	r2, #135	; 0x87
 800c5ac:	4927      	ldr	r1, [pc, #156]	; (800c64c <udp_input_local_match+0xb8>)
 800c5ae:	4828      	ldr	r0, [pc, #160]	; (800c650 <udp_input_local_match+0xbc>)
 800c5b0:	f002 fca8 	bl	800ef04 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <udp_input_local_match+0x32>
 800c5ba:	4b23      	ldr	r3, [pc, #140]	; (800c648 <udp_input_local_match+0xb4>)
 800c5bc:	2288      	movs	r2, #136	; 0x88
 800c5be:	4925      	ldr	r1, [pc, #148]	; (800c654 <udp_input_local_match+0xc0>)
 800c5c0:	4823      	ldr	r0, [pc, #140]	; (800c650 <udp_input_local_match+0xbc>)
 800c5c2:	f002 fc9f 	bl	800ef04 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	7a1b      	ldrb	r3, [r3, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00b      	beq.n	800c5e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	7a1a      	ldrb	r2, [r3, #8]
 800c5d2:	4b21      	ldr	r3, [pc, #132]	; (800c658 <udp_input_local_match+0xc4>)
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5da:	3301      	adds	r3, #1
 800c5dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d001      	beq.n	800c5e6 <udp_input_local_match+0x52>
    return 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e02b      	b.n	800c63e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c5e6:	79fb      	ldrb	r3, [r7, #7]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d018      	beq.n	800c61e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d013      	beq.n	800c61a <udp_input_local_match+0x86>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00f      	beq.n	800c61a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c5fa:	4b17      	ldr	r3, [pc, #92]	; (800c658 <udp_input_local_match+0xc4>)
 800c5fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c602:	d00a      	beq.n	800c61a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	4b13      	ldr	r3, [pc, #76]	; (800c658 <udp_input_local_match+0xc4>)
 800c60a:	695b      	ldr	r3, [r3, #20]
 800c60c:	405a      	eors	r2, r3
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	3308      	adds	r3, #8
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c616:	2b00      	cmp	r3, #0
 800c618:	d110      	bne.n	800c63c <udp_input_local_match+0xa8>
          return 1;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e00f      	b.n	800c63e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d009      	beq.n	800c638 <udp_input_local_match+0xa4>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d005      	beq.n	800c638 <udp_input_local_match+0xa4>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	4b09      	ldr	r3, [pc, #36]	; (800c658 <udp_input_local_match+0xc4>)
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	429a      	cmp	r2, r3
 800c636:	d101      	bne.n	800c63c <udp_input_local_match+0xa8>
        return 1;
 800c638:	2301      	movs	r3, #1
 800c63a:	e000      	b.n	800c63e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	080121d8 	.word	0x080121d8
 800c64c:	08012208 	.word	0x08012208
 800c650:	0801222c 	.word	0x0801222c
 800c654:	08012254 	.word	0x08012254
 800c658:	20005118 	.word	0x20005118

0800c65c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c65c:	b590      	push	{r4, r7, lr}
 800c65e:	b08d      	sub	sp, #52	; 0x34
 800c660:	af02      	add	r7, sp, #8
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d105      	bne.n	800c67c <udp_input+0x20>
 800c670:	4b7c      	ldr	r3, [pc, #496]	; (800c864 <udp_input+0x208>)
 800c672:	22cf      	movs	r2, #207	; 0xcf
 800c674:	497c      	ldr	r1, [pc, #496]	; (800c868 <udp_input+0x20c>)
 800c676:	487d      	ldr	r0, [pc, #500]	; (800c86c <udp_input+0x210>)
 800c678:	f002 fc44 	bl	800ef04 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d105      	bne.n	800c68e <udp_input+0x32>
 800c682:	4b78      	ldr	r3, [pc, #480]	; (800c864 <udp_input+0x208>)
 800c684:	22d0      	movs	r2, #208	; 0xd0
 800c686:	497a      	ldr	r1, [pc, #488]	; (800c870 <udp_input+0x214>)
 800c688:	4878      	ldr	r0, [pc, #480]	; (800c86c <udp_input+0x210>)
 800c68a:	f002 fc3b 	bl	800ef04 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	895b      	ldrh	r3, [r3, #10]
 800c692:	2b07      	cmp	r3, #7
 800c694:	d803      	bhi.n	800c69e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7f9 fb38 	bl	8005d0c <pbuf_free>
    goto end;
 800c69c:	e0de      	b.n	800c85c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c6a4:	4b73      	ldr	r3, [pc, #460]	; (800c874 <udp_input+0x218>)
 800c6a6:	695b      	ldr	r3, [r3, #20]
 800c6a8:	4a72      	ldr	r2, [pc, #456]	; (800c874 <udp_input+0x218>)
 800c6aa:	6812      	ldr	r2, [r2, #0]
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 fc88 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f7 ff90 	bl	80045e4 <lwip_htons>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	885b      	ldrh	r3, [r3, #2]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7f7 ff88 	bl	80045e4 <lwip_htons>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6e4:	4b64      	ldr	r3, [pc, #400]	; (800c878 <udp_input+0x21c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ea:	e054      	b.n	800c796 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	8a5b      	ldrh	r3, [r3, #18]
 800c6f0:	89fa      	ldrh	r2, [r7, #14]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d14a      	bne.n	800c78c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c6f6:	7cfb      	ldrb	r3, [r7, #19]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6fe:	f7ff ff49 	bl	800c594 <udp_input_local_match>
 800c702:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c704:	2b00      	cmp	r3, #0
 800c706:	d041      	beq.n	800c78c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70a:	7c1b      	ldrb	r3, [r3, #16]
 800c70c:	f003 0304 	and.w	r3, r3, #4
 800c710:	2b00      	cmp	r3, #0
 800c712:	d11d      	bne.n	800c750 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d102      	bne.n	800c720 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71c:	61fb      	str	r3, [r7, #28]
 800c71e:	e017      	b.n	800c750 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c720:	7cfb      	ldrb	r3, [r7, #19]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d014      	beq.n	800c750 <udp_input+0xf4>
 800c726:	4b53      	ldr	r3, [pc, #332]	; (800c874 <udp_input+0x218>)
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72e:	d10f      	bne.n	800c750 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	3304      	adds	r3, #4
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d008      	beq.n	800c750 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	3304      	adds	r3, #4
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d101      	bne.n	800c750 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	8a9b      	ldrh	r3, [r3, #20]
 800c754:	8a3a      	ldrh	r2, [r7, #16]
 800c756:	429a      	cmp	r2, r3
 800c758:	d118      	bne.n	800c78c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d005      	beq.n	800c76e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	4b43      	ldr	r3, [pc, #268]	; (800c874 <udp_input+0x218>)
 800c768:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d10e      	bne.n	800c78c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d014      	beq.n	800c79e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c776:	68da      	ldr	r2, [r3, #12]
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c77c:	4b3e      	ldr	r3, [pc, #248]	; (800c878 <udp_input+0x21c>)
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c784:	4a3c      	ldr	r2, [pc, #240]	; (800c878 <udp_input+0x21c>)
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c78a:	e008      	b.n	800c79e <udp_input+0x142>
      }
    }

    prev = pcb;
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	627b      	str	r3, [r7, #36]	; 0x24
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1a7      	bne.n	800c6ec <udp_input+0x90>
 800c79c:	e000      	b.n	800c7a0 <udp_input+0x144>
        break;
 800c79e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <udp_input+0x14e>
    pcb = uncon_pcb;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <udp_input+0x15a>
    for_us = 1;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	76fb      	strb	r3, [r7, #27]
 800c7b4:	e00a      	b.n	800c7cc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	4b2d      	ldr	r3, [pc, #180]	; (800c874 <udp_input+0x218>)
 800c7be:	695b      	ldr	r3, [r3, #20]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	bf0c      	ite	eq
 800c7c4:	2301      	moveq	r3, #1
 800c7c6:	2300      	movne	r3, #0
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c7cc:	7efb      	ldrb	r3, [r7, #27]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d041      	beq.n	800c856 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c7d2:	2108      	movs	r1, #8
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7f9 fa13 	bl	8005c00 <pbuf_remove_header>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00a      	beq.n	800c7f6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c7e0:	4b20      	ldr	r3, [pc, #128]	; (800c864 <udp_input+0x208>)
 800c7e2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c7e6:	4925      	ldr	r1, [pc, #148]	; (800c87c <udp_input+0x220>)
 800c7e8:	4820      	ldr	r0, [pc, #128]	; (800c86c <udp_input+0x210>)
 800c7ea:	f002 fb8b 	bl	800ef04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f9 fa8c 	bl	8005d0c <pbuf_free>
      goto end;
 800c7f4:	e032      	b.n	800c85c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d012      	beq.n	800c822 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00a      	beq.n	800c81a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	699c      	ldr	r4, [r3, #24]
 800c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80a:	69d8      	ldr	r0, [r3, #28]
 800c80c:	8a3b      	ldrh	r3, [r7, #16]
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	4b1b      	ldr	r3, [pc, #108]	; (800c880 <udp_input+0x224>)
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c816:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c818:	e021      	b.n	800c85e <udp_input+0x202>
        pbuf_free(p);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7f9 fa76 	bl	8005d0c <pbuf_free>
        goto end;
 800c820:	e01c      	b.n	800c85c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c822:	7cfb      	ldrb	r3, [r7, #19]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d112      	bne.n	800c84e <udp_input+0x1f2>
 800c828:	4b12      	ldr	r3, [pc, #72]	; (800c874 <udp_input+0x218>)
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c830:	2be0      	cmp	r3, #224	; 0xe0
 800c832:	d00c      	beq.n	800c84e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c834:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <udp_input+0x218>)
 800c836:	899b      	ldrh	r3, [r3, #12]
 800c838:	3308      	adds	r3, #8
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	b21b      	sxth	r3, r3
 800c83e:	4619      	mov	r1, r3
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7f9 fa50 	bl	8005ce6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c846:	2103      	movs	r1, #3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f001 f89b 	bl	800d984 <icmp_dest_unreach>
      pbuf_free(p);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7f9 fa5c 	bl	8005d0c <pbuf_free>
  return;
 800c854:	e003      	b.n	800c85e <udp_input+0x202>
    pbuf_free(p);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7f9 fa58 	bl	8005d0c <pbuf_free>
  return;
 800c85c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c85e:	372c      	adds	r7, #44	; 0x2c
 800c860:	46bd      	mov	sp, r7
 800c862:	bd90      	pop	{r4, r7, pc}
 800c864:	080121d8 	.word	0x080121d8
 800c868:	0801227c 	.word	0x0801227c
 800c86c:	0801222c 	.word	0x0801222c
 800c870:	08012294 	.word	0x08012294
 800c874:	20005118 	.word	0x20005118
 800c878:	200086e4 	.word	0x200086e4
 800c87c:	080122b0 	.word	0x080122b0
 800c880:	20005128 	.word	0x20005128

0800c884 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d01e      	beq.n	800c8d2 <udp_netif_ip_addr_changed+0x4e>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d01a      	beq.n	800c8d2 <udp_netif_ip_addr_changed+0x4e>
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d017      	beq.n	800c8d2 <udp_netif_ip_addr_changed+0x4e>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d013      	beq.n	800c8d2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c8aa:	4b0d      	ldr	r3, [pc, #52]	; (800c8e0 <udp_netif_ip_addr_changed+0x5c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	e00c      	b.n	800c8cc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d103      	bne.n	800c8c6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	60fb      	str	r3, [r7, #12]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1ef      	bne.n	800c8b2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c8d2:	bf00      	nop
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	200086e4 	.word	0x200086e4

0800c8e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c8ec:	4915      	ldr	r1, [pc, #84]	; (800c944 <etharp_free_entry+0x60>)
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	4413      	add	r3, r2
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	440b      	add	r3, r1
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d013      	beq.n	800c928 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c900:	4910      	ldr	r1, [pc, #64]	; (800c944 <etharp_free_entry+0x60>)
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	4613      	mov	r3, r2
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	4413      	add	r3, r2
 800c90a:	00db      	lsls	r3, r3, #3
 800c90c:	440b      	add	r3, r1
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4618      	mov	r0, r3
 800c912:	f7f9 f9fb 	bl	8005d0c <pbuf_free>
    arp_table[i].q = NULL;
 800c916:	490b      	ldr	r1, [pc, #44]	; (800c944 <etharp_free_entry+0x60>)
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	4613      	mov	r3, r2
 800c91c:	005b      	lsls	r3, r3, #1
 800c91e:	4413      	add	r3, r2
 800c920:	00db      	lsls	r3, r3, #3
 800c922:	440b      	add	r3, r1
 800c924:	2200      	movs	r2, #0
 800c926:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c928:	4906      	ldr	r1, [pc, #24]	; (800c944 <etharp_free_entry+0x60>)
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	4613      	mov	r3, r2
 800c92e:	005b      	lsls	r3, r3, #1
 800c930:	4413      	add	r3, r2
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	440b      	add	r3, r1
 800c936:	3314      	adds	r3, #20
 800c938:	2200      	movs	r2, #0
 800c93a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	200086e8 	.word	0x200086e8

0800c948 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c94e:	2300      	movs	r3, #0
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	e096      	b.n	800ca82 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c954:	494f      	ldr	r1, [pc, #316]	; (800ca94 <etharp_tmr+0x14c>)
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	4613      	mov	r3, r2
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	4413      	add	r3, r2
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	440b      	add	r3, r1
 800c962:	3314      	adds	r3, #20
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c968:	78fb      	ldrb	r3, [r7, #3]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 8086 	beq.w	800ca7c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c970:	4948      	ldr	r1, [pc, #288]	; (800ca94 <etharp_tmr+0x14c>)
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	4613      	mov	r3, r2
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	4413      	add	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	440b      	add	r3, r1
 800c97e:	3312      	adds	r3, #18
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	3301      	adds	r3, #1
 800c984:	b298      	uxth	r0, r3
 800c986:	4943      	ldr	r1, [pc, #268]	; (800ca94 <etharp_tmr+0x14c>)
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	4613      	mov	r3, r2
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	4413      	add	r3, r2
 800c990:	00db      	lsls	r3, r3, #3
 800c992:	440b      	add	r3, r1
 800c994:	3312      	adds	r3, #18
 800c996:	4602      	mov	r2, r0
 800c998:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c99a:	493e      	ldr	r1, [pc, #248]	; (800ca94 <etharp_tmr+0x14c>)
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	4413      	add	r3, r2
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	440b      	add	r3, r1
 800c9a8:	3312      	adds	r3, #18
 800c9aa:	881b      	ldrh	r3, [r3, #0]
 800c9ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c9b0:	d215      	bcs.n	800c9de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c9b2:	4938      	ldr	r1, [pc, #224]	; (800ca94 <etharp_tmr+0x14c>)
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	4413      	add	r3, r2
 800c9bc:	00db      	lsls	r3, r3, #3
 800c9be:	440b      	add	r3, r1
 800c9c0:	3314      	adds	r3, #20
 800c9c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d10e      	bne.n	800c9e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c9c8:	4932      	ldr	r1, [pc, #200]	; (800ca94 <etharp_tmr+0x14c>)
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	4413      	add	r3, r2
 800c9d2:	00db      	lsls	r3, r3, #3
 800c9d4:	440b      	add	r3, r1
 800c9d6:	3312      	adds	r3, #18
 800c9d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	d903      	bls.n	800c9e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7ff ff80 	bl	800c8e4 <etharp_free_entry>
 800c9e4:	e04a      	b.n	800ca7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c9e6:	492b      	ldr	r1, [pc, #172]	; (800ca94 <etharp_tmr+0x14c>)
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	4413      	add	r3, r2
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	440b      	add	r3, r1
 800c9f4:	3314      	adds	r3, #20
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	2b03      	cmp	r3, #3
 800c9fa:	d10a      	bne.n	800ca12 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c9fc:	4925      	ldr	r1, [pc, #148]	; (800ca94 <etharp_tmr+0x14c>)
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	4613      	mov	r3, r2
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	4413      	add	r3, r2
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	440b      	add	r3, r1
 800ca0a:	3314      	adds	r3, #20
 800ca0c:	2204      	movs	r2, #4
 800ca0e:	701a      	strb	r2, [r3, #0]
 800ca10:	e034      	b.n	800ca7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ca12:	4920      	ldr	r1, [pc, #128]	; (800ca94 <etharp_tmr+0x14c>)
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	4613      	mov	r3, r2
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	4413      	add	r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	440b      	add	r3, r1
 800ca20:	3314      	adds	r3, #20
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b04      	cmp	r3, #4
 800ca26:	d10a      	bne.n	800ca3e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ca28:	491a      	ldr	r1, [pc, #104]	; (800ca94 <etharp_tmr+0x14c>)
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	4413      	add	r3, r2
 800ca32:	00db      	lsls	r3, r3, #3
 800ca34:	440b      	add	r3, r1
 800ca36:	3314      	adds	r3, #20
 800ca38:	2202      	movs	r2, #2
 800ca3a:	701a      	strb	r2, [r3, #0]
 800ca3c:	e01e      	b.n	800ca7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ca3e:	4915      	ldr	r1, [pc, #84]	; (800ca94 <etharp_tmr+0x14c>)
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	4613      	mov	r3, r2
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	4413      	add	r3, r2
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	440b      	add	r3, r1
 800ca4c:	3314      	adds	r3, #20
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d113      	bne.n	800ca7c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ca54:	490f      	ldr	r1, [pc, #60]	; (800ca94 <etharp_tmr+0x14c>)
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	4413      	add	r3, r2
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	440b      	add	r3, r1
 800ca62:	3308      	adds	r3, #8
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	4413      	add	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	4a08      	ldr	r2, [pc, #32]	; (800ca94 <etharp_tmr+0x14c>)
 800ca72:	4413      	add	r3, r2
 800ca74:	3304      	adds	r3, #4
 800ca76:	4619      	mov	r1, r3
 800ca78:	f000 fe6e 	bl	800d758 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	607b      	str	r3, [r7, #4]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b09      	cmp	r3, #9
 800ca86:	f77f af65 	ble.w	800c954 <etharp_tmr+0xc>
      }
    }
  }
}
 800ca8a:	bf00      	nop
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200086e8 	.word	0x200086e8

0800ca98 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	460b      	mov	r3, r1
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800caa6:	230a      	movs	r3, #10
 800caa8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800caaa:	230a      	movs	r3, #10
 800caac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800caae:	230a      	movs	r3, #10
 800cab0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cab6:	230a      	movs	r3, #10
 800cab8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	83bb      	strh	r3, [r7, #28]
 800cabe:	2300      	movs	r3, #0
 800cac0:	837b      	strh	r3, [r7, #26]
 800cac2:	2300      	movs	r3, #0
 800cac4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cac6:	2300      	movs	r3, #0
 800cac8:	843b      	strh	r3, [r7, #32]
 800caca:	e0ae      	b.n	800cc2a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cacc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cad0:	49a6      	ldr	r1, [pc, #664]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cad2:	4613      	mov	r3, r2
 800cad4:	005b      	lsls	r3, r3, #1
 800cad6:	4413      	add	r3, r2
 800cad8:	00db      	lsls	r3, r3, #3
 800cada:	440b      	add	r3, r1
 800cadc:	3314      	adds	r3, #20
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cae2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cae6:	2b0a      	cmp	r3, #10
 800cae8:	d105      	bne.n	800caf6 <etharp_find_entry+0x5e>
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d102      	bne.n	800caf6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800caf0:	8c3b      	ldrh	r3, [r7, #32]
 800caf2:	847b      	strh	r3, [r7, #34]	; 0x22
 800caf4:	e095      	b.n	800cc22 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f000 8092 	beq.w	800cc22 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d009      	beq.n	800cb18 <etharp_find_entry+0x80>
 800cb04:	7dfb      	ldrb	r3, [r7, #23]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d806      	bhi.n	800cb18 <etharp_find_entry+0x80>
 800cb0a:	4b99      	ldr	r3, [pc, #612]	; (800cd70 <etharp_find_entry+0x2d8>)
 800cb0c:	f240 1223 	movw	r2, #291	; 0x123
 800cb10:	4998      	ldr	r1, [pc, #608]	; (800cd74 <etharp_find_entry+0x2dc>)
 800cb12:	4899      	ldr	r0, [pc, #612]	; (800cd78 <etharp_find_entry+0x2e0>)
 800cb14:	f002 f9f6 	bl	800ef04 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d020      	beq.n	800cb60 <etharp_find_entry+0xc8>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6819      	ldr	r1, [r3, #0]
 800cb22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb26:	4891      	ldr	r0, [pc, #580]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cb28:	4613      	mov	r3, r2
 800cb2a:	005b      	lsls	r3, r3, #1
 800cb2c:	4413      	add	r3, r2
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	4403      	add	r3, r0
 800cb32:	3304      	adds	r3, #4
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4299      	cmp	r1, r3
 800cb38:	d112      	bne.n	800cb60 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00c      	beq.n	800cb5a <etharp_find_entry+0xc2>
 800cb40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb44:	4989      	ldr	r1, [pc, #548]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cb46:	4613      	mov	r3, r2
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	440b      	add	r3, r1
 800cb50:	3308      	adds	r3, #8
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d102      	bne.n	800cb60 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cb5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb5e:	e100      	b.n	800cd62 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d140      	bne.n	800cbe8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cb66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb6a:	4980      	ldr	r1, [pc, #512]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	4413      	add	r3, r2
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	440b      	add	r3, r1
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d01a      	beq.n	800cbb2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cb7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb80:	497a      	ldr	r1, [pc, #488]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cb82:	4613      	mov	r3, r2
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	4413      	add	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	440b      	add	r3, r1
 800cb8c:	3312      	adds	r3, #18
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	8bba      	ldrh	r2, [r7, #28]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d845      	bhi.n	800cc22 <etharp_find_entry+0x18a>
            old_queue = i;
 800cb96:	8c3b      	ldrh	r3, [r7, #32]
 800cb98:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cb9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb9e:	4973      	ldr	r1, [pc, #460]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cba0:	4613      	mov	r3, r2
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	4413      	add	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	440b      	add	r3, r1
 800cbaa:	3312      	adds	r3, #18
 800cbac:	881b      	ldrh	r3, [r3, #0]
 800cbae:	83bb      	strh	r3, [r7, #28]
 800cbb0:	e037      	b.n	800cc22 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cbb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbb6:	496d      	ldr	r1, [pc, #436]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cbb8:	4613      	mov	r3, r2
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	4413      	add	r3, r2
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	440b      	add	r3, r1
 800cbc2:	3312      	adds	r3, #18
 800cbc4:	881b      	ldrh	r3, [r3, #0]
 800cbc6:	8b7a      	ldrh	r2, [r7, #26]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d82a      	bhi.n	800cc22 <etharp_find_entry+0x18a>
            old_pending = i;
 800cbcc:	8c3b      	ldrh	r3, [r7, #32]
 800cbce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cbd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbd4:	4965      	ldr	r1, [pc, #404]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	4413      	add	r3, r2
 800cbdc:	00db      	lsls	r3, r3, #3
 800cbde:	440b      	add	r3, r1
 800cbe0:	3312      	adds	r3, #18
 800cbe2:	881b      	ldrh	r3, [r3, #0]
 800cbe4:	837b      	strh	r3, [r7, #26]
 800cbe6:	e01c      	b.n	800cc22 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cbe8:	7dfb      	ldrb	r3, [r7, #23]
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d919      	bls.n	800cc22 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cbee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbf2:	495e      	ldr	r1, [pc, #376]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	005b      	lsls	r3, r3, #1
 800cbf8:	4413      	add	r3, r2
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	440b      	add	r3, r1
 800cbfe:	3312      	adds	r3, #18
 800cc00:	881b      	ldrh	r3, [r3, #0]
 800cc02:	8b3a      	ldrh	r2, [r7, #24]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d80c      	bhi.n	800cc22 <etharp_find_entry+0x18a>
            old_stable = i;
 800cc08:	8c3b      	ldrh	r3, [r7, #32]
 800cc0a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cc0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc10:	4956      	ldr	r1, [pc, #344]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cc12:	4613      	mov	r3, r2
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	4413      	add	r3, r2
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	440b      	add	r3, r1
 800cc1c:	3312      	adds	r3, #18
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc22:	8c3b      	ldrh	r3, [r7, #32]
 800cc24:	3301      	adds	r3, #1
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	843b      	strh	r3, [r7, #32]
 800cc2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cc2e:	2b09      	cmp	r3, #9
 800cc30:	f77f af4c 	ble.w	800cacc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cc34:	7afb      	ldrb	r3, [r7, #11]
 800cc36:	f003 0302 	and.w	r3, r3, #2
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d108      	bne.n	800cc50 <etharp_find_entry+0x1b8>
 800cc3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc42:	2b0a      	cmp	r3, #10
 800cc44:	d107      	bne.n	800cc56 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cc46:	7afb      	ldrb	r3, [r7, #11]
 800cc48:	f003 0301 	and.w	r3, r3, #1
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d102      	bne.n	800cc56 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cc50:	f04f 33ff 	mov.w	r3, #4294967295
 800cc54:	e085      	b.n	800cd62 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cc56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc5a:	2b09      	cmp	r3, #9
 800cc5c:	dc02      	bgt.n	800cc64 <etharp_find_entry+0x1cc>
    i = empty;
 800cc5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc60:	843b      	strh	r3, [r7, #32]
 800cc62:	e039      	b.n	800ccd8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cc64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cc68:	2b09      	cmp	r3, #9
 800cc6a:	dc14      	bgt.n	800cc96 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cc6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc6e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cc70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc74:	493d      	ldr	r1, [pc, #244]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	440b      	add	r3, r1
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d018      	beq.n	800ccb8 <etharp_find_entry+0x220>
 800cc86:	4b3a      	ldr	r3, [pc, #232]	; (800cd70 <etharp_find_entry+0x2d8>)
 800cc88:	f240 126d 	movw	r2, #365	; 0x16d
 800cc8c:	493b      	ldr	r1, [pc, #236]	; (800cd7c <etharp_find_entry+0x2e4>)
 800cc8e:	483a      	ldr	r0, [pc, #232]	; (800cd78 <etharp_find_entry+0x2e0>)
 800cc90:	f002 f938 	bl	800ef04 <iprintf>
 800cc94:	e010      	b.n	800ccb8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cc96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cc9a:	2b09      	cmp	r3, #9
 800cc9c:	dc02      	bgt.n	800cca4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cc9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cca0:	843b      	strh	r3, [r7, #32]
 800cca2:	e009      	b.n	800ccb8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cca4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cca8:	2b09      	cmp	r3, #9
 800ccaa:	dc02      	bgt.n	800ccb2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ccac:	8bfb      	ldrh	r3, [r7, #30]
 800ccae:	843b      	strh	r3, [r7, #32]
 800ccb0:	e002      	b.n	800ccb8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ccb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb6:	e054      	b.n	800cd62 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ccb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccbc:	2b09      	cmp	r3, #9
 800ccbe:	dd06      	ble.n	800ccce <etharp_find_entry+0x236>
 800ccc0:	4b2b      	ldr	r3, [pc, #172]	; (800cd70 <etharp_find_entry+0x2d8>)
 800ccc2:	f240 127f 	movw	r2, #383	; 0x17f
 800ccc6:	492e      	ldr	r1, [pc, #184]	; (800cd80 <etharp_find_entry+0x2e8>)
 800ccc8:	482b      	ldr	r0, [pc, #172]	; (800cd78 <etharp_find_entry+0x2e0>)
 800ccca:	f002 f91b 	bl	800ef04 <iprintf>
    etharp_free_entry(i);
 800ccce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff fe06 	bl	800c8e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ccd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccdc:	2b09      	cmp	r3, #9
 800ccde:	dd06      	ble.n	800ccee <etharp_find_entry+0x256>
 800cce0:	4b23      	ldr	r3, [pc, #140]	; (800cd70 <etharp_find_entry+0x2d8>)
 800cce2:	f240 1283 	movw	r2, #387	; 0x183
 800cce6:	4926      	ldr	r1, [pc, #152]	; (800cd80 <etharp_find_entry+0x2e8>)
 800cce8:	4823      	ldr	r0, [pc, #140]	; (800cd78 <etharp_find_entry+0x2e0>)
 800ccea:	f002 f90b 	bl	800ef04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ccee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccf2:	491e      	ldr	r1, [pc, #120]	; (800cd6c <etharp_find_entry+0x2d4>)
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	4413      	add	r3, r2
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	440b      	add	r3, r1
 800ccfe:	3314      	adds	r3, #20
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d006      	beq.n	800cd14 <etharp_find_entry+0x27c>
 800cd06:	4b1a      	ldr	r3, [pc, #104]	; (800cd70 <etharp_find_entry+0x2d8>)
 800cd08:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cd0c:	491d      	ldr	r1, [pc, #116]	; (800cd84 <etharp_find_entry+0x2ec>)
 800cd0e:	481a      	ldr	r0, [pc, #104]	; (800cd78 <etharp_find_entry+0x2e0>)
 800cd10:	f002 f8f8 	bl	800ef04 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00b      	beq.n	800cd32 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cd1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6819      	ldr	r1, [r3, #0]
 800cd22:	4812      	ldr	r0, [pc, #72]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cd24:	4613      	mov	r3, r2
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	4413      	add	r3, r2
 800cd2a:	00db      	lsls	r3, r3, #3
 800cd2c:	4403      	add	r3, r0
 800cd2e:	3304      	adds	r3, #4
 800cd30:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cd32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd36:	490d      	ldr	r1, [pc, #52]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cd38:	4613      	mov	r3, r2
 800cd3a:	005b      	lsls	r3, r3, #1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	440b      	add	r3, r1
 800cd42:	3312      	adds	r3, #18
 800cd44:	2200      	movs	r2, #0
 800cd46:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cd48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd4c:	4907      	ldr	r1, [pc, #28]	; (800cd6c <etharp_find_entry+0x2d4>)
 800cd4e:	4613      	mov	r3, r2
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	4413      	add	r3, r2
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	440b      	add	r3, r1
 800cd58:	3308      	adds	r3, #8
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cd5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3728      	adds	r7, #40	; 0x28
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	200086e8 	.word	0x200086e8
 800cd70:	0801253c 	.word	0x0801253c
 800cd74:	08012574 	.word	0x08012574
 800cd78:	080125b4 	.word	0x080125b4
 800cd7c:	080125dc 	.word	0x080125dc
 800cd80:	080125f4 	.word	0x080125f4
 800cd84:	08012608 	.word	0x08012608

0800cd88 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af02      	add	r7, sp, #8
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cd9c:	2b06      	cmp	r3, #6
 800cd9e:	d006      	beq.n	800cdae <etharp_update_arp_entry+0x26>
 800cda0:	4b48      	ldr	r3, [pc, #288]	; (800cec4 <etharp_update_arp_entry+0x13c>)
 800cda2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cda6:	4948      	ldr	r1, [pc, #288]	; (800cec8 <etharp_update_arp_entry+0x140>)
 800cda8:	4848      	ldr	r0, [pc, #288]	; (800cecc <etharp_update_arp_entry+0x144>)
 800cdaa:	f002 f8ab 	bl	800ef04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d012      	beq.n	800cdda <etharp_update_arp_entry+0x52>
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00e      	beq.n	800cdda <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68f9      	ldr	r1, [r7, #12]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f001 f8fe 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 800cdc8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d105      	bne.n	800cdda <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cdd6:	2be0      	cmp	r3, #224	; 0xe0
 800cdd8:	d102      	bne.n	800cde0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cdda:	f06f 030f 	mvn.w	r3, #15
 800cdde:	e06c      	b.n	800ceba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	4619      	mov	r1, r3
 800cde6:	68b8      	ldr	r0, [r7, #8]
 800cde8:	f7ff fe56 	bl	800ca98 <etharp_find_entry>
 800cdec:	4603      	mov	r3, r0
 800cdee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cdf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	da02      	bge.n	800cdfe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cdf8:	8afb      	ldrh	r3, [r7, #22]
 800cdfa:	b25b      	sxtb	r3, r3
 800cdfc:	e05d      	b.n	800ceba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cdfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce02:	4933      	ldr	r1, [pc, #204]	; (800ced0 <etharp_update_arp_entry+0x148>)
 800ce04:	4613      	mov	r3, r2
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	440b      	add	r3, r1
 800ce0e:	3314      	adds	r3, #20
 800ce10:	2202      	movs	r2, #2
 800ce12:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ce14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce18:	492d      	ldr	r1, [pc, #180]	; (800ced0 <etharp_update_arp_entry+0x148>)
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	005b      	lsls	r3, r3, #1
 800ce1e:	4413      	add	r3, r2
 800ce20:	00db      	lsls	r3, r3, #3
 800ce22:	440b      	add	r3, r1
 800ce24:	3308      	adds	r3, #8
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ce2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	4413      	add	r3, r2
 800ce34:	00db      	lsls	r3, r3, #3
 800ce36:	3308      	adds	r3, #8
 800ce38:	4a25      	ldr	r2, [pc, #148]	; (800ced0 <etharp_update_arp_entry+0x148>)
 800ce3a:	4413      	add	r3, r2
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	2206      	movs	r2, #6
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f002 f848 	bl	800eed8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ce48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce4c:	4920      	ldr	r1, [pc, #128]	; (800ced0 <etharp_update_arp_entry+0x148>)
 800ce4e:	4613      	mov	r3, r2
 800ce50:	005b      	lsls	r3, r3, #1
 800ce52:	4413      	add	r3, r2
 800ce54:	00db      	lsls	r3, r3, #3
 800ce56:	440b      	add	r3, r1
 800ce58:	3312      	adds	r3, #18
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ce5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce62:	491b      	ldr	r1, [pc, #108]	; (800ced0 <etharp_update_arp_entry+0x148>)
 800ce64:	4613      	mov	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	4413      	add	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	440b      	add	r3, r1
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d021      	beq.n	800ceb8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ce74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce78:	4915      	ldr	r1, [pc, #84]	; (800ced0 <etharp_update_arp_entry+0x148>)
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	005b      	lsls	r3, r3, #1
 800ce7e:	4413      	add	r3, r2
 800ce80:	00db      	lsls	r3, r3, #3
 800ce82:	440b      	add	r3, r1
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ce88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce8c:	4910      	ldr	r1, [pc, #64]	; (800ced0 <etharp_update_arp_entry+0x148>)
 800ce8e:	4613      	mov	r3, r2
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	4413      	add	r3, r2
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	440b      	add	r3, r1
 800ce98:	2200      	movs	r2, #0
 800ce9a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6939      	ldr	r1, [r7, #16]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f001 ff97 	bl	800ede0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ceb2:	6938      	ldr	r0, [r7, #16]
 800ceb4:	f7f8 ff2a 	bl	8005d0c <pbuf_free>
  }
  return ERR_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	0801253c 	.word	0x0801253c
 800cec8:	08012634 	.word	0x08012634
 800cecc:	080125b4 	.word	0x080125b4
 800ced0:	200086e8 	.word	0x200086e8

0800ced4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cedc:	2300      	movs	r3, #0
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	e01e      	b.n	800cf20 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cee2:	4913      	ldr	r1, [pc, #76]	; (800cf30 <etharp_cleanup_netif+0x5c>)
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4613      	mov	r3, r2
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4413      	add	r3, r2
 800ceec:	00db      	lsls	r3, r3, #3
 800ceee:	440b      	add	r3, r1
 800cef0:	3314      	adds	r3, #20
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cef6:	7afb      	ldrb	r3, [r7, #11]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00e      	beq.n	800cf1a <etharp_cleanup_netif+0x46>
 800cefc:	490c      	ldr	r1, [pc, #48]	; (800cf30 <etharp_cleanup_netif+0x5c>)
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	4613      	mov	r3, r2
 800cf02:	005b      	lsls	r3, r3, #1
 800cf04:	4413      	add	r3, r2
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	440b      	add	r3, r1
 800cf0a:	3308      	adds	r3, #8
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d102      	bne.n	800cf1a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7ff fce5 	bl	800c8e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2b09      	cmp	r3, #9
 800cf24:	dddd      	ble.n	800cee2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cf26:	bf00      	nop
 800cf28:	bf00      	nop
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	200086e8 	.word	0x200086e8

0800cf34 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cf34:	b5b0      	push	{r4, r5, r7, lr}
 800cf36:	b08a      	sub	sp, #40	; 0x28
 800cf38:	af04      	add	r7, sp, #16
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d107      	bne.n	800cf54 <etharp_input+0x20>
 800cf44:	4b3d      	ldr	r3, [pc, #244]	; (800d03c <etharp_input+0x108>)
 800cf46:	f240 228a 	movw	r2, #650	; 0x28a
 800cf4a:	493d      	ldr	r1, [pc, #244]	; (800d040 <etharp_input+0x10c>)
 800cf4c:	483d      	ldr	r0, [pc, #244]	; (800d044 <etharp_input+0x110>)
 800cf4e:	f001 ffd9 	bl	800ef04 <iprintf>
 800cf52:	e06f      	b.n	800d034 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf64:	d10c      	bne.n	800cf80 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cf6a:	2b06      	cmp	r3, #6
 800cf6c:	d108      	bne.n	800cf80 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cf72:	2b04      	cmp	r3, #4
 800cf74:	d104      	bne.n	800cf80 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	885b      	ldrh	r3, [r3, #2]
 800cf7a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cf7c:	2b08      	cmp	r3, #8
 800cf7e:	d003      	beq.n	800cf88 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7f8 fec3 	bl	8005d0c <pbuf_free>
    return;
 800cf86:	e055      	b.n	800d034 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	330e      	adds	r3, #14
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	3318      	adds	r3, #24
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	3304      	adds	r3, #4
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d102      	bne.n	800cfa8 <etharp_input+0x74>
    for_us = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	75fb      	strb	r3, [r7, #23]
 800cfa6:	e009      	b.n	800cfbc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	3304      	adds	r3, #4
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	bf0c      	ite	eq
 800cfb4:	2301      	moveq	r3, #1
 800cfb6:	2300      	movne	r3, #0
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	f103 0208 	add.w	r2, r3, #8
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <etharp_input+0x98>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e000      	b.n	800cfce <etharp_input+0x9a>
 800cfcc:	2302      	movs	r3, #2
 800cfce:	f107 010c 	add.w	r1, r7, #12
 800cfd2:	6838      	ldr	r0, [r7, #0]
 800cfd4:	f7ff fed8 	bl	800cd88 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	88db      	ldrh	r3, [r3, #6]
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe2:	d003      	beq.n	800cfec <etharp_input+0xb8>
 800cfe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfe8:	d01e      	beq.n	800d028 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cfea:	e020      	b.n	800d02e <etharp_input+0xfa>
      if (for_us) {
 800cfec:	7dfb      	ldrb	r3, [r7, #23]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d01c      	beq.n	800d02c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d00c:	2102      	movs	r1, #2
 800d00e:	9103      	str	r1, [sp, #12]
 800d010:	f107 010c 	add.w	r1, r7, #12
 800d014:	9102      	str	r1, [sp, #8]
 800d016:	9201      	str	r2, [sp, #4]
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	462b      	mov	r3, r5
 800d01c:	4622      	mov	r2, r4
 800d01e:	4601      	mov	r1, r0
 800d020:	6838      	ldr	r0, [r7, #0]
 800d022:	f000 faeb 	bl	800d5fc <etharp_raw>
      break;
 800d026:	e001      	b.n	800d02c <etharp_input+0xf8>
      break;
 800d028:	bf00      	nop
 800d02a:	e000      	b.n	800d02e <etharp_input+0xfa>
      break;
 800d02c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7f8 fe6c 	bl	8005d0c <pbuf_free>
}
 800d034:	3718      	adds	r7, #24
 800d036:	46bd      	mov	sp, r7
 800d038:	bdb0      	pop	{r4, r5, r7, pc}
 800d03a:	bf00      	nop
 800d03c:	0801253c 	.word	0x0801253c
 800d040:	0801268c 	.word	0x0801268c
 800d044:	080125b4 	.word	0x080125b4

0800d048 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af02      	add	r7, sp, #8
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	4613      	mov	r3, r2
 800d054:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d056:	79fa      	ldrb	r2, [r7, #7]
 800d058:	4944      	ldr	r1, [pc, #272]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d05a:	4613      	mov	r3, r2
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	4413      	add	r3, r2
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	440b      	add	r3, r1
 800d064:	3314      	adds	r3, #20
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d806      	bhi.n	800d07a <etharp_output_to_arp_index+0x32>
 800d06c:	4b40      	ldr	r3, [pc, #256]	; (800d170 <etharp_output_to_arp_index+0x128>)
 800d06e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d072:	4940      	ldr	r1, [pc, #256]	; (800d174 <etharp_output_to_arp_index+0x12c>)
 800d074:	4840      	ldr	r0, [pc, #256]	; (800d178 <etharp_output_to_arp_index+0x130>)
 800d076:	f001 ff45 	bl	800ef04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d07a:	79fa      	ldrb	r2, [r7, #7]
 800d07c:	493b      	ldr	r1, [pc, #236]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d07e:	4613      	mov	r3, r2
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	4413      	add	r3, r2
 800d084:	00db      	lsls	r3, r3, #3
 800d086:	440b      	add	r3, r1
 800d088:	3314      	adds	r3, #20
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d153      	bne.n	800d138 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d090:	79fa      	ldrb	r2, [r7, #7]
 800d092:	4936      	ldr	r1, [pc, #216]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d094:	4613      	mov	r3, r2
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	4413      	add	r3, r2
 800d09a:	00db      	lsls	r3, r3, #3
 800d09c:	440b      	add	r3, r1
 800d09e:	3312      	adds	r3, #18
 800d0a0:	881b      	ldrh	r3, [r3, #0]
 800d0a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d0a6:	d919      	bls.n	800d0dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d0a8:	79fa      	ldrb	r2, [r7, #7]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	4413      	add	r3, r2
 800d0b0:	00db      	lsls	r3, r3, #3
 800d0b2:	4a2e      	ldr	r2, [pc, #184]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d0b4:	4413      	add	r3, r2
 800d0b6:	3304      	adds	r3, #4
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f000 fb4c 	bl	800d758 <etharp_request>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d138      	bne.n	800d138 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d0c6:	79fa      	ldrb	r2, [r7, #7]
 800d0c8:	4928      	ldr	r1, [pc, #160]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	4413      	add	r3, r2
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	440b      	add	r3, r1
 800d0d4:	3314      	adds	r3, #20
 800d0d6:	2203      	movs	r2, #3
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	e02d      	b.n	800d138 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d0dc:	79fa      	ldrb	r2, [r7, #7]
 800d0de:	4923      	ldr	r1, [pc, #140]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	4413      	add	r3, r2
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	440b      	add	r3, r1
 800d0ea:	3312      	adds	r3, #18
 800d0ec:	881b      	ldrh	r3, [r3, #0]
 800d0ee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d0f2:	d321      	bcc.n	800d138 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d0f4:	79fa      	ldrb	r2, [r7, #7]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	005b      	lsls	r3, r3, #1
 800d0fa:	4413      	add	r3, r2
 800d0fc:	00db      	lsls	r3, r3, #3
 800d0fe:	4a1b      	ldr	r2, [pc, #108]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d100:	4413      	add	r3, r2
 800d102:	1d19      	adds	r1, r3, #4
 800d104:	79fa      	ldrb	r2, [r7, #7]
 800d106:	4613      	mov	r3, r2
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	4413      	add	r3, r2
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	3308      	adds	r3, #8
 800d110:	4a16      	ldr	r2, [pc, #88]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d112:	4413      	add	r3, r2
 800d114:	3304      	adds	r3, #4
 800d116:	461a      	mov	r2, r3
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f000 fafb 	bl	800d714 <etharp_request_dst>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d109      	bne.n	800d138 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d124:	79fa      	ldrb	r2, [r7, #7]
 800d126:	4911      	ldr	r1, [pc, #68]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d128:	4613      	mov	r3, r2
 800d12a:	005b      	lsls	r3, r3, #1
 800d12c:	4413      	add	r3, r2
 800d12e:	00db      	lsls	r3, r3, #3
 800d130:	440b      	add	r3, r1
 800d132:	3314      	adds	r3, #20
 800d134:	2203      	movs	r2, #3
 800d136:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d13e:	79fa      	ldrb	r2, [r7, #7]
 800d140:	4613      	mov	r3, r2
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	4413      	add	r3, r2
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	3308      	adds	r3, #8
 800d14a:	4a08      	ldr	r2, [pc, #32]	; (800d16c <etharp_output_to_arp_index+0x124>)
 800d14c:	4413      	add	r3, r2
 800d14e:	3304      	adds	r3, #4
 800d150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d154:	9200      	str	r2, [sp, #0]
 800d156:	460a      	mov	r2, r1
 800d158:	68b9      	ldr	r1, [r7, #8]
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f001 fe40 	bl	800ede0 <ethernet_output>
 800d160:	4603      	mov	r3, r0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	200086e8 	.word	0x200086e8
 800d170:	0801253c 	.word	0x0801253c
 800d174:	080126ac 	.word	0x080126ac
 800d178:	080125b4 	.word	0x080125b4

0800d17c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b08a      	sub	sp, #40	; 0x28
 800d180:	af02      	add	r7, sp, #8
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d106      	bne.n	800d1a0 <etharp_output+0x24>
 800d192:	4b73      	ldr	r3, [pc, #460]	; (800d360 <etharp_output+0x1e4>)
 800d194:	f240 321e 	movw	r2, #798	; 0x31e
 800d198:	4972      	ldr	r1, [pc, #456]	; (800d364 <etharp_output+0x1e8>)
 800d19a:	4873      	ldr	r0, [pc, #460]	; (800d368 <etharp_output+0x1ec>)
 800d19c:	f001 feb2 	bl	800ef04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d106      	bne.n	800d1b4 <etharp_output+0x38>
 800d1a6:	4b6e      	ldr	r3, [pc, #440]	; (800d360 <etharp_output+0x1e4>)
 800d1a8:	f240 321f 	movw	r2, #799	; 0x31f
 800d1ac:	496f      	ldr	r1, [pc, #444]	; (800d36c <etharp_output+0x1f0>)
 800d1ae:	486e      	ldr	r0, [pc, #440]	; (800d368 <etharp_output+0x1ec>)
 800d1b0:	f001 fea8 	bl	800ef04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d106      	bne.n	800d1c8 <etharp_output+0x4c>
 800d1ba:	4b69      	ldr	r3, [pc, #420]	; (800d360 <etharp_output+0x1e4>)
 800d1bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d1c0:	496b      	ldr	r1, [pc, #428]	; (800d370 <etharp_output+0x1f4>)
 800d1c2:	4869      	ldr	r0, [pc, #420]	; (800d368 <etharp_output+0x1ec>)
 800d1c4:	f001 fe9e 	bl	800ef04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	68f9      	ldr	r1, [r7, #12]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f000 fef8 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d1da:	4b66      	ldr	r3, [pc, #408]	; (800d374 <etharp_output+0x1f8>)
 800d1dc:	61fb      	str	r3, [r7, #28]
 800d1de:	e0af      	b.n	800d340 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1e8:	2be0      	cmp	r3, #224	; 0xe0
 800d1ea:	d118      	bne.n	800d21e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d1f4:	235e      	movs	r3, #94	; 0x5e
 800d1f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d202:	b2db      	uxtb	r3, r3
 800d204:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3302      	adds	r3, #2
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	3303      	adds	r3, #3
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d216:	f107 0310 	add.w	r3, r7, #16
 800d21a:	61fb      	str	r3, [r7, #28]
 800d21c:	e090      	b.n	800d340 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3304      	adds	r3, #4
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	405a      	eors	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	3308      	adds	r3, #8
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4013      	ands	r3, r2
 800d232:	2b00      	cmp	r3, #0
 800d234:	d012      	beq.n	800d25c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d23c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d240:	4293      	cmp	r3, r2
 800d242:	d00b      	beq.n	800d25c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	330c      	adds	r3, #12
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d003      	beq.n	800d256 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	330c      	adds	r3, #12
 800d252:	61bb      	str	r3, [r7, #24]
 800d254:	e002      	b.n	800d25c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d256:	f06f 0303 	mvn.w	r3, #3
 800d25a:	e07d      	b.n	800d358 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d25c:	4b46      	ldr	r3, [pc, #280]	; (800d378 <etharp_output+0x1fc>)
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	4619      	mov	r1, r3
 800d262:	4a46      	ldr	r2, [pc, #280]	; (800d37c <etharp_output+0x200>)
 800d264:	460b      	mov	r3, r1
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	440b      	add	r3, r1
 800d26a:	00db      	lsls	r3, r3, #3
 800d26c:	4413      	add	r3, r2
 800d26e:	3314      	adds	r3, #20
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	2b01      	cmp	r3, #1
 800d274:	d925      	bls.n	800d2c2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d276:	4b40      	ldr	r3, [pc, #256]	; (800d378 <etharp_output+0x1fc>)
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	4619      	mov	r1, r3
 800d27c:	4a3f      	ldr	r2, [pc, #252]	; (800d37c <etharp_output+0x200>)
 800d27e:	460b      	mov	r3, r1
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	440b      	add	r3, r1
 800d284:	00db      	lsls	r3, r3, #3
 800d286:	4413      	add	r3, r2
 800d288:	3308      	adds	r3, #8
 800d28a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d117      	bne.n	800d2c2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	4b38      	ldr	r3, [pc, #224]	; (800d378 <etharp_output+0x1fc>)
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	4618      	mov	r0, r3
 800d29c:	4937      	ldr	r1, [pc, #220]	; (800d37c <etharp_output+0x200>)
 800d29e:	4603      	mov	r3, r0
 800d2a0:	005b      	lsls	r3, r3, #1
 800d2a2:	4403      	add	r3, r0
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	440b      	add	r3, r1
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d108      	bne.n	800d2c2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d2b0:	4b31      	ldr	r3, [pc, #196]	; (800d378 <etharp_output+0x1fc>)
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	68b9      	ldr	r1, [r7, #8]
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f7ff fec5 	bl	800d048 <etharp_output_to_arp_index>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	e04a      	b.n	800d358 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	75fb      	strb	r3, [r7, #23]
 800d2c6:	e031      	b.n	800d32c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d2c8:	7dfa      	ldrb	r2, [r7, #23]
 800d2ca:	492c      	ldr	r1, [pc, #176]	; (800d37c <etharp_output+0x200>)
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	005b      	lsls	r3, r3, #1
 800d2d0:	4413      	add	r3, r2
 800d2d2:	00db      	lsls	r3, r3, #3
 800d2d4:	440b      	add	r3, r1
 800d2d6:	3314      	adds	r3, #20
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d923      	bls.n	800d326 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d2de:	7dfa      	ldrb	r2, [r7, #23]
 800d2e0:	4926      	ldr	r1, [pc, #152]	; (800d37c <etharp_output+0x200>)
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	4413      	add	r3, r2
 800d2e8:	00db      	lsls	r3, r3, #3
 800d2ea:	440b      	add	r3, r1
 800d2ec:	3308      	adds	r3, #8
 800d2ee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d117      	bne.n	800d326 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	6819      	ldr	r1, [r3, #0]
 800d2fa:	7dfa      	ldrb	r2, [r7, #23]
 800d2fc:	481f      	ldr	r0, [pc, #124]	; (800d37c <etharp_output+0x200>)
 800d2fe:	4613      	mov	r3, r2
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	4413      	add	r3, r2
 800d304:	00db      	lsls	r3, r3, #3
 800d306:	4403      	add	r3, r0
 800d308:	3304      	adds	r3, #4
 800d30a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d30c:	4299      	cmp	r1, r3
 800d30e:	d10a      	bne.n	800d326 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d310:	4a19      	ldr	r2, [pc, #100]	; (800d378 <etharp_output+0x1fc>)
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	461a      	mov	r2, r3
 800d31a:	68b9      	ldr	r1, [r7, #8]
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f7ff fe93 	bl	800d048 <etharp_output_to_arp_index>
 800d322:	4603      	mov	r3, r0
 800d324:	e018      	b.n	800d358 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d326:	7dfb      	ldrb	r3, [r7, #23]
 800d328:	3301      	adds	r3, #1
 800d32a:	75fb      	strb	r3, [r7, #23]
 800d32c:	7dfb      	ldrb	r3, [r7, #23]
 800d32e:	2b09      	cmp	r3, #9
 800d330:	d9ca      	bls.n	800d2c8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	69b9      	ldr	r1, [r7, #24]
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f000 f822 	bl	800d380 <etharp_query>
 800d33c:	4603      	mov	r3, r0
 800d33e:	e00b      	b.n	800d358 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f001 fd45 	bl	800ede0 <ethernet_output>
 800d356:	4603      	mov	r3, r0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3720      	adds	r7, #32
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	0801253c 	.word	0x0801253c
 800d364:	0801268c 	.word	0x0801268c
 800d368:	080125b4 	.word	0x080125b4
 800d36c:	080126dc 	.word	0x080126dc
 800d370:	0801267c 	.word	0x0801267c
 800d374:	080139b0 	.word	0x080139b0
 800d378:	200087d8 	.word	0x200087d8
 800d37c:	200086e8 	.word	0x200086e8

0800d380 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b08c      	sub	sp, #48	; 0x30
 800d384:	af02      	add	r7, sp, #8
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	3326      	adds	r3, #38	; 0x26
 800d390:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d392:	23ff      	movs	r3, #255	; 0xff
 800d394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68f9      	ldr	r1, [r7, #12]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 fe0e 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10c      	bne.n	800d3c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d3b6:	2be0      	cmp	r3, #224	; 0xe0
 800d3b8:	d006      	beq.n	800d3c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d003      	beq.n	800d3c8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d3c8:	f06f 030f 	mvn.w	r3, #15
 800d3cc:	e101      	b.n	800d5d2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	68b8      	ldr	r0, [r7, #8]
 800d3d4:	f7ff fb60 	bl	800ca98 <etharp_find_entry>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d3dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	da02      	bge.n	800d3ea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d3e4:	8a7b      	ldrh	r3, [r7, #18]
 800d3e6:	b25b      	sxtb	r3, r3
 800d3e8:	e0f3      	b.n	800d5d2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d3ea:	8a7b      	ldrh	r3, [r7, #18]
 800d3ec:	2b7e      	cmp	r3, #126	; 0x7e
 800d3ee:	d906      	bls.n	800d3fe <etharp_query+0x7e>
 800d3f0:	4b7a      	ldr	r3, [pc, #488]	; (800d5dc <etharp_query+0x25c>)
 800d3f2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d3f6:	497a      	ldr	r1, [pc, #488]	; (800d5e0 <etharp_query+0x260>)
 800d3f8:	487a      	ldr	r0, [pc, #488]	; (800d5e4 <etharp_query+0x264>)
 800d3fa:	f001 fd83 	bl	800ef04 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d3fe:	8a7b      	ldrh	r3, [r7, #18]
 800d400:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d402:	7c7a      	ldrb	r2, [r7, #17]
 800d404:	4978      	ldr	r1, [pc, #480]	; (800d5e8 <etharp_query+0x268>)
 800d406:	4613      	mov	r3, r2
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	4413      	add	r3, r2
 800d40c:	00db      	lsls	r3, r3, #3
 800d40e:	440b      	add	r3, r1
 800d410:	3314      	adds	r3, #20
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d115      	bne.n	800d444 <etharp_query+0xc4>
    is_new_entry = 1;
 800d418:	2301      	movs	r3, #1
 800d41a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d41c:	7c7a      	ldrb	r2, [r7, #17]
 800d41e:	4972      	ldr	r1, [pc, #456]	; (800d5e8 <etharp_query+0x268>)
 800d420:	4613      	mov	r3, r2
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	4413      	add	r3, r2
 800d426:	00db      	lsls	r3, r3, #3
 800d428:	440b      	add	r3, r1
 800d42a:	3314      	adds	r3, #20
 800d42c:	2201      	movs	r2, #1
 800d42e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d430:	7c7a      	ldrb	r2, [r7, #17]
 800d432:	496d      	ldr	r1, [pc, #436]	; (800d5e8 <etharp_query+0x268>)
 800d434:	4613      	mov	r3, r2
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	4413      	add	r3, r2
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	440b      	add	r3, r1
 800d43e:	3308      	adds	r3, #8
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d444:	7c7a      	ldrb	r2, [r7, #17]
 800d446:	4968      	ldr	r1, [pc, #416]	; (800d5e8 <etharp_query+0x268>)
 800d448:	4613      	mov	r3, r2
 800d44a:	005b      	lsls	r3, r3, #1
 800d44c:	4413      	add	r3, r2
 800d44e:	00db      	lsls	r3, r3, #3
 800d450:	440b      	add	r3, r1
 800d452:	3314      	adds	r3, #20
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b01      	cmp	r3, #1
 800d458:	d011      	beq.n	800d47e <etharp_query+0xfe>
 800d45a:	7c7a      	ldrb	r2, [r7, #17]
 800d45c:	4962      	ldr	r1, [pc, #392]	; (800d5e8 <etharp_query+0x268>)
 800d45e:	4613      	mov	r3, r2
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	4413      	add	r3, r2
 800d464:	00db      	lsls	r3, r3, #3
 800d466:	440b      	add	r3, r1
 800d468:	3314      	adds	r3, #20
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d806      	bhi.n	800d47e <etharp_query+0xfe>
 800d470:	4b5a      	ldr	r3, [pc, #360]	; (800d5dc <etharp_query+0x25c>)
 800d472:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d476:	495d      	ldr	r1, [pc, #372]	; (800d5ec <etharp_query+0x26c>)
 800d478:	485a      	ldr	r0, [pc, #360]	; (800d5e4 <etharp_query+0x264>)
 800d47a:	f001 fd43 	bl	800ef04 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d47e:	6a3b      	ldr	r3, [r7, #32]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d102      	bne.n	800d48a <etharp_query+0x10a>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10c      	bne.n	800d4a4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d48a:	68b9      	ldr	r1, [r7, #8]
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f000 f963 	bl	800d758 <etharp_request>
 800d492:	4603      	mov	r3, r0
 800d494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d102      	bne.n	800d4a4 <etharp_query+0x124>
      return result;
 800d49e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4a2:	e096      	b.n	800d5d2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <etharp_query+0x138>
 800d4aa:	4b4c      	ldr	r3, [pc, #304]	; (800d5dc <etharp_query+0x25c>)
 800d4ac:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d4b0:	494f      	ldr	r1, [pc, #316]	; (800d5f0 <etharp_query+0x270>)
 800d4b2:	484c      	ldr	r0, [pc, #304]	; (800d5e4 <etharp_query+0x264>)
 800d4b4:	f001 fd26 	bl	800ef04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d4b8:	7c7a      	ldrb	r2, [r7, #17]
 800d4ba:	494b      	ldr	r1, [pc, #300]	; (800d5e8 <etharp_query+0x268>)
 800d4bc:	4613      	mov	r3, r2
 800d4be:	005b      	lsls	r3, r3, #1
 800d4c0:	4413      	add	r3, r2
 800d4c2:	00db      	lsls	r3, r3, #3
 800d4c4:	440b      	add	r3, r1
 800d4c6:	3314      	adds	r3, #20
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d917      	bls.n	800d4fe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d4ce:	4a49      	ldr	r2, [pc, #292]	; (800d5f4 <etharp_query+0x274>)
 800d4d0:	7c7b      	ldrb	r3, [r7, #17]
 800d4d2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d4d4:	7c7a      	ldrb	r2, [r7, #17]
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	005b      	lsls	r3, r3, #1
 800d4da:	4413      	add	r3, r2
 800d4dc:	00db      	lsls	r3, r3, #3
 800d4de:	3308      	adds	r3, #8
 800d4e0:	4a41      	ldr	r2, [pc, #260]	; (800d5e8 <etharp_query+0x268>)
 800d4e2:	4413      	add	r3, r2
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4ea:	9200      	str	r2, [sp, #0]
 800d4ec:	697a      	ldr	r2, [r7, #20]
 800d4ee:	6879      	ldr	r1, [r7, #4]
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f001 fc75 	bl	800ede0 <ethernet_output>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4fc:	e067      	b.n	800d5ce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d4fe:	7c7a      	ldrb	r2, [r7, #17]
 800d500:	4939      	ldr	r1, [pc, #228]	; (800d5e8 <etharp_query+0x268>)
 800d502:	4613      	mov	r3, r2
 800d504:	005b      	lsls	r3, r3, #1
 800d506:	4413      	add	r3, r2
 800d508:	00db      	lsls	r3, r3, #3
 800d50a:	440b      	add	r3, r1
 800d50c:	3314      	adds	r3, #20
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d15c      	bne.n	800d5ce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d514:	2300      	movs	r3, #0
 800d516:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d51c:	e01c      	b.n	800d558 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	895a      	ldrh	r2, [r3, #10]
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	891b      	ldrh	r3, [r3, #8]
 800d526:	429a      	cmp	r2, r3
 800d528:	d10a      	bne.n	800d540 <etharp_query+0x1c0>
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d006      	beq.n	800d540 <etharp_query+0x1c0>
 800d532:	4b2a      	ldr	r3, [pc, #168]	; (800d5dc <etharp_query+0x25c>)
 800d534:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d538:	492f      	ldr	r1, [pc, #188]	; (800d5f8 <etharp_query+0x278>)
 800d53a:	482a      	ldr	r0, [pc, #168]	; (800d5e4 <etharp_query+0x264>)
 800d53c:	f001 fce2 	bl	800ef04 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	7b1b      	ldrb	r3, [r3, #12]
 800d544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <etharp_query+0x1d2>
        copy_needed = 1;
 800d54c:	2301      	movs	r3, #1
 800d54e:	61bb      	str	r3, [r7, #24]
        break;
 800d550:	e005      	b.n	800d55e <etharp_query+0x1de>
      }
      p = p->next;
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1df      	bne.n	800d51e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d007      	beq.n	800d574 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d56a:	200e      	movs	r0, #14
 800d56c:	f7f8 fe2a 	bl	80061c4 <pbuf_clone>
 800d570:	61f8      	str	r0, [r7, #28]
 800d572:	e004      	b.n	800d57e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d578:	69f8      	ldr	r0, [r7, #28]
 800d57a:	f7f8 fc67 	bl	8005e4c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d021      	beq.n	800d5c8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d584:	7c7a      	ldrb	r2, [r7, #17]
 800d586:	4918      	ldr	r1, [pc, #96]	; (800d5e8 <etharp_query+0x268>)
 800d588:	4613      	mov	r3, r2
 800d58a:	005b      	lsls	r3, r3, #1
 800d58c:	4413      	add	r3, r2
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	440b      	add	r3, r1
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00a      	beq.n	800d5ae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d598:	7c7a      	ldrb	r2, [r7, #17]
 800d59a:	4913      	ldr	r1, [pc, #76]	; (800d5e8 <etharp_query+0x268>)
 800d59c:	4613      	mov	r3, r2
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	4413      	add	r3, r2
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	440b      	add	r3, r1
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7f8 fbaf 	bl	8005d0c <pbuf_free>
      }
      arp_table[i].q = p;
 800d5ae:	7c7a      	ldrb	r2, [r7, #17]
 800d5b0:	490d      	ldr	r1, [pc, #52]	; (800d5e8 <etharp_query+0x268>)
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	005b      	lsls	r3, r3, #1
 800d5b6:	4413      	add	r3, r2
 800d5b8:	00db      	lsls	r3, r3, #3
 800d5ba:	440b      	add	r3, r1
 800d5bc:	69fa      	ldr	r2, [r7, #28]
 800d5be:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5c6:	e002      	b.n	800d5ce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d5c8:	23ff      	movs	r3, #255	; 0xff
 800d5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d5ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3728      	adds	r7, #40	; 0x28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	0801253c 	.word	0x0801253c
 800d5e0:	080126e8 	.word	0x080126e8
 800d5e4:	080125b4 	.word	0x080125b4
 800d5e8:	200086e8 	.word	0x200086e8
 800d5ec:	080126f8 	.word	0x080126f8
 800d5f0:	080126dc 	.word	0x080126dc
 800d5f4:	200087d8 	.word	0x200087d8
 800d5f8:	08012720 	.word	0x08012720

0800d5fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08a      	sub	sp, #40	; 0x28
 800d600:	af02      	add	r7, sp, #8
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
 800d608:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d60a:	2300      	movs	r3, #0
 800d60c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d106      	bne.n	800d622 <etharp_raw+0x26>
 800d614:	4b3a      	ldr	r3, [pc, #232]	; (800d700 <etharp_raw+0x104>)
 800d616:	f240 4257 	movw	r2, #1111	; 0x457
 800d61a:	493a      	ldr	r1, [pc, #232]	; (800d704 <etharp_raw+0x108>)
 800d61c:	483a      	ldr	r0, [pc, #232]	; (800d708 <etharp_raw+0x10c>)
 800d61e:	f001 fc71 	bl	800ef04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d622:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d626:	211c      	movs	r1, #28
 800d628:	200e      	movs	r0, #14
 800d62a:	f7f8 f88b 	bl	8005744 <pbuf_alloc>
 800d62e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d102      	bne.n	800d63c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d636:	f04f 33ff 	mov.w	r3, #4294967295
 800d63a:	e05d      	b.n	800d6f8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	895b      	ldrh	r3, [r3, #10]
 800d640:	2b1b      	cmp	r3, #27
 800d642:	d806      	bhi.n	800d652 <etharp_raw+0x56>
 800d644:	4b2e      	ldr	r3, [pc, #184]	; (800d700 <etharp_raw+0x104>)
 800d646:	f240 4262 	movw	r2, #1122	; 0x462
 800d64a:	4930      	ldr	r1, [pc, #192]	; (800d70c <etharp_raw+0x110>)
 800d64c:	482e      	ldr	r0, [pc, #184]	; (800d708 <etharp_raw+0x10c>)
 800d64e:	f001 fc59 	bl	800ef04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d658:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7f6 ffc2 	bl	80045e4 <lwip_htons>
 800d660:	4603      	mov	r3, r0
 800d662:	461a      	mov	r2, r3
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d66e:	2b06      	cmp	r3, #6
 800d670:	d006      	beq.n	800d680 <etharp_raw+0x84>
 800d672:	4b23      	ldr	r3, [pc, #140]	; (800d700 <etharp_raw+0x104>)
 800d674:	f240 4269 	movw	r2, #1129	; 0x469
 800d678:	4925      	ldr	r1, [pc, #148]	; (800d710 <etharp_raw+0x114>)
 800d67a:	4823      	ldr	r0, [pc, #140]	; (800d708 <etharp_raw+0x10c>)
 800d67c:	f001 fc42 	bl	800ef04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	3308      	adds	r3, #8
 800d684:	2206      	movs	r2, #6
 800d686:	6839      	ldr	r1, [r7, #0]
 800d688:	4618      	mov	r0, r3
 800d68a:	f001 fc25 	bl	800eed8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	3312      	adds	r3, #18
 800d692:	2206      	movs	r2, #6
 800d694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d696:	4618      	mov	r0, r3
 800d698:	f001 fc1e 	bl	800eed8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	330e      	adds	r3, #14
 800d6a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6a2:	6812      	ldr	r2, [r2, #0]
 800d6a4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	3318      	adds	r3, #24
 800d6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ac:	6812      	ldr	r2, [r2, #0]
 800d6ae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	701a      	strb	r2, [r3, #0]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f042 0201 	orr.w	r2, r2, #1
 800d6bc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f042 0208 	orr.w	r2, r2, #8
 800d6c6:	709a      	strb	r2, [r3, #2]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2206      	movs	r2, #6
 800d6d0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	2204      	movs	r2, #4
 800d6d6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d6d8:	f640 0306 	movw	r3, #2054	; 0x806
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	69b9      	ldr	r1, [r7, #24]
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f001 fb7b 	bl	800ede0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d6ea:	69b8      	ldr	r0, [r7, #24]
 800d6ec:	f7f8 fb0e 	bl	8005d0c <pbuf_free>
  p = NULL;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d6f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3720      	adds	r7, #32
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	0801253c 	.word	0x0801253c
 800d704:	0801268c 	.word	0x0801268c
 800d708:	080125b4 	.word	0x080125b4
 800d70c:	0801273c 	.word	0x0801273c
 800d710:	08012770 	.word	0x08012770

0800d714 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b088      	sub	sp, #32
 800d718:	af04      	add	r7, sp, #16
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d730:	2201      	movs	r2, #1
 800d732:	9203      	str	r2, [sp, #12]
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	9202      	str	r2, [sp, #8]
 800d738:	4a06      	ldr	r2, [pc, #24]	; (800d754 <etharp_request_dst+0x40>)
 800d73a:	9201      	str	r2, [sp, #4]
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	4603      	mov	r3, r0
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f7ff ff5a 	bl	800d5fc <etharp_raw>
 800d748:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	080139b8 	.word	0x080139b8

0800d758 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d762:	4a05      	ldr	r2, [pc, #20]	; (800d778 <etharp_request+0x20>)
 800d764:	6839      	ldr	r1, [r7, #0]
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff ffd4 	bl	800d714 <etharp_request_dst>
 800d76c:	4603      	mov	r3, r0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	080139b0 	.word	0x080139b0

0800d77c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08e      	sub	sp, #56	; 0x38
 800d780:	af04      	add	r7, sp, #16
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d786:	4b79      	ldr	r3, [pc, #484]	; (800d96c <icmp_input+0x1f0>)
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	f003 030f 	and.w	r3, r3, #15
 800d794:	b2db      	uxtb	r3, r3
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d79c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d79e:	2b13      	cmp	r3, #19
 800d7a0:	f240 80cd 	bls.w	800d93e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	895b      	ldrh	r3, [r3, #10]
 800d7a8:	2b03      	cmp	r3, #3
 800d7aa:	f240 80ca 	bls.w	800d942 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d7b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f000 80b7 	beq.w	800d930 <icmp_input+0x1b4>
 800d7c2:	2b08      	cmp	r3, #8
 800d7c4:	f040 80b7 	bne.w	800d936 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d7c8:	4b69      	ldr	r3, [pc, #420]	; (800d970 <icmp_input+0x1f4>)
 800d7ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d7cc:	4b67      	ldr	r3, [pc, #412]	; (800d96c <icmp_input+0x1f0>)
 800d7ce:	695b      	ldr	r3, [r3, #20]
 800d7d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7d4:	2be0      	cmp	r3, #224	; 0xe0
 800d7d6:	f000 80bb 	beq.w	800d950 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d7da:	4b64      	ldr	r3, [pc, #400]	; (800d96c <icmp_input+0x1f0>)
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	4a63      	ldr	r2, [pc, #396]	; (800d96c <icmp_input+0x1f0>)
 800d7e0:	6812      	ldr	r2, [r2, #0]
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 fbed 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f040 80b1 	bne.w	800d954 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	891b      	ldrh	r3, [r3, #8]
 800d7f6:	2b07      	cmp	r3, #7
 800d7f8:	f240 80a5 	bls.w	800d946 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d7fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7fe:	330e      	adds	r3, #14
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7f8 f9ec 	bl	8005be0 <pbuf_add_header>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d04b      	beq.n	800d8a6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	891a      	ldrh	r2, [r3, #8]
 800d812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d814:	4413      	add	r3, r2
 800d816:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	891b      	ldrh	r3, [r3, #8]
 800d81c:	8b7a      	ldrh	r2, [r7, #26]
 800d81e:	429a      	cmp	r2, r3
 800d820:	f0c0 809a 	bcc.w	800d958 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d824:	8b7b      	ldrh	r3, [r7, #26]
 800d826:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d82a:	4619      	mov	r1, r3
 800d82c:	200e      	movs	r0, #14
 800d82e:	f7f7 ff89 	bl	8005744 <pbuf_alloc>
 800d832:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 8090 	beq.w	800d95c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	895b      	ldrh	r3, [r3, #10]
 800d840:	461a      	mov	r2, r3
 800d842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d844:	3308      	adds	r3, #8
 800d846:	429a      	cmp	r2, r3
 800d848:	d203      	bcs.n	800d852 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d84a:	6978      	ldr	r0, [r7, #20]
 800d84c:	f7f8 fa5e 	bl	8005d0c <pbuf_free>
          goto icmperr;
 800d850:	e085      	b.n	800d95e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d85a:	4618      	mov	r0, r3
 800d85c:	f001 fb3c 	bl	800eed8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d862:	4619      	mov	r1, r3
 800d864:	6978      	ldr	r0, [r7, #20]
 800d866:	f7f8 f9cb 	bl	8005c00 <pbuf_remove_header>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d009      	beq.n	800d884 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d870:	4b40      	ldr	r3, [pc, #256]	; (800d974 <icmp_input+0x1f8>)
 800d872:	22b6      	movs	r2, #182	; 0xb6
 800d874:	4940      	ldr	r1, [pc, #256]	; (800d978 <icmp_input+0x1fc>)
 800d876:	4841      	ldr	r0, [pc, #260]	; (800d97c <icmp_input+0x200>)
 800d878:	f001 fb44 	bl	800ef04 <iprintf>
          pbuf_free(r);
 800d87c:	6978      	ldr	r0, [r7, #20]
 800d87e:	f7f8 fa45 	bl	8005d0c <pbuf_free>
          goto icmperr;
 800d882:	e06c      	b.n	800d95e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	6978      	ldr	r0, [r7, #20]
 800d888:	f7f8 fb58 	bl	8005f3c <pbuf_copy>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d892:	6978      	ldr	r0, [r7, #20]
 800d894:	f7f8 fa3a 	bl	8005d0c <pbuf_free>
          goto icmperr;
 800d898:	e061      	b.n	800d95e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7f8 fa36 	bl	8005d0c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	607b      	str	r3, [r7, #4]
 800d8a4:	e00f      	b.n	800d8c6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d8a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8a8:	330e      	adds	r3, #14
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7f8 f9a7 	bl	8005c00 <pbuf_remove_header>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d006      	beq.n	800d8c6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d8b8:	4b2e      	ldr	r3, [pc, #184]	; (800d974 <icmp_input+0x1f8>)
 800d8ba:	22c7      	movs	r2, #199	; 0xc7
 800d8bc:	4930      	ldr	r1, [pc, #192]	; (800d980 <icmp_input+0x204>)
 800d8be:	482f      	ldr	r0, [pc, #188]	; (800d97c <icmp_input+0x200>)
 800d8c0:	f001 fb20 	bl	800ef04 <iprintf>
          goto icmperr;
 800d8c4:	e04b      	b.n	800d95e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d8cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7f8 f985 	bl	8005be0 <pbuf_add_header>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d12b      	bne.n	800d934 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d8ea:	4b20      	ldr	r3, [pc, #128]	; (800d96c <icmp_input+0x1f0>)
 800d8ec:	691a      	ldr	r2, [r3, #16]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	709a      	strb	r2, [r3, #2]
 800d8fe:	2200      	movs	r2, #0
 800d900:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	22ff      	movs	r2, #255	; 0xff
 800d906:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2200      	movs	r2, #0
 800d90c:	729a      	strb	r2, [r3, #10]
 800d90e:	2200      	movs	r2, #0
 800d910:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	9302      	str	r3, [sp, #8]
 800d916:	2301      	movs	r3, #1
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	2300      	movs	r3, #0
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	23ff      	movs	r3, #255	; 0xff
 800d920:	2200      	movs	r2, #0
 800d922:	69f9      	ldr	r1, [r7, #28]
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fa75 	bl	800de14 <ip4_output_if>
 800d92a:	4603      	mov	r3, r0
 800d92c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d92e:	e001      	b.n	800d934 <icmp_input+0x1b8>
      break;
 800d930:	bf00      	nop
 800d932:	e000      	b.n	800d936 <icmp_input+0x1ba>
      break;
 800d934:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7f8 f9e8 	bl	8005d0c <pbuf_free>
  return;
 800d93c:	e013      	b.n	800d966 <icmp_input+0x1ea>
    goto lenerr;
 800d93e:	bf00      	nop
 800d940:	e002      	b.n	800d948 <icmp_input+0x1cc>
    goto lenerr;
 800d942:	bf00      	nop
 800d944:	e000      	b.n	800d948 <icmp_input+0x1cc>
        goto lenerr;
 800d946:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7f8 f9df 	bl	8005d0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d94e:	e00a      	b.n	800d966 <icmp_input+0x1ea>
        goto icmperr;
 800d950:	bf00      	nop
 800d952:	e004      	b.n	800d95e <icmp_input+0x1e2>
        goto icmperr;
 800d954:	bf00      	nop
 800d956:	e002      	b.n	800d95e <icmp_input+0x1e2>
          goto icmperr;
 800d958:	bf00      	nop
 800d95a:	e000      	b.n	800d95e <icmp_input+0x1e2>
          goto icmperr;
 800d95c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7f8 f9d4 	bl	8005d0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d964:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d966:	3728      	adds	r7, #40	; 0x28
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	20005118 	.word	0x20005118
 800d970:	2000512c 	.word	0x2000512c
 800d974:	080127b4 	.word	0x080127b4
 800d978:	080127ec 	.word	0x080127ec
 800d97c:	08012824 	.word	0x08012824
 800d980:	0801284c 	.word	0x0801284c

0800d984 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d990:	78fb      	ldrb	r3, [r7, #3]
 800d992:	461a      	mov	r2, r3
 800d994:	2103      	movs	r1, #3
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 f814 	bl	800d9c4 <icmp_send_response>
}
 800d99c:	bf00      	nop
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	210b      	movs	r1, #11
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f804 	bl	800d9c4 <icmp_send_response>
}
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08c      	sub	sp, #48	; 0x30
 800d9c8:	af04      	add	r7, sp, #16
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	70fb      	strb	r3, [r7, #3]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d9d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9d8:	2124      	movs	r1, #36	; 0x24
 800d9da:	2022      	movs	r0, #34	; 0x22
 800d9dc:	f7f7 feb2 	bl	8005744 <pbuf_alloc>
 800d9e0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d04c      	beq.n	800da82 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	895b      	ldrh	r3, [r3, #10]
 800d9ec:	2b23      	cmp	r3, #35	; 0x23
 800d9ee:	d806      	bhi.n	800d9fe <icmp_send_response+0x3a>
 800d9f0:	4b26      	ldr	r3, [pc, #152]	; (800da8c <icmp_send_response+0xc8>)
 800d9f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d9f6:	4926      	ldr	r1, [pc, #152]	; (800da90 <icmp_send_response+0xcc>)
 800d9f8:	4826      	ldr	r0, [pc, #152]	; (800da94 <icmp_send_response+0xd0>)
 800d9fa:	f001 fa83 	bl	800ef04 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	78fa      	ldrb	r2, [r7, #3]
 800da0e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	78ba      	ldrb	r2, [r7, #2]
 800da14:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	2200      	movs	r2, #0
 800da1a:	711a      	strb	r2, [r3, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	2200      	movs	r2, #0
 800da24:	719a      	strb	r2, [r3, #6]
 800da26:	2200      	movs	r2, #0
 800da28:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	f103 0008 	add.w	r0, r3, #8
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	221c      	movs	r2, #28
 800da38:	4619      	mov	r1, r3
 800da3a:	f001 fa4d 	bl	800eed8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800da44:	f107 030c 	add.w	r3, r7, #12
 800da48:	4618      	mov	r0, r3
 800da4a:	f000 f825 	bl	800da98 <ip4_route>
 800da4e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d011      	beq.n	800da7a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2200      	movs	r2, #0
 800da5a:	709a      	strb	r2, [r3, #2]
 800da5c:	2200      	movs	r2, #0
 800da5e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800da60:	f107 020c 	add.w	r2, r7, #12
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	9302      	str	r3, [sp, #8]
 800da68:	2301      	movs	r3, #1
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	2300      	movs	r3, #0
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	23ff      	movs	r3, #255	; 0xff
 800da72:	2100      	movs	r1, #0
 800da74:	69f8      	ldr	r0, [r7, #28]
 800da76:	f000 f9cd 	bl	800de14 <ip4_output_if>
  }
  pbuf_free(q);
 800da7a:	69f8      	ldr	r0, [r7, #28]
 800da7c:	f7f8 f946 	bl	8005d0c <pbuf_free>
 800da80:	e000      	b.n	800da84 <icmp_send_response+0xc0>
    return;
 800da82:	bf00      	nop
}
 800da84:	3720      	adds	r7, #32
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	080127b4 	.word	0x080127b4
 800da90:	08012880 	.word	0x08012880
 800da94:	08012824 	.word	0x08012824

0800da98 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800daa0:	4b33      	ldr	r3, [pc, #204]	; (800db70 <ip4_route+0xd8>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	60fb      	str	r3, [r7, #12]
 800daa6:	e036      	b.n	800db16 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d02b      	beq.n	800db10 <ip4_route+0x78>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dabe:	089b      	lsrs	r3, r3, #2
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d022      	beq.n	800db10 <ip4_route+0x78>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	3304      	adds	r3, #4
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01d      	beq.n	800db10 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681a      	ldr	r2, [r3, #0]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3304      	adds	r3, #4
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	405a      	eors	r2, r3
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3308      	adds	r3, #8
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4013      	ands	r3, r2
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	e038      	b.n	800db62 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800daf6:	f003 0302 	and.w	r3, r3, #2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d108      	bne.n	800db10 <ip4_route+0x78>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	330c      	adds	r3, #12
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d101      	bne.n	800db10 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	e028      	b.n	800db62 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	60fb      	str	r3, [r7, #12]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d1c5      	bne.n	800daa8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800db1c:	4b15      	ldr	r3, [pc, #84]	; (800db74 <ip4_route+0xdc>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01a      	beq.n	800db5a <ip4_route+0xc2>
 800db24:	4b13      	ldr	r3, [pc, #76]	; (800db74 <ip4_route+0xdc>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db2c:	f003 0301 	and.w	r3, r3, #1
 800db30:	2b00      	cmp	r3, #0
 800db32:	d012      	beq.n	800db5a <ip4_route+0xc2>
 800db34:	4b0f      	ldr	r3, [pc, #60]	; (800db74 <ip4_route+0xdc>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db3c:	f003 0304 	and.w	r3, r3, #4
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00a      	beq.n	800db5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800db44:	4b0b      	ldr	r3, [pc, #44]	; (800db74 <ip4_route+0xdc>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3304      	adds	r3, #4
 800db4a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d004      	beq.n	800db5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	b2db      	uxtb	r3, r3
 800db56:	2b7f      	cmp	r3, #127	; 0x7f
 800db58:	d101      	bne.n	800db5e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	e001      	b.n	800db62 <ip4_route+0xca>
  }

  return netif_default;
 800db5e:	4b05      	ldr	r3, [pc, #20]	; (800db74 <ip4_route+0xdc>)
 800db60:	681b      	ldr	r3, [r3, #0]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	2000867c 	.word	0x2000867c
 800db74:	20008680 	.word	0x20008680

0800db78 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d016      	beq.n	800dbbe <ip4_input_accept+0x46>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	3304      	adds	r3, #4
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d011      	beq.n	800dbbe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800db9a:	4b0b      	ldr	r3, [pc, #44]	; (800dbc8 <ip4_input_accept+0x50>)
 800db9c:	695a      	ldr	r2, [r3, #20]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	3304      	adds	r3, #4
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d008      	beq.n	800dbba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dba8:	4b07      	ldr	r3, [pc, #28]	; (800dbc8 <ip4_input_accept+0x50>)
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	6879      	ldr	r1, [r7, #4]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f000 fa08 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 800dbb4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d001      	beq.n	800dbbe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e000      	b.n	800dbc0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dbbe:	2300      	movs	r3, #0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	20005118 	.word	0x20005118

0800dbcc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	091b      	lsrs	r3, r3, #4
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b04      	cmp	r3, #4
 800dbe6:	d004      	beq.n	800dbf2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7f8 f88f 	bl	8005d0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	e107      	b.n	800de02 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	f003 030f 	and.w	r3, r3, #15
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	885b      	ldrh	r3, [r3, #2]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7f6 fceb 	bl	80045e4 <lwip_htons>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	891b      	ldrh	r3, [r3, #8]
 800dc16:	89ba      	ldrh	r2, [r7, #12]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d204      	bcs.n	800dc26 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dc1c:	89bb      	ldrh	r3, [r7, #12]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7f7 feed 	bl	8005a00 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	895b      	ldrh	r3, [r3, #10]
 800dc2a:	89fa      	ldrh	r2, [r7, #14]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d807      	bhi.n	800dc40 <ip4_input+0x74>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	891b      	ldrh	r3, [r3, #8]
 800dc34:	89ba      	ldrh	r2, [r7, #12]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d802      	bhi.n	800dc40 <ip4_input+0x74>
 800dc3a:	89fb      	ldrh	r3, [r7, #14]
 800dc3c:	2b13      	cmp	r3, #19
 800dc3e:	d804      	bhi.n	800dc4a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f7f8 f863 	bl	8005d0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dc46:	2300      	movs	r3, #0
 800dc48:	e0db      	b.n	800de02 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	691b      	ldr	r3, [r3, #16]
 800dc4e:	4a6f      	ldr	r2, [pc, #444]	; (800de0c <ip4_input+0x240>)
 800dc50:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	4a6d      	ldr	r2, [pc, #436]	; (800de0c <ip4_input+0x240>)
 800dc58:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc5a:	4b6c      	ldr	r3, [pc, #432]	; (800de0c <ip4_input+0x240>)
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc62:	2be0      	cmp	r3, #224	; 0xe0
 800dc64:	d112      	bne.n	800dc8c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc6c:	f003 0301 	and.w	r3, r3, #1
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d007      	beq.n	800dc86 <ip4_input+0xba>
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	3304      	adds	r3, #4
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <ip4_input+0xba>
      netif = inp;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	613b      	str	r3, [r7, #16]
 800dc84:	e02a      	b.n	800dcdc <ip4_input+0x110>
    } else {
      netif = NULL;
 800dc86:	2300      	movs	r3, #0
 800dc88:	613b      	str	r3, [r7, #16]
 800dc8a:	e027      	b.n	800dcdc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dc8c:	6838      	ldr	r0, [r7, #0]
 800dc8e:	f7ff ff73 	bl	800db78 <ip4_input_accept>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d002      	beq.n	800dc9e <ip4_input+0xd2>
      netif = inp;
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	613b      	str	r3, [r7, #16]
 800dc9c:	e01e      	b.n	800dcdc <ip4_input+0x110>
    } else {
      netif = NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800dca2:	4b5a      	ldr	r3, [pc, #360]	; (800de0c <ip4_input+0x240>)
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	2b7f      	cmp	r3, #127	; 0x7f
 800dcaa:	d017      	beq.n	800dcdc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800dcac:	4b58      	ldr	r3, [pc, #352]	; (800de10 <ip4_input+0x244>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	613b      	str	r3, [r7, #16]
 800dcb2:	e00e      	b.n	800dcd2 <ip4_input+0x106>
          if (netif == inp) {
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d006      	beq.n	800dcca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dcbc:	6938      	ldr	r0, [r7, #16]
 800dcbe:	f7ff ff5b 	bl	800db78 <ip4_input_accept>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d108      	bne.n	800dcda <ip4_input+0x10e>
 800dcc8:	e000      	b.n	800dccc <ip4_input+0x100>
            continue;
 800dcca:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	613b      	str	r3, [r7, #16]
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d1ed      	bne.n	800dcb4 <ip4_input+0xe8>
 800dcd8:	e000      	b.n	800dcdc <ip4_input+0x110>
            break;
 800dcda:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dcdc:	4b4b      	ldr	r3, [pc, #300]	; (800de0c <ip4_input+0x240>)
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	6839      	ldr	r1, [r7, #0]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 f96e 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d105      	bne.n	800dcfa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dcee:	4b47      	ldr	r3, [pc, #284]	; (800de0c <ip4_input+0x240>)
 800dcf0:	691b      	ldr	r3, [r3, #16]
 800dcf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dcf6:	2be0      	cmp	r3, #224	; 0xe0
 800dcf8:	d104      	bne.n	800dd04 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7f8 f806 	bl	8005d0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dd00:	2300      	movs	r3, #0
 800dd02:	e07e      	b.n	800de02 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d104      	bne.n	800dd14 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7f7 fffe 	bl	8005d0c <pbuf_free>
    return ERR_OK;
 800dd10:	2300      	movs	r3, #0
 800dd12:	e076      	b.n	800de02 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	88db      	ldrh	r3, [r3, #6]
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dd20:	4013      	ands	r3, r2
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00b      	beq.n	800dd3e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fc92 	bl	800e650 <ip4_reass>
 800dd2c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <ip4_input+0x16c>
      return ERR_OK;
 800dd34:	2300      	movs	r3, #0
 800dd36:	e064      	b.n	800de02 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dd3e:	4a33      	ldr	r2, [pc, #204]	; (800de0c <ip4_input+0x240>)
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dd44:	4a31      	ldr	r2, [pc, #196]	; (800de0c <ip4_input+0x240>)
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dd4a:	4a30      	ldr	r2, [pc, #192]	; (800de0c <ip4_input+0x240>)
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	f003 030f 	and.w	r3, r3, #15
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	4b2a      	ldr	r3, [pc, #168]	; (800de0c <ip4_input+0x240>)
 800dd62:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dd64:	89fb      	ldrh	r3, [r7, #14]
 800dd66:	4619      	mov	r1, r3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7f7 ff49 	bl	8005c00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	7a5b      	ldrb	r3, [r3, #9]
 800dd72:	2b11      	cmp	r3, #17
 800dd74:	d006      	beq.n	800dd84 <ip4_input+0x1b8>
 800dd76:	2b11      	cmp	r3, #17
 800dd78:	dc13      	bgt.n	800dda2 <ip4_input+0x1d6>
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d00c      	beq.n	800dd98 <ip4_input+0x1cc>
 800dd7e:	2b06      	cmp	r3, #6
 800dd80:	d005      	beq.n	800dd8e <ip4_input+0x1c2>
 800dd82:	e00e      	b.n	800dda2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7fe fc68 	bl	800c65c <udp_input>
        break;
 800dd8c:	e026      	b.n	800dddc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7fa f889 	bl	8007ea8 <tcp_input>
        break;
 800dd96:	e021      	b.n	800dddc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff fcee 	bl	800d77c <icmp_input>
        break;
 800dda0:	e01c      	b.n	800dddc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dda2:	4b1a      	ldr	r3, [pc, #104]	; (800de0c <ip4_input+0x240>)
 800dda4:	695b      	ldr	r3, [r3, #20]
 800dda6:	6939      	ldr	r1, [r7, #16]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 f90b 	bl	800dfc4 <ip4_addr_isbroadcast_u32>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10f      	bne.n	800ddd4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ddb4:	4b15      	ldr	r3, [pc, #84]	; (800de0c <ip4_input+0x240>)
 800ddb6:	695b      	ldr	r3, [r3, #20]
 800ddb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ddbc:	2be0      	cmp	r3, #224	; 0xe0
 800ddbe:	d009      	beq.n	800ddd4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ddc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7f7 ff8d 	bl	8005ce6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ddcc:	2102      	movs	r1, #2
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7ff fdd8 	bl	800d984 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7f7 ff99 	bl	8005d0c <pbuf_free>
        break;
 800ddda:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dddc:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <ip4_input+0x240>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dde2:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <ip4_input+0x240>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dde8:	4b08      	ldr	r3, [pc, #32]	; (800de0c <ip4_input+0x240>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ddee:	4b07      	ldr	r3, [pc, #28]	; (800de0c <ip4_input+0x240>)
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ddf4:	4b05      	ldr	r3, [pc, #20]	; (800de0c <ip4_input+0x240>)
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ddfa:	4b04      	ldr	r3, [pc, #16]	; (800de0c <ip4_input+0x240>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3718      	adds	r7, #24
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	20005118 	.word	0x20005118
 800de10:	2000867c 	.word	0x2000867c

0800de14 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b08a      	sub	sp, #40	; 0x28
 800de18:	af04      	add	r7, sp, #16
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
 800de20:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d009      	beq.n	800de40 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d003      	beq.n	800de3a <ip4_output_if+0x26>
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d102      	bne.n	800de40 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800de3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3c:	3304      	adds	r3, #4
 800de3e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800de40:	78fa      	ldrb	r2, [r7, #3]
 800de42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de44:	9302      	str	r3, [sp, #8]
 800de46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de4a:	9301      	str	r3, [sp, #4]
 800de4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	4613      	mov	r3, r2
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	6979      	ldr	r1, [r7, #20]
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	f000 f805 	bl	800de68 <ip4_output_if_src>
 800de5e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800de60:	4618      	mov	r0, r3
 800de62:	3718      	adds	r7, #24
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	7b9b      	ldrb	r3, [r3, #14]
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d006      	beq.n	800de8c <ip4_output_if_src+0x24>
 800de7e:	4b4b      	ldr	r3, [pc, #300]	; (800dfac <ip4_output_if_src+0x144>)
 800de80:	f44f 7255 	mov.w	r2, #852	; 0x354
 800de84:	494a      	ldr	r1, [pc, #296]	; (800dfb0 <ip4_output_if_src+0x148>)
 800de86:	484b      	ldr	r0, [pc, #300]	; (800dfb4 <ip4_output_if_src+0x14c>)
 800de88:	f001 f83c 	bl	800ef04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d060      	beq.n	800df54 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800de92:	2314      	movs	r3, #20
 800de94:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800de96:	2114      	movs	r1, #20
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7f7 fea1 	bl	8005be0 <pbuf_add_header>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dea4:	f06f 0301 	mvn.w	r3, #1
 800dea8:	e07c      	b.n	800dfa4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	895b      	ldrh	r3, [r3, #10]
 800deb4:	2b13      	cmp	r3, #19
 800deb6:	d806      	bhi.n	800dec6 <ip4_output_if_src+0x5e>
 800deb8:	4b3c      	ldr	r3, [pc, #240]	; (800dfac <ip4_output_if_src+0x144>)
 800deba:	f44f 7262 	mov.w	r2, #904	; 0x388
 800debe:	493e      	ldr	r1, [pc, #248]	; (800dfb8 <ip4_output_if_src+0x150>)
 800dec0:	483c      	ldr	r0, [pc, #240]	; (800dfb4 <ip4_output_if_src+0x14c>)
 800dec2:	f001 f81f 	bl	800ef04 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	78fa      	ldrb	r2, [r7, #3]
 800deca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ded2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dedc:	8b7b      	ldrh	r3, [r7, #26]
 800dede:	089b      	lsrs	r3, r3, #2
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800def4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	4618      	mov	r0, r3
 800defc:	f7f6 fb72 	bl	80045e4 <lwip_htons>
 800df00:	4603      	mov	r3, r0
 800df02:	461a      	mov	r2, r3
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	2200      	movs	r2, #0
 800df0c:	719a      	strb	r2, [r3, #6]
 800df0e:	2200      	movs	r2, #0
 800df10:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800df12:	4b2a      	ldr	r3, [pc, #168]	; (800dfbc <ip4_output_if_src+0x154>)
 800df14:	881b      	ldrh	r3, [r3, #0]
 800df16:	4618      	mov	r0, r3
 800df18:	f7f6 fb64 	bl	80045e4 <lwip_htons>
 800df1c:	4603      	mov	r3, r0
 800df1e:	461a      	mov	r2, r3
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800df24:	4b25      	ldr	r3, [pc, #148]	; (800dfbc <ip4_output_if_src+0x154>)
 800df26:	881b      	ldrh	r3, [r3, #0]
 800df28:	3301      	adds	r3, #1
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	4b23      	ldr	r3, [pc, #140]	; (800dfbc <ip4_output_if_src+0x154>)
 800df2e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d104      	bne.n	800df40 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800df36:	4b22      	ldr	r3, [pc, #136]	; (800dfc0 <ip4_output_if_src+0x158>)
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	60da      	str	r2, [r3, #12]
 800df3e:	e003      	b.n	800df48 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	2200      	movs	r2, #0
 800df4c:	729a      	strb	r2, [r3, #10]
 800df4e:	2200      	movs	r2, #0
 800df50:	72da      	strb	r2, [r3, #11]
 800df52:	e00f      	b.n	800df74 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	895b      	ldrh	r3, [r3, #10]
 800df58:	2b13      	cmp	r3, #19
 800df5a:	d802      	bhi.n	800df62 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800df5c:	f06f 0301 	mvn.w	r3, #1
 800df60:	e020      	b.n	800dfa4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800df6e:	f107 0314 	add.w	r3, r7, #20
 800df72:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800df74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00c      	beq.n	800df96 <ip4_output_if_src+0x12e>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	891a      	ldrh	r2, [r3, #8]
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df84:	429a      	cmp	r2, r3
 800df86:	d906      	bls.n	800df96 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f000 fd53 	bl	800ea38 <ip4_frag>
 800df92:	4603      	mov	r3, r0
 800df94:	e006      	b.n	800dfa4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df98:	695b      	ldr	r3, [r3, #20]
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	68f9      	ldr	r1, [r7, #12]
 800df9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfa0:	4798      	blx	r3
 800dfa2:	4603      	mov	r3, r0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3720      	adds	r7, #32
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	080128ac 	.word	0x080128ac
 800dfb0:	080128e0 	.word	0x080128e0
 800dfb4:	080128ec 	.word	0x080128ec
 800dfb8:	08012914 	.word	0x08012914
 800dfbc:	200087da 	.word	0x200087da
 800dfc0:	080139ac 	.word	0x080139ac

0800dfc4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd8:	d002      	beq.n	800dfe0 <ip4_addr_isbroadcast_u32+0x1c>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d101      	bne.n	800dfe4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e02a      	b.n	800e03a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	e021      	b.n	800e03a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	3304      	adds	r3, #4
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d101      	bne.n	800e006 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e002:	2300      	movs	r3, #0
 800e004:	e019      	b.n	800e03a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	3304      	adds	r3, #4
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	405a      	eors	r2, r3
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	3308      	adds	r3, #8
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4013      	ands	r3, r2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10d      	bne.n	800e038 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	3308      	adds	r3, #8
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	43da      	mvns	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	3308      	adds	r3, #8
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e030:	429a      	cmp	r2, r3
 800e032:	d101      	bne.n	800e038 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e034:	2301      	movs	r3, #1
 800e036:	e000      	b.n	800e03a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e038:	2300      	movs	r3, #0
  }
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
	...

0800e048 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e052:	4b12      	ldr	r3, [pc, #72]	; (800e09c <ip_reass_tmr+0x54>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e058:	e018      	b.n	800e08c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	7fdb      	ldrb	r3, [r3, #31]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00b      	beq.n	800e07a <ip_reass_tmr+0x32>
      r->timer--;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	7fdb      	ldrb	r3, [r3, #31]
 800e066:	3b01      	subs	r3, #1
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	e008      	b.n	800e08c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e084:	68b9      	ldr	r1, [r7, #8]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f80a 	bl	800e0a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1e3      	bne.n	800e05a <ip_reass_tmr+0x12>
    }
  }
}
 800e092:	bf00      	nop
 800e094:	bf00      	nop
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	200087dc 	.word	0x200087dc

0800e0a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b088      	sub	sp, #32
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e0ae:	683a      	ldr	r2, [r7, #0]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d105      	bne.n	800e0c2 <ip_reass_free_complete_datagram+0x22>
 800e0b6:	4b45      	ldr	r3, [pc, #276]	; (800e1cc <ip_reass_free_complete_datagram+0x12c>)
 800e0b8:	22ab      	movs	r2, #171	; 0xab
 800e0ba:	4945      	ldr	r1, [pc, #276]	; (800e1d0 <ip_reass_free_complete_datagram+0x130>)
 800e0bc:	4845      	ldr	r0, [pc, #276]	; (800e1d4 <ip_reass_free_complete_datagram+0x134>)
 800e0be:	f000 ff21 	bl	800ef04 <iprintf>
  if (prev != NULL) {
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00a      	beq.n	800e0de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d005      	beq.n	800e0de <ip_reass_free_complete_datagram+0x3e>
 800e0d2:	4b3e      	ldr	r3, [pc, #248]	; (800e1cc <ip_reass_free_complete_datagram+0x12c>)
 800e0d4:	22ad      	movs	r2, #173	; 0xad
 800e0d6:	4940      	ldr	r1, [pc, #256]	; (800e1d8 <ip_reass_free_complete_datagram+0x138>)
 800e0d8:	483e      	ldr	r0, [pc, #248]	; (800e1d4 <ip_reass_free_complete_datagram+0x134>)
 800e0da:	f000 ff13 	bl	800ef04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	889b      	ldrh	r3, [r3, #4]
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d12a      	bne.n	800e146 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	6858      	ldr	r0, [r3, #4]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	3308      	adds	r3, #8
 800e106:	2214      	movs	r2, #20
 800e108:	4619      	mov	r1, r3
 800e10a:	f000 fee5 	bl	800eed8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e10e:	2101      	movs	r1, #1
 800e110:	69b8      	ldr	r0, [r7, #24]
 800e112:	f7ff fc47 	bl	800d9a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e116:	69b8      	ldr	r0, [r7, #24]
 800e118:	f7f7 fe80 	bl	8005e1c <pbuf_clen>
 800e11c:	4603      	mov	r3, r0
 800e11e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e120:	8bfa      	ldrh	r2, [r7, #30]
 800e122:	8a7b      	ldrh	r3, [r7, #18]
 800e124:	4413      	add	r3, r2
 800e126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e12a:	db05      	blt.n	800e138 <ip_reass_free_complete_datagram+0x98>
 800e12c:	4b27      	ldr	r3, [pc, #156]	; (800e1cc <ip_reass_free_complete_datagram+0x12c>)
 800e12e:	22bc      	movs	r2, #188	; 0xbc
 800e130:	492a      	ldr	r1, [pc, #168]	; (800e1dc <ip_reass_free_complete_datagram+0x13c>)
 800e132:	4828      	ldr	r0, [pc, #160]	; (800e1d4 <ip_reass_free_complete_datagram+0x134>)
 800e134:	f000 fee6 	bl	800ef04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e138:	8bfa      	ldrh	r2, [r7, #30]
 800e13a:	8a7b      	ldrh	r3, [r7, #18]
 800e13c:	4413      	add	r3, r2
 800e13e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e140:	69b8      	ldr	r0, [r7, #24]
 800e142:	f7f7 fde3 	bl	8005d0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e14c:	e01f      	b.n	800e18e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7f7 fe5c 	bl	8005e1c <pbuf_clen>
 800e164:	4603      	mov	r3, r0
 800e166:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e168:	8bfa      	ldrh	r2, [r7, #30]
 800e16a:	8a7b      	ldrh	r3, [r7, #18]
 800e16c:	4413      	add	r3, r2
 800e16e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e172:	db05      	blt.n	800e180 <ip_reass_free_complete_datagram+0xe0>
 800e174:	4b15      	ldr	r3, [pc, #84]	; (800e1cc <ip_reass_free_complete_datagram+0x12c>)
 800e176:	22cc      	movs	r2, #204	; 0xcc
 800e178:	4918      	ldr	r1, [pc, #96]	; (800e1dc <ip_reass_free_complete_datagram+0x13c>)
 800e17a:	4816      	ldr	r0, [pc, #88]	; (800e1d4 <ip_reass_free_complete_datagram+0x134>)
 800e17c:	f000 fec2 	bl	800ef04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e180:	8bfa      	ldrh	r2, [r7, #30]
 800e182:	8a7b      	ldrh	r3, [r7, #18]
 800e184:	4413      	add	r3, r2
 800e186:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f7f7 fdbf 	bl	8005d0c <pbuf_free>
  while (p != NULL) {
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1dc      	bne.n	800e14e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e194:	6839      	ldr	r1, [r7, #0]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 f8c2 	bl	800e320 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e19c:	4b10      	ldr	r3, [pc, #64]	; (800e1e0 <ip_reass_free_complete_datagram+0x140>)
 800e19e:	881b      	ldrh	r3, [r3, #0]
 800e1a0:	8bfa      	ldrh	r2, [r7, #30]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d905      	bls.n	800e1b2 <ip_reass_free_complete_datagram+0x112>
 800e1a6:	4b09      	ldr	r3, [pc, #36]	; (800e1cc <ip_reass_free_complete_datagram+0x12c>)
 800e1a8:	22d2      	movs	r2, #210	; 0xd2
 800e1aa:	490e      	ldr	r1, [pc, #56]	; (800e1e4 <ip_reass_free_complete_datagram+0x144>)
 800e1ac:	4809      	ldr	r0, [pc, #36]	; (800e1d4 <ip_reass_free_complete_datagram+0x134>)
 800e1ae:	f000 fea9 	bl	800ef04 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e1b2:	4b0b      	ldr	r3, [pc, #44]	; (800e1e0 <ip_reass_free_complete_datagram+0x140>)
 800e1b4:	881a      	ldrh	r2, [r3, #0]
 800e1b6:	8bfb      	ldrh	r3, [r7, #30]
 800e1b8:	1ad3      	subs	r3, r2, r3
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	4b08      	ldr	r3, [pc, #32]	; (800e1e0 <ip_reass_free_complete_datagram+0x140>)
 800e1be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e1c0:	8bfb      	ldrh	r3, [r7, #30]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3720      	adds	r7, #32
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	08012944 	.word	0x08012944
 800e1d0:	08012980 	.word	0x08012980
 800e1d4:	0801298c 	.word	0x0801298c
 800e1d8:	080129b4 	.word	0x080129b4
 800e1dc:	080129c8 	.word	0x080129c8
 800e1e0:	200087e0 	.word	0x200087e0
 800e1e4:	080129e8 	.word	0x080129e8

0800e1e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08a      	sub	sp, #40	; 0x28
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e1fe:	2300      	movs	r3, #0
 800e200:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e202:	2300      	movs	r3, #0
 800e204:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e206:	4b28      	ldr	r3, [pc, #160]	; (800e2a8 <ip_reass_remove_oldest_datagram+0xc0>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e20c:	e030      	b.n	800e270 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e210:	695a      	ldr	r2, [r3, #20]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	429a      	cmp	r2, r3
 800e218:	d10c      	bne.n	800e234 <ip_reass_remove_oldest_datagram+0x4c>
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	699a      	ldr	r2, [r3, #24]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	691b      	ldr	r3, [r3, #16]
 800e222:	429a      	cmp	r2, r3
 800e224:	d106      	bne.n	800e234 <ip_reass_remove_oldest_datagram+0x4c>
 800e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e228:	899a      	ldrh	r2, [r3, #12]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	889b      	ldrh	r3, [r3, #4]
 800e22e:	b29b      	uxth	r3, r3
 800e230:	429a      	cmp	r2, r3
 800e232:	d014      	beq.n	800e25e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	3301      	adds	r3, #1
 800e238:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d104      	bne.n	800e24a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e242:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	61bb      	str	r3, [r7, #24]
 800e248:	e009      	b.n	800e25e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	7fda      	ldrb	r2, [r3, #31]
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	7fdb      	ldrb	r3, [r3, #31]
 800e252:	429a      	cmp	r2, r3
 800e254:	d803      	bhi.n	800e25e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d001      	beq.n	800e26a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e268:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1cb      	bne.n	800e20e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d008      	beq.n	800e28e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e27c:	69b9      	ldr	r1, [r7, #24]
 800e27e:	6a38      	ldr	r0, [r7, #32]
 800e280:	f7ff ff0e 	bl	800e0a0 <ip_reass_free_complete_datagram>
 800e284:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e286:	697a      	ldr	r2, [r7, #20]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	4413      	add	r3, r2
 800e28c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	429a      	cmp	r2, r3
 800e294:	da02      	bge.n	800e29c <ip_reass_remove_oldest_datagram+0xb4>
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	dcac      	bgt.n	800e1f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e29c:	697b      	ldr	r3, [r7, #20]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3728      	adds	r7, #40	; 0x28
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	200087dc 	.word	0x200087dc

0800e2ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e2b6:	2004      	movs	r0, #4
 800e2b8:	f7f6 fe42 	bl	8004f40 <memp_malloc>
 800e2bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d110      	bne.n	800e2e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e2c4:	6839      	ldr	r1, [r7, #0]
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff ff8e 	bl	800e1e8 <ip_reass_remove_oldest_datagram>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	dc03      	bgt.n	800e2dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e2d4:	2004      	movs	r0, #4
 800e2d6:	f7f6 fe33 	bl	8004f40 <memp_malloc>
 800e2da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	e016      	b.n	800e314 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e2e6:	2220      	movs	r2, #32
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f000 fe02 	bl	800eef4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	220f      	movs	r2, #15
 800e2f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e2f6:	4b09      	ldr	r3, [pc, #36]	; (800e31c <ip_reass_enqueue_new_datagram+0x70>)
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e2fe:	4a07      	ldr	r2, [pc, #28]	; (800e31c <ip_reass_enqueue_new_datagram+0x70>)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	3308      	adds	r3, #8
 800e308:	2214      	movs	r2, #20
 800e30a:	6879      	ldr	r1, [r7, #4]
 800e30c:	4618      	mov	r0, r3
 800e30e:	f000 fde3 	bl	800eed8 <memcpy>
  return ipr;
 800e312:	68fb      	ldr	r3, [r7, #12]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	200087dc 	.word	0x200087dc

0800e320 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e32a:	4b10      	ldr	r3, [pc, #64]	; (800e36c <ip_reass_dequeue_datagram+0x4c>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	429a      	cmp	r2, r3
 800e332:	d104      	bne.n	800e33e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a0c      	ldr	r2, [pc, #48]	; (800e36c <ip_reass_dequeue_datagram+0x4c>)
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	e00d      	b.n	800e35a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d106      	bne.n	800e352 <ip_reass_dequeue_datagram+0x32>
 800e344:	4b0a      	ldr	r3, [pc, #40]	; (800e370 <ip_reass_dequeue_datagram+0x50>)
 800e346:	f240 1245 	movw	r2, #325	; 0x145
 800e34a:	490a      	ldr	r1, [pc, #40]	; (800e374 <ip_reass_dequeue_datagram+0x54>)
 800e34c:	480a      	ldr	r0, [pc, #40]	; (800e378 <ip_reass_dequeue_datagram+0x58>)
 800e34e:	f000 fdd9 	bl	800ef04 <iprintf>
    prev->next = ipr->next;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	2004      	movs	r0, #4
 800e35e:	f7f6 fe5f 	bl	8005020 <memp_free>
}
 800e362:	bf00      	nop
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	200087dc 	.word	0x200087dc
 800e370:	08012944 	.word	0x08012944
 800e374:	08012a0c 	.word	0x08012a0c
 800e378:	0801298c 	.word	0x0801298c

0800e37c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b08c      	sub	sp, #48	; 0x30
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e388:	2300      	movs	r3, #0
 800e38a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e38c:	2301      	movs	r3, #1
 800e38e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	885b      	ldrh	r3, [r3, #2]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7f6 f921 	bl	80045e4 <lwip_htons>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	f003 030f 	and.w	r3, r3, #15
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e3b4:	7e7b      	ldrb	r3, [r7, #25]
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	8b7a      	ldrh	r2, [r7, #26]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d202      	bcs.n	800e3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e3be:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c2:	e135      	b.n	800e630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e3c4:	7e7b      	ldrb	r3, [r7, #25]
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	8b7a      	ldrh	r2, [r7, #26]
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	88db      	ldrh	r3, [r3, #6]
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7f6 f905 	bl	80045e4 <lwip_htons>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	00db      	lsls	r3, r3, #3
 800e3e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	701a      	strb	r2, [r3, #0]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	705a      	strb	r2, [r3, #1]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	709a      	strb	r2, [r3, #2]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	8afa      	ldrh	r2, [r7, #22]
 800e402:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e404:	8afa      	ldrh	r2, [r7, #22]
 800e406:	8b7b      	ldrh	r3, [r7, #26]
 800e408:	4413      	add	r3, r2
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	88db      	ldrh	r3, [r3, #6]
 800e414:	b29b      	uxth	r3, r3
 800e416:	8afa      	ldrh	r2, [r7, #22]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d902      	bls.n	800e422 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e41c:	f04f 33ff 	mov.w	r3, #4294967295
 800e420:	e106      	b.n	800e630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	627b      	str	r3, [r7, #36]	; 0x24
 800e428:	e068      	b.n	800e4fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	889b      	ldrh	r3, [r3, #4]
 800e434:	b29a      	uxth	r2, r3
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	889b      	ldrh	r3, [r3, #4]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d235      	bcs.n	800e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e444:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d020      	beq.n	800e48e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44e:	889b      	ldrh	r3, [r3, #4]
 800e450:	b29a      	uxth	r2, r3
 800e452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e454:	88db      	ldrh	r3, [r3, #6]
 800e456:	b29b      	uxth	r3, r3
 800e458:	429a      	cmp	r2, r3
 800e45a:	d307      	bcc.n	800e46c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45e:	88db      	ldrh	r3, [r3, #6]
 800e460:	b29a      	uxth	r2, r3
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	889b      	ldrh	r3, [r3, #4]
 800e466:	b29b      	uxth	r3, r3
 800e468:	429a      	cmp	r2, r3
 800e46a:	d902      	bls.n	800e472 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e46c:	f04f 33ff 	mov.w	r3, #4294967295
 800e470:	e0de      	b.n	800e630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	88db      	ldrh	r3, [r3, #6]
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	889b      	ldrh	r3, [r3, #4]
 800e482:	b29b      	uxth	r3, r3
 800e484:	429a      	cmp	r2, r3
 800e486:	d03d      	beq.n	800e504 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e48c:	e03a      	b.n	800e504 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	88db      	ldrh	r3, [r3, #6]
 800e492:	b29a      	uxth	r2, r3
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	889b      	ldrh	r3, [r3, #4]
 800e498:	b29b      	uxth	r3, r3
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d902      	bls.n	800e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e49e:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a2:	e0c5      	b.n	800e630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	605a      	str	r2, [r3, #4]
      break;
 800e4aa:	e02b      	b.n	800e504 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ae:	889b      	ldrh	r3, [r3, #4]
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	889b      	ldrh	r3, [r3, #4]
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d102      	bne.n	800e4c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c0:	e0b6      	b.n	800e630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c4:	889b      	ldrh	r3, [r3, #4]
 800e4c6:	b29a      	uxth	r2, r3
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	88db      	ldrh	r3, [r3, #6]
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d202      	bcs.n	800e4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d6:	e0ab      	b.n	800e630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d009      	beq.n	800e4f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e0:	88db      	ldrh	r3, [r3, #6]
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	889b      	ldrh	r3, [r3, #4]
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d001      	beq.n	800e4f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d193      	bne.n	800e42a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e502:	e000      	b.n	800e506 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e504:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d12d      	bne.n	800e568 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d01c      	beq.n	800e54c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e514:	88db      	ldrh	r3, [r3, #6]
 800e516:	b29a      	uxth	r2, r3
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	889b      	ldrh	r3, [r3, #4]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	429a      	cmp	r2, r3
 800e520:	d906      	bls.n	800e530 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e522:	4b45      	ldr	r3, [pc, #276]	; (800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e524:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e528:	4944      	ldr	r1, [pc, #272]	; (800e63c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e52a:	4845      	ldr	r0, [pc, #276]	; (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e52c:	f000 fcea 	bl	800ef04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	88db      	ldrh	r3, [r3, #6]
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	889b      	ldrh	r3, [r3, #4]
 800e540:	b29b      	uxth	r3, r3
 800e542:	429a      	cmp	r2, r3
 800e544:	d010      	beq.n	800e568 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e546:	2300      	movs	r3, #0
 800e548:	623b      	str	r3, [r7, #32]
 800e54a:	e00d      	b.n	800e568 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d006      	beq.n	800e562 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e554:	4b38      	ldr	r3, [pc, #224]	; (800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e556:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e55a:	493a      	ldr	r1, [pc, #232]	; (800e644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e55c:	4838      	ldr	r0, [pc, #224]	; (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e55e:	f000 fcd1 	bl	800ef04 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	68ba      	ldr	r2, [r7, #8]
 800e566:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d105      	bne.n	800e57a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	7f9b      	ldrb	r3, [r3, #30]
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d059      	beq.n	800e62e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d04f      	beq.n	800e620 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d006      	beq.n	800e596 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	889b      	ldrh	r3, [r3, #4]
 800e590:	b29b      	uxth	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	623b      	str	r3, [r7, #32]
 800e59a:	e041      	b.n	800e620 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e5a6:	e012      	b.n	800e5ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b0:	88db      	ldrh	r3, [r3, #6]
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b6:	889b      	ldrh	r3, [r3, #4]
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d002      	beq.n	800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	623b      	str	r3, [r7, #32]
            break;
 800e5c2:	e007      	b.n	800e5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1e9      	bne.n	800e5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e5d4:	6a3b      	ldr	r3, [r7, #32]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d022      	beq.n	800e620 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d106      	bne.n	800e5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e5e2:	4b15      	ldr	r3, [pc, #84]	; (800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e5e4:	f240 12df 	movw	r2, #479	; 0x1df
 800e5e8:	4917      	ldr	r1, [pc, #92]	; (800e648 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e5ea:	4815      	ldr	r0, [pc, #84]	; (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e5ec:	f000 fc8a 	bl	800ef04 <iprintf>
          LWIP_ASSERT("sanity check",
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d106      	bne.n	800e60a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e5fc:	4b0e      	ldr	r3, [pc, #56]	; (800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e5fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e602:	4911      	ldr	r1, [pc, #68]	; (800e648 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e604:	480e      	ldr	r0, [pc, #56]	; (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e606:	f000 fc7d 	bl	800ef04 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d006      	beq.n	800e620 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e612:	4b09      	ldr	r3, [pc, #36]	; (800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e614:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e618:	490c      	ldr	r1, [pc, #48]	; (800e64c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e61a:	4809      	ldr	r0, [pc, #36]	; (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e61c:	f000 fc72 	bl	800ef04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	2b00      	cmp	r3, #0
 800e624:	bf14      	ite	ne
 800e626:	2301      	movne	r3, #1
 800e628:	2300      	moveq	r3, #0
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	e000      	b.n	800e630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3730      	adds	r7, #48	; 0x30
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	08012944 	.word	0x08012944
 800e63c:	08012a28 	.word	0x08012a28
 800e640:	0801298c 	.word	0x0801298c
 800e644:	08012a48 	.word	0x08012a48
 800e648:	08012a80 	.word	0x08012a80
 800e64c:	08012a90 	.word	0x08012a90

0800e650 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b08e      	sub	sp, #56	; 0x38
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	f003 030f 	and.w	r3, r3, #15
 800e666:	b2db      	uxtb	r3, r3
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b14      	cmp	r3, #20
 800e66e:	f040 8171 	bne.w	800e954 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	88db      	ldrh	r3, [r3, #6]
 800e676:	b29b      	uxth	r3, r3
 800e678:	4618      	mov	r0, r3
 800e67a:	f7f5 ffb3 	bl	80045e4 <lwip_htons>
 800e67e:	4603      	mov	r3, r0
 800e680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e684:	b29b      	uxth	r3, r3
 800e686:	00db      	lsls	r3, r3, #3
 800e688:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	885b      	ldrh	r3, [r3, #2]
 800e68e:	b29b      	uxth	r3, r3
 800e690:	4618      	mov	r0, r3
 800e692:	f7f5 ffa7 	bl	80045e4 <lwip_htons>
 800e696:	4603      	mov	r3, r0
 800e698:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	f003 030f 	and.w	r3, r3, #15
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e6aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	f0c0 8150 	bcc.w	800e958 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e6b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7f7 fba9 	bl	8005e1c <pbuf_clen>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e6ce:	4b8c      	ldr	r3, [pc, #560]	; (800e900 <ip4_reass+0x2b0>)
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	8c3b      	ldrh	r3, [r7, #32]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	2b0a      	cmp	r3, #10
 800e6da:	dd10      	ble.n	800e6fe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e6dc:	8c3b      	ldrh	r3, [r7, #32]
 800e6de:	4619      	mov	r1, r3
 800e6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6e2:	f7ff fd81 	bl	800e1e8 <ip_reass_remove_oldest_datagram>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f000 8137 	beq.w	800e95c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e6ee:	4b84      	ldr	r3, [pc, #528]	; (800e900 <ip4_reass+0x2b0>)
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	8c3b      	ldrh	r3, [r7, #32]
 800e6f6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e6f8:	2b0a      	cmp	r3, #10
 800e6fa:	f300 812f 	bgt.w	800e95c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e6fe:	4b81      	ldr	r3, [pc, #516]	; (800e904 <ip4_reass+0x2b4>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	633b      	str	r3, [r7, #48]	; 0x30
 800e704:	e015      	b.n	800e732 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e708:	695a      	ldr	r2, [r3, #20]
 800e70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d10c      	bne.n	800e72c <ip4_reass+0xdc>
 800e712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e714:	699a      	ldr	r2, [r3, #24]
 800e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d106      	bne.n	800e72c <ip4_reass+0xdc>
 800e71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e720:	899a      	ldrh	r2, [r3, #12]
 800e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e724:	889b      	ldrh	r3, [r3, #4]
 800e726:	b29b      	uxth	r3, r3
 800e728:	429a      	cmp	r2, r3
 800e72a:	d006      	beq.n	800e73a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	633b      	str	r3, [r7, #48]	; 0x30
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1e6      	bne.n	800e706 <ip4_reass+0xb6>
 800e738:	e000      	b.n	800e73c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e73a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d109      	bne.n	800e756 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e742:	8c3b      	ldrh	r3, [r7, #32]
 800e744:	4619      	mov	r1, r3
 800e746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e748:	f7ff fdb0 	bl	800e2ac <ip_reass_enqueue_new_datagram>
 800e74c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e750:	2b00      	cmp	r3, #0
 800e752:	d11c      	bne.n	800e78e <ip4_reass+0x13e>
      goto nullreturn;
 800e754:	e105      	b.n	800e962 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e758:	88db      	ldrh	r3, [r3, #6]
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f5 ff41 	bl	80045e4 <lwip_htons>
 800e762:	4603      	mov	r3, r0
 800e764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d110      	bne.n	800e78e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76e:	89db      	ldrh	r3, [r3, #14]
 800e770:	4618      	mov	r0, r3
 800e772:	f7f5 ff37 	bl	80045e4 <lwip_htons>
 800e776:	4603      	mov	r3, r0
 800e778:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d006      	beq.n	800e78e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e782:	3308      	adds	r3, #8
 800e784:	2214      	movs	r2, #20
 800e786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e788:	4618      	mov	r0, r3
 800e78a:	f000 fba5 	bl	800eed8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	88db      	ldrh	r3, [r3, #6]
 800e792:	b29b      	uxth	r3, r3
 800e794:	f003 0320 	and.w	r3, r3, #32
 800e798:	2b00      	cmp	r3, #0
 800e79a:	bf0c      	ite	eq
 800e79c:	2301      	moveq	r3, #1
 800e79e:	2300      	movne	r3, #0
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00e      	beq.n	800e7c8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e7aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ae:	4413      	add	r3, r2
 800e7b0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e7b2:	8b7a      	ldrh	r2, [r7, #26]
 800e7b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	f0c0 80a0 	bcc.w	800e8fc <ip4_reass+0x2ac>
 800e7bc:	8b7b      	ldrh	r3, [r7, #26]
 800e7be:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	f200 809a 	bhi.w	800e8fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e7c8:	69fa      	ldr	r2, [r7, #28]
 800e7ca:	6879      	ldr	r1, [r7, #4]
 800e7cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7ce:	f7ff fdd5 	bl	800e37c <ip_reass_chain_frag_into_datagram_and_validate>
 800e7d2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7da:	f000 809b 	beq.w	800e914 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e7de:	4b48      	ldr	r3, [pc, #288]	; (800e900 <ip4_reass+0x2b0>)
 800e7e0:	881a      	ldrh	r2, [r3, #0]
 800e7e2:	8c3b      	ldrh	r3, [r7, #32]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	4b45      	ldr	r3, [pc, #276]	; (800e900 <ip4_reass+0x2b0>)
 800e7ea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00d      	beq.n	800e80e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e7f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7f6:	4413      	add	r3, r2
 800e7f8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	8a7a      	ldrh	r2, [r7, #18]
 800e7fe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e802:	7f9b      	ldrb	r3, [r3, #30]
 800e804:	f043 0301 	orr.w	r3, r3, #1
 800e808:	b2da      	uxtb	r2, r3
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d171      	bne.n	800e8f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e816:	8b9b      	ldrh	r3, [r3, #28]
 800e818:	3314      	adds	r3, #20
 800e81a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	3308      	adds	r3, #8
 800e832:	2214      	movs	r2, #20
 800e834:	4619      	mov	r1, r3
 800e836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e838:	f000 fb4e 	bl	800eed8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e83c:	8a3b      	ldrh	r3, [r7, #16]
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f5 fed0 	bl	80045e4 <lwip_htons>
 800e844:	4603      	mov	r3, r0
 800e846:	461a      	mov	r2, r3
 800e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	2200      	movs	r2, #0
 800e850:	719a      	strb	r2, [r3, #6]
 800e852:	2200      	movs	r2, #0
 800e854:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e858:	2200      	movs	r2, #0
 800e85a:	729a      	strb	r2, [r3, #10]
 800e85c:	2200      	movs	r2, #0
 800e85e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e866:	e00d      	b.n	800e884 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e86e:	2114      	movs	r1, #20
 800e870:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e872:	f7f7 f9c5 	bl	8005c00 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e876:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7f7 fb09 	bl	8005e90 <pbuf_cat>
      r = iprh->next_pbuf;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1ee      	bne.n	800e868 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e88a:	4b1e      	ldr	r3, [pc, #120]	; (800e904 <ip4_reass+0x2b4>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e890:	429a      	cmp	r2, r3
 800e892:	d102      	bne.n	800e89a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e894:	2300      	movs	r3, #0
 800e896:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e898:	e010      	b.n	800e8bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e89a:	4b1a      	ldr	r3, [pc, #104]	; (800e904 <ip4_reass+0x2b4>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8a0:	e007      	b.n	800e8b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d006      	beq.n	800e8ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1f4      	bne.n	800e8a2 <ip4_reass+0x252>
 800e8b8:	e000      	b.n	800e8bc <ip4_reass+0x26c>
          break;
 800e8ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e8bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8c0:	f7ff fd2e 	bl	800e320 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7f7 faa9 	bl	8005e1c <pbuf_clen>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e8ce:	4b0c      	ldr	r3, [pc, #48]	; (800e900 <ip4_reass+0x2b0>)
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	8c3a      	ldrh	r2, [r7, #32]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d906      	bls.n	800e8e6 <ip4_reass+0x296>
 800e8d8:	4b0b      	ldr	r3, [pc, #44]	; (800e908 <ip4_reass+0x2b8>)
 800e8da:	f240 229b 	movw	r2, #667	; 0x29b
 800e8de:	490b      	ldr	r1, [pc, #44]	; (800e90c <ip4_reass+0x2bc>)
 800e8e0:	480b      	ldr	r0, [pc, #44]	; (800e910 <ip4_reass+0x2c0>)
 800e8e2:	f000 fb0f 	bl	800ef04 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e8e6:	4b06      	ldr	r3, [pc, #24]	; (800e900 <ip4_reass+0x2b0>)
 800e8e8:	881a      	ldrh	r2, [r3, #0]
 800e8ea:	8c3b      	ldrh	r3, [r7, #32]
 800e8ec:	1ad3      	subs	r3, r2, r3
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	4b03      	ldr	r3, [pc, #12]	; (800e900 <ip4_reass+0x2b0>)
 800e8f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	e038      	b.n	800e96a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	e036      	b.n	800e96a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e8fc:	bf00      	nop
 800e8fe:	e00a      	b.n	800e916 <ip4_reass+0x2c6>
 800e900:	200087e0 	.word	0x200087e0
 800e904:	200087dc 	.word	0x200087dc
 800e908:	08012944 	.word	0x08012944
 800e90c:	08012ab4 	.word	0x08012ab4
 800e910:	0801298c 	.word	0x0801298c
    goto nullreturn_ipr;
 800e914:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d106      	bne.n	800e92a <ip4_reass+0x2da>
 800e91c:	4b15      	ldr	r3, [pc, #84]	; (800e974 <ip4_reass+0x324>)
 800e91e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e922:	4915      	ldr	r1, [pc, #84]	; (800e978 <ip4_reass+0x328>)
 800e924:	4815      	ldr	r0, [pc, #84]	; (800e97c <ip4_reass+0x32c>)
 800e926:	f000 faed 	bl	800ef04 <iprintf>
  if (ipr->p == NULL) {
 800e92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d116      	bne.n	800e960 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e932:	4b13      	ldr	r3, [pc, #76]	; (800e980 <ip4_reass+0x330>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e938:	429a      	cmp	r2, r3
 800e93a:	d006      	beq.n	800e94a <ip4_reass+0x2fa>
 800e93c:	4b0d      	ldr	r3, [pc, #52]	; (800e974 <ip4_reass+0x324>)
 800e93e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e942:	4910      	ldr	r1, [pc, #64]	; (800e984 <ip4_reass+0x334>)
 800e944:	480d      	ldr	r0, [pc, #52]	; (800e97c <ip4_reass+0x32c>)
 800e946:	f000 fadd 	bl	800ef04 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e94a:	2100      	movs	r1, #0
 800e94c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e94e:	f7ff fce7 	bl	800e320 <ip_reass_dequeue_datagram>
 800e952:	e006      	b.n	800e962 <ip4_reass+0x312>
    goto nullreturn;
 800e954:	bf00      	nop
 800e956:	e004      	b.n	800e962 <ip4_reass+0x312>
    goto nullreturn;
 800e958:	bf00      	nop
 800e95a:	e002      	b.n	800e962 <ip4_reass+0x312>
      goto nullreturn;
 800e95c:	bf00      	nop
 800e95e:	e000      	b.n	800e962 <ip4_reass+0x312>
  }

nullreturn:
 800e960:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7f7 f9d2 	bl	8005d0c <pbuf_free>
  return NULL;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3738      	adds	r7, #56	; 0x38
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	08012944 	.word	0x08012944
 800e978:	08012ad0 	.word	0x08012ad0
 800e97c:	0801298c 	.word	0x0801298c
 800e980:	200087dc 	.word	0x200087dc
 800e984:	08012adc 	.word	0x08012adc

0800e988 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e98c:	2005      	movs	r0, #5
 800e98e:	f7f6 fad7 	bl	8004f40 <memp_malloc>
 800e992:	4603      	mov	r3, r0
}
 800e994:	4618      	mov	r0, r3
 800e996:	bd80      	pop	{r7, pc}

0800e998 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e9a6:	4b07      	ldr	r3, [pc, #28]	; (800e9c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e9a8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e9ac:	4906      	ldr	r1, [pc, #24]	; (800e9c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e9ae:	4807      	ldr	r0, [pc, #28]	; (800e9cc <ip_frag_free_pbuf_custom_ref+0x34>)
 800e9b0:	f000 faa8 	bl	800ef04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e9b4:	6879      	ldr	r1, [r7, #4]
 800e9b6:	2005      	movs	r0, #5
 800e9b8:	f7f6 fb32 	bl	8005020 <memp_free>
}
 800e9bc:	bf00      	nop
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	08012944 	.word	0x08012944
 800e9c8:	08012afc 	.word	0x08012afc
 800e9cc:	0801298c 	.word	0x0801298c

0800e9d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d106      	bne.n	800e9f0 <ipfrag_free_pbuf_custom+0x20>
 800e9e2:	4b11      	ldr	r3, [pc, #68]	; (800ea28 <ipfrag_free_pbuf_custom+0x58>)
 800e9e4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e9e8:	4910      	ldr	r1, [pc, #64]	; (800ea2c <ipfrag_free_pbuf_custom+0x5c>)
 800e9ea:	4811      	ldr	r0, [pc, #68]	; (800ea30 <ipfrag_free_pbuf_custom+0x60>)
 800e9ec:	f000 fa8a 	bl	800ef04 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d006      	beq.n	800ea06 <ipfrag_free_pbuf_custom+0x36>
 800e9f8:	4b0b      	ldr	r3, [pc, #44]	; (800ea28 <ipfrag_free_pbuf_custom+0x58>)
 800e9fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e9fe:	490d      	ldr	r1, [pc, #52]	; (800ea34 <ipfrag_free_pbuf_custom+0x64>)
 800ea00:	480b      	ldr	r0, [pc, #44]	; (800ea30 <ipfrag_free_pbuf_custom+0x60>)
 800ea02:	f000 fa7f 	bl	800ef04 <iprintf>
  if (pcr->original != NULL) {
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	695b      	ldr	r3, [r3, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d004      	beq.n	800ea18 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	695b      	ldr	r3, [r3, #20]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7f7 f97a 	bl	8005d0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f7ff ffbd 	bl	800e998 <ip_frag_free_pbuf_custom_ref>
}
 800ea1e:	bf00      	nop
 800ea20:	3710      	adds	r7, #16
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	08012944 	.word	0x08012944
 800ea2c:	08012b08 	.word	0x08012b08
 800ea30:	0801298c 	.word	0x0801298c
 800ea34:	08012b14 	.word	0x08012b14

0800ea38 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b094      	sub	sp, #80	; 0x50
 800ea3c:	af02      	add	r7, sp, #8
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ea44:	2300      	movs	r3, #0
 800ea46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea4e:	3b14      	subs	r3, #20
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	da00      	bge.n	800ea56 <ip4_frag+0x1e>
 800ea54:	3307      	adds	r3, #7
 800ea56:	10db      	asrs	r3, r3, #3
 800ea58:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ea5a:	2314      	movs	r3, #20
 800ea5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ea64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea66:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	f003 030f 	and.w	r3, r3, #15
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	2b14      	cmp	r3, #20
 800ea78:	d002      	beq.n	800ea80 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ea7a:	f06f 0305 	mvn.w	r3, #5
 800ea7e:	e110      	b.n	800eca2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	895b      	ldrh	r3, [r3, #10]
 800ea84:	2b13      	cmp	r3, #19
 800ea86:	d809      	bhi.n	800ea9c <ip4_frag+0x64>
 800ea88:	4b88      	ldr	r3, [pc, #544]	; (800ecac <ip4_frag+0x274>)
 800ea8a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ea8e:	4988      	ldr	r1, [pc, #544]	; (800ecb0 <ip4_frag+0x278>)
 800ea90:	4888      	ldr	r0, [pc, #544]	; (800ecb4 <ip4_frag+0x27c>)
 800ea92:	f000 fa37 	bl	800ef04 <iprintf>
 800ea96:	f06f 0305 	mvn.w	r3, #5
 800ea9a:	e102      	b.n	800eca2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9e:	88db      	ldrh	r3, [r3, #6]
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7f5 fd9e 	bl	80045e4 <lwip_htons>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800eaac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eaae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eab2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800eab6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eabc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	891b      	ldrh	r3, [r3, #8]
 800eac2:	3b14      	subs	r3, #20
 800eac4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800eac8:	e0e1      	b.n	800ec8e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800eaca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eacc:	00db      	lsls	r3, r3, #3
 800eace:	b29b      	uxth	r3, r3
 800ead0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ead4:	4293      	cmp	r3, r2
 800ead6:	bf28      	it	cs
 800ead8:	4613      	movcs	r3, r2
 800eada:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800eadc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eae0:	2114      	movs	r1, #20
 800eae2:	200e      	movs	r0, #14
 800eae4:	f7f6 fe2e 	bl	8005744 <pbuf_alloc>
 800eae8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 80d5 	beq.w	800ec9c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	895b      	ldrh	r3, [r3, #10]
 800eaf6:	2b13      	cmp	r3, #19
 800eaf8:	d806      	bhi.n	800eb08 <ip4_frag+0xd0>
 800eafa:	4b6c      	ldr	r3, [pc, #432]	; (800ecac <ip4_frag+0x274>)
 800eafc:	f44f 7249 	mov.w	r2, #804	; 0x324
 800eb00:	496d      	ldr	r1, [pc, #436]	; (800ecb8 <ip4_frag+0x280>)
 800eb02:	486c      	ldr	r0, [pc, #432]	; (800ecb4 <ip4_frag+0x27c>)
 800eb04:	f000 f9fe 	bl	800ef04 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	2214      	movs	r2, #20
 800eb0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb10:	4618      	mov	r0, r3
 800eb12:	f000 f9e1 	bl	800eed8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800eb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800eb1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800eb22:	e064      	b.n	800ebee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	895a      	ldrh	r2, [r3, #10]
 800eb28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	895b      	ldrh	r3, [r3, #10]
 800eb32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d906      	bls.n	800eb46 <ip4_frag+0x10e>
 800eb38:	4b5c      	ldr	r3, [pc, #368]	; (800ecac <ip4_frag+0x274>)
 800eb3a:	f240 322d 	movw	r2, #813	; 0x32d
 800eb3e:	495f      	ldr	r1, [pc, #380]	; (800ecbc <ip4_frag+0x284>)
 800eb40:	485c      	ldr	r0, [pc, #368]	; (800ecb4 <ip4_frag+0x27c>)
 800eb42:	f000 f9df 	bl	800ef04 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800eb46:	8bfa      	ldrh	r2, [r7, #30]
 800eb48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	bf28      	it	cs
 800eb50:	4613      	movcs	r3, r2
 800eb52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800eb56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d105      	bne.n	800eb6a <ip4_frag+0x132>
        poff = 0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	60fb      	str	r3, [r7, #12]
        continue;
 800eb68:	e041      	b.n	800ebee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800eb6a:	f7ff ff0d 	bl	800e988 <ip_frag_alloc_pbuf_custom_ref>
 800eb6e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d103      	bne.n	800eb7e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800eb76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb78:	f7f7 f8c8 	bl	8005d0c <pbuf_free>
        goto memerr;
 800eb7c:	e08f      	b.n	800ec9e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eb7e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eb84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb86:	4413      	add	r3, r2
 800eb88:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800eb8c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800eb90:	9201      	str	r2, [sp, #4]
 800eb92:	9300      	str	r3, [sp, #0]
 800eb94:	4603      	mov	r3, r0
 800eb96:	2241      	movs	r2, #65	; 0x41
 800eb98:	2000      	movs	r0, #0
 800eb9a:	f7f6 fefd 	bl	8005998 <pbuf_alloced_custom>
 800eb9e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d106      	bne.n	800ebb4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800eba6:	69b8      	ldr	r0, [r7, #24]
 800eba8:	f7ff fef6 	bl	800e998 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ebac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebae:	f7f7 f8ad 	bl	8005d0c <pbuf_free>
        goto memerr;
 800ebb2:	e074      	b.n	800ec9e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f7f7 f949 	bl	8005e4c <pbuf_ref>
      pcr->original = p;
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	4a3f      	ldr	r2, [pc, #252]	; (800ecc0 <ip4_frag+0x288>)
 800ebc4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ebc6:	6979      	ldr	r1, [r7, #20]
 800ebc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebca:	f7f7 f961 	bl	8005e90 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ebce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ebd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ebd6:	1ad3      	subs	r3, r2, r3
 800ebd8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ebdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d004      	beq.n	800ebee <ip4_frag+0x1b6>
        poff = 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ebee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d196      	bne.n	800eb24 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ebf6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ebf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ebfc:	4413      	add	r3, r2
 800ebfe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ec04:	f1a3 0213 	sub.w	r2, r3, #19
 800ec08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	bfcc      	ite	gt
 800ec10:	2301      	movgt	r3, #1
 800ec12:	2300      	movle	r3, #0
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ec18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ec1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec20:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d002      	beq.n	800ec2e <ip4_frag+0x1f6>
 800ec28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d003      	beq.n	800ec36 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ec2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ec34:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ec36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7f5 fcd3 	bl	80045e4 <lwip_htons>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	461a      	mov	r2, r3
 800ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec44:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ec46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec48:	3314      	adds	r3, #20
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7f5 fcc9 	bl	80045e4 <lwip_htons>
 800ec52:	4603      	mov	r3, r0
 800ec54:	461a      	mov	r2, r3
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	729a      	strb	r2, [r3, #10]
 800ec60:	2200      	movs	r2, #0
 800ec62:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	695b      	ldr	r3, [r3, #20]
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec6c:	68b8      	ldr	r0, [r7, #8]
 800ec6e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ec70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec72:	f7f7 f84b 	bl	8005d0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ec76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ec7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ec82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ec86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec88:	4413      	add	r3, r2
 800ec8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ec8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f47f af19 	bne.w	800eaca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	e002      	b.n	800eca2 <ip4_frag+0x26a>
      goto memerr;
 800ec9c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ec9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3748      	adds	r7, #72	; 0x48
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	08012944 	.word	0x08012944
 800ecb0:	08012b20 	.word	0x08012b20
 800ecb4:	0801298c 	.word	0x0801298c
 800ecb8:	08012b3c 	.word	0x08012b3c
 800ecbc:	08012b5c 	.word	0x08012b5c
 800ecc0:	0800e9d1 	.word	0x0800e9d1

0800ecc4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ecce:	230e      	movs	r3, #14
 800ecd0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	895b      	ldrh	r3, [r3, #10]
 800ecd6:	2b0e      	cmp	r3, #14
 800ecd8:	d96e      	bls.n	800edb8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	7bdb      	ldrb	r3, [r3, #15]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d106      	bne.n	800ecf0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ece8:	3301      	adds	r3, #1
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	7b1a      	ldrb	r2, [r3, #12]
 800ecfa:	7b5b      	ldrb	r3, [r3, #13]
 800ecfc:	021b      	lsls	r3, r3, #8
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	f003 0301 	and.w	r3, r3, #1
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d023      	beq.n	800ed56 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d10f      	bne.n	800ed36 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	785b      	ldrb	r3, [r3, #1]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d11b      	bne.n	800ed56 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ed22:	2b5e      	cmp	r3, #94	; 0x5e
 800ed24:	d117      	bne.n	800ed56 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	7b5b      	ldrb	r3, [r3, #13]
 800ed2a:	f043 0310 	orr.w	r3, r3, #16
 800ed2e:	b2da      	uxtb	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	735a      	strb	r2, [r3, #13]
 800ed34:	e00f      	b.n	800ed56 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	2206      	movs	r2, #6
 800ed3a:	4928      	ldr	r1, [pc, #160]	; (800eddc <ethernet_input+0x118>)
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 f8bb 	bl	800eeb8 <memcmp>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d106      	bne.n	800ed56 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7b5b      	ldrb	r3, [r3, #13]
 800ed4c:	f043 0308 	orr.w	r3, r3, #8
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ed56:	89fb      	ldrh	r3, [r7, #14]
 800ed58:	2b08      	cmp	r3, #8
 800ed5a:	d003      	beq.n	800ed64 <ethernet_input+0xa0>
 800ed5c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ed60:	d014      	beq.n	800ed8c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ed62:	e032      	b.n	800edca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed6a:	f003 0308 	and.w	r3, r3, #8
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d024      	beq.n	800edbc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ed72:	8afb      	ldrh	r3, [r7, #22]
 800ed74:	4619      	mov	r1, r3
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7f6 ff42 	bl	8005c00 <pbuf_remove_header>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d11e      	bne.n	800edc0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ed82:	6839      	ldr	r1, [r7, #0]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7fe ff21 	bl	800dbcc <ip4_input>
      break;
 800ed8a:	e013      	b.n	800edb4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed92:	f003 0308 	and.w	r3, r3, #8
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d014      	beq.n	800edc4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ed9a:	8afb      	ldrh	r3, [r7, #22]
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7f6 ff2e 	bl	8005c00 <pbuf_remove_header>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d10e      	bne.n	800edc8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800edaa:	6839      	ldr	r1, [r7, #0]
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7fe f8c1 	bl	800cf34 <etharp_input>
      break;
 800edb2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800edb4:	2300      	movs	r3, #0
 800edb6:	e00c      	b.n	800edd2 <ethernet_input+0x10e>
    goto free_and_return;
 800edb8:	bf00      	nop
 800edba:	e006      	b.n	800edca <ethernet_input+0x106>
        goto free_and_return;
 800edbc:	bf00      	nop
 800edbe:	e004      	b.n	800edca <ethernet_input+0x106>
        goto free_and_return;
 800edc0:	bf00      	nop
 800edc2:	e002      	b.n	800edca <ethernet_input+0x106>
        goto free_and_return;
 800edc4:	bf00      	nop
 800edc6:	e000      	b.n	800edca <ethernet_input+0x106>
        goto free_and_return;
 800edc8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7f6 ff9e 	bl	8005d0c <pbuf_free>
  return ERR_OK;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	080139b0 	.word	0x080139b0

0800ede0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
 800edec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800edee:	8c3b      	ldrh	r3, [r7, #32]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7f5 fbf7 	bl	80045e4 <lwip_htons>
 800edf6:	4603      	mov	r3, r0
 800edf8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800edfa:	210e      	movs	r1, #14
 800edfc:	68b8      	ldr	r0, [r7, #8]
 800edfe:	f7f6 feef 	bl	8005be0 <pbuf_add_header>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d125      	bne.n	800ee54 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	8afa      	ldrh	r2, [r7, #22]
 800ee12:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	2206      	movs	r2, #6
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f000 f85c 	bl	800eed8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	3306      	adds	r3, #6
 800ee24:	2206      	movs	r2, #6
 800ee26:	6879      	ldr	r1, [r7, #4]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f000 f855 	bl	800eed8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee34:	2b06      	cmp	r3, #6
 800ee36:	d006      	beq.n	800ee46 <ethernet_output+0x66>
 800ee38:	4b0a      	ldr	r3, [pc, #40]	; (800ee64 <ethernet_output+0x84>)
 800ee3a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ee3e:	490a      	ldr	r1, [pc, #40]	; (800ee68 <ethernet_output+0x88>)
 800ee40:	480a      	ldr	r0, [pc, #40]	; (800ee6c <ethernet_output+0x8c>)
 800ee42:	f000 f85f 	bl	800ef04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	68b9      	ldr	r1, [r7, #8]
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	4798      	blx	r3
 800ee50:	4603      	mov	r3, r0
 800ee52:	e002      	b.n	800ee5a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ee54:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ee56:	f06f 0301 	mvn.w	r3, #1
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3718      	adds	r7, #24
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	08012b6c 	.word	0x08012b6c
 800ee68:	08012ba4 	.word	0x08012ba4
 800ee6c:	08012bd8 	.word	0x08012bd8

0800ee70 <__libc_init_array>:
 800ee70:	b570      	push	{r4, r5, r6, lr}
 800ee72:	4d0d      	ldr	r5, [pc, #52]	; (800eea8 <__libc_init_array+0x38>)
 800ee74:	4c0d      	ldr	r4, [pc, #52]	; (800eeac <__libc_init_array+0x3c>)
 800ee76:	1b64      	subs	r4, r4, r5
 800ee78:	10a4      	asrs	r4, r4, #2
 800ee7a:	2600      	movs	r6, #0
 800ee7c:	42a6      	cmp	r6, r4
 800ee7e:	d109      	bne.n	800ee94 <__libc_init_array+0x24>
 800ee80:	4d0b      	ldr	r5, [pc, #44]	; (800eeb0 <__libc_init_array+0x40>)
 800ee82:	4c0c      	ldr	r4, [pc, #48]	; (800eeb4 <__libc_init_array+0x44>)
 800ee84:	f001 f8b0 	bl	800ffe8 <_init>
 800ee88:	1b64      	subs	r4, r4, r5
 800ee8a:	10a4      	asrs	r4, r4, #2
 800ee8c:	2600      	movs	r6, #0
 800ee8e:	42a6      	cmp	r6, r4
 800ee90:	d105      	bne.n	800ee9e <__libc_init_array+0x2e>
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee98:	4798      	blx	r3
 800ee9a:	3601      	adds	r6, #1
 800ee9c:	e7ee      	b.n	800ee7c <__libc_init_array+0xc>
 800ee9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eea2:	4798      	blx	r3
 800eea4:	3601      	adds	r6, #1
 800eea6:	e7f2      	b.n	800ee8e <__libc_init_array+0x1e>
 800eea8:	08013b10 	.word	0x08013b10
 800eeac:	08013b10 	.word	0x08013b10
 800eeb0:	08013b10 	.word	0x08013b10
 800eeb4:	08013b14 	.word	0x08013b14

0800eeb8 <memcmp>:
 800eeb8:	b510      	push	{r4, lr}
 800eeba:	3901      	subs	r1, #1
 800eebc:	4402      	add	r2, r0
 800eebe:	4290      	cmp	r0, r2
 800eec0:	d101      	bne.n	800eec6 <memcmp+0xe>
 800eec2:	2000      	movs	r0, #0
 800eec4:	e005      	b.n	800eed2 <memcmp+0x1a>
 800eec6:	7803      	ldrb	r3, [r0, #0]
 800eec8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eecc:	42a3      	cmp	r3, r4
 800eece:	d001      	beq.n	800eed4 <memcmp+0x1c>
 800eed0:	1b18      	subs	r0, r3, r4
 800eed2:	bd10      	pop	{r4, pc}
 800eed4:	3001      	adds	r0, #1
 800eed6:	e7f2      	b.n	800eebe <memcmp+0x6>

0800eed8 <memcpy>:
 800eed8:	440a      	add	r2, r1
 800eeda:	4291      	cmp	r1, r2
 800eedc:	f100 33ff 	add.w	r3, r0, #4294967295
 800eee0:	d100      	bne.n	800eee4 <memcpy+0xc>
 800eee2:	4770      	bx	lr
 800eee4:	b510      	push	{r4, lr}
 800eee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeee:	4291      	cmp	r1, r2
 800eef0:	d1f9      	bne.n	800eee6 <memcpy+0xe>
 800eef2:	bd10      	pop	{r4, pc}

0800eef4 <memset>:
 800eef4:	4402      	add	r2, r0
 800eef6:	4603      	mov	r3, r0
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d100      	bne.n	800eefe <memset+0xa>
 800eefc:	4770      	bx	lr
 800eefe:	f803 1b01 	strb.w	r1, [r3], #1
 800ef02:	e7f9      	b.n	800eef8 <memset+0x4>

0800ef04 <iprintf>:
 800ef04:	b40f      	push	{r0, r1, r2, r3}
 800ef06:	4b0a      	ldr	r3, [pc, #40]	; (800ef30 <iprintf+0x2c>)
 800ef08:	b513      	push	{r0, r1, r4, lr}
 800ef0a:	681c      	ldr	r4, [r3, #0]
 800ef0c:	b124      	cbz	r4, 800ef18 <iprintf+0x14>
 800ef0e:	69a3      	ldr	r3, [r4, #24]
 800ef10:	b913      	cbnz	r3, 800ef18 <iprintf+0x14>
 800ef12:	4620      	mov	r0, r4
 800ef14:	f000 f8e4 	bl	800f0e0 <__sinit>
 800ef18:	ab05      	add	r3, sp, #20
 800ef1a:	9a04      	ldr	r2, [sp, #16]
 800ef1c:	68a1      	ldr	r1, [r4, #8]
 800ef1e:	9301      	str	r3, [sp, #4]
 800ef20:	4620      	mov	r0, r4
 800ef22:	f000 faa1 	bl	800f468 <_vfiprintf_r>
 800ef26:	b002      	add	sp, #8
 800ef28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef2c:	b004      	add	sp, #16
 800ef2e:	4770      	bx	lr
 800ef30:	2000002c 	.word	0x2000002c

0800ef34 <rand>:
 800ef34:	4b16      	ldr	r3, [pc, #88]	; (800ef90 <rand+0x5c>)
 800ef36:	b510      	push	{r4, lr}
 800ef38:	681c      	ldr	r4, [r3, #0]
 800ef3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef3c:	b9b3      	cbnz	r3, 800ef6c <rand+0x38>
 800ef3e:	2018      	movs	r0, #24
 800ef40:	f000 f980 	bl	800f244 <malloc>
 800ef44:	63a0      	str	r0, [r4, #56]	; 0x38
 800ef46:	b928      	cbnz	r0, 800ef54 <rand+0x20>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	4b12      	ldr	r3, [pc, #72]	; (800ef94 <rand+0x60>)
 800ef4c:	4812      	ldr	r0, [pc, #72]	; (800ef98 <rand+0x64>)
 800ef4e:	214e      	movs	r1, #78	; 0x4e
 800ef50:	f000 f850 	bl	800eff4 <__assert_func>
 800ef54:	4a11      	ldr	r2, [pc, #68]	; (800ef9c <rand+0x68>)
 800ef56:	4b12      	ldr	r3, [pc, #72]	; (800efa0 <rand+0x6c>)
 800ef58:	e9c0 2300 	strd	r2, r3, [r0]
 800ef5c:	4b11      	ldr	r3, [pc, #68]	; (800efa4 <rand+0x70>)
 800ef5e:	6083      	str	r3, [r0, #8]
 800ef60:	230b      	movs	r3, #11
 800ef62:	8183      	strh	r3, [r0, #12]
 800ef64:	2201      	movs	r2, #1
 800ef66:	2300      	movs	r3, #0
 800ef68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ef6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ef6e:	4a0e      	ldr	r2, [pc, #56]	; (800efa8 <rand+0x74>)
 800ef70:	6920      	ldr	r0, [r4, #16]
 800ef72:	6963      	ldr	r3, [r4, #20]
 800ef74:	490d      	ldr	r1, [pc, #52]	; (800efac <rand+0x78>)
 800ef76:	4342      	muls	r2, r0
 800ef78:	fb01 2203 	mla	r2, r1, r3, r2
 800ef7c:	fba0 0101 	umull	r0, r1, r0, r1
 800ef80:	1c43      	adds	r3, r0, #1
 800ef82:	eb42 0001 	adc.w	r0, r2, r1
 800ef86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ef8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ef8e:	bd10      	pop	{r4, pc}
 800ef90:	2000002c 	.word	0x2000002c
 800ef94:	080139c4 	.word	0x080139c4
 800ef98:	080139db 	.word	0x080139db
 800ef9c:	abcd330e 	.word	0xabcd330e
 800efa0:	e66d1234 	.word	0xe66d1234
 800efa4:	0005deec 	.word	0x0005deec
 800efa8:	5851f42d 	.word	0x5851f42d
 800efac:	4c957f2d 	.word	0x4c957f2d

0800efb0 <strchr>:
 800efb0:	b2c9      	uxtb	r1, r1
 800efb2:	4603      	mov	r3, r0
 800efb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efb8:	b11a      	cbz	r2, 800efc2 <strchr+0x12>
 800efba:	428a      	cmp	r2, r1
 800efbc:	d1f9      	bne.n	800efb2 <strchr+0x2>
 800efbe:	4618      	mov	r0, r3
 800efc0:	4770      	bx	lr
 800efc2:	2900      	cmp	r1, #0
 800efc4:	bf18      	it	ne
 800efc6:	2300      	movne	r3, #0
 800efc8:	e7f9      	b.n	800efbe <strchr+0xe>

0800efca <strncmp>:
 800efca:	b510      	push	{r4, lr}
 800efcc:	b17a      	cbz	r2, 800efee <strncmp+0x24>
 800efce:	4603      	mov	r3, r0
 800efd0:	3901      	subs	r1, #1
 800efd2:	1884      	adds	r4, r0, r2
 800efd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800efd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800efdc:	4290      	cmp	r0, r2
 800efde:	d101      	bne.n	800efe4 <strncmp+0x1a>
 800efe0:	42a3      	cmp	r3, r4
 800efe2:	d101      	bne.n	800efe8 <strncmp+0x1e>
 800efe4:	1a80      	subs	r0, r0, r2
 800efe6:	bd10      	pop	{r4, pc}
 800efe8:	2800      	cmp	r0, #0
 800efea:	d1f3      	bne.n	800efd4 <strncmp+0xa>
 800efec:	e7fa      	b.n	800efe4 <strncmp+0x1a>
 800efee:	4610      	mov	r0, r2
 800eff0:	e7f9      	b.n	800efe6 <strncmp+0x1c>
	...

0800eff4 <__assert_func>:
 800eff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eff6:	4614      	mov	r4, r2
 800eff8:	461a      	mov	r2, r3
 800effa:	4b09      	ldr	r3, [pc, #36]	; (800f020 <__assert_func+0x2c>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4605      	mov	r5, r0
 800f000:	68d8      	ldr	r0, [r3, #12]
 800f002:	b14c      	cbz	r4, 800f018 <__assert_func+0x24>
 800f004:	4b07      	ldr	r3, [pc, #28]	; (800f024 <__assert_func+0x30>)
 800f006:	9100      	str	r1, [sp, #0]
 800f008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f00c:	4906      	ldr	r1, [pc, #24]	; (800f028 <__assert_func+0x34>)
 800f00e:	462b      	mov	r3, r5
 800f010:	f000 f8e4 	bl	800f1dc <fiprintf>
 800f014:	f000 fe12 	bl	800fc3c <abort>
 800f018:	4b04      	ldr	r3, [pc, #16]	; (800f02c <__assert_func+0x38>)
 800f01a:	461c      	mov	r4, r3
 800f01c:	e7f3      	b.n	800f006 <__assert_func+0x12>
 800f01e:	bf00      	nop
 800f020:	2000002c 	.word	0x2000002c
 800f024:	08013a36 	.word	0x08013a36
 800f028:	08013a43 	.word	0x08013a43
 800f02c:	08013a71 	.word	0x08013a71

0800f030 <std>:
 800f030:	2300      	movs	r3, #0
 800f032:	b510      	push	{r4, lr}
 800f034:	4604      	mov	r4, r0
 800f036:	e9c0 3300 	strd	r3, r3, [r0]
 800f03a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f03e:	6083      	str	r3, [r0, #8]
 800f040:	8181      	strh	r1, [r0, #12]
 800f042:	6643      	str	r3, [r0, #100]	; 0x64
 800f044:	81c2      	strh	r2, [r0, #14]
 800f046:	6183      	str	r3, [r0, #24]
 800f048:	4619      	mov	r1, r3
 800f04a:	2208      	movs	r2, #8
 800f04c:	305c      	adds	r0, #92	; 0x5c
 800f04e:	f7ff ff51 	bl	800eef4 <memset>
 800f052:	4b05      	ldr	r3, [pc, #20]	; (800f068 <std+0x38>)
 800f054:	6263      	str	r3, [r4, #36]	; 0x24
 800f056:	4b05      	ldr	r3, [pc, #20]	; (800f06c <std+0x3c>)
 800f058:	62a3      	str	r3, [r4, #40]	; 0x28
 800f05a:	4b05      	ldr	r3, [pc, #20]	; (800f070 <std+0x40>)
 800f05c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f05e:	4b05      	ldr	r3, [pc, #20]	; (800f074 <std+0x44>)
 800f060:	6224      	str	r4, [r4, #32]
 800f062:	6323      	str	r3, [r4, #48]	; 0x30
 800f064:	bd10      	pop	{r4, pc}
 800f066:	bf00      	nop
 800f068:	0800fa11 	.word	0x0800fa11
 800f06c:	0800fa33 	.word	0x0800fa33
 800f070:	0800fa6b 	.word	0x0800fa6b
 800f074:	0800fa8f 	.word	0x0800fa8f

0800f078 <_cleanup_r>:
 800f078:	4901      	ldr	r1, [pc, #4]	; (800f080 <_cleanup_r+0x8>)
 800f07a:	f000 b8c1 	b.w	800f200 <_fwalk_reent>
 800f07e:	bf00      	nop
 800f080:	0800fd79 	.word	0x0800fd79

0800f084 <__sfmoreglue>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	2268      	movs	r2, #104	; 0x68
 800f088:	1e4d      	subs	r5, r1, #1
 800f08a:	4355      	muls	r5, r2
 800f08c:	460e      	mov	r6, r1
 800f08e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f092:	f000 f94b 	bl	800f32c <_malloc_r>
 800f096:	4604      	mov	r4, r0
 800f098:	b140      	cbz	r0, 800f0ac <__sfmoreglue+0x28>
 800f09a:	2100      	movs	r1, #0
 800f09c:	e9c0 1600 	strd	r1, r6, [r0]
 800f0a0:	300c      	adds	r0, #12
 800f0a2:	60a0      	str	r0, [r4, #8]
 800f0a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0a8:	f7ff ff24 	bl	800eef4 <memset>
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}

0800f0b0 <__sfp_lock_acquire>:
 800f0b0:	4801      	ldr	r0, [pc, #4]	; (800f0b8 <__sfp_lock_acquire+0x8>)
 800f0b2:	f000 b8c5 	b.w	800f240 <__retarget_lock_acquire_recursive>
 800f0b6:	bf00      	nop
 800f0b8:	200087e9 	.word	0x200087e9

0800f0bc <__sfp_lock_release>:
 800f0bc:	4801      	ldr	r0, [pc, #4]	; (800f0c4 <__sfp_lock_release+0x8>)
 800f0be:	f000 b8c0 	b.w	800f242 <__retarget_lock_release_recursive>
 800f0c2:	bf00      	nop
 800f0c4:	200087e9 	.word	0x200087e9

0800f0c8 <__sinit_lock_acquire>:
 800f0c8:	4801      	ldr	r0, [pc, #4]	; (800f0d0 <__sinit_lock_acquire+0x8>)
 800f0ca:	f000 b8b9 	b.w	800f240 <__retarget_lock_acquire_recursive>
 800f0ce:	bf00      	nop
 800f0d0:	200087ea 	.word	0x200087ea

0800f0d4 <__sinit_lock_release>:
 800f0d4:	4801      	ldr	r0, [pc, #4]	; (800f0dc <__sinit_lock_release+0x8>)
 800f0d6:	f000 b8b4 	b.w	800f242 <__retarget_lock_release_recursive>
 800f0da:	bf00      	nop
 800f0dc:	200087ea 	.word	0x200087ea

0800f0e0 <__sinit>:
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	f7ff fff0 	bl	800f0c8 <__sinit_lock_acquire>
 800f0e8:	69a3      	ldr	r3, [r4, #24]
 800f0ea:	b11b      	cbz	r3, 800f0f4 <__sinit+0x14>
 800f0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0f0:	f7ff bff0 	b.w	800f0d4 <__sinit_lock_release>
 800f0f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f0f8:	6523      	str	r3, [r4, #80]	; 0x50
 800f0fa:	4b13      	ldr	r3, [pc, #76]	; (800f148 <__sinit+0x68>)
 800f0fc:	4a13      	ldr	r2, [pc, #76]	; (800f14c <__sinit+0x6c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	62a2      	str	r2, [r4, #40]	; 0x28
 800f102:	42a3      	cmp	r3, r4
 800f104:	bf04      	itt	eq
 800f106:	2301      	moveq	r3, #1
 800f108:	61a3      	streq	r3, [r4, #24]
 800f10a:	4620      	mov	r0, r4
 800f10c:	f000 f820 	bl	800f150 <__sfp>
 800f110:	6060      	str	r0, [r4, #4]
 800f112:	4620      	mov	r0, r4
 800f114:	f000 f81c 	bl	800f150 <__sfp>
 800f118:	60a0      	str	r0, [r4, #8]
 800f11a:	4620      	mov	r0, r4
 800f11c:	f000 f818 	bl	800f150 <__sfp>
 800f120:	2200      	movs	r2, #0
 800f122:	60e0      	str	r0, [r4, #12]
 800f124:	2104      	movs	r1, #4
 800f126:	6860      	ldr	r0, [r4, #4]
 800f128:	f7ff ff82 	bl	800f030 <std>
 800f12c:	68a0      	ldr	r0, [r4, #8]
 800f12e:	2201      	movs	r2, #1
 800f130:	2109      	movs	r1, #9
 800f132:	f7ff ff7d 	bl	800f030 <std>
 800f136:	68e0      	ldr	r0, [r4, #12]
 800f138:	2202      	movs	r2, #2
 800f13a:	2112      	movs	r1, #18
 800f13c:	f7ff ff78 	bl	800f030 <std>
 800f140:	2301      	movs	r3, #1
 800f142:	61a3      	str	r3, [r4, #24]
 800f144:	e7d2      	b.n	800f0ec <__sinit+0xc>
 800f146:	bf00      	nop
 800f148:	080139c0 	.word	0x080139c0
 800f14c:	0800f079 	.word	0x0800f079

0800f150 <__sfp>:
 800f150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f152:	4607      	mov	r7, r0
 800f154:	f7ff ffac 	bl	800f0b0 <__sfp_lock_acquire>
 800f158:	4b1e      	ldr	r3, [pc, #120]	; (800f1d4 <__sfp+0x84>)
 800f15a:	681e      	ldr	r6, [r3, #0]
 800f15c:	69b3      	ldr	r3, [r6, #24]
 800f15e:	b913      	cbnz	r3, 800f166 <__sfp+0x16>
 800f160:	4630      	mov	r0, r6
 800f162:	f7ff ffbd 	bl	800f0e0 <__sinit>
 800f166:	3648      	adds	r6, #72	; 0x48
 800f168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	d503      	bpl.n	800f178 <__sfp+0x28>
 800f170:	6833      	ldr	r3, [r6, #0]
 800f172:	b30b      	cbz	r3, 800f1b8 <__sfp+0x68>
 800f174:	6836      	ldr	r6, [r6, #0]
 800f176:	e7f7      	b.n	800f168 <__sfp+0x18>
 800f178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f17c:	b9d5      	cbnz	r5, 800f1b4 <__sfp+0x64>
 800f17e:	4b16      	ldr	r3, [pc, #88]	; (800f1d8 <__sfp+0x88>)
 800f180:	60e3      	str	r3, [r4, #12]
 800f182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f186:	6665      	str	r5, [r4, #100]	; 0x64
 800f188:	f000 f859 	bl	800f23e <__retarget_lock_init_recursive>
 800f18c:	f7ff ff96 	bl	800f0bc <__sfp_lock_release>
 800f190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f198:	6025      	str	r5, [r4, #0]
 800f19a:	61a5      	str	r5, [r4, #24]
 800f19c:	2208      	movs	r2, #8
 800f19e:	4629      	mov	r1, r5
 800f1a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f1a4:	f7ff fea6 	bl	800eef4 <memset>
 800f1a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1b4:	3468      	adds	r4, #104	; 0x68
 800f1b6:	e7d9      	b.n	800f16c <__sfp+0x1c>
 800f1b8:	2104      	movs	r1, #4
 800f1ba:	4638      	mov	r0, r7
 800f1bc:	f7ff ff62 	bl	800f084 <__sfmoreglue>
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	6030      	str	r0, [r6, #0]
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	d1d5      	bne.n	800f174 <__sfp+0x24>
 800f1c8:	f7ff ff78 	bl	800f0bc <__sfp_lock_release>
 800f1cc:	230c      	movs	r3, #12
 800f1ce:	603b      	str	r3, [r7, #0]
 800f1d0:	e7ee      	b.n	800f1b0 <__sfp+0x60>
 800f1d2:	bf00      	nop
 800f1d4:	080139c0 	.word	0x080139c0
 800f1d8:	ffff0001 	.word	0xffff0001

0800f1dc <fiprintf>:
 800f1dc:	b40e      	push	{r1, r2, r3}
 800f1de:	b503      	push	{r0, r1, lr}
 800f1e0:	4601      	mov	r1, r0
 800f1e2:	ab03      	add	r3, sp, #12
 800f1e4:	4805      	ldr	r0, [pc, #20]	; (800f1fc <fiprintf+0x20>)
 800f1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ea:	6800      	ldr	r0, [r0, #0]
 800f1ec:	9301      	str	r3, [sp, #4]
 800f1ee:	f000 f93b 	bl	800f468 <_vfiprintf_r>
 800f1f2:	b002      	add	sp, #8
 800f1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1f8:	b003      	add	sp, #12
 800f1fa:	4770      	bx	lr
 800f1fc:	2000002c 	.word	0x2000002c

0800f200 <_fwalk_reent>:
 800f200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f204:	4606      	mov	r6, r0
 800f206:	4688      	mov	r8, r1
 800f208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f20c:	2700      	movs	r7, #0
 800f20e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f212:	f1b9 0901 	subs.w	r9, r9, #1
 800f216:	d505      	bpl.n	800f224 <_fwalk_reent+0x24>
 800f218:	6824      	ldr	r4, [r4, #0]
 800f21a:	2c00      	cmp	r4, #0
 800f21c:	d1f7      	bne.n	800f20e <_fwalk_reent+0xe>
 800f21e:	4638      	mov	r0, r7
 800f220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f224:	89ab      	ldrh	r3, [r5, #12]
 800f226:	2b01      	cmp	r3, #1
 800f228:	d907      	bls.n	800f23a <_fwalk_reent+0x3a>
 800f22a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f22e:	3301      	adds	r3, #1
 800f230:	d003      	beq.n	800f23a <_fwalk_reent+0x3a>
 800f232:	4629      	mov	r1, r5
 800f234:	4630      	mov	r0, r6
 800f236:	47c0      	blx	r8
 800f238:	4307      	orrs	r7, r0
 800f23a:	3568      	adds	r5, #104	; 0x68
 800f23c:	e7e9      	b.n	800f212 <_fwalk_reent+0x12>

0800f23e <__retarget_lock_init_recursive>:
 800f23e:	4770      	bx	lr

0800f240 <__retarget_lock_acquire_recursive>:
 800f240:	4770      	bx	lr

0800f242 <__retarget_lock_release_recursive>:
 800f242:	4770      	bx	lr

0800f244 <malloc>:
 800f244:	4b02      	ldr	r3, [pc, #8]	; (800f250 <malloc+0xc>)
 800f246:	4601      	mov	r1, r0
 800f248:	6818      	ldr	r0, [r3, #0]
 800f24a:	f000 b86f 	b.w	800f32c <_malloc_r>
 800f24e:	bf00      	nop
 800f250:	2000002c 	.word	0x2000002c

0800f254 <_free_r>:
 800f254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f256:	2900      	cmp	r1, #0
 800f258:	d044      	beq.n	800f2e4 <_free_r+0x90>
 800f25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f25e:	9001      	str	r0, [sp, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	f1a1 0404 	sub.w	r4, r1, #4
 800f266:	bfb8      	it	lt
 800f268:	18e4      	addlt	r4, r4, r3
 800f26a:	f000 fe39 	bl	800fee0 <__malloc_lock>
 800f26e:	4a1e      	ldr	r2, [pc, #120]	; (800f2e8 <_free_r+0x94>)
 800f270:	9801      	ldr	r0, [sp, #4]
 800f272:	6813      	ldr	r3, [r2, #0]
 800f274:	b933      	cbnz	r3, 800f284 <_free_r+0x30>
 800f276:	6063      	str	r3, [r4, #4]
 800f278:	6014      	str	r4, [r2, #0]
 800f27a:	b003      	add	sp, #12
 800f27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f280:	f000 be34 	b.w	800feec <__malloc_unlock>
 800f284:	42a3      	cmp	r3, r4
 800f286:	d908      	bls.n	800f29a <_free_r+0x46>
 800f288:	6825      	ldr	r5, [r4, #0]
 800f28a:	1961      	adds	r1, r4, r5
 800f28c:	428b      	cmp	r3, r1
 800f28e:	bf01      	itttt	eq
 800f290:	6819      	ldreq	r1, [r3, #0]
 800f292:	685b      	ldreq	r3, [r3, #4]
 800f294:	1949      	addeq	r1, r1, r5
 800f296:	6021      	streq	r1, [r4, #0]
 800f298:	e7ed      	b.n	800f276 <_free_r+0x22>
 800f29a:	461a      	mov	r2, r3
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	b10b      	cbz	r3, 800f2a4 <_free_r+0x50>
 800f2a0:	42a3      	cmp	r3, r4
 800f2a2:	d9fa      	bls.n	800f29a <_free_r+0x46>
 800f2a4:	6811      	ldr	r1, [r2, #0]
 800f2a6:	1855      	adds	r5, r2, r1
 800f2a8:	42a5      	cmp	r5, r4
 800f2aa:	d10b      	bne.n	800f2c4 <_free_r+0x70>
 800f2ac:	6824      	ldr	r4, [r4, #0]
 800f2ae:	4421      	add	r1, r4
 800f2b0:	1854      	adds	r4, r2, r1
 800f2b2:	42a3      	cmp	r3, r4
 800f2b4:	6011      	str	r1, [r2, #0]
 800f2b6:	d1e0      	bne.n	800f27a <_free_r+0x26>
 800f2b8:	681c      	ldr	r4, [r3, #0]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	6053      	str	r3, [r2, #4]
 800f2be:	4421      	add	r1, r4
 800f2c0:	6011      	str	r1, [r2, #0]
 800f2c2:	e7da      	b.n	800f27a <_free_r+0x26>
 800f2c4:	d902      	bls.n	800f2cc <_free_r+0x78>
 800f2c6:	230c      	movs	r3, #12
 800f2c8:	6003      	str	r3, [r0, #0]
 800f2ca:	e7d6      	b.n	800f27a <_free_r+0x26>
 800f2cc:	6825      	ldr	r5, [r4, #0]
 800f2ce:	1961      	adds	r1, r4, r5
 800f2d0:	428b      	cmp	r3, r1
 800f2d2:	bf04      	itt	eq
 800f2d4:	6819      	ldreq	r1, [r3, #0]
 800f2d6:	685b      	ldreq	r3, [r3, #4]
 800f2d8:	6063      	str	r3, [r4, #4]
 800f2da:	bf04      	itt	eq
 800f2dc:	1949      	addeq	r1, r1, r5
 800f2de:	6021      	streq	r1, [r4, #0]
 800f2e0:	6054      	str	r4, [r2, #4]
 800f2e2:	e7ca      	b.n	800f27a <_free_r+0x26>
 800f2e4:	b003      	add	sp, #12
 800f2e6:	bd30      	pop	{r4, r5, pc}
 800f2e8:	200087ec 	.word	0x200087ec

0800f2ec <sbrk_aligned>:
 800f2ec:	b570      	push	{r4, r5, r6, lr}
 800f2ee:	4e0e      	ldr	r6, [pc, #56]	; (800f328 <sbrk_aligned+0x3c>)
 800f2f0:	460c      	mov	r4, r1
 800f2f2:	6831      	ldr	r1, [r6, #0]
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	b911      	cbnz	r1, 800f2fe <sbrk_aligned+0x12>
 800f2f8:	f000 fb7a 	bl	800f9f0 <_sbrk_r>
 800f2fc:	6030      	str	r0, [r6, #0]
 800f2fe:	4621      	mov	r1, r4
 800f300:	4628      	mov	r0, r5
 800f302:	f000 fb75 	bl	800f9f0 <_sbrk_r>
 800f306:	1c43      	adds	r3, r0, #1
 800f308:	d00a      	beq.n	800f320 <sbrk_aligned+0x34>
 800f30a:	1cc4      	adds	r4, r0, #3
 800f30c:	f024 0403 	bic.w	r4, r4, #3
 800f310:	42a0      	cmp	r0, r4
 800f312:	d007      	beq.n	800f324 <sbrk_aligned+0x38>
 800f314:	1a21      	subs	r1, r4, r0
 800f316:	4628      	mov	r0, r5
 800f318:	f000 fb6a 	bl	800f9f0 <_sbrk_r>
 800f31c:	3001      	adds	r0, #1
 800f31e:	d101      	bne.n	800f324 <sbrk_aligned+0x38>
 800f320:	f04f 34ff 	mov.w	r4, #4294967295
 800f324:	4620      	mov	r0, r4
 800f326:	bd70      	pop	{r4, r5, r6, pc}
 800f328:	200087f0 	.word	0x200087f0

0800f32c <_malloc_r>:
 800f32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f330:	1ccd      	adds	r5, r1, #3
 800f332:	f025 0503 	bic.w	r5, r5, #3
 800f336:	3508      	adds	r5, #8
 800f338:	2d0c      	cmp	r5, #12
 800f33a:	bf38      	it	cc
 800f33c:	250c      	movcc	r5, #12
 800f33e:	2d00      	cmp	r5, #0
 800f340:	4607      	mov	r7, r0
 800f342:	db01      	blt.n	800f348 <_malloc_r+0x1c>
 800f344:	42a9      	cmp	r1, r5
 800f346:	d905      	bls.n	800f354 <_malloc_r+0x28>
 800f348:	230c      	movs	r3, #12
 800f34a:	603b      	str	r3, [r7, #0]
 800f34c:	2600      	movs	r6, #0
 800f34e:	4630      	mov	r0, r6
 800f350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f354:	4e2e      	ldr	r6, [pc, #184]	; (800f410 <_malloc_r+0xe4>)
 800f356:	f000 fdc3 	bl	800fee0 <__malloc_lock>
 800f35a:	6833      	ldr	r3, [r6, #0]
 800f35c:	461c      	mov	r4, r3
 800f35e:	bb34      	cbnz	r4, 800f3ae <_malloc_r+0x82>
 800f360:	4629      	mov	r1, r5
 800f362:	4638      	mov	r0, r7
 800f364:	f7ff ffc2 	bl	800f2ec <sbrk_aligned>
 800f368:	1c43      	adds	r3, r0, #1
 800f36a:	4604      	mov	r4, r0
 800f36c:	d14d      	bne.n	800f40a <_malloc_r+0xde>
 800f36e:	6834      	ldr	r4, [r6, #0]
 800f370:	4626      	mov	r6, r4
 800f372:	2e00      	cmp	r6, #0
 800f374:	d140      	bne.n	800f3f8 <_malloc_r+0xcc>
 800f376:	6823      	ldr	r3, [r4, #0]
 800f378:	4631      	mov	r1, r6
 800f37a:	4638      	mov	r0, r7
 800f37c:	eb04 0803 	add.w	r8, r4, r3
 800f380:	f000 fb36 	bl	800f9f0 <_sbrk_r>
 800f384:	4580      	cmp	r8, r0
 800f386:	d13a      	bne.n	800f3fe <_malloc_r+0xd2>
 800f388:	6821      	ldr	r1, [r4, #0]
 800f38a:	3503      	adds	r5, #3
 800f38c:	1a6d      	subs	r5, r5, r1
 800f38e:	f025 0503 	bic.w	r5, r5, #3
 800f392:	3508      	adds	r5, #8
 800f394:	2d0c      	cmp	r5, #12
 800f396:	bf38      	it	cc
 800f398:	250c      	movcc	r5, #12
 800f39a:	4629      	mov	r1, r5
 800f39c:	4638      	mov	r0, r7
 800f39e:	f7ff ffa5 	bl	800f2ec <sbrk_aligned>
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	d02b      	beq.n	800f3fe <_malloc_r+0xd2>
 800f3a6:	6823      	ldr	r3, [r4, #0]
 800f3a8:	442b      	add	r3, r5
 800f3aa:	6023      	str	r3, [r4, #0]
 800f3ac:	e00e      	b.n	800f3cc <_malloc_r+0xa0>
 800f3ae:	6822      	ldr	r2, [r4, #0]
 800f3b0:	1b52      	subs	r2, r2, r5
 800f3b2:	d41e      	bmi.n	800f3f2 <_malloc_r+0xc6>
 800f3b4:	2a0b      	cmp	r2, #11
 800f3b6:	d916      	bls.n	800f3e6 <_malloc_r+0xba>
 800f3b8:	1961      	adds	r1, r4, r5
 800f3ba:	42a3      	cmp	r3, r4
 800f3bc:	6025      	str	r5, [r4, #0]
 800f3be:	bf18      	it	ne
 800f3c0:	6059      	strne	r1, [r3, #4]
 800f3c2:	6863      	ldr	r3, [r4, #4]
 800f3c4:	bf08      	it	eq
 800f3c6:	6031      	streq	r1, [r6, #0]
 800f3c8:	5162      	str	r2, [r4, r5]
 800f3ca:	604b      	str	r3, [r1, #4]
 800f3cc:	4638      	mov	r0, r7
 800f3ce:	f104 060b 	add.w	r6, r4, #11
 800f3d2:	f000 fd8b 	bl	800feec <__malloc_unlock>
 800f3d6:	f026 0607 	bic.w	r6, r6, #7
 800f3da:	1d23      	adds	r3, r4, #4
 800f3dc:	1af2      	subs	r2, r6, r3
 800f3de:	d0b6      	beq.n	800f34e <_malloc_r+0x22>
 800f3e0:	1b9b      	subs	r3, r3, r6
 800f3e2:	50a3      	str	r3, [r4, r2]
 800f3e4:	e7b3      	b.n	800f34e <_malloc_r+0x22>
 800f3e6:	6862      	ldr	r2, [r4, #4]
 800f3e8:	42a3      	cmp	r3, r4
 800f3ea:	bf0c      	ite	eq
 800f3ec:	6032      	streq	r2, [r6, #0]
 800f3ee:	605a      	strne	r2, [r3, #4]
 800f3f0:	e7ec      	b.n	800f3cc <_malloc_r+0xa0>
 800f3f2:	4623      	mov	r3, r4
 800f3f4:	6864      	ldr	r4, [r4, #4]
 800f3f6:	e7b2      	b.n	800f35e <_malloc_r+0x32>
 800f3f8:	4634      	mov	r4, r6
 800f3fa:	6876      	ldr	r6, [r6, #4]
 800f3fc:	e7b9      	b.n	800f372 <_malloc_r+0x46>
 800f3fe:	230c      	movs	r3, #12
 800f400:	603b      	str	r3, [r7, #0]
 800f402:	4638      	mov	r0, r7
 800f404:	f000 fd72 	bl	800feec <__malloc_unlock>
 800f408:	e7a1      	b.n	800f34e <_malloc_r+0x22>
 800f40a:	6025      	str	r5, [r4, #0]
 800f40c:	e7de      	b.n	800f3cc <_malloc_r+0xa0>
 800f40e:	bf00      	nop
 800f410:	200087ec 	.word	0x200087ec

0800f414 <__sfputc_r>:
 800f414:	6893      	ldr	r3, [r2, #8]
 800f416:	3b01      	subs	r3, #1
 800f418:	2b00      	cmp	r3, #0
 800f41a:	b410      	push	{r4}
 800f41c:	6093      	str	r3, [r2, #8]
 800f41e:	da08      	bge.n	800f432 <__sfputc_r+0x1e>
 800f420:	6994      	ldr	r4, [r2, #24]
 800f422:	42a3      	cmp	r3, r4
 800f424:	db01      	blt.n	800f42a <__sfputc_r+0x16>
 800f426:	290a      	cmp	r1, #10
 800f428:	d103      	bne.n	800f432 <__sfputc_r+0x1e>
 800f42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f42e:	f000 bb33 	b.w	800fa98 <__swbuf_r>
 800f432:	6813      	ldr	r3, [r2, #0]
 800f434:	1c58      	adds	r0, r3, #1
 800f436:	6010      	str	r0, [r2, #0]
 800f438:	7019      	strb	r1, [r3, #0]
 800f43a:	4608      	mov	r0, r1
 800f43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f440:	4770      	bx	lr

0800f442 <__sfputs_r>:
 800f442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f444:	4606      	mov	r6, r0
 800f446:	460f      	mov	r7, r1
 800f448:	4614      	mov	r4, r2
 800f44a:	18d5      	adds	r5, r2, r3
 800f44c:	42ac      	cmp	r4, r5
 800f44e:	d101      	bne.n	800f454 <__sfputs_r+0x12>
 800f450:	2000      	movs	r0, #0
 800f452:	e007      	b.n	800f464 <__sfputs_r+0x22>
 800f454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f458:	463a      	mov	r2, r7
 800f45a:	4630      	mov	r0, r6
 800f45c:	f7ff ffda 	bl	800f414 <__sfputc_r>
 800f460:	1c43      	adds	r3, r0, #1
 800f462:	d1f3      	bne.n	800f44c <__sfputs_r+0xa>
 800f464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f468 <_vfiprintf_r>:
 800f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46c:	460d      	mov	r5, r1
 800f46e:	b09d      	sub	sp, #116	; 0x74
 800f470:	4614      	mov	r4, r2
 800f472:	4698      	mov	r8, r3
 800f474:	4606      	mov	r6, r0
 800f476:	b118      	cbz	r0, 800f480 <_vfiprintf_r+0x18>
 800f478:	6983      	ldr	r3, [r0, #24]
 800f47a:	b90b      	cbnz	r3, 800f480 <_vfiprintf_r+0x18>
 800f47c:	f7ff fe30 	bl	800f0e0 <__sinit>
 800f480:	4b89      	ldr	r3, [pc, #548]	; (800f6a8 <_vfiprintf_r+0x240>)
 800f482:	429d      	cmp	r5, r3
 800f484:	d11b      	bne.n	800f4be <_vfiprintf_r+0x56>
 800f486:	6875      	ldr	r5, [r6, #4]
 800f488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f48a:	07d9      	lsls	r1, r3, #31
 800f48c:	d405      	bmi.n	800f49a <_vfiprintf_r+0x32>
 800f48e:	89ab      	ldrh	r3, [r5, #12]
 800f490:	059a      	lsls	r2, r3, #22
 800f492:	d402      	bmi.n	800f49a <_vfiprintf_r+0x32>
 800f494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f496:	f7ff fed3 	bl	800f240 <__retarget_lock_acquire_recursive>
 800f49a:	89ab      	ldrh	r3, [r5, #12]
 800f49c:	071b      	lsls	r3, r3, #28
 800f49e:	d501      	bpl.n	800f4a4 <_vfiprintf_r+0x3c>
 800f4a0:	692b      	ldr	r3, [r5, #16]
 800f4a2:	b9eb      	cbnz	r3, 800f4e0 <_vfiprintf_r+0x78>
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f000 fb5a 	bl	800fb60 <__swsetup_r>
 800f4ac:	b1c0      	cbz	r0, 800f4e0 <_vfiprintf_r+0x78>
 800f4ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4b0:	07dc      	lsls	r4, r3, #31
 800f4b2:	d50e      	bpl.n	800f4d2 <_vfiprintf_r+0x6a>
 800f4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b8:	b01d      	add	sp, #116	; 0x74
 800f4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4be:	4b7b      	ldr	r3, [pc, #492]	; (800f6ac <_vfiprintf_r+0x244>)
 800f4c0:	429d      	cmp	r5, r3
 800f4c2:	d101      	bne.n	800f4c8 <_vfiprintf_r+0x60>
 800f4c4:	68b5      	ldr	r5, [r6, #8]
 800f4c6:	e7df      	b.n	800f488 <_vfiprintf_r+0x20>
 800f4c8:	4b79      	ldr	r3, [pc, #484]	; (800f6b0 <_vfiprintf_r+0x248>)
 800f4ca:	429d      	cmp	r5, r3
 800f4cc:	bf08      	it	eq
 800f4ce:	68f5      	ldreq	r5, [r6, #12]
 800f4d0:	e7da      	b.n	800f488 <_vfiprintf_r+0x20>
 800f4d2:	89ab      	ldrh	r3, [r5, #12]
 800f4d4:	0598      	lsls	r0, r3, #22
 800f4d6:	d4ed      	bmi.n	800f4b4 <_vfiprintf_r+0x4c>
 800f4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4da:	f7ff feb2 	bl	800f242 <__retarget_lock_release_recursive>
 800f4de:	e7e9      	b.n	800f4b4 <_vfiprintf_r+0x4c>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f4e4:	2320      	movs	r3, #32
 800f4e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4ee:	2330      	movs	r3, #48	; 0x30
 800f4f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f6b4 <_vfiprintf_r+0x24c>
 800f4f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4f8:	f04f 0901 	mov.w	r9, #1
 800f4fc:	4623      	mov	r3, r4
 800f4fe:	469a      	mov	sl, r3
 800f500:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f504:	b10a      	cbz	r2, 800f50a <_vfiprintf_r+0xa2>
 800f506:	2a25      	cmp	r2, #37	; 0x25
 800f508:	d1f9      	bne.n	800f4fe <_vfiprintf_r+0x96>
 800f50a:	ebba 0b04 	subs.w	fp, sl, r4
 800f50e:	d00b      	beq.n	800f528 <_vfiprintf_r+0xc0>
 800f510:	465b      	mov	r3, fp
 800f512:	4622      	mov	r2, r4
 800f514:	4629      	mov	r1, r5
 800f516:	4630      	mov	r0, r6
 800f518:	f7ff ff93 	bl	800f442 <__sfputs_r>
 800f51c:	3001      	adds	r0, #1
 800f51e:	f000 80aa 	beq.w	800f676 <_vfiprintf_r+0x20e>
 800f522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f524:	445a      	add	r2, fp
 800f526:	9209      	str	r2, [sp, #36]	; 0x24
 800f528:	f89a 3000 	ldrb.w	r3, [sl]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f000 80a2 	beq.w	800f676 <_vfiprintf_r+0x20e>
 800f532:	2300      	movs	r3, #0
 800f534:	f04f 32ff 	mov.w	r2, #4294967295
 800f538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f53c:	f10a 0a01 	add.w	sl, sl, #1
 800f540:	9304      	str	r3, [sp, #16]
 800f542:	9307      	str	r3, [sp, #28]
 800f544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f548:	931a      	str	r3, [sp, #104]	; 0x68
 800f54a:	4654      	mov	r4, sl
 800f54c:	2205      	movs	r2, #5
 800f54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f552:	4858      	ldr	r0, [pc, #352]	; (800f6b4 <_vfiprintf_r+0x24c>)
 800f554:	f7f0 fe8c 	bl	8000270 <memchr>
 800f558:	9a04      	ldr	r2, [sp, #16]
 800f55a:	b9d8      	cbnz	r0, 800f594 <_vfiprintf_r+0x12c>
 800f55c:	06d1      	lsls	r1, r2, #27
 800f55e:	bf44      	itt	mi
 800f560:	2320      	movmi	r3, #32
 800f562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f566:	0713      	lsls	r3, r2, #28
 800f568:	bf44      	itt	mi
 800f56a:	232b      	movmi	r3, #43	; 0x2b
 800f56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f570:	f89a 3000 	ldrb.w	r3, [sl]
 800f574:	2b2a      	cmp	r3, #42	; 0x2a
 800f576:	d015      	beq.n	800f5a4 <_vfiprintf_r+0x13c>
 800f578:	9a07      	ldr	r2, [sp, #28]
 800f57a:	4654      	mov	r4, sl
 800f57c:	2000      	movs	r0, #0
 800f57e:	f04f 0c0a 	mov.w	ip, #10
 800f582:	4621      	mov	r1, r4
 800f584:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f588:	3b30      	subs	r3, #48	; 0x30
 800f58a:	2b09      	cmp	r3, #9
 800f58c:	d94e      	bls.n	800f62c <_vfiprintf_r+0x1c4>
 800f58e:	b1b0      	cbz	r0, 800f5be <_vfiprintf_r+0x156>
 800f590:	9207      	str	r2, [sp, #28]
 800f592:	e014      	b.n	800f5be <_vfiprintf_r+0x156>
 800f594:	eba0 0308 	sub.w	r3, r0, r8
 800f598:	fa09 f303 	lsl.w	r3, r9, r3
 800f59c:	4313      	orrs	r3, r2
 800f59e:	9304      	str	r3, [sp, #16]
 800f5a0:	46a2      	mov	sl, r4
 800f5a2:	e7d2      	b.n	800f54a <_vfiprintf_r+0xe2>
 800f5a4:	9b03      	ldr	r3, [sp, #12]
 800f5a6:	1d19      	adds	r1, r3, #4
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	9103      	str	r1, [sp, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	bfbb      	ittet	lt
 800f5b0:	425b      	neglt	r3, r3
 800f5b2:	f042 0202 	orrlt.w	r2, r2, #2
 800f5b6:	9307      	strge	r3, [sp, #28]
 800f5b8:	9307      	strlt	r3, [sp, #28]
 800f5ba:	bfb8      	it	lt
 800f5bc:	9204      	strlt	r2, [sp, #16]
 800f5be:	7823      	ldrb	r3, [r4, #0]
 800f5c0:	2b2e      	cmp	r3, #46	; 0x2e
 800f5c2:	d10c      	bne.n	800f5de <_vfiprintf_r+0x176>
 800f5c4:	7863      	ldrb	r3, [r4, #1]
 800f5c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f5c8:	d135      	bne.n	800f636 <_vfiprintf_r+0x1ce>
 800f5ca:	9b03      	ldr	r3, [sp, #12]
 800f5cc:	1d1a      	adds	r2, r3, #4
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	9203      	str	r2, [sp, #12]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	bfb8      	it	lt
 800f5d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5da:	3402      	adds	r4, #2
 800f5dc:	9305      	str	r3, [sp, #20]
 800f5de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f6c4 <_vfiprintf_r+0x25c>
 800f5e2:	7821      	ldrb	r1, [r4, #0]
 800f5e4:	2203      	movs	r2, #3
 800f5e6:	4650      	mov	r0, sl
 800f5e8:	f7f0 fe42 	bl	8000270 <memchr>
 800f5ec:	b140      	cbz	r0, 800f600 <_vfiprintf_r+0x198>
 800f5ee:	2340      	movs	r3, #64	; 0x40
 800f5f0:	eba0 000a 	sub.w	r0, r0, sl
 800f5f4:	fa03 f000 	lsl.w	r0, r3, r0
 800f5f8:	9b04      	ldr	r3, [sp, #16]
 800f5fa:	4303      	orrs	r3, r0
 800f5fc:	3401      	adds	r4, #1
 800f5fe:	9304      	str	r3, [sp, #16]
 800f600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f604:	482c      	ldr	r0, [pc, #176]	; (800f6b8 <_vfiprintf_r+0x250>)
 800f606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f60a:	2206      	movs	r2, #6
 800f60c:	f7f0 fe30 	bl	8000270 <memchr>
 800f610:	2800      	cmp	r0, #0
 800f612:	d03f      	beq.n	800f694 <_vfiprintf_r+0x22c>
 800f614:	4b29      	ldr	r3, [pc, #164]	; (800f6bc <_vfiprintf_r+0x254>)
 800f616:	bb1b      	cbnz	r3, 800f660 <_vfiprintf_r+0x1f8>
 800f618:	9b03      	ldr	r3, [sp, #12]
 800f61a:	3307      	adds	r3, #7
 800f61c:	f023 0307 	bic.w	r3, r3, #7
 800f620:	3308      	adds	r3, #8
 800f622:	9303      	str	r3, [sp, #12]
 800f624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f626:	443b      	add	r3, r7
 800f628:	9309      	str	r3, [sp, #36]	; 0x24
 800f62a:	e767      	b.n	800f4fc <_vfiprintf_r+0x94>
 800f62c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f630:	460c      	mov	r4, r1
 800f632:	2001      	movs	r0, #1
 800f634:	e7a5      	b.n	800f582 <_vfiprintf_r+0x11a>
 800f636:	2300      	movs	r3, #0
 800f638:	3401      	adds	r4, #1
 800f63a:	9305      	str	r3, [sp, #20]
 800f63c:	4619      	mov	r1, r3
 800f63e:	f04f 0c0a 	mov.w	ip, #10
 800f642:	4620      	mov	r0, r4
 800f644:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f648:	3a30      	subs	r2, #48	; 0x30
 800f64a:	2a09      	cmp	r2, #9
 800f64c:	d903      	bls.n	800f656 <_vfiprintf_r+0x1ee>
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d0c5      	beq.n	800f5de <_vfiprintf_r+0x176>
 800f652:	9105      	str	r1, [sp, #20]
 800f654:	e7c3      	b.n	800f5de <_vfiprintf_r+0x176>
 800f656:	fb0c 2101 	mla	r1, ip, r1, r2
 800f65a:	4604      	mov	r4, r0
 800f65c:	2301      	movs	r3, #1
 800f65e:	e7f0      	b.n	800f642 <_vfiprintf_r+0x1da>
 800f660:	ab03      	add	r3, sp, #12
 800f662:	9300      	str	r3, [sp, #0]
 800f664:	462a      	mov	r2, r5
 800f666:	4b16      	ldr	r3, [pc, #88]	; (800f6c0 <_vfiprintf_r+0x258>)
 800f668:	a904      	add	r1, sp, #16
 800f66a:	4630      	mov	r0, r6
 800f66c:	f3af 8000 	nop.w
 800f670:	4607      	mov	r7, r0
 800f672:	1c78      	adds	r0, r7, #1
 800f674:	d1d6      	bne.n	800f624 <_vfiprintf_r+0x1bc>
 800f676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f678:	07d9      	lsls	r1, r3, #31
 800f67a:	d405      	bmi.n	800f688 <_vfiprintf_r+0x220>
 800f67c:	89ab      	ldrh	r3, [r5, #12]
 800f67e:	059a      	lsls	r2, r3, #22
 800f680:	d402      	bmi.n	800f688 <_vfiprintf_r+0x220>
 800f682:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f684:	f7ff fddd 	bl	800f242 <__retarget_lock_release_recursive>
 800f688:	89ab      	ldrh	r3, [r5, #12]
 800f68a:	065b      	lsls	r3, r3, #25
 800f68c:	f53f af12 	bmi.w	800f4b4 <_vfiprintf_r+0x4c>
 800f690:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f692:	e711      	b.n	800f4b8 <_vfiprintf_r+0x50>
 800f694:	ab03      	add	r3, sp, #12
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	462a      	mov	r2, r5
 800f69a:	4b09      	ldr	r3, [pc, #36]	; (800f6c0 <_vfiprintf_r+0x258>)
 800f69c:	a904      	add	r1, sp, #16
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f000 f880 	bl	800f7a4 <_printf_i>
 800f6a4:	e7e4      	b.n	800f670 <_vfiprintf_r+0x208>
 800f6a6:	bf00      	nop
 800f6a8:	08013a94 	.word	0x08013a94
 800f6ac:	08013ab4 	.word	0x08013ab4
 800f6b0:	08013a74 	.word	0x08013a74
 800f6b4:	08013ad4 	.word	0x08013ad4
 800f6b8:	08013ade 	.word	0x08013ade
 800f6bc:	00000000 	.word	0x00000000
 800f6c0:	0800f443 	.word	0x0800f443
 800f6c4:	08013ada 	.word	0x08013ada

0800f6c8 <_printf_common>:
 800f6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6cc:	4616      	mov	r6, r2
 800f6ce:	4699      	mov	r9, r3
 800f6d0:	688a      	ldr	r2, [r1, #8]
 800f6d2:	690b      	ldr	r3, [r1, #16]
 800f6d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	bfb8      	it	lt
 800f6dc:	4613      	movlt	r3, r2
 800f6de:	6033      	str	r3, [r6, #0]
 800f6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6e4:	4607      	mov	r7, r0
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	b10a      	cbz	r2, 800f6ee <_printf_common+0x26>
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	6033      	str	r3, [r6, #0]
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	0699      	lsls	r1, r3, #26
 800f6f2:	bf42      	ittt	mi
 800f6f4:	6833      	ldrmi	r3, [r6, #0]
 800f6f6:	3302      	addmi	r3, #2
 800f6f8:	6033      	strmi	r3, [r6, #0]
 800f6fa:	6825      	ldr	r5, [r4, #0]
 800f6fc:	f015 0506 	ands.w	r5, r5, #6
 800f700:	d106      	bne.n	800f710 <_printf_common+0x48>
 800f702:	f104 0a19 	add.w	sl, r4, #25
 800f706:	68e3      	ldr	r3, [r4, #12]
 800f708:	6832      	ldr	r2, [r6, #0]
 800f70a:	1a9b      	subs	r3, r3, r2
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	dc26      	bgt.n	800f75e <_printf_common+0x96>
 800f710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f714:	1e13      	subs	r3, r2, #0
 800f716:	6822      	ldr	r2, [r4, #0]
 800f718:	bf18      	it	ne
 800f71a:	2301      	movne	r3, #1
 800f71c:	0692      	lsls	r2, r2, #26
 800f71e:	d42b      	bmi.n	800f778 <_printf_common+0xb0>
 800f720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f724:	4649      	mov	r1, r9
 800f726:	4638      	mov	r0, r7
 800f728:	47c0      	blx	r8
 800f72a:	3001      	adds	r0, #1
 800f72c:	d01e      	beq.n	800f76c <_printf_common+0xa4>
 800f72e:	6823      	ldr	r3, [r4, #0]
 800f730:	68e5      	ldr	r5, [r4, #12]
 800f732:	6832      	ldr	r2, [r6, #0]
 800f734:	f003 0306 	and.w	r3, r3, #6
 800f738:	2b04      	cmp	r3, #4
 800f73a:	bf08      	it	eq
 800f73c:	1aad      	subeq	r5, r5, r2
 800f73e:	68a3      	ldr	r3, [r4, #8]
 800f740:	6922      	ldr	r2, [r4, #16]
 800f742:	bf0c      	ite	eq
 800f744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f748:	2500      	movne	r5, #0
 800f74a:	4293      	cmp	r3, r2
 800f74c:	bfc4      	itt	gt
 800f74e:	1a9b      	subgt	r3, r3, r2
 800f750:	18ed      	addgt	r5, r5, r3
 800f752:	2600      	movs	r6, #0
 800f754:	341a      	adds	r4, #26
 800f756:	42b5      	cmp	r5, r6
 800f758:	d11a      	bne.n	800f790 <_printf_common+0xc8>
 800f75a:	2000      	movs	r0, #0
 800f75c:	e008      	b.n	800f770 <_printf_common+0xa8>
 800f75e:	2301      	movs	r3, #1
 800f760:	4652      	mov	r2, sl
 800f762:	4649      	mov	r1, r9
 800f764:	4638      	mov	r0, r7
 800f766:	47c0      	blx	r8
 800f768:	3001      	adds	r0, #1
 800f76a:	d103      	bne.n	800f774 <_printf_common+0xac>
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295
 800f770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f774:	3501      	adds	r5, #1
 800f776:	e7c6      	b.n	800f706 <_printf_common+0x3e>
 800f778:	18e1      	adds	r1, r4, r3
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	2030      	movs	r0, #48	; 0x30
 800f77e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f782:	4422      	add	r2, r4
 800f784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f78c:	3302      	adds	r3, #2
 800f78e:	e7c7      	b.n	800f720 <_printf_common+0x58>
 800f790:	2301      	movs	r3, #1
 800f792:	4622      	mov	r2, r4
 800f794:	4649      	mov	r1, r9
 800f796:	4638      	mov	r0, r7
 800f798:	47c0      	blx	r8
 800f79a:	3001      	adds	r0, #1
 800f79c:	d0e6      	beq.n	800f76c <_printf_common+0xa4>
 800f79e:	3601      	adds	r6, #1
 800f7a0:	e7d9      	b.n	800f756 <_printf_common+0x8e>
	...

0800f7a4 <_printf_i>:
 800f7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a8:	7e0f      	ldrb	r7, [r1, #24]
 800f7aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7ac:	2f78      	cmp	r7, #120	; 0x78
 800f7ae:	4691      	mov	r9, r2
 800f7b0:	4680      	mov	r8, r0
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	469a      	mov	sl, r3
 800f7b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7ba:	d807      	bhi.n	800f7cc <_printf_i+0x28>
 800f7bc:	2f62      	cmp	r7, #98	; 0x62
 800f7be:	d80a      	bhi.n	800f7d6 <_printf_i+0x32>
 800f7c0:	2f00      	cmp	r7, #0
 800f7c2:	f000 80d8 	beq.w	800f976 <_printf_i+0x1d2>
 800f7c6:	2f58      	cmp	r7, #88	; 0x58
 800f7c8:	f000 80a3 	beq.w	800f912 <_printf_i+0x16e>
 800f7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7d4:	e03a      	b.n	800f84c <_printf_i+0xa8>
 800f7d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7da:	2b15      	cmp	r3, #21
 800f7dc:	d8f6      	bhi.n	800f7cc <_printf_i+0x28>
 800f7de:	a101      	add	r1, pc, #4	; (adr r1, 800f7e4 <_printf_i+0x40>)
 800f7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7e4:	0800f83d 	.word	0x0800f83d
 800f7e8:	0800f851 	.word	0x0800f851
 800f7ec:	0800f7cd 	.word	0x0800f7cd
 800f7f0:	0800f7cd 	.word	0x0800f7cd
 800f7f4:	0800f7cd 	.word	0x0800f7cd
 800f7f8:	0800f7cd 	.word	0x0800f7cd
 800f7fc:	0800f851 	.word	0x0800f851
 800f800:	0800f7cd 	.word	0x0800f7cd
 800f804:	0800f7cd 	.word	0x0800f7cd
 800f808:	0800f7cd 	.word	0x0800f7cd
 800f80c:	0800f7cd 	.word	0x0800f7cd
 800f810:	0800f95d 	.word	0x0800f95d
 800f814:	0800f881 	.word	0x0800f881
 800f818:	0800f93f 	.word	0x0800f93f
 800f81c:	0800f7cd 	.word	0x0800f7cd
 800f820:	0800f7cd 	.word	0x0800f7cd
 800f824:	0800f97f 	.word	0x0800f97f
 800f828:	0800f7cd 	.word	0x0800f7cd
 800f82c:	0800f881 	.word	0x0800f881
 800f830:	0800f7cd 	.word	0x0800f7cd
 800f834:	0800f7cd 	.word	0x0800f7cd
 800f838:	0800f947 	.word	0x0800f947
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	1d1a      	adds	r2, r3, #4
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	602a      	str	r2, [r5, #0]
 800f844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f84c:	2301      	movs	r3, #1
 800f84e:	e0a3      	b.n	800f998 <_printf_i+0x1f4>
 800f850:	6820      	ldr	r0, [r4, #0]
 800f852:	6829      	ldr	r1, [r5, #0]
 800f854:	0606      	lsls	r6, r0, #24
 800f856:	f101 0304 	add.w	r3, r1, #4
 800f85a:	d50a      	bpl.n	800f872 <_printf_i+0xce>
 800f85c:	680e      	ldr	r6, [r1, #0]
 800f85e:	602b      	str	r3, [r5, #0]
 800f860:	2e00      	cmp	r6, #0
 800f862:	da03      	bge.n	800f86c <_printf_i+0xc8>
 800f864:	232d      	movs	r3, #45	; 0x2d
 800f866:	4276      	negs	r6, r6
 800f868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f86c:	485e      	ldr	r0, [pc, #376]	; (800f9e8 <_printf_i+0x244>)
 800f86e:	230a      	movs	r3, #10
 800f870:	e019      	b.n	800f8a6 <_printf_i+0x102>
 800f872:	680e      	ldr	r6, [r1, #0]
 800f874:	602b      	str	r3, [r5, #0]
 800f876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f87a:	bf18      	it	ne
 800f87c:	b236      	sxthne	r6, r6
 800f87e:	e7ef      	b.n	800f860 <_printf_i+0xbc>
 800f880:	682b      	ldr	r3, [r5, #0]
 800f882:	6820      	ldr	r0, [r4, #0]
 800f884:	1d19      	adds	r1, r3, #4
 800f886:	6029      	str	r1, [r5, #0]
 800f888:	0601      	lsls	r1, r0, #24
 800f88a:	d501      	bpl.n	800f890 <_printf_i+0xec>
 800f88c:	681e      	ldr	r6, [r3, #0]
 800f88e:	e002      	b.n	800f896 <_printf_i+0xf2>
 800f890:	0646      	lsls	r6, r0, #25
 800f892:	d5fb      	bpl.n	800f88c <_printf_i+0xe8>
 800f894:	881e      	ldrh	r6, [r3, #0]
 800f896:	4854      	ldr	r0, [pc, #336]	; (800f9e8 <_printf_i+0x244>)
 800f898:	2f6f      	cmp	r7, #111	; 0x6f
 800f89a:	bf0c      	ite	eq
 800f89c:	2308      	moveq	r3, #8
 800f89e:	230a      	movne	r3, #10
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f8a6:	6865      	ldr	r5, [r4, #4]
 800f8a8:	60a5      	str	r5, [r4, #8]
 800f8aa:	2d00      	cmp	r5, #0
 800f8ac:	bfa2      	ittt	ge
 800f8ae:	6821      	ldrge	r1, [r4, #0]
 800f8b0:	f021 0104 	bicge.w	r1, r1, #4
 800f8b4:	6021      	strge	r1, [r4, #0]
 800f8b6:	b90e      	cbnz	r6, 800f8bc <_printf_i+0x118>
 800f8b8:	2d00      	cmp	r5, #0
 800f8ba:	d04d      	beq.n	800f958 <_printf_i+0x1b4>
 800f8bc:	4615      	mov	r5, r2
 800f8be:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8c2:	fb03 6711 	mls	r7, r3, r1, r6
 800f8c6:	5dc7      	ldrb	r7, [r0, r7]
 800f8c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8cc:	4637      	mov	r7, r6
 800f8ce:	42bb      	cmp	r3, r7
 800f8d0:	460e      	mov	r6, r1
 800f8d2:	d9f4      	bls.n	800f8be <_printf_i+0x11a>
 800f8d4:	2b08      	cmp	r3, #8
 800f8d6:	d10b      	bne.n	800f8f0 <_printf_i+0x14c>
 800f8d8:	6823      	ldr	r3, [r4, #0]
 800f8da:	07de      	lsls	r6, r3, #31
 800f8dc:	d508      	bpl.n	800f8f0 <_printf_i+0x14c>
 800f8de:	6923      	ldr	r3, [r4, #16]
 800f8e0:	6861      	ldr	r1, [r4, #4]
 800f8e2:	4299      	cmp	r1, r3
 800f8e4:	bfde      	ittt	le
 800f8e6:	2330      	movle	r3, #48	; 0x30
 800f8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f8f0:	1b52      	subs	r2, r2, r5
 800f8f2:	6122      	str	r2, [r4, #16]
 800f8f4:	f8cd a000 	str.w	sl, [sp]
 800f8f8:	464b      	mov	r3, r9
 800f8fa:	aa03      	add	r2, sp, #12
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	4640      	mov	r0, r8
 800f900:	f7ff fee2 	bl	800f6c8 <_printf_common>
 800f904:	3001      	adds	r0, #1
 800f906:	d14c      	bne.n	800f9a2 <_printf_i+0x1fe>
 800f908:	f04f 30ff 	mov.w	r0, #4294967295
 800f90c:	b004      	add	sp, #16
 800f90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f912:	4835      	ldr	r0, [pc, #212]	; (800f9e8 <_printf_i+0x244>)
 800f914:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f918:	6829      	ldr	r1, [r5, #0]
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f920:	6029      	str	r1, [r5, #0]
 800f922:	061d      	lsls	r5, r3, #24
 800f924:	d514      	bpl.n	800f950 <_printf_i+0x1ac>
 800f926:	07df      	lsls	r7, r3, #31
 800f928:	bf44      	itt	mi
 800f92a:	f043 0320 	orrmi.w	r3, r3, #32
 800f92e:	6023      	strmi	r3, [r4, #0]
 800f930:	b91e      	cbnz	r6, 800f93a <_printf_i+0x196>
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	f023 0320 	bic.w	r3, r3, #32
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	2310      	movs	r3, #16
 800f93c:	e7b0      	b.n	800f8a0 <_printf_i+0xfc>
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	f043 0320 	orr.w	r3, r3, #32
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	2378      	movs	r3, #120	; 0x78
 800f948:	4828      	ldr	r0, [pc, #160]	; (800f9ec <_printf_i+0x248>)
 800f94a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f94e:	e7e3      	b.n	800f918 <_printf_i+0x174>
 800f950:	0659      	lsls	r1, r3, #25
 800f952:	bf48      	it	mi
 800f954:	b2b6      	uxthmi	r6, r6
 800f956:	e7e6      	b.n	800f926 <_printf_i+0x182>
 800f958:	4615      	mov	r5, r2
 800f95a:	e7bb      	b.n	800f8d4 <_printf_i+0x130>
 800f95c:	682b      	ldr	r3, [r5, #0]
 800f95e:	6826      	ldr	r6, [r4, #0]
 800f960:	6961      	ldr	r1, [r4, #20]
 800f962:	1d18      	adds	r0, r3, #4
 800f964:	6028      	str	r0, [r5, #0]
 800f966:	0635      	lsls	r5, r6, #24
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	d501      	bpl.n	800f970 <_printf_i+0x1cc>
 800f96c:	6019      	str	r1, [r3, #0]
 800f96e:	e002      	b.n	800f976 <_printf_i+0x1d2>
 800f970:	0670      	lsls	r0, r6, #25
 800f972:	d5fb      	bpl.n	800f96c <_printf_i+0x1c8>
 800f974:	8019      	strh	r1, [r3, #0]
 800f976:	2300      	movs	r3, #0
 800f978:	6123      	str	r3, [r4, #16]
 800f97a:	4615      	mov	r5, r2
 800f97c:	e7ba      	b.n	800f8f4 <_printf_i+0x150>
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	1d1a      	adds	r2, r3, #4
 800f982:	602a      	str	r2, [r5, #0]
 800f984:	681d      	ldr	r5, [r3, #0]
 800f986:	6862      	ldr	r2, [r4, #4]
 800f988:	2100      	movs	r1, #0
 800f98a:	4628      	mov	r0, r5
 800f98c:	f7f0 fc70 	bl	8000270 <memchr>
 800f990:	b108      	cbz	r0, 800f996 <_printf_i+0x1f2>
 800f992:	1b40      	subs	r0, r0, r5
 800f994:	6060      	str	r0, [r4, #4]
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	6123      	str	r3, [r4, #16]
 800f99a:	2300      	movs	r3, #0
 800f99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9a0:	e7a8      	b.n	800f8f4 <_printf_i+0x150>
 800f9a2:	6923      	ldr	r3, [r4, #16]
 800f9a4:	462a      	mov	r2, r5
 800f9a6:	4649      	mov	r1, r9
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	47d0      	blx	sl
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d0ab      	beq.n	800f908 <_printf_i+0x164>
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	079b      	lsls	r3, r3, #30
 800f9b4:	d413      	bmi.n	800f9de <_printf_i+0x23a>
 800f9b6:	68e0      	ldr	r0, [r4, #12]
 800f9b8:	9b03      	ldr	r3, [sp, #12]
 800f9ba:	4298      	cmp	r0, r3
 800f9bc:	bfb8      	it	lt
 800f9be:	4618      	movlt	r0, r3
 800f9c0:	e7a4      	b.n	800f90c <_printf_i+0x168>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4632      	mov	r2, r6
 800f9c6:	4649      	mov	r1, r9
 800f9c8:	4640      	mov	r0, r8
 800f9ca:	47d0      	blx	sl
 800f9cc:	3001      	adds	r0, #1
 800f9ce:	d09b      	beq.n	800f908 <_printf_i+0x164>
 800f9d0:	3501      	adds	r5, #1
 800f9d2:	68e3      	ldr	r3, [r4, #12]
 800f9d4:	9903      	ldr	r1, [sp, #12]
 800f9d6:	1a5b      	subs	r3, r3, r1
 800f9d8:	42ab      	cmp	r3, r5
 800f9da:	dcf2      	bgt.n	800f9c2 <_printf_i+0x21e>
 800f9dc:	e7eb      	b.n	800f9b6 <_printf_i+0x212>
 800f9de:	2500      	movs	r5, #0
 800f9e0:	f104 0619 	add.w	r6, r4, #25
 800f9e4:	e7f5      	b.n	800f9d2 <_printf_i+0x22e>
 800f9e6:	bf00      	nop
 800f9e8:	08013ae5 	.word	0x08013ae5
 800f9ec:	08013af6 	.word	0x08013af6

0800f9f0 <_sbrk_r>:
 800f9f0:	b538      	push	{r3, r4, r5, lr}
 800f9f2:	4d06      	ldr	r5, [pc, #24]	; (800fa0c <_sbrk_r+0x1c>)
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	4608      	mov	r0, r1
 800f9fa:	602b      	str	r3, [r5, #0]
 800f9fc:	f7f0 ffd6 	bl	80009ac <_sbrk>
 800fa00:	1c43      	adds	r3, r0, #1
 800fa02:	d102      	bne.n	800fa0a <_sbrk_r+0x1a>
 800fa04:	682b      	ldr	r3, [r5, #0]
 800fa06:	b103      	cbz	r3, 800fa0a <_sbrk_r+0x1a>
 800fa08:	6023      	str	r3, [r4, #0]
 800fa0a:	bd38      	pop	{r3, r4, r5, pc}
 800fa0c:	200087e4 	.word	0x200087e4

0800fa10 <__sread>:
 800fa10:	b510      	push	{r4, lr}
 800fa12:	460c      	mov	r4, r1
 800fa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa18:	f000 fa6e 	bl	800fef8 <_read_r>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	bfab      	itete	ge
 800fa20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa22:	89a3      	ldrhlt	r3, [r4, #12]
 800fa24:	181b      	addge	r3, r3, r0
 800fa26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa2a:	bfac      	ite	ge
 800fa2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa2e:	81a3      	strhlt	r3, [r4, #12]
 800fa30:	bd10      	pop	{r4, pc}

0800fa32 <__swrite>:
 800fa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa36:	461f      	mov	r7, r3
 800fa38:	898b      	ldrh	r3, [r1, #12]
 800fa3a:	05db      	lsls	r3, r3, #23
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	460c      	mov	r4, r1
 800fa40:	4616      	mov	r6, r2
 800fa42:	d505      	bpl.n	800fa50 <__swrite+0x1e>
 800fa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa48:	2302      	movs	r3, #2
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	f000 f9d0 	bl	800fdf0 <_lseek_r>
 800fa50:	89a3      	ldrh	r3, [r4, #12]
 800fa52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa5a:	81a3      	strh	r3, [r4, #12]
 800fa5c:	4632      	mov	r2, r6
 800fa5e:	463b      	mov	r3, r7
 800fa60:	4628      	mov	r0, r5
 800fa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa66:	f000 b869 	b.w	800fb3c <_write_r>

0800fa6a <__sseek>:
 800fa6a:	b510      	push	{r4, lr}
 800fa6c:	460c      	mov	r4, r1
 800fa6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa72:	f000 f9bd 	bl	800fdf0 <_lseek_r>
 800fa76:	1c43      	adds	r3, r0, #1
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	bf15      	itete	ne
 800fa7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa86:	81a3      	strheq	r3, [r4, #12]
 800fa88:	bf18      	it	ne
 800fa8a:	81a3      	strhne	r3, [r4, #12]
 800fa8c:	bd10      	pop	{r4, pc}

0800fa8e <__sclose>:
 800fa8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa92:	f000 b8db 	b.w	800fc4c <_close_r>
	...

0800fa98 <__swbuf_r>:
 800fa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9a:	460e      	mov	r6, r1
 800fa9c:	4614      	mov	r4, r2
 800fa9e:	4605      	mov	r5, r0
 800faa0:	b118      	cbz	r0, 800faaa <__swbuf_r+0x12>
 800faa2:	6983      	ldr	r3, [r0, #24]
 800faa4:	b90b      	cbnz	r3, 800faaa <__swbuf_r+0x12>
 800faa6:	f7ff fb1b 	bl	800f0e0 <__sinit>
 800faaa:	4b21      	ldr	r3, [pc, #132]	; (800fb30 <__swbuf_r+0x98>)
 800faac:	429c      	cmp	r4, r3
 800faae:	d12b      	bne.n	800fb08 <__swbuf_r+0x70>
 800fab0:	686c      	ldr	r4, [r5, #4]
 800fab2:	69a3      	ldr	r3, [r4, #24]
 800fab4:	60a3      	str	r3, [r4, #8]
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	071a      	lsls	r2, r3, #28
 800faba:	d52f      	bpl.n	800fb1c <__swbuf_r+0x84>
 800fabc:	6923      	ldr	r3, [r4, #16]
 800fabe:	b36b      	cbz	r3, 800fb1c <__swbuf_r+0x84>
 800fac0:	6923      	ldr	r3, [r4, #16]
 800fac2:	6820      	ldr	r0, [r4, #0]
 800fac4:	1ac0      	subs	r0, r0, r3
 800fac6:	6963      	ldr	r3, [r4, #20]
 800fac8:	b2f6      	uxtb	r6, r6
 800faca:	4283      	cmp	r3, r0
 800facc:	4637      	mov	r7, r6
 800face:	dc04      	bgt.n	800fada <__swbuf_r+0x42>
 800fad0:	4621      	mov	r1, r4
 800fad2:	4628      	mov	r0, r5
 800fad4:	f000 f950 	bl	800fd78 <_fflush_r>
 800fad8:	bb30      	cbnz	r0, 800fb28 <__swbuf_r+0x90>
 800fada:	68a3      	ldr	r3, [r4, #8]
 800fadc:	3b01      	subs	r3, #1
 800fade:	60a3      	str	r3, [r4, #8]
 800fae0:	6823      	ldr	r3, [r4, #0]
 800fae2:	1c5a      	adds	r2, r3, #1
 800fae4:	6022      	str	r2, [r4, #0]
 800fae6:	701e      	strb	r6, [r3, #0]
 800fae8:	6963      	ldr	r3, [r4, #20]
 800faea:	3001      	adds	r0, #1
 800faec:	4283      	cmp	r3, r0
 800faee:	d004      	beq.n	800fafa <__swbuf_r+0x62>
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	07db      	lsls	r3, r3, #31
 800faf4:	d506      	bpl.n	800fb04 <__swbuf_r+0x6c>
 800faf6:	2e0a      	cmp	r6, #10
 800faf8:	d104      	bne.n	800fb04 <__swbuf_r+0x6c>
 800fafa:	4621      	mov	r1, r4
 800fafc:	4628      	mov	r0, r5
 800fafe:	f000 f93b 	bl	800fd78 <_fflush_r>
 800fb02:	b988      	cbnz	r0, 800fb28 <__swbuf_r+0x90>
 800fb04:	4638      	mov	r0, r7
 800fb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb08:	4b0a      	ldr	r3, [pc, #40]	; (800fb34 <__swbuf_r+0x9c>)
 800fb0a:	429c      	cmp	r4, r3
 800fb0c:	d101      	bne.n	800fb12 <__swbuf_r+0x7a>
 800fb0e:	68ac      	ldr	r4, [r5, #8]
 800fb10:	e7cf      	b.n	800fab2 <__swbuf_r+0x1a>
 800fb12:	4b09      	ldr	r3, [pc, #36]	; (800fb38 <__swbuf_r+0xa0>)
 800fb14:	429c      	cmp	r4, r3
 800fb16:	bf08      	it	eq
 800fb18:	68ec      	ldreq	r4, [r5, #12]
 800fb1a:	e7ca      	b.n	800fab2 <__swbuf_r+0x1a>
 800fb1c:	4621      	mov	r1, r4
 800fb1e:	4628      	mov	r0, r5
 800fb20:	f000 f81e 	bl	800fb60 <__swsetup_r>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d0cb      	beq.n	800fac0 <__swbuf_r+0x28>
 800fb28:	f04f 37ff 	mov.w	r7, #4294967295
 800fb2c:	e7ea      	b.n	800fb04 <__swbuf_r+0x6c>
 800fb2e:	bf00      	nop
 800fb30:	08013a94 	.word	0x08013a94
 800fb34:	08013ab4 	.word	0x08013ab4
 800fb38:	08013a74 	.word	0x08013a74

0800fb3c <_write_r>:
 800fb3c:	b538      	push	{r3, r4, r5, lr}
 800fb3e:	4d07      	ldr	r5, [pc, #28]	; (800fb5c <_write_r+0x20>)
 800fb40:	4604      	mov	r4, r0
 800fb42:	4608      	mov	r0, r1
 800fb44:	4611      	mov	r1, r2
 800fb46:	2200      	movs	r2, #0
 800fb48:	602a      	str	r2, [r5, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f7f0 fedd 	bl	800090a <_write>
 800fb50:	1c43      	adds	r3, r0, #1
 800fb52:	d102      	bne.n	800fb5a <_write_r+0x1e>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	b103      	cbz	r3, 800fb5a <_write_r+0x1e>
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	bd38      	pop	{r3, r4, r5, pc}
 800fb5c:	200087e4 	.word	0x200087e4

0800fb60 <__swsetup_r>:
 800fb60:	4b32      	ldr	r3, [pc, #200]	; (800fc2c <__swsetup_r+0xcc>)
 800fb62:	b570      	push	{r4, r5, r6, lr}
 800fb64:	681d      	ldr	r5, [r3, #0]
 800fb66:	4606      	mov	r6, r0
 800fb68:	460c      	mov	r4, r1
 800fb6a:	b125      	cbz	r5, 800fb76 <__swsetup_r+0x16>
 800fb6c:	69ab      	ldr	r3, [r5, #24]
 800fb6e:	b913      	cbnz	r3, 800fb76 <__swsetup_r+0x16>
 800fb70:	4628      	mov	r0, r5
 800fb72:	f7ff fab5 	bl	800f0e0 <__sinit>
 800fb76:	4b2e      	ldr	r3, [pc, #184]	; (800fc30 <__swsetup_r+0xd0>)
 800fb78:	429c      	cmp	r4, r3
 800fb7a:	d10f      	bne.n	800fb9c <__swsetup_r+0x3c>
 800fb7c:	686c      	ldr	r4, [r5, #4]
 800fb7e:	89a3      	ldrh	r3, [r4, #12]
 800fb80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb84:	0719      	lsls	r1, r3, #28
 800fb86:	d42c      	bmi.n	800fbe2 <__swsetup_r+0x82>
 800fb88:	06dd      	lsls	r5, r3, #27
 800fb8a:	d411      	bmi.n	800fbb0 <__swsetup_r+0x50>
 800fb8c:	2309      	movs	r3, #9
 800fb8e:	6033      	str	r3, [r6, #0]
 800fb90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb94:	81a3      	strh	r3, [r4, #12]
 800fb96:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9a:	e03e      	b.n	800fc1a <__swsetup_r+0xba>
 800fb9c:	4b25      	ldr	r3, [pc, #148]	; (800fc34 <__swsetup_r+0xd4>)
 800fb9e:	429c      	cmp	r4, r3
 800fba0:	d101      	bne.n	800fba6 <__swsetup_r+0x46>
 800fba2:	68ac      	ldr	r4, [r5, #8]
 800fba4:	e7eb      	b.n	800fb7e <__swsetup_r+0x1e>
 800fba6:	4b24      	ldr	r3, [pc, #144]	; (800fc38 <__swsetup_r+0xd8>)
 800fba8:	429c      	cmp	r4, r3
 800fbaa:	bf08      	it	eq
 800fbac:	68ec      	ldreq	r4, [r5, #12]
 800fbae:	e7e6      	b.n	800fb7e <__swsetup_r+0x1e>
 800fbb0:	0758      	lsls	r0, r3, #29
 800fbb2:	d512      	bpl.n	800fbda <__swsetup_r+0x7a>
 800fbb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbb6:	b141      	cbz	r1, 800fbca <__swsetup_r+0x6a>
 800fbb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbbc:	4299      	cmp	r1, r3
 800fbbe:	d002      	beq.n	800fbc6 <__swsetup_r+0x66>
 800fbc0:	4630      	mov	r0, r6
 800fbc2:	f7ff fb47 	bl	800f254 <_free_r>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	6363      	str	r3, [r4, #52]	; 0x34
 800fbca:	89a3      	ldrh	r3, [r4, #12]
 800fbcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fbd0:	81a3      	strh	r3, [r4, #12]
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	6063      	str	r3, [r4, #4]
 800fbd6:	6923      	ldr	r3, [r4, #16]
 800fbd8:	6023      	str	r3, [r4, #0]
 800fbda:	89a3      	ldrh	r3, [r4, #12]
 800fbdc:	f043 0308 	orr.w	r3, r3, #8
 800fbe0:	81a3      	strh	r3, [r4, #12]
 800fbe2:	6923      	ldr	r3, [r4, #16]
 800fbe4:	b94b      	cbnz	r3, 800fbfa <__swsetup_r+0x9a>
 800fbe6:	89a3      	ldrh	r3, [r4, #12]
 800fbe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fbec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbf0:	d003      	beq.n	800fbfa <__swsetup_r+0x9a>
 800fbf2:	4621      	mov	r1, r4
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f000 f933 	bl	800fe60 <__smakebuf_r>
 800fbfa:	89a0      	ldrh	r0, [r4, #12]
 800fbfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc00:	f010 0301 	ands.w	r3, r0, #1
 800fc04:	d00a      	beq.n	800fc1c <__swsetup_r+0xbc>
 800fc06:	2300      	movs	r3, #0
 800fc08:	60a3      	str	r3, [r4, #8]
 800fc0a:	6963      	ldr	r3, [r4, #20]
 800fc0c:	425b      	negs	r3, r3
 800fc0e:	61a3      	str	r3, [r4, #24]
 800fc10:	6923      	ldr	r3, [r4, #16]
 800fc12:	b943      	cbnz	r3, 800fc26 <__swsetup_r+0xc6>
 800fc14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fc18:	d1ba      	bne.n	800fb90 <__swsetup_r+0x30>
 800fc1a:	bd70      	pop	{r4, r5, r6, pc}
 800fc1c:	0781      	lsls	r1, r0, #30
 800fc1e:	bf58      	it	pl
 800fc20:	6963      	ldrpl	r3, [r4, #20]
 800fc22:	60a3      	str	r3, [r4, #8]
 800fc24:	e7f4      	b.n	800fc10 <__swsetup_r+0xb0>
 800fc26:	2000      	movs	r0, #0
 800fc28:	e7f7      	b.n	800fc1a <__swsetup_r+0xba>
 800fc2a:	bf00      	nop
 800fc2c:	2000002c 	.word	0x2000002c
 800fc30:	08013a94 	.word	0x08013a94
 800fc34:	08013ab4 	.word	0x08013ab4
 800fc38:	08013a74 	.word	0x08013a74

0800fc3c <abort>:
 800fc3c:	b508      	push	{r3, lr}
 800fc3e:	2006      	movs	r0, #6
 800fc40:	f000 f994 	bl	800ff6c <raise>
 800fc44:	2001      	movs	r0, #1
 800fc46:	f7f0 fe39 	bl	80008bc <_exit>
	...

0800fc4c <_close_r>:
 800fc4c:	b538      	push	{r3, r4, r5, lr}
 800fc4e:	4d06      	ldr	r5, [pc, #24]	; (800fc68 <_close_r+0x1c>)
 800fc50:	2300      	movs	r3, #0
 800fc52:	4604      	mov	r4, r0
 800fc54:	4608      	mov	r0, r1
 800fc56:	602b      	str	r3, [r5, #0]
 800fc58:	f7f0 fe73 	bl	8000942 <_close>
 800fc5c:	1c43      	adds	r3, r0, #1
 800fc5e:	d102      	bne.n	800fc66 <_close_r+0x1a>
 800fc60:	682b      	ldr	r3, [r5, #0]
 800fc62:	b103      	cbz	r3, 800fc66 <_close_r+0x1a>
 800fc64:	6023      	str	r3, [r4, #0]
 800fc66:	bd38      	pop	{r3, r4, r5, pc}
 800fc68:	200087e4 	.word	0x200087e4

0800fc6c <__sflush_r>:
 800fc6c:	898a      	ldrh	r2, [r1, #12]
 800fc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc72:	4605      	mov	r5, r0
 800fc74:	0710      	lsls	r0, r2, #28
 800fc76:	460c      	mov	r4, r1
 800fc78:	d458      	bmi.n	800fd2c <__sflush_r+0xc0>
 800fc7a:	684b      	ldr	r3, [r1, #4]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	dc05      	bgt.n	800fc8c <__sflush_r+0x20>
 800fc80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	dc02      	bgt.n	800fc8c <__sflush_r+0x20>
 800fc86:	2000      	movs	r0, #0
 800fc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc8e:	2e00      	cmp	r6, #0
 800fc90:	d0f9      	beq.n	800fc86 <__sflush_r+0x1a>
 800fc92:	2300      	movs	r3, #0
 800fc94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc98:	682f      	ldr	r7, [r5, #0]
 800fc9a:	602b      	str	r3, [r5, #0]
 800fc9c:	d032      	beq.n	800fd04 <__sflush_r+0x98>
 800fc9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	075a      	lsls	r2, r3, #29
 800fca4:	d505      	bpl.n	800fcb2 <__sflush_r+0x46>
 800fca6:	6863      	ldr	r3, [r4, #4]
 800fca8:	1ac0      	subs	r0, r0, r3
 800fcaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcac:	b10b      	cbz	r3, 800fcb2 <__sflush_r+0x46>
 800fcae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcb0:	1ac0      	subs	r0, r0, r3
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcb8:	6a21      	ldr	r1, [r4, #32]
 800fcba:	4628      	mov	r0, r5
 800fcbc:	47b0      	blx	r6
 800fcbe:	1c43      	adds	r3, r0, #1
 800fcc0:	89a3      	ldrh	r3, [r4, #12]
 800fcc2:	d106      	bne.n	800fcd2 <__sflush_r+0x66>
 800fcc4:	6829      	ldr	r1, [r5, #0]
 800fcc6:	291d      	cmp	r1, #29
 800fcc8:	d82c      	bhi.n	800fd24 <__sflush_r+0xb8>
 800fcca:	4a2a      	ldr	r2, [pc, #168]	; (800fd74 <__sflush_r+0x108>)
 800fccc:	40ca      	lsrs	r2, r1
 800fcce:	07d6      	lsls	r6, r2, #31
 800fcd0:	d528      	bpl.n	800fd24 <__sflush_r+0xb8>
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	6062      	str	r2, [r4, #4]
 800fcd6:	04d9      	lsls	r1, r3, #19
 800fcd8:	6922      	ldr	r2, [r4, #16]
 800fcda:	6022      	str	r2, [r4, #0]
 800fcdc:	d504      	bpl.n	800fce8 <__sflush_r+0x7c>
 800fcde:	1c42      	adds	r2, r0, #1
 800fce0:	d101      	bne.n	800fce6 <__sflush_r+0x7a>
 800fce2:	682b      	ldr	r3, [r5, #0]
 800fce4:	b903      	cbnz	r3, 800fce8 <__sflush_r+0x7c>
 800fce6:	6560      	str	r0, [r4, #84]	; 0x54
 800fce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcea:	602f      	str	r7, [r5, #0]
 800fcec:	2900      	cmp	r1, #0
 800fcee:	d0ca      	beq.n	800fc86 <__sflush_r+0x1a>
 800fcf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcf4:	4299      	cmp	r1, r3
 800fcf6:	d002      	beq.n	800fcfe <__sflush_r+0x92>
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f7ff faab 	bl	800f254 <_free_r>
 800fcfe:	2000      	movs	r0, #0
 800fd00:	6360      	str	r0, [r4, #52]	; 0x34
 800fd02:	e7c1      	b.n	800fc88 <__sflush_r+0x1c>
 800fd04:	6a21      	ldr	r1, [r4, #32]
 800fd06:	2301      	movs	r3, #1
 800fd08:	4628      	mov	r0, r5
 800fd0a:	47b0      	blx	r6
 800fd0c:	1c41      	adds	r1, r0, #1
 800fd0e:	d1c7      	bne.n	800fca0 <__sflush_r+0x34>
 800fd10:	682b      	ldr	r3, [r5, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d0c4      	beq.n	800fca0 <__sflush_r+0x34>
 800fd16:	2b1d      	cmp	r3, #29
 800fd18:	d001      	beq.n	800fd1e <__sflush_r+0xb2>
 800fd1a:	2b16      	cmp	r3, #22
 800fd1c:	d101      	bne.n	800fd22 <__sflush_r+0xb6>
 800fd1e:	602f      	str	r7, [r5, #0]
 800fd20:	e7b1      	b.n	800fc86 <__sflush_r+0x1a>
 800fd22:	89a3      	ldrh	r3, [r4, #12]
 800fd24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd28:	81a3      	strh	r3, [r4, #12]
 800fd2a:	e7ad      	b.n	800fc88 <__sflush_r+0x1c>
 800fd2c:	690f      	ldr	r7, [r1, #16]
 800fd2e:	2f00      	cmp	r7, #0
 800fd30:	d0a9      	beq.n	800fc86 <__sflush_r+0x1a>
 800fd32:	0793      	lsls	r3, r2, #30
 800fd34:	680e      	ldr	r6, [r1, #0]
 800fd36:	bf08      	it	eq
 800fd38:	694b      	ldreq	r3, [r1, #20]
 800fd3a:	600f      	str	r7, [r1, #0]
 800fd3c:	bf18      	it	ne
 800fd3e:	2300      	movne	r3, #0
 800fd40:	eba6 0807 	sub.w	r8, r6, r7
 800fd44:	608b      	str	r3, [r1, #8]
 800fd46:	f1b8 0f00 	cmp.w	r8, #0
 800fd4a:	dd9c      	ble.n	800fc86 <__sflush_r+0x1a>
 800fd4c:	6a21      	ldr	r1, [r4, #32]
 800fd4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fd50:	4643      	mov	r3, r8
 800fd52:	463a      	mov	r2, r7
 800fd54:	4628      	mov	r0, r5
 800fd56:	47b0      	blx	r6
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	dc06      	bgt.n	800fd6a <__sflush_r+0xfe>
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd62:	81a3      	strh	r3, [r4, #12]
 800fd64:	f04f 30ff 	mov.w	r0, #4294967295
 800fd68:	e78e      	b.n	800fc88 <__sflush_r+0x1c>
 800fd6a:	4407      	add	r7, r0
 800fd6c:	eba8 0800 	sub.w	r8, r8, r0
 800fd70:	e7e9      	b.n	800fd46 <__sflush_r+0xda>
 800fd72:	bf00      	nop
 800fd74:	20400001 	.word	0x20400001

0800fd78 <_fflush_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	690b      	ldr	r3, [r1, #16]
 800fd7c:	4605      	mov	r5, r0
 800fd7e:	460c      	mov	r4, r1
 800fd80:	b913      	cbnz	r3, 800fd88 <_fflush_r+0x10>
 800fd82:	2500      	movs	r5, #0
 800fd84:	4628      	mov	r0, r5
 800fd86:	bd38      	pop	{r3, r4, r5, pc}
 800fd88:	b118      	cbz	r0, 800fd92 <_fflush_r+0x1a>
 800fd8a:	6983      	ldr	r3, [r0, #24]
 800fd8c:	b90b      	cbnz	r3, 800fd92 <_fflush_r+0x1a>
 800fd8e:	f7ff f9a7 	bl	800f0e0 <__sinit>
 800fd92:	4b14      	ldr	r3, [pc, #80]	; (800fde4 <_fflush_r+0x6c>)
 800fd94:	429c      	cmp	r4, r3
 800fd96:	d11b      	bne.n	800fdd0 <_fflush_r+0x58>
 800fd98:	686c      	ldr	r4, [r5, #4]
 800fd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d0ef      	beq.n	800fd82 <_fflush_r+0xa>
 800fda2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fda4:	07d0      	lsls	r0, r2, #31
 800fda6:	d404      	bmi.n	800fdb2 <_fflush_r+0x3a>
 800fda8:	0599      	lsls	r1, r3, #22
 800fdaa:	d402      	bmi.n	800fdb2 <_fflush_r+0x3a>
 800fdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdae:	f7ff fa47 	bl	800f240 <__retarget_lock_acquire_recursive>
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	4621      	mov	r1, r4
 800fdb6:	f7ff ff59 	bl	800fc6c <__sflush_r>
 800fdba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdbc:	07da      	lsls	r2, r3, #31
 800fdbe:	4605      	mov	r5, r0
 800fdc0:	d4e0      	bmi.n	800fd84 <_fflush_r+0xc>
 800fdc2:	89a3      	ldrh	r3, [r4, #12]
 800fdc4:	059b      	lsls	r3, r3, #22
 800fdc6:	d4dd      	bmi.n	800fd84 <_fflush_r+0xc>
 800fdc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdca:	f7ff fa3a 	bl	800f242 <__retarget_lock_release_recursive>
 800fdce:	e7d9      	b.n	800fd84 <_fflush_r+0xc>
 800fdd0:	4b05      	ldr	r3, [pc, #20]	; (800fde8 <_fflush_r+0x70>)
 800fdd2:	429c      	cmp	r4, r3
 800fdd4:	d101      	bne.n	800fdda <_fflush_r+0x62>
 800fdd6:	68ac      	ldr	r4, [r5, #8]
 800fdd8:	e7df      	b.n	800fd9a <_fflush_r+0x22>
 800fdda:	4b04      	ldr	r3, [pc, #16]	; (800fdec <_fflush_r+0x74>)
 800fddc:	429c      	cmp	r4, r3
 800fdde:	bf08      	it	eq
 800fde0:	68ec      	ldreq	r4, [r5, #12]
 800fde2:	e7da      	b.n	800fd9a <_fflush_r+0x22>
 800fde4:	08013a94 	.word	0x08013a94
 800fde8:	08013ab4 	.word	0x08013ab4
 800fdec:	08013a74 	.word	0x08013a74

0800fdf0 <_lseek_r>:
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	4d07      	ldr	r5, [pc, #28]	; (800fe10 <_lseek_r+0x20>)
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	4608      	mov	r0, r1
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	602a      	str	r2, [r5, #0]
 800fdfe:	461a      	mov	r2, r3
 800fe00:	f7f0 fdc6 	bl	8000990 <_lseek>
 800fe04:	1c43      	adds	r3, r0, #1
 800fe06:	d102      	bne.n	800fe0e <_lseek_r+0x1e>
 800fe08:	682b      	ldr	r3, [r5, #0]
 800fe0a:	b103      	cbz	r3, 800fe0e <_lseek_r+0x1e>
 800fe0c:	6023      	str	r3, [r4, #0]
 800fe0e:	bd38      	pop	{r3, r4, r5, pc}
 800fe10:	200087e4 	.word	0x200087e4

0800fe14 <__swhatbuf_r>:
 800fe14:	b570      	push	{r4, r5, r6, lr}
 800fe16:	460e      	mov	r6, r1
 800fe18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe1c:	2900      	cmp	r1, #0
 800fe1e:	b096      	sub	sp, #88	; 0x58
 800fe20:	4614      	mov	r4, r2
 800fe22:	461d      	mov	r5, r3
 800fe24:	da08      	bge.n	800fe38 <__swhatbuf_r+0x24>
 800fe26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	602a      	str	r2, [r5, #0]
 800fe2e:	061a      	lsls	r2, r3, #24
 800fe30:	d410      	bmi.n	800fe54 <__swhatbuf_r+0x40>
 800fe32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe36:	e00e      	b.n	800fe56 <__swhatbuf_r+0x42>
 800fe38:	466a      	mov	r2, sp
 800fe3a:	f000 f8b3 	bl	800ffa4 <_fstat_r>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	dbf1      	blt.n	800fe26 <__swhatbuf_r+0x12>
 800fe42:	9a01      	ldr	r2, [sp, #4]
 800fe44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe4c:	425a      	negs	r2, r3
 800fe4e:	415a      	adcs	r2, r3
 800fe50:	602a      	str	r2, [r5, #0]
 800fe52:	e7ee      	b.n	800fe32 <__swhatbuf_r+0x1e>
 800fe54:	2340      	movs	r3, #64	; 0x40
 800fe56:	2000      	movs	r0, #0
 800fe58:	6023      	str	r3, [r4, #0]
 800fe5a:	b016      	add	sp, #88	; 0x58
 800fe5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe60 <__smakebuf_r>:
 800fe60:	898b      	ldrh	r3, [r1, #12]
 800fe62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe64:	079d      	lsls	r5, r3, #30
 800fe66:	4606      	mov	r6, r0
 800fe68:	460c      	mov	r4, r1
 800fe6a:	d507      	bpl.n	800fe7c <__smakebuf_r+0x1c>
 800fe6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	6123      	str	r3, [r4, #16]
 800fe74:	2301      	movs	r3, #1
 800fe76:	6163      	str	r3, [r4, #20]
 800fe78:	b002      	add	sp, #8
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}
 800fe7c:	ab01      	add	r3, sp, #4
 800fe7e:	466a      	mov	r2, sp
 800fe80:	f7ff ffc8 	bl	800fe14 <__swhatbuf_r>
 800fe84:	9900      	ldr	r1, [sp, #0]
 800fe86:	4605      	mov	r5, r0
 800fe88:	4630      	mov	r0, r6
 800fe8a:	f7ff fa4f 	bl	800f32c <_malloc_r>
 800fe8e:	b948      	cbnz	r0, 800fea4 <__smakebuf_r+0x44>
 800fe90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe94:	059a      	lsls	r2, r3, #22
 800fe96:	d4ef      	bmi.n	800fe78 <__smakebuf_r+0x18>
 800fe98:	f023 0303 	bic.w	r3, r3, #3
 800fe9c:	f043 0302 	orr.w	r3, r3, #2
 800fea0:	81a3      	strh	r3, [r4, #12]
 800fea2:	e7e3      	b.n	800fe6c <__smakebuf_r+0xc>
 800fea4:	4b0d      	ldr	r3, [pc, #52]	; (800fedc <__smakebuf_r+0x7c>)
 800fea6:	62b3      	str	r3, [r6, #40]	; 0x28
 800fea8:	89a3      	ldrh	r3, [r4, #12]
 800feaa:	6020      	str	r0, [r4, #0]
 800feac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feb0:	81a3      	strh	r3, [r4, #12]
 800feb2:	9b00      	ldr	r3, [sp, #0]
 800feb4:	6163      	str	r3, [r4, #20]
 800feb6:	9b01      	ldr	r3, [sp, #4]
 800feb8:	6120      	str	r0, [r4, #16]
 800feba:	b15b      	cbz	r3, 800fed4 <__smakebuf_r+0x74>
 800febc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fec0:	4630      	mov	r0, r6
 800fec2:	f000 f881 	bl	800ffc8 <_isatty_r>
 800fec6:	b128      	cbz	r0, 800fed4 <__smakebuf_r+0x74>
 800fec8:	89a3      	ldrh	r3, [r4, #12]
 800feca:	f023 0303 	bic.w	r3, r3, #3
 800fece:	f043 0301 	orr.w	r3, r3, #1
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	89a0      	ldrh	r0, [r4, #12]
 800fed6:	4305      	orrs	r5, r0
 800fed8:	81a5      	strh	r5, [r4, #12]
 800feda:	e7cd      	b.n	800fe78 <__smakebuf_r+0x18>
 800fedc:	0800f079 	.word	0x0800f079

0800fee0 <__malloc_lock>:
 800fee0:	4801      	ldr	r0, [pc, #4]	; (800fee8 <__malloc_lock+0x8>)
 800fee2:	f7ff b9ad 	b.w	800f240 <__retarget_lock_acquire_recursive>
 800fee6:	bf00      	nop
 800fee8:	200087e8 	.word	0x200087e8

0800feec <__malloc_unlock>:
 800feec:	4801      	ldr	r0, [pc, #4]	; (800fef4 <__malloc_unlock+0x8>)
 800feee:	f7ff b9a8 	b.w	800f242 <__retarget_lock_release_recursive>
 800fef2:	bf00      	nop
 800fef4:	200087e8 	.word	0x200087e8

0800fef8 <_read_r>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	4d07      	ldr	r5, [pc, #28]	; (800ff18 <_read_r+0x20>)
 800fefc:	4604      	mov	r4, r0
 800fefe:	4608      	mov	r0, r1
 800ff00:	4611      	mov	r1, r2
 800ff02:	2200      	movs	r2, #0
 800ff04:	602a      	str	r2, [r5, #0]
 800ff06:	461a      	mov	r2, r3
 800ff08:	f7f0 fce2 	bl	80008d0 <_read>
 800ff0c:	1c43      	adds	r3, r0, #1
 800ff0e:	d102      	bne.n	800ff16 <_read_r+0x1e>
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	b103      	cbz	r3, 800ff16 <_read_r+0x1e>
 800ff14:	6023      	str	r3, [r4, #0]
 800ff16:	bd38      	pop	{r3, r4, r5, pc}
 800ff18:	200087e4 	.word	0x200087e4

0800ff1c <_raise_r>:
 800ff1c:	291f      	cmp	r1, #31
 800ff1e:	b538      	push	{r3, r4, r5, lr}
 800ff20:	4604      	mov	r4, r0
 800ff22:	460d      	mov	r5, r1
 800ff24:	d904      	bls.n	800ff30 <_raise_r+0x14>
 800ff26:	2316      	movs	r3, #22
 800ff28:	6003      	str	r3, [r0, #0]
 800ff2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff2e:	bd38      	pop	{r3, r4, r5, pc}
 800ff30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ff32:	b112      	cbz	r2, 800ff3a <_raise_r+0x1e>
 800ff34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff38:	b94b      	cbnz	r3, 800ff4e <_raise_r+0x32>
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 f830 	bl	800ffa0 <_getpid_r>
 800ff40:	462a      	mov	r2, r5
 800ff42:	4601      	mov	r1, r0
 800ff44:	4620      	mov	r0, r4
 800ff46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff4a:	f000 b817 	b.w	800ff7c <_kill_r>
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d00a      	beq.n	800ff68 <_raise_r+0x4c>
 800ff52:	1c59      	adds	r1, r3, #1
 800ff54:	d103      	bne.n	800ff5e <_raise_r+0x42>
 800ff56:	2316      	movs	r3, #22
 800ff58:	6003      	str	r3, [r0, #0]
 800ff5a:	2001      	movs	r0, #1
 800ff5c:	e7e7      	b.n	800ff2e <_raise_r+0x12>
 800ff5e:	2400      	movs	r4, #0
 800ff60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff64:	4628      	mov	r0, r5
 800ff66:	4798      	blx	r3
 800ff68:	2000      	movs	r0, #0
 800ff6a:	e7e0      	b.n	800ff2e <_raise_r+0x12>

0800ff6c <raise>:
 800ff6c:	4b02      	ldr	r3, [pc, #8]	; (800ff78 <raise+0xc>)
 800ff6e:	4601      	mov	r1, r0
 800ff70:	6818      	ldr	r0, [r3, #0]
 800ff72:	f7ff bfd3 	b.w	800ff1c <_raise_r>
 800ff76:	bf00      	nop
 800ff78:	2000002c 	.word	0x2000002c

0800ff7c <_kill_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d07      	ldr	r5, [pc, #28]	; (800ff9c <_kill_r+0x20>)
 800ff80:	2300      	movs	r3, #0
 800ff82:	4604      	mov	r4, r0
 800ff84:	4608      	mov	r0, r1
 800ff86:	4611      	mov	r1, r2
 800ff88:	602b      	str	r3, [r5, #0]
 800ff8a:	f7f0 fc85 	bl	8000898 <_kill>
 800ff8e:	1c43      	adds	r3, r0, #1
 800ff90:	d102      	bne.n	800ff98 <_kill_r+0x1c>
 800ff92:	682b      	ldr	r3, [r5, #0]
 800ff94:	b103      	cbz	r3, 800ff98 <_kill_r+0x1c>
 800ff96:	6023      	str	r3, [r4, #0]
 800ff98:	bd38      	pop	{r3, r4, r5, pc}
 800ff9a:	bf00      	nop
 800ff9c:	200087e4 	.word	0x200087e4

0800ffa0 <_getpid_r>:
 800ffa0:	f7f0 bc72 	b.w	8000888 <_getpid>

0800ffa4 <_fstat_r>:
 800ffa4:	b538      	push	{r3, r4, r5, lr}
 800ffa6:	4d07      	ldr	r5, [pc, #28]	; (800ffc4 <_fstat_r+0x20>)
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	4604      	mov	r4, r0
 800ffac:	4608      	mov	r0, r1
 800ffae:	4611      	mov	r1, r2
 800ffb0:	602b      	str	r3, [r5, #0]
 800ffb2:	f7f0 fcd2 	bl	800095a <_fstat>
 800ffb6:	1c43      	adds	r3, r0, #1
 800ffb8:	d102      	bne.n	800ffc0 <_fstat_r+0x1c>
 800ffba:	682b      	ldr	r3, [r5, #0]
 800ffbc:	b103      	cbz	r3, 800ffc0 <_fstat_r+0x1c>
 800ffbe:	6023      	str	r3, [r4, #0]
 800ffc0:	bd38      	pop	{r3, r4, r5, pc}
 800ffc2:	bf00      	nop
 800ffc4:	200087e4 	.word	0x200087e4

0800ffc8 <_isatty_r>:
 800ffc8:	b538      	push	{r3, r4, r5, lr}
 800ffca:	4d06      	ldr	r5, [pc, #24]	; (800ffe4 <_isatty_r+0x1c>)
 800ffcc:	2300      	movs	r3, #0
 800ffce:	4604      	mov	r4, r0
 800ffd0:	4608      	mov	r0, r1
 800ffd2:	602b      	str	r3, [r5, #0]
 800ffd4:	f7f0 fcd1 	bl	800097a <_isatty>
 800ffd8:	1c43      	adds	r3, r0, #1
 800ffda:	d102      	bne.n	800ffe2 <_isatty_r+0x1a>
 800ffdc:	682b      	ldr	r3, [r5, #0]
 800ffde:	b103      	cbz	r3, 800ffe2 <_isatty_r+0x1a>
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	200087e4 	.word	0x200087e4

0800ffe8 <_init>:
 800ffe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffea:	bf00      	nop
 800ffec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffee:	bc08      	pop	{r3}
 800fff0:	469e      	mov	lr, r3
 800fff2:	4770      	bx	lr

0800fff4 <_fini>:
 800fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff6:	bf00      	nop
 800fff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fffa:	bc08      	pop	{r3}
 800fffc:	469e      	mov	lr, r3
 800fffe:	4770      	bx	lr
