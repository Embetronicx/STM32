
HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ec0  080102c4  080102c4  000202c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014184  08014184  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08014184  08014184  00024184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801418c  0801418c  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801418c  0801418c  0002418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014190  08014190  00024190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08014194  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08014224  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  080142c4  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000863c  200001d0  08014364  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000880c  08014364  0003880c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a4f3  00000000  00000000  000301fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d22  00000000  00000000  0004a6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012f8  00000000  00000000  0004f418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001238  00000000  00000000  00050710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003387d  00000000  00000000  00051948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021b3f  00000000  00000000  000851c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001055e1  00000000  00000000  000a6d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001ac2e5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005444  00000000  00000000  001ac338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d0 	.word	0x200001d0
 800021c:	00000000 	.word	0x00000000
 8000220:	080102ac 	.word	0x080102ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d4 	.word	0x200001d4
 800023c:	080102ac 	.word	0x080102ac

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  tCGI LED_CGI = { "/LEDControl.cgi", LedControlCgiHandler };
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <main+0x68>)
 800061c:	463b      	mov	r3, r7
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fc3b 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f831 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f89d 	bl	800076c <MX_GPIO_Init>
  MX_LWIP_Init();
 8000632:	f002 fd11 	bl	8003058 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 8000636:	f004 f8e7 	bl	8004808 <httpd_init>
  http_set_cgi_handlers(&LED_CGI, 1);
 800063a:	463b      	mov	r3, r7
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f902 	bl	8004848 <http_set_cgi_handlers>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    MX_LWIP_Process();
 8000644:	f002 fe54 	bl	80032f0 <MX_LWIP_Process>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GreenLED );     //Green LED
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <main+0x6c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	2101      	movs	r1, #1
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <main+0x70>)
 8000654:	f002 f82a 	bl	80026ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, BlueLED );      //Blue LED
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <main+0x74>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <main+0x70>)
 8000664:	f002 f822 	bl	80026ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RedLED );      //Red LED
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <main+0x78>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <main+0x70>)
 8000676:	f002 f819 	bl	80026ac <HAL_GPIO_WritePin>
    MX_LWIP_Process();
 800067a:	e7e3      	b.n	8000644 <main+0x30>
 800067c:	080102d4 	.word	0x080102d4
 8000680:	200001ec 	.word	0x200001ec
 8000684:	40020400 	.word	0x40020400
 8000688:	200001f0 	.word	0x200001f0
 800068c:	200001f4 	.word	0x200001f4

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00e fd8a 	bl	800f1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <SystemClock_Config+0xd4>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <SystemClock_Config+0xd4>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	4b26      	ldr	r3, [pc, #152]	; (8000768 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a25      	ldr	r2, [pc, #148]	; (8000768 <SystemClock_Config+0xd8>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006fc:	23d8      	movs	r3, #216	; 0xd8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f002 f835 	bl	8002780 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800071c:	f000 f906 	bl	800092c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000720:	f001 ffde 	bl	80026e0 <HAL_PWREx_EnableOverDrive>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072a:	f000 f8ff 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2107      	movs	r1, #7
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fac5 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000758:	f000 f8e8 	bl	800092c <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	; 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0xa8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <MX_GPIO_Init+0xa8>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_GPIO_Init+0xa8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_GPIO_Init+0xa8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <MX_GPIO_Init+0xa8>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_GPIO_Init+0xa8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_GPIO_Init+0xa8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_GPIO_Init+0xa8>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_GPIO_Init+0xa8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0xa8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0xa8>)
 80007d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0xa8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xac>)
 80007ea:	f001 ff5f 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80007ee:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xac>)
 8000808:	f001 fda4 	bl	8002354 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <LedControlCgiHandler>:

/* USER CODE BEGIN 4 */
const char *LedControlCgiHandler(int index, int numParams, char *pcParam[], char *pcValue[])
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	603b      	str	r3, [r7, #0]
  if(index == 0)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d168      	bne.n	8000902 <LedControlCgiHandler+0xe6>
  {
    for(int i=0; i < numParams; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e061      	b.n	80008fa <LedControlCgiHandler+0xde>
    {
      if(strcmp(pcParam[i], "green") == 0)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4932      	ldr	r1, [pc, #200]	; (800090c <LedControlCgiHandler+0xf0>)
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fcfc 	bl	8000240 <strcmp>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d113      	bne.n	8000876 <LedControlCgiHandler+0x5a>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	492d      	ldr	r1, [pc, #180]	; (8000910 <LedControlCgiHandler+0xf4>)
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fcf0 	bl	8000240 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d103      	bne.n	800086e <LedControlCgiHandler+0x52>
        {
          GreenLED = 1;
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <LedControlCgiHandler+0xf8>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	e042      	b.n	80008f4 <LedControlCgiHandler+0xd8>
        }
        else
        {
          GreenLED = 0;
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <LedControlCgiHandler+0xf8>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	e03e      	b.n	80008f4 <LedControlCgiHandler+0xd8>
        }
      }
      else if(strcmp(pcParam[i], "blue") == 0)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4925      	ldr	r1, [pc, #148]	; (8000918 <LedControlCgiHandler+0xfc>)
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fcdc 	bl	8000240 <strcmp>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d113      	bne.n	80008b6 <LedControlCgiHandler+0x9a>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	491d      	ldr	r1, [pc, #116]	; (8000910 <LedControlCgiHandler+0xf4>)
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fcd0 	bl	8000240 <strcmp>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d103      	bne.n	80008ae <LedControlCgiHandler+0x92>
        {
          BlueLED = 1;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <LedControlCgiHandler+0x100>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e022      	b.n	80008f4 <LedControlCgiHandler+0xd8>
        }
        else
        {
          BlueLED = 0;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <LedControlCgiHandler+0x100>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e01e      	b.n	80008f4 <LedControlCgiHandler+0xd8>
        }
      }
      else if(strcmp(pcParam[i], "red") == 0)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4917      	ldr	r1, [pc, #92]	; (8000920 <LedControlCgiHandler+0x104>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fcbc 	bl	8000240 <strcmp>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d112      	bne.n	80008f4 <LedControlCgiHandler+0xd8>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	490d      	ldr	r1, [pc, #52]	; (8000910 <LedControlCgiHandler+0xf4>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fcb0 	bl	8000240 <strcmp>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d103      	bne.n	80008ee <LedControlCgiHandler+0xd2>
        {
          RedLED = 1;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <LedControlCgiHandler+0x108>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	e002      	b.n	80008f4 <LedControlCgiHandler+0xd8>
        }
        else
        {
          RedLED = 0;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <LedControlCgiHandler+0x108>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
    for(int i=0; i < numParams; i++)
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	3301      	adds	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	429a      	cmp	r2, r3
 8000900:	db99      	blt.n	8000836 <LedControlCgiHandler+0x1a>
        }
      }
    }
  }
  return "/index.html";
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <LedControlCgiHandler+0x10c>)
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	080102dc 	.word	0x080102dc
 8000910:	080102e4 	.word	0x080102e4
 8000914:	200001ec 	.word	0x200001ec
 8000918:	080102e8 	.word	0x080102e8
 800091c:	200001f0 	.word	0x200001f0
 8000920:	080102f0 	.word	0x080102f0
 8000924:	200001f4 	.word	0x200001f4
 8000928:	080102f4 	.word	0x080102f4

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x44>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_MspInit+0x44>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x44>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x44>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x44>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 faa6 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	return 1;
 80009d8:	2301      	movs	r3, #1
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_kill>:

int _kill(int pid, int sig)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <_kill+0x20>)
 80009f0:	2216      	movs	r2, #22
 80009f2:	601a      	str	r2, [r3, #0]
	return -1;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200087fc 	.word	0x200087fc

08000a08 <_exit>:

void _exit (int status)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffe5 	bl	80009e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a1a:	e7fe      	b.n	8000a1a <_exit+0x12>

08000a1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e00a      	b.n	8000a44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a2e:	f3af 8000 	nop.w
 8000a32:	4601      	mov	r1, r0
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	b2ca      	uxtb	r2, r1
 8000a3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf0      	blt.n	8000a2e <_read+0x12>
	}

return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e009      	b.n	8000a7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf1      	blt.n	8000a68 <_write+0x12>
	}
	return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_close>:

int _close(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	return -1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_isatty>:

int _isatty(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d205      	bcs.n	8000b34 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <_sbrk+0x6c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20080000 	.word	0x20080000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	200001f8 	.word	0x200001f8
 8000b60:	20008810 	.word	0x20008810
 8000b64:	200087fc 	.word	0x200087fc

08000b68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f00e fabb 	bl	800f134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fd29 	bl	8000614 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000bd0:	08014194 	.word	0x08014194
  ldr r2, =_sbss
 8000bd4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000bd8:	2000880c 	.word	0x2000880c

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>

08000bde <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00b      	beq.n	8000c06 <LAN8742_RegisterBusIO+0x28>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d007      	beq.n	8000c06 <LAN8742_RegisterBusIO+0x28>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <LAN8742_RegisterBusIO+0x28>
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e014      	b.n	8000c36 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d17c      	bne.n	8000d5c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2220      	movs	r2, #32
 8000c74:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e01c      	b.n	8000cb6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f107 0208 	add.w	r2, r7, #8
 8000c84:	2112      	movs	r1, #18
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	4798      	blx	r3
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da03      	bge.n	8000c98 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000c90:	f06f 0304 	mvn.w	r3, #4
 8000c94:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000c96:	e00b      	b.n	8000cb0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	f003 031f 	and.w	r3, r3, #31
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d105      	bne.n	8000cb0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
         break;
 8000cae:	e005      	b.n	8000cbc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	2b1f      	cmp	r3, #31
 8000cba:	d9df      	bls.n	8000c7c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b1f      	cmp	r3, #31
 8000cc2:	d902      	bls.n	8000cca <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000cc4:	f06f 0302 	mvn.w	r3, #2
 8000cc8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d145      	bne.n	8000d5c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6810      	ldr	r0, [r2, #0]
 8000cd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4798      	blx	r3
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db37      	blt.n	8000d56 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6810      	ldr	r0, [r2, #0]
 8000cee:	f107 0208 	add.w	r2, r7, #8
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4798      	blx	r3
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db28      	blt.n	8000d4e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4798      	blx	r3
 8000d02:	4603      	mov	r3, r0
 8000d04:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d06:	e01c      	b.n	8000d42 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4798      	blx	r3
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d1a:	d80e      	bhi.n	8000d3a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6810      	ldr	r0, [r2, #0]
 8000d24:	f107 0208 	add.w	r2, r7, #8
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4798      	blx	r3
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da07      	bge.n	8000d42 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d32:	f06f 0304 	mvn.w	r3, #4
 8000d36:	613b      	str	r3, [r7, #16]
                 break;
 8000d38:	e010      	b.n	8000d5c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d3a:	f06f 0301 	mvn.w	r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
               break;
 8000d40:	e00c      	b.n	8000d5c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1dd      	bne.n	8000d08 <LAN8742_Init+0xc6>
 8000d4c:	e006      	b.n	8000d5c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000d4e:	f06f 0304 	mvn.w	r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	e002      	b.n	8000d5c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d56:	f06f 0303 	mvn.w	r3, #3
 8000d5a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d112      	bne.n	8000d88 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4798      	blx	r3
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000d6c:	bf00      	nop
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4798      	blx	r3
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d80:	d9f5      	bls.n	8000d6e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000d88:	693b      	ldr	r3, [r7, #16]
 }
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	f107 020c 	add.w	r2, r7, #12
 8000daa:	2101      	movs	r1, #1
 8000dac:	4798      	blx	r3
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	da02      	bge.n	8000dba <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000db4:	f06f 0304 	mvn.w	r3, #4
 8000db8:	e06e      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6810      	ldr	r0, [r2, #0]
 8000dc2:	f107 020c 	add.w	r2, r7, #12
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4798      	blx	r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da02      	bge.n	8000dd6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dd0:	f06f 0304 	mvn.w	r3, #4
 8000dd4:	e060      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000de0:	2301      	movs	r3, #1
 8000de2:	e059      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6810      	ldr	r0, [r2, #0]
 8000dec:	f107 020c 	add.w	r2, r7, #12
 8000df0:	2100      	movs	r1, #0
 8000df2:	4798      	blx	r3
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	da02      	bge.n	8000e00 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dfa:	f06f 0304 	mvn.w	r3, #4
 8000dfe:	e04b      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d11b      	bne.n	8000e42 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <LAN8742_GetLinkState+0x90>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e03a      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e033      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e02c      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	e02a      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6810      	ldr	r0, [r2, #0]
 8000e4a:	f107 020c 	add.w	r2, r7, #12
 8000e4e:	211f      	movs	r1, #31
 8000e50:	4798      	blx	r3
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da02      	bge.n	8000e5e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e58:	f06f 0304 	mvn.w	r3, #4
 8000e5c:	e01c      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e68:	2306      	movs	r3, #6
 8000e6a:	e015      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 031c 	and.w	r3, r3, #28
 8000e72:	2b18      	cmp	r3, #24
 8000e74:	d101      	bne.n	8000e7a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e76:	2302      	movs	r3, #2
 8000e78:	e00e      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f003 031c 	and.w	r3, r3, #28
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d101      	bne.n	8000e88 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e007      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 031c 	and.w	r3, r3, #28
 8000e8e:	2b14      	cmp	r3, #20
 8000e90:	d101      	bne.n	8000e96 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e92:	2304      	movs	r3, #4
 8000e94:	e000      	b.n	8000e98 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e96:	2305      	movs	r3, #5
    }				
  }
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f92f 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f806 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fd42 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f93b 	bl	8001156 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f911 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200001fc 	.word	0x200001fc

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200001fc 	.word	0x200001fc

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	05fa0000 	.word	0x05fa0000

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff47 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff5c 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffb0 	bl	80010c4 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e06a      	b.n	8001258 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001188:	2b00      	cmp	r3, #0
 800118a:	d106      	bne.n	800119a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2223      	movs	r2, #35	; 0x23
 8001190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f002 fa93 	bl	80036c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_ETH_Init+0xf0>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a30      	ldr	r2, [pc, #192]	; (8001260 <HAL_ETH_Init+0xf0>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <HAL_ETH_Init+0xf0>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_ETH_Init+0xf4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <HAL_ETH_Init+0xf4>)
 80011b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <HAL_ETH_Init+0xf4>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4927      	ldr	r1, [pc, #156]	; (8001264 <HAL_ETH_Init+0xf4>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <HAL_ETH_Init+0xf4>)
 80011ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff feac 	bl	8000f44 <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011ee:	e011      	b.n	8001214 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011f0:	f7ff fea8 	bl	8000f44 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011fe:	d909      	bls.n	8001214 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2204      	movs	r2, #4
 8001204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	22e0      	movs	r2, #224	; 0xe0
 800120c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e021      	b.n	8001258 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e4      	bne.n	80011f0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fdf0 	bl	8001e0c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 fe97 	bl	8001f60 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 feed 	bl	8002012 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	461a      	mov	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fe55 	bl	8001ef0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2210      	movs	r2, #16
 8001252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800

08001268 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001276:	2b10      	cmp	r3, #16
 8001278:	d150      	bne.n	800131c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2223      	movs	r2, #35	; 0x23
 800127e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2204      	movs	r2, #4
 8001286:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f9fd 	bl	8001688 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0208 	orr.w	r2, r2, #8
 800129c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fe58 	bl	8000f5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0204 	orr.w	r2, r2, #4
 80012c2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fe45 	bl	8000f5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fc36 	bl	8001b4c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012f6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800130e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2223      	movs	r2, #35	; 0x23
 8001314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	e000      	b.n	800131e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
  }
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001334:	2b23      	cmp	r3, #35	; 0x23
 8001336:	d14a      	bne.n	80013ce <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2223      	movs	r2, #35	; 0x23
 800133c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001352:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001356:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	f023 0302 	bic.w	r3, r3, #2
 800136a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800136e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0204 	bic.w	r2, r2, #4
 800137e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fde7 	bl	8000f5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fbd8 	bl	8001b4c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0208 	bic.w	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fdd1 	bl	8000f5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2210      	movs	r2, #16
 80013c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
  }
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f0:	f043 0201 	orr.w	r2, r3, #1
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e07c      	b.n	80014f8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001404:	2b23      	cmp	r3, #35	; 0x23
 8001406:	d176      	bne.n	80014f6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001408:	2200      	movs	r2, #0
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 fe6d 	bl	80020ec <ETH_Prepare_Tx_Descriptors>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141e:	f043 0202 	orr.w	r2, r3, #2
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e065      	b.n	80014f8 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
}
 8001430:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3206      	adds	r2, #6
 800143a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	2b03      	cmp	r3, #3
 8001450:	d904      	bls.n	800145c <HAL_ETH_Transmit+0x84>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	1f1a      	subs	r2, r3, #4
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3106      	adds	r1, #6
 8001468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800146c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001470:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001472:	f7ff fd67 	bl	8000f44 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001478:	e037      	b.n	80014ea <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d011      	beq.n	80014b0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	f043 0208 	orr.w	r2, r3, #8
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e023      	b.n	80014f8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b6:	d018      	beq.n	80014ea <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014b8:	f7ff fd44 	bl	8000f44 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d302      	bcc.n	80014ce <HAL_ETH_Transmit+0xf6>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10d      	bne.n	80014ea <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d4:	f043 0204 	orr.w	r2, r3, #4
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80014e4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e006      	b.n	80014f8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	dbc3      	blt.n	800147a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0a8      	b.n	800167e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001532:	2b23      	cmp	r3, #35	; 0x23
 8001534:	d001      	beq.n	800153a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0a1      	b.n	800167e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	3212      	adds	r2, #18
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001550:	f1c3 0304 	rsb	r3, r3, #4
 8001554:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001556:	e06a      	b.n	800162e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <HAL_ETH_ReadData+0x88>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001584:	2b00      	cmp	r3, #0
 8001586:	d040      	beq.n	800160a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00c      	beq.n	80015cc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015bc:	3b04      	subs	r3, #4
 80015be:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015e4:	461a      	mov	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	f002 fa2b 	bl	8003a44 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	441a      	add	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d902      	bls.n	800161c <HAL_ETH_ReadData+0x11c>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b04      	subs	r3, #4
 800161a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	3212      	adds	r2, #18
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db06      	blt.n	8001644 <HAL_ETH_ReadData+0x144>
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	429a      	cmp	r2, r3
 800163c:	d202      	bcs.n	8001644 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d089      	beq.n	8001558 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	441a      	add	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f815 	bl	8001688 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d108      	bne.n	800167c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e000      	b.n	800167e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
}
 800167e:	4618      	mov	r0, r3
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001694:	2301      	movs	r3, #1
 8001696:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800169c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	3212      	adds	r2, #18
 80016a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016b0:	e040      	b.n	8001734 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d112      	bne.n	80016e0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 f990 	bl	80039e4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	74fb      	strb	r3, [r7, #19]
 80016ce:	e007      	b.n	80016e0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	461a      	mov	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	461a      	mov	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80016e0:	7cfb      	ldrb	r3, [r7, #19]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d026      	beq.n	8001734 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	4a1e      	ldr	r2, [pc, #120]	; (800176c <ETH_UpdateDescriptor+0xe4>)
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	e003      	b.n	80016fe <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80016fc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016fe:	f3bf 8f5f 	dmb	sy
}
 8001702:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	3301      	adds	r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d902      	bls.n	8001722 <ETH_UpdateDescriptor+0x9a>
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	3b04      	subs	r3, #4
 8001720:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	3212      	adds	r2, #18
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	617b      	str	r3, [r7, #20]
      desccount--;
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	3b01      	subs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <ETH_UpdateDescriptor+0xb8>
 800173a:	7cfb      	ldrb	r3, [r7, #19]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1b8      	bne.n	80016b2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	429a      	cmp	r2, r3
 8001748:	d00c      	beq.n	8001764 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001752:	461a      	mov	r2, r3
 8001754:	2300      	movs	r3, #0
 8001756:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	800045f8 	.word	0x800045f8

08001770 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 031c 	and.w	r3, r3, #28
 800178c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	02db      	lsls	r3, r3, #11
 8001792:	b29b      	uxth	r3, r3
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f023 0302 	bic.w	r3, r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80017c0:	f7ff fbc0 	bl	8000f44 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017c6:	e00d      	b.n	80017e4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80017c8:	f7ff fbbc 	bl	8000f44 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d6:	d301      	bcc.n	80017dc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e010      	b.n	80017fe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ec      	bne.n	80017c8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 031c 	and.w	r3, r3, #28
 8001822:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	02db      	lsls	r3, r3, #11
 8001828:	b29b      	uxth	r3, r3
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	019b      	lsls	r3, r3, #6
 8001834:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001860:	f7ff fb70 	bl	8000f44 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001866:	e00d      	b.n	8001884 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001868:	f7ff fb6c 	bl	8000f44 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001876:	d301      	bcc.n	800187c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e009      	b.n	8001890 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ec      	bne.n	8001868 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d9      	b.n	8001a60 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bf14      	ite	ne
 80019c6:	2301      	movne	r3, #1
 80019c8:	2300      	moveq	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf14      	ite	ne
 8001a50:	2301      	movne	r3, #1
 8001a52:	2300      	moveq	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e00b      	b.n	8001a98 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d105      	bne.n	8001a96 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f883 	bl	8001b98 <ETH_SetMACConfig>

    return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
  }
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f023 031c 	bic.w	r3, r3, #28
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ab8:	f001 fac2 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 8001abc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d908      	bls.n	8001ad8 <HAL_ETH_SetMDIOClockRange+0x38>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d804      	bhi.n	8001ad8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e027      	b.n	8001b28 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d908      	bls.n	8001af2 <HAL_ETH_SetMDIOClockRange+0x52>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d204      	bcs.n	8001af2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f043 030c 	orr.w	r3, r3, #12
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e01a      	b.n	8001b28 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d303      	bcc.n	8001b02 <HAL_ETH_SetMDIOClockRange+0x62>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d911      	bls.n	8001b26 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d908      	bls.n	8001b1c <HAL_ETH_SetMDIOClockRange+0x7c>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d804      	bhi.n	8001b1c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e005      	b.n	8001b28 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e000      	b.n	8001b28 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b26:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	01312cff 	.word	0x01312cff
 8001b3c:	02160ebf 	.word	0x02160ebf
 8001b40:	03938700 	.word	0x03938700
 8001b44:	05f5e0ff 	.word	0x05f5e0ff
 8001b48:	08f0d17f 	.word	0x08f0d17f

08001b4c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b6e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff f9ed 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b8c:	6193      	str	r3, [r2, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <ETH_SetMACConfig+0x15c>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	7c1b      	ldrb	r3, [r3, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <ETH_SetMACConfig+0x28>
 8001bba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bbe:	e000      	b.n	8001bc2 <ETH_SetMACConfig+0x2a>
 8001bc0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	7c5b      	ldrb	r3, [r3, #17]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <ETH_SetMACConfig+0x38>
 8001bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bce:	e000      	b.n	8001bd2 <ETH_SetMACConfig+0x3a>
 8001bd0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bd2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	7fdb      	ldrb	r3, [r3, #31]
 8001bde:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001be0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001be6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	7f92      	ldrb	r2, [r2, #30]
 8001bec:	2a00      	cmp	r2, #0
 8001bee:	d102      	bne.n	8001bf6 <ETH_SetMACConfig+0x5e>
 8001bf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf4:	e000      	b.n	8001bf8 <ETH_SetMACConfig+0x60>
 8001bf6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001bf8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	7f1b      	ldrb	r3, [r3, #28]
 8001bfe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c00:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d102      	bne.n	8001c20 <ETH_SetMACConfig+0x88>
 8001c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1e:	e000      	b.n	8001c22 <ETH_SetMACConfig+0x8a>
 8001c20:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	7bdb      	ldrb	r3, [r3, #15]
 8001c28:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c2a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c38:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f7ff f982 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c76:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d101      	bne.n	8001c86 <ETH_SetMACConfig+0xee>
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	e000      	b.n	8001c88 <ETH_SetMACConfig+0xf0>
 8001c86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c88:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001c96:	2a01      	cmp	r2, #1
 8001c98:	d101      	bne.n	8001c9e <ETH_SetMACConfig+0x106>
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	e000      	b.n	8001ca0 <ETH_SetMACConfig+0x108>
 8001c9e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001ca0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001ca8:	2a01      	cmp	r2, #1
 8001caa:	d101      	bne.n	8001cb0 <ETH_SetMACConfig+0x118>
 8001cac:	2204      	movs	r2, #4
 8001cae:	e000      	b.n	8001cb2 <ETH_SetMACConfig+0x11a>
 8001cb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001cb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001cba:	2a01      	cmp	r2, #1
 8001cbc:	d101      	bne.n	8001cc2 <ETH_SetMACConfig+0x12a>
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	e000      	b.n	8001cc4 <ETH_SetMACConfig+0x12c>
 8001cc2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff f93d 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	ff20810f 	.word	0xff20810f

08001cf8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <ETH_SetDMAConfig+0x110>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	7b1b      	ldrb	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d102      	bne.n	8001d24 <ETH_SetDMAConfig+0x2c>
 8001d1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d22:	e000      	b.n	8001d26 <ETH_SetDMAConfig+0x2e>
 8001d24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	7b5b      	ldrb	r3, [r3, #13]
 8001d2a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d2c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	7f52      	ldrb	r2, [r2, #29]
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d102      	bne.n	8001d3c <ETH_SetDMAConfig+0x44>
 8001d36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d3a:	e000      	b.n	8001d3e <ETH_SetDMAConfig+0x46>
 8001d3c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d3e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	7b9b      	ldrb	r3, [r3, #14]
 8001d44:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d46:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d4c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	7f1b      	ldrb	r3, [r3, #28]
 8001d52:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001d54:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	7f9b      	ldrb	r3, [r3, #30]
 8001d5a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d5c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d6a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7ff f8e4 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	791b      	ldrb	r3, [r3, #4]
 8001da6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001db2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001db8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dc0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001dc2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001dca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001dd0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dde:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff f8b5 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	f8de3f23 	.word	0xf8de3f23

08001e0c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0a6      	sub	sp, #152	; 0x98
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e20:	2300      	movs	r3, #0
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fe86 	bl	8001b98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e90:	2301      	movs	r3, #1
 8001e92:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ecc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ff08 	bl	8001cf8 <ETH_SetDMAConfig>
}
 8001ee8:	bf00      	nop
 8001eea:	3798      	adds	r7, #152	; 0x98
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3305      	adds	r3, #5
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	3204      	adds	r2, #4
 8001f08:	7812      	ldrb	r2, [r2, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <ETH_MACAddressConfig+0x68>)
 8001f12:	4413      	add	r3, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3302      	adds	r3, #2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4313      	orrs	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <ETH_MACAddressConfig+0x6c>)
 8001f42:	4413      	add	r3, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40028040 	.word	0x40028040
 8001f5c:	40028044 	.word	0x40028044

08001f60 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e03e      	b.n	8001fec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68d9      	ldr	r1, [r3, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	3206      	adds	r2, #6
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d80c      	bhi.n	8001fd0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68d9      	ldr	r1, [r3, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	e004      	b.n	8001fda <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d9bd      	bls.n	8001f6e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002004:	611a      	str	r2, [r3, #16]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e046      	b.n	80020ae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6919      	ldr	r1, [r3, #16]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800205c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002064:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	3212      	adds	r2, #18
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d80c      	bhi.n	800209e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6919      	ldr	r1, [r3, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	461a      	mov	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	e004      	b.n	80020a8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d9b5      	bls.n	8002020 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020de:	60da      	str	r2, [r3, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b08d      	sub	sp, #52	; 0x34
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3318      	adds	r3, #24
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002116:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800212a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800212e:	d007      	beq.n	8002140 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	3304      	adds	r3, #4
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	e0ff      	b.n	8002344 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	3301      	adds	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <ETH_Prepare_Tx_Descriptors+0x264>)
 800215a:	4013      	ands	r3, r2
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	6852      	ldr	r2, [r2, #4]
 8002160:	431a      	orrs	r2, r3
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	431a      	orrs	r2, r3
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	431a      	orrs	r2, r3
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80021c6:	f3bf 8f5f 	dmb	sy
}
 80021ca:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80021d8:	e082      	b.n	80022e0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e005      	b.n	8002206 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	3301      	adds	r3, #1
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	2b03      	cmp	r3, #3
 8002210:	d902      	bls.n	8002218 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	3b04      	subs	r3, #4
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800223a:	d007      	beq.n	800224c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	3304      	adds	r3, #4
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d029      	beq.n	80022a0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
 800225e:	e019      	b.n	8002294 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002260:	f3bf 8f5f 	dmb	sy
}
 8002264:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	3301      	adds	r3, #1
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	2b03      	cmp	r3, #3
 800227c:	d902      	bls.n	8002284 <ETH_Prepare_Tx_Descriptors+0x198>
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	3b04      	subs	r3, #4
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	3301      	adds	r3, #1
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
 8002294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	429a      	cmp	r2, r3
 800229a:	d3e1      	bcc.n	8002260 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800229c:	2302      	movs	r3, #2
 800229e:	e051      	b.n	8002344 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	3301      	adds	r3, #1
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <ETH_Prepare_Tx_Descriptors+0x264>)
 80022bc:	4013      	ands	r3, r2
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	6852      	ldr	r2, [r2, #4]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	3301      	adds	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80022ce:	f3bf 8f5f 	dmb	sy
}
 80022d2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f47f af78 	bne.w	80021da <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e005      	b.n	800230a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231a:	6979      	ldr	r1, [r7, #20]
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	3304      	adds	r3, #4
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800232c:	b672      	cpsid	i
}
 800232e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4413      	add	r3, r2
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800233e:	b662      	cpsie	i
}
 8002340:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3734      	adds	r7, #52	; 0x34
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	ffffe000 	.word	0xffffe000

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e175      	b.n	8002660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8164 	bne.w	800265a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d005      	beq.n	80023aa <HAL_GPIO_Init+0x56>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d130      	bne.n	800240c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 0201 	and.w	r2, r3, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b03      	cmp	r3, #3
 8002416:	d017      	beq.n	8002448 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d123      	bne.n	800249c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80be 	beq.w	800265a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_GPIO_Init+0x324>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a65      	ldr	r2, [pc, #404]	; (8002678 <HAL_GPIO_Init+0x324>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_GPIO_Init+0x324>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024f6:	4a61      	ldr	r2, [pc, #388]	; (800267c <HAL_GPIO_Init+0x328>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_GPIO_Init+0x32c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d037      	beq.n	8002592 <HAL_GPIO_Init+0x23e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a57      	ldr	r2, [pc, #348]	; (8002684 <HAL_GPIO_Init+0x330>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d031      	beq.n	800258e <HAL_GPIO_Init+0x23a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a56      	ldr	r2, [pc, #344]	; (8002688 <HAL_GPIO_Init+0x334>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02b      	beq.n	800258a <HAL_GPIO_Init+0x236>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a55      	ldr	r2, [pc, #340]	; (800268c <HAL_GPIO_Init+0x338>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d025      	beq.n	8002586 <HAL_GPIO_Init+0x232>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_GPIO_Init+0x33c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01f      	beq.n	8002582 <HAL_GPIO_Init+0x22e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a53      	ldr	r2, [pc, #332]	; (8002694 <HAL_GPIO_Init+0x340>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x22a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_GPIO_Init+0x344>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x226>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a51      	ldr	r2, [pc, #324]	; (800269c <HAL_GPIO_Init+0x348>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x222>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a50      	ldr	r2, [pc, #320]	; (80026a0 <HAL_GPIO_Init+0x34c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x21e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4f      	ldr	r2, [pc, #316]	; (80026a4 <HAL_GPIO_Init+0x350>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x21a>
 800256a:	2309      	movs	r3, #9
 800256c:	e012      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800256e:	230a      	movs	r3, #10
 8002570:	e010      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002572:	2308      	movs	r3, #8
 8002574:	e00e      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002576:	2307      	movs	r3, #7
 8002578:	e00c      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800257a:	2306      	movs	r3, #6
 800257c:	e00a      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800257e:	2305      	movs	r3, #5
 8002580:	e008      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002582:	2304      	movs	r3, #4
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002586:	2303      	movs	r3, #3
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002592:	2300      	movs	r3, #0
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025a4:	4935      	ldr	r1, [pc, #212]	; (800267c <HAL_GPIO_Init+0x328>)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_GPIO_Init+0x354>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d6:	4a34      	ldr	r2, [pc, #208]	; (80026a8 <HAL_GPIO_Init+0x354>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_GPIO_Init+0x354>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002600:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <HAL_GPIO_Init+0x354>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_GPIO_Init+0x354>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262a:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <HAL_GPIO_Init+0x354>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_GPIO_Init+0x354>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_GPIO_Init+0x354>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	f67f ae86 	bls.w	8002374 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40013800 	.word	0x40013800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800
 800268c:	40020c00 	.word	0x40020c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40021400 	.word	0x40021400
 8002698:	40021800 	.word	0x40021800
 800269c:	40021c00 	.word	0x40021c00
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40022400 	.word	0x40022400
 80026a8:	40013c00 	.word	0x40013c00

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026c8:	e003      	b.n	80026d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_PWREx_EnableOverDrive+0x98>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800270e:	f7fe fc19 	bl	8000f44 <HAL_GetTick>
 8002712:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002714:	e009      	b.n	800272a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002716:	f7fe fc15 	bl	8000f44 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002724:	d901      	bls.n	800272a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e022      	b.n	8002770 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002736:	d1ee      	bne.n	8002716 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002742:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002744:	f7fe fbfe 	bl	8000f44 <HAL_GetTick>
 8002748:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800274a:	e009      	b.n	8002760 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800274c:	f7fe fbfa 	bl	8000f44 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275a:	d901      	bls.n	8002760 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e007      	b.n	8002770 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800276c:	d1ee      	bne.n	800274c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	40007000 	.word	0x40007000

08002780 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e29b      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b96      	ldr	r3, [pc, #600]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b0:	4b93      	ldr	r3, [pc, #588]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x62>
 80027bc:	4b90      	ldr	r3, [pc, #576]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b8d      	ldr	r3, [pc, #564]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x130>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e275      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x7a>
 80027ec:	4b84      	ldr	r3, [pc, #528]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a83      	ldr	r2, [pc, #524]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x9c>
 8002802:	4b7f      	ldr	r3, [pc, #508]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7e      	ldr	r2, [pc, #504]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7b      	ldr	r2, [pc, #492]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xc0>
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a72      	ldr	r2, [pc, #456]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd8>
 8002840:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6e      	ldr	r2, [pc, #440]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6b      	ldr	r2, [pc, #428]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fb70 	bl	8000f44 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fb6c 	bl	8000f44 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e229      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe8>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fb5c 	bl	8000f44 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fb58 	bl	8000f44 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e215      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b57      	ldr	r3, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x110>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d069      	beq.n	8002992 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x190>
 80028d6:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x17a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1e9      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	493d      	ldr	r1, [pc, #244]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e040      	b.n	8002992 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fb0e 	bl	8000f44 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe fb0a 	bl	8000f44 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1c7      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4929      	ldr	r1, [pc, #164]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a26      	ldr	r2, [pc, #152]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe faea 	bl	8000f44 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe fae6 	bl	8000f44 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1a3      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d038      	beq.n	8002a10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d019      	beq.n	80029da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fac7 	bl	8000f44 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fe fac3 	bl	8000f44 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e180      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x23a>
 80029d8:	e01a      	b.n	8002a10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_RCC_OscConfig+0x280>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe faad 	bl	8000f44 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe faa9 	bl	8000f44 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d903      	bls.n	8002a04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e166      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
 8002a00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b92      	ldr	r3, [pc, #584]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a4 	beq.w	8002b66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b8c      	ldr	r3, [pc, #560]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	4b89      	ldr	r3, [pc, #548]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a88      	ldr	r2, [pc, #544]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b86      	ldr	r3, [pc, #536]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a42:	2301      	movs	r3, #1
 8002a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a46:	4b83      	ldr	r3, [pc, #524]	; (8002c54 <HAL_RCC_OscConfig+0x4d4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d118      	bne.n	8002a84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a52:	4b80      	ldr	r3, [pc, #512]	; (8002c54 <HAL_RCC_OscConfig+0x4d4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7f      	ldr	r2, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0x4d4>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fa71 	bl	8000f44 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7fe fa6d 	bl	8000f44 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	; 0x64
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e12a      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a78:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_OscConfig+0x4d4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x31a>
 8002a8c:	4b70      	ldr	r3, [pc, #448]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a6f      	ldr	r2, [pc, #444]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
 8002a98:	e02d      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x33c>
 8002aa2:	4b6b      	ldr	r3, [pc, #428]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a6a      	ldr	r2, [pc, #424]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a67      	ldr	r2, [pc, #412]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aba:	e01c      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCC_OscConfig+0x35e>
 8002ac4:	4b62      	ldr	r3, [pc, #392]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a61      	ldr	r2, [pc, #388]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a5e      	ldr	r2, [pc, #376]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6713      	str	r3, [r2, #112]	; 0x70
 8002adc:	e00b      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
 8002ade:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a5b      	ldr	r2, [pc, #364]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aea:	4b59      	ldr	r3, [pc, #356]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d015      	beq.n	8002b2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afe:	f7fe fa21 	bl	8000f44 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7fe fa1d 	bl	8000f44 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e0d8      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ee      	beq.n	8002b06 <HAL_RCC_OscConfig+0x386>
 8002b28:	e014      	b.n	8002b54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fa0b 	bl	8000f44 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fa07 	bl	8000f44 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e0c2      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b48:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1ee      	bne.n	8002b32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a3c      	ldr	r2, [pc, #240]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80ae 	beq.w	8002ccc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d06d      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d14b      	bne.n	8002c1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe f9d8 	bl	8000f44 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe f9d4 	bl	8000f44 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e091      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	019b      	lsls	r3, r3, #6
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	071b      	lsls	r3, r3, #28
 8002be2:	491b      	ldr	r1, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe f9a6 	bl	8000f44 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe f9a2 	bl	8000f44 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e05f      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x47c>
 8002c1a:	e057      	b.n	8002ccc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe f98c 	bl	8000f44 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe f988 	bl	8000f44 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e045      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_OscConfig+0x4d0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4b0>
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x54c>
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_RCC_OscConfig+0x558>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d030      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d129      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d122      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d119      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0d0      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d910      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 020f 	bic.w	r2, r3, #15
 8002d0a:	4965      	ldr	r1, [pc, #404]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b8      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d3c:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	494d      	ldr	r1, [pc, #308]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d040      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d115      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e073      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4936      	ldr	r1, [pc, #216]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd0:	f7fe f8b8 	bl	8000f44 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe f8b4 	bl	8000f44 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e053      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 020c 	and.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d210      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 020f 	bic.w	r2, r3, #15
 8002e16:	4922      	ldr	r1, [pc, #136]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e032      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4916      	ldr	r1, [pc, #88]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6e:	f000 f821 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4602      	mov	r2, r0
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e80:	5ccb      	ldrb	r3, [r1, r3]
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1d0>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1d4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe f814 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08012f2c 	.word	0x08012f2c
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b090      	sub	sp, #64	; 0x40
 8002eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ecc:	4b59      	ldr	r3, [pc, #356]	; (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f200 80a1 	bhi.w	8003020 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee6:	e09b      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b53      	ldr	r3, [pc, #332]	; (8003038 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eec:	e09b      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eee:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ef2:	e098      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002efe:	4b4d      	ldr	r3, [pc, #308]	; (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d028      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	; (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	2200      	movs	r2, #0
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	627a      	str	r2, [r7, #36]	; 0x24
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f20:	fb03 f201 	mul.w	r2, r3, r1
 8002f24:	2300      	movs	r3, #0
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a43      	ldr	r2, [pc, #268]	; (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f2e:	fba0 1202 	umull	r1, r2, r0, r2
 8002f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f34:	460a      	mov	r2, r1
 8002f36:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3a:	4413      	add	r3, r2
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f40:	2200      	movs	r2, #0
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	61fa      	str	r2, [r7, #28]
 8002f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f4e:	f7fd f9df 	bl	8000310 <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4613      	mov	r3, r2
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5a:	e053      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4b35      	ldr	r3, [pc, #212]	; (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	2200      	movs	r2, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	617a      	str	r2, [r7, #20]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f6e:	f04f 0b00 	mov.w	fp, #0
 8002f72:	4652      	mov	r2, sl
 8002f74:	465b      	mov	r3, fp
 8002f76:	f04f 0000 	mov.w	r0, #0
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f84:	0150      	lsls	r0, r2, #5
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f8e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fa6:	ebb2 0408 	subs.w	r4, r2, r8
 8002faa:	eb63 0509 	sbc.w	r5, r3, r9
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	00eb      	lsls	r3, r5, #3
 8002fb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fbc:	00e2      	lsls	r2, r4, #3
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	461d      	mov	r5, r3
 8002fc2:	eb14 030a 	adds.w	r3, r4, sl
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	eb45 030b 	adc.w	r3, r5, fp
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fda:	4629      	mov	r1, r5
 8002fdc:	028b      	lsls	r3, r1, #10
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	028a      	lsls	r2, r1, #10
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	60fa      	str	r2, [r7, #12]
 8002ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ff8:	f7fd f98a 	bl	8000310 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4613      	mov	r3, r2
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	3301      	adds	r3, #1
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800301e:	e002      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetSysClockFreq+0x184>)
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003028:	4618      	mov	r0, r3
 800302a:	3740      	adds	r7, #64	; 0x40
 800302c:	46bd      	mov	sp, r7
 800302e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	00f42400 	.word	0x00f42400
 800303c:	017d7840 	.word	0x017d7840

08003040 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <HAL_RCC_GetHCLKFreq+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000000 	.word	0x20000000

08003058 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800305e:	4b8d      	ldr	r3, [pc, #564]	; (8003294 <MX_LWIP_Init+0x23c>)
 8003060:	22c0      	movs	r2, #192	; 0xc0
 8003062:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003064:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <MX_LWIP_Init+0x23c>)
 8003066:	22a8      	movs	r2, #168	; 0xa8
 8003068:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800306a:	4b8a      	ldr	r3, [pc, #552]	; (8003294 <MX_LWIP_Init+0x23c>)
 800306c:	2201      	movs	r2, #1
 800306e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 25;
 8003070:	4b88      	ldr	r3, [pc, #544]	; (8003294 <MX_LWIP_Init+0x23c>)
 8003072:	2219      	movs	r2, #25
 8003074:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003076:	4b88      	ldr	r3, [pc, #544]	; (8003298 <MX_LWIP_Init+0x240>)
 8003078:	22ff      	movs	r2, #255	; 0xff
 800307a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800307c:	4b86      	ldr	r3, [pc, #536]	; (8003298 <MX_LWIP_Init+0x240>)
 800307e:	22ff      	movs	r2, #255	; 0xff
 8003080:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <MX_LWIP_Init+0x240>)
 8003084:	22ff      	movs	r2, #255	; 0xff
 8003086:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003088:	4b83      	ldr	r3, [pc, #524]	; (8003298 <MX_LWIP_Init+0x240>)
 800308a:	2200      	movs	r2, #0
 800308c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800308e:	4b83      	ldr	r3, [pc, #524]	; (800329c <MX_LWIP_Init+0x244>)
 8003090:	22c0      	movs	r2, #192	; 0xc0
 8003092:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003094:	4b81      	ldr	r3, [pc, #516]	; (800329c <MX_LWIP_Init+0x244>)
 8003096:	22a8      	movs	r2, #168	; 0xa8
 8003098:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800309a:	4b80      	ldr	r3, [pc, #512]	; (800329c <MX_LWIP_Init+0x244>)
 800309c:	2200      	movs	r2, #0
 800309e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80030a0:	4b7e      	ldr	r3, [pc, #504]	; (800329c <MX_LWIP_Init+0x244>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80030a6:	f001 fc63 	bl	8004970 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80030aa:	4b7a      	ldr	r3, [pc, #488]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	061a      	lsls	r2, r3, #24
 80030b0:	4b78      	ldr	r3, [pc, #480]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	4b76      	ldr	r3, [pc, #472]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030ba:	789b      	ldrb	r3, [r3, #2]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	4313      	orrs	r3, r2
 80030c0:	4a74      	ldr	r2, [pc, #464]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030c2:	78d2      	ldrb	r2, [r2, #3]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	061a      	lsls	r2, r3, #24
 80030c8:	4b72      	ldr	r3, [pc, #456]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	0619      	lsls	r1, r3, #24
 80030ce:	4b71      	ldr	r3, [pc, #452]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	4319      	orrs	r1, r3
 80030d6:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030d8:	789b      	ldrb	r3, [r3, #2]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	430b      	orrs	r3, r1
 80030de:	496d      	ldr	r1, [pc, #436]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030e0:	78c9      	ldrb	r1, [r1, #3]
 80030e2:	430b      	orrs	r3, r1
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030ea:	431a      	orrs	r2, r3
 80030ec:	4b69      	ldr	r3, [pc, #420]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	0619      	lsls	r1, r3, #24
 80030f2:	4b68      	ldr	r3, [pc, #416]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	4319      	orrs	r1, r3
 80030fa:	4b66      	ldr	r3, [pc, #408]	; (8003294 <MX_LWIP_Init+0x23c>)
 80030fc:	789b      	ldrb	r3, [r3, #2]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	430b      	orrs	r3, r1
 8003102:	4964      	ldr	r1, [pc, #400]	; (8003294 <MX_LWIP_Init+0x23c>)
 8003104:	78c9      	ldrb	r1, [r1, #3]
 8003106:	430b      	orrs	r3, r1
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800310e:	431a      	orrs	r2, r3
 8003110:	4b60      	ldr	r3, [pc, #384]	; (8003294 <MX_LWIP_Init+0x23c>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	0619      	lsls	r1, r3, #24
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <MX_LWIP_Init+0x23c>)
 8003118:	785b      	ldrb	r3, [r3, #1]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	4319      	orrs	r1, r3
 800311e:	4b5d      	ldr	r3, [pc, #372]	; (8003294 <MX_LWIP_Init+0x23c>)
 8003120:	789b      	ldrb	r3, [r3, #2]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	430b      	orrs	r3, r1
 8003126:	495b      	ldr	r1, [pc, #364]	; (8003294 <MX_LWIP_Init+0x23c>)
 8003128:	78c9      	ldrb	r1, [r1, #3]
 800312a:	430b      	orrs	r3, r1
 800312c:	0e1b      	lsrs	r3, r3, #24
 800312e:	4313      	orrs	r3, r2
 8003130:	4a5b      	ldr	r2, [pc, #364]	; (80032a0 <MX_LWIP_Init+0x248>)
 8003132:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003134:	4b58      	ldr	r3, [pc, #352]	; (8003298 <MX_LWIP_Init+0x240>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	061a      	lsls	r2, r3, #24
 800313a:	4b57      	ldr	r3, [pc, #348]	; (8003298 <MX_LWIP_Init+0x240>)
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	431a      	orrs	r2, r3
 8003142:	4b55      	ldr	r3, [pc, #340]	; (8003298 <MX_LWIP_Init+0x240>)
 8003144:	789b      	ldrb	r3, [r3, #2]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	4313      	orrs	r3, r2
 800314a:	4a53      	ldr	r2, [pc, #332]	; (8003298 <MX_LWIP_Init+0x240>)
 800314c:	78d2      	ldrb	r2, [r2, #3]
 800314e:	4313      	orrs	r3, r2
 8003150:	061a      	lsls	r2, r3, #24
 8003152:	4b51      	ldr	r3, [pc, #324]	; (8003298 <MX_LWIP_Init+0x240>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	0619      	lsls	r1, r3, #24
 8003158:	4b4f      	ldr	r3, [pc, #316]	; (8003298 <MX_LWIP_Init+0x240>)
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	041b      	lsls	r3, r3, #16
 800315e:	4319      	orrs	r1, r3
 8003160:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <MX_LWIP_Init+0x240>)
 8003162:	789b      	ldrb	r3, [r3, #2]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	430b      	orrs	r3, r1
 8003168:	494b      	ldr	r1, [pc, #300]	; (8003298 <MX_LWIP_Init+0x240>)
 800316a:	78c9      	ldrb	r1, [r1, #3]
 800316c:	430b      	orrs	r3, r1
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003174:	431a      	orrs	r2, r3
 8003176:	4b48      	ldr	r3, [pc, #288]	; (8003298 <MX_LWIP_Init+0x240>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	0619      	lsls	r1, r3, #24
 800317c:	4b46      	ldr	r3, [pc, #280]	; (8003298 <MX_LWIP_Init+0x240>)
 800317e:	785b      	ldrb	r3, [r3, #1]
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	4319      	orrs	r1, r3
 8003184:	4b44      	ldr	r3, [pc, #272]	; (8003298 <MX_LWIP_Init+0x240>)
 8003186:	789b      	ldrb	r3, [r3, #2]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	430b      	orrs	r3, r1
 800318c:	4942      	ldr	r1, [pc, #264]	; (8003298 <MX_LWIP_Init+0x240>)
 800318e:	78c9      	ldrb	r1, [r1, #3]
 8003190:	430b      	orrs	r3, r1
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003198:	431a      	orrs	r2, r3
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <MX_LWIP_Init+0x240>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	0619      	lsls	r1, r3, #24
 80031a0:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <MX_LWIP_Init+0x240>)
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	4319      	orrs	r1, r3
 80031a8:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <MX_LWIP_Init+0x240>)
 80031aa:	789b      	ldrb	r3, [r3, #2]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	430b      	orrs	r3, r1
 80031b0:	4939      	ldr	r1, [pc, #228]	; (8003298 <MX_LWIP_Init+0x240>)
 80031b2:	78c9      	ldrb	r1, [r1, #3]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	0e1b      	lsrs	r3, r3, #24
 80031b8:	4313      	orrs	r3, r2
 80031ba:	4a3a      	ldr	r2, [pc, #232]	; (80032a4 <MX_LWIP_Init+0x24c>)
 80031bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <MX_LWIP_Init+0x244>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	061a      	lsls	r2, r3, #24
 80031c4:	4b35      	ldr	r3, [pc, #212]	; (800329c <MX_LWIP_Init+0x244>)
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <MX_LWIP_Init+0x244>)
 80031ce:	789b      	ldrb	r3, [r3, #2]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	4313      	orrs	r3, r2
 80031d4:	4a31      	ldr	r2, [pc, #196]	; (800329c <MX_LWIP_Init+0x244>)
 80031d6:	78d2      	ldrb	r2, [r2, #3]
 80031d8:	4313      	orrs	r3, r2
 80031da:	061a      	lsls	r2, r3, #24
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <MX_LWIP_Init+0x244>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	0619      	lsls	r1, r3, #24
 80031e2:	4b2e      	ldr	r3, [pc, #184]	; (800329c <MX_LWIP_Init+0x244>)
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	4319      	orrs	r1, r3
 80031ea:	4b2c      	ldr	r3, [pc, #176]	; (800329c <MX_LWIP_Init+0x244>)
 80031ec:	789b      	ldrb	r3, [r3, #2]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	430b      	orrs	r3, r1
 80031f2:	492a      	ldr	r1, [pc, #168]	; (800329c <MX_LWIP_Init+0x244>)
 80031f4:	78c9      	ldrb	r1, [r1, #3]
 80031f6:	430b      	orrs	r3, r1
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031fe:	431a      	orrs	r2, r3
 8003200:	4b26      	ldr	r3, [pc, #152]	; (800329c <MX_LWIP_Init+0x244>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	0619      	lsls	r1, r3, #24
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <MX_LWIP_Init+0x244>)
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	4319      	orrs	r1, r3
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <MX_LWIP_Init+0x244>)
 8003210:	789b      	ldrb	r3, [r3, #2]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	430b      	orrs	r3, r1
 8003216:	4921      	ldr	r1, [pc, #132]	; (800329c <MX_LWIP_Init+0x244>)
 8003218:	78c9      	ldrb	r1, [r1, #3]
 800321a:	430b      	orrs	r3, r1
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003222:	431a      	orrs	r2, r3
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <MX_LWIP_Init+0x244>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	0619      	lsls	r1, r3, #24
 800322a:	4b1c      	ldr	r3, [pc, #112]	; (800329c <MX_LWIP_Init+0x244>)
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	4319      	orrs	r1, r3
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <MX_LWIP_Init+0x244>)
 8003234:	789b      	ldrb	r3, [r3, #2]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	430b      	orrs	r3, r1
 800323a:	4918      	ldr	r1, [pc, #96]	; (800329c <MX_LWIP_Init+0x244>)
 800323c:	78c9      	ldrb	r1, [r1, #3]
 800323e:	430b      	orrs	r3, r1
 8003240:	0e1b      	lsrs	r3, r3, #24
 8003242:	4313      	orrs	r3, r2
 8003244:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <MX_LWIP_Init+0x250>)
 8003246:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003248:	4b18      	ldr	r3, [pc, #96]	; (80032ac <MX_LWIP_Init+0x254>)
 800324a:	9302      	str	r3, [sp, #8]
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <MX_LWIP_Init+0x258>)
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	2300      	movs	r3, #0
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <MX_LWIP_Init+0x250>)
 8003256:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <MX_LWIP_Init+0x24c>)
 8003258:	4911      	ldr	r1, [pc, #68]	; (80032a0 <MX_LWIP_Init+0x248>)
 800325a:	4816      	ldr	r0, [pc, #88]	; (80032b4 <MX_LWIP_Init+0x25c>)
 800325c:	f002 f874 	bl	8005348 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003260:	4814      	ldr	r0, [pc, #80]	; (80032b4 <MX_LWIP_Init+0x25c>)
 8003262:	f002 fa23 	bl	80056ac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <MX_LWIP_Init+0x25c>)
 8003268:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003278:	480e      	ldr	r0, [pc, #56]	; (80032b4 <MX_LWIP_Init+0x25c>)
 800327a:	f002 fa27 	bl	80056cc <netif_set_up>
 800327e:	e002      	b.n	8003286 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003280:	480c      	ldr	r0, [pc, #48]	; (80032b4 <MX_LWIP_Init+0x25c>)
 8003282:	f002 fa8f 	bl	80057a4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003286:	490c      	ldr	r1, [pc, #48]	; (80032b8 <MX_LWIP_Init+0x260>)
 8003288:	480a      	ldr	r0, [pc, #40]	; (80032b4 <MX_LWIP_Init+0x25c>)
 800328a:	f002 fb21 	bl	80058d0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000244 	.word	0x20000244
 8003298:	20000248 	.word	0x20000248
 800329c:	2000024c 	.word	0x2000024c
 80032a0:	20000238 	.word	0x20000238
 80032a4:	2000023c 	.word	0x2000023c
 80032a8:	20000240 	.word	0x20000240
 80032ac:	0800ef89 	.word	0x0800ef89
 80032b0:	08003621 	.word	0x08003621
 80032b4:	20000204 	.word	0x20000204
 80032b8:	0800330d 	.word	0x0800330d

080032bc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80032c4:	f7fd fe3e 	bl	8000f44 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <Ethernet_Link_Periodic_Handle+0x30>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b63      	cmp	r3, #99	; 0x63
 80032d2:	d907      	bls.n	80032e4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80032d4:	f7fd fe36 	bl	8000f44 <HAL_GetTick>
 80032d8:	4603      	mov	r3, r0
 80032da:	4a04      	ldr	r2, [pc, #16]	; (80032ec <Ethernet_Link_Periodic_Handle+0x30>)
 80032dc:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 faf4 	bl	80038cc <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000200 	.word	0x20000200

080032f0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80032f4:	4804      	ldr	r0, [pc, #16]	; (8003308 <MX_LWIP_Process+0x18>)
 80032f6:	f000 f973 	bl	80035e0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80032fa:	f009 fa59 	bl	800c7b0 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80032fe:	4802      	ldr	r0, [pc, #8]	; (8003308 <MX_LWIP_Process+0x18>)
 8003300:	f7ff ffdc 	bl	80032bc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000204 	.word	0x20000204

0800330c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <SCB_InvalidateDCache_by_Addr>:
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003332:	2320      	movs	r3, #32
 8003334:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003336:	f3bf 8f4f 	dsb	sy
}
 800333a:	bf00      	nop
    while (op_size > 0) {
 800333c:	e00b      	b.n	8003356 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800333e:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <SCB_InvalidateDCache_by_Addr+0x54>)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	dcf0      	bgt.n	800333e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800335c:	f3bf 8f4f 	dsb	sy
}
 8003360:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003362:	f3bf 8f6f 	isb	sy
}
 8003366:	bf00      	nop
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003384:	4b40      	ldr	r3, [pc, #256]	; (8003488 <low_level_init+0x110>)
 8003386:	4a41      	ldr	r2, [pc, #260]	; (800348c <low_level_init+0x114>)
 8003388:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800338a:	2300      	movs	r3, #0
 800338c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003392:	23e1      	movs	r3, #225	; 0xe1
 8003394:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003396:	2300      	movs	r3, #0
 8003398:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800339a:	2300      	movs	r3, #0
 800339c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80033a2:	4a39      	ldr	r2, [pc, #228]	; (8003488 <low_level_init+0x110>)
 80033a4:	f107 0308 	add.w	r3, r7, #8
 80033a8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80033aa:	4b37      	ldr	r3, [pc, #220]	; (8003488 <low_level_init+0x110>)
 80033ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033b0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80033b2:	4b35      	ldr	r3, [pc, #212]	; (8003488 <low_level_init+0x110>)
 80033b4:	4a36      	ldr	r2, [pc, #216]	; (8003490 <low_level_init+0x118>)
 80033b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80033b8:	4b33      	ldr	r3, [pc, #204]	; (8003488 <low_level_init+0x110>)
 80033ba:	4a36      	ldr	r2, [pc, #216]	; (8003494 <low_level_init+0x11c>)
 80033bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80033be:	4b32      	ldr	r3, [pc, #200]	; (8003488 <low_level_init+0x110>)
 80033c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80033c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80033c6:	4830      	ldr	r0, [pc, #192]	; (8003488 <low_level_init+0x110>)
 80033c8:	f7fd fed2 	bl	8001170 <HAL_ETH_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80033d0:	2238      	movs	r2, #56	; 0x38
 80033d2:	2100      	movs	r1, #0
 80033d4:	4830      	ldr	r0, [pc, #192]	; (8003498 <low_level_init+0x120>)
 80033d6:	f00b feef 	bl	800f1b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <low_level_init+0x120>)
 80033dc:	2221      	movs	r2, #33	; 0x21
 80033de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80033e0:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <low_level_init+0x120>)
 80033e2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80033e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <low_level_init+0x120>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80033ee:	482b      	ldr	r0, [pc, #172]	; (800349c <low_level_init+0x124>)
 80033f0:	f001 fe72 	bl	80050d8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2206      	movs	r2, #6
 80033f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <low_level_init+0x110>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <low_level_init+0x110>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	785a      	ldrb	r2, [r3, #1]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003414:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <low_level_init+0x110>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	789a      	ldrb	r2, [r3, #2]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <low_level_init+0x110>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	78da      	ldrb	r2, [r3, #3]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <low_level_init+0x110>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	791a      	ldrb	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <low_level_init+0x110>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	795a      	ldrb	r2, [r3, #5]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800344a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003452:	f043 030a 	orr.w	r3, r3, #10
 8003456:	b2da      	uxtb	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800345e:	4910      	ldr	r1, [pc, #64]	; (80034a0 <low_level_init+0x128>)
 8003460:	4810      	ldr	r0, [pc, #64]	; (80034a4 <low_level_init+0x12c>)
 8003462:	f7fd fbbc 	bl	8000bde <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003466:	480f      	ldr	r0, [pc, #60]	; (80034a4 <low_level_init+0x12c>)
 8003468:	f7fd fbeb 	bl	8000c42 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa2a 	bl	80038cc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003478:	e001      	b.n	800347e <low_level_init+0x106>
    Error_Handler();
 800347a:	f7fd fa57 	bl	800092c <Error_Handler>
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20004bdc 	.word	0x20004bdc
 800348c:	40028000 	.word	0x40028000
 8003490:	20000130 	.word	0x20000130
 8003494:	20000090 	.word	0x20000090
 8003498:	20004c8c 	.word	0x20004c8c
 800349c:	08012f3c 	.word	0x08012f3c
 80034a0:	2000000c 	.word	0x2000000c
 80034a4:	20004cc4 	.word	0x20004cc4

080034a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b092      	sub	sp, #72	; 0x48
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	2230      	movs	r2, #48	; 0x30
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f00b fe75 	bl	800f1b8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	2230      	movs	r2, #48	; 0x30
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00b fe6e 	bl	800f1b8 <memset>

  for(q = p; q != NULL; q = q->next)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
 80034e0:	e045      	b.n	800356e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80034e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d902      	bls.n	80034ee <low_level_output+0x46>
      return ERR_IF;
 80034e8:	f06f 030b 	mvn.w	r3, #11
 80034ec:	e055      	b.n	800359a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80034ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	3348      	adds	r3, #72	; 0x48
 80034fe:	443b      	add	r3, r7
 8003500:	3b3c      	subs	r3, #60	; 0x3c
 8003502:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003506:	895b      	ldrh	r3, [r3, #10]
 8003508:	4619      	mov	r1, r3
 800350a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	3348      	adds	r3, #72	; 0x48
 8003516:	443b      	add	r3, r7
 8003518:	3b38      	subs	r3, #56	; 0x38
 800351a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2b00      	cmp	r3, #0
 8003520:	d011      	beq.n	8003546 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	f107 000c 	add.w	r0, r7, #12
 800352a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800352c:	460b      	mov	r3, r1
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	440b      	add	r3, r1
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	18c1      	adds	r1, r0, r3
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	3348      	adds	r3, #72	; 0x48
 8003540:	443b      	add	r3, r7
 8003542:	3b34      	subs	r3, #52	; 0x34
 8003544:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800354e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3348      	adds	r3, #72	; 0x48
 800355a:	443b      	add	r3, r7
 800355c:	3b34      	subs	r3, #52	; 0x34
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003564:	3301      	adds	r3, #1
 8003566:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	643b      	str	r3, [r7, #64]	; 0x40
 800356e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1b6      	bne.n	80034e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	891b      	ldrh	r3, [r3, #8]
 8003578:	461a      	mov	r2, r3
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <low_level_output+0xfc>)
 800357c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <low_level_output+0xfc>)
 8003580:	f107 030c 	add.w	r3, r7, #12
 8003584:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <low_level_output+0xfc>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800358c:	2214      	movs	r2, #20
 800358e:	4905      	ldr	r1, [pc, #20]	; (80035a4 <low_level_output+0xfc>)
 8003590:	4805      	ldr	r0, [pc, #20]	; (80035a8 <low_level_output+0x100>)
 8003592:	f7fd ff21 	bl	80013d8 <HAL_ETH_Transmit>

  return errval;
 8003596:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800359a:	4618      	mov	r0, r3
 800359c:	3748      	adds	r7, #72	; 0x48
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20004c8c 	.word	0x20004c8c
 80035a8:	20004bdc 	.word	0x20004bdc

080035ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80035b8:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <low_level_input+0x2c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4619      	mov	r1, r3
 80035c6:	4805      	ldr	r0, [pc, #20]	; (80035dc <low_level_input+0x30>)
 80035c8:	f7fd ff9a 	bl	8001500 <HAL_ETH_ReadData>
  }

  return p;
 80035cc:	68fb      	ldr	r3, [r7, #12]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20004bd8 	.word	0x20004bd8
 80035dc:	20004bdc 	.word	0x20004bdc

080035e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ffdd 	bl	80035ac <low_level_input>
 80035f2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	4798      	blx	r3
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f002 fce0 	bl	8005fd0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ea      	bne.n	80035ec <ethernetif_input+0xc>
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <ethernetif_init+0x1c>
 800362e:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <ethernetif_init+0x48>)
 8003630:	f240 127b 	movw	r2, #379	; 0x17b
 8003634:	490d      	ldr	r1, [pc, #52]	; (800366c <ethernetif_init+0x4c>)
 8003636:	480e      	ldr	r0, [pc, #56]	; (8003670 <ethernetif_init+0x50>)
 8003638:	f00b fdc6 	bl	800f1c8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2273      	movs	r2, #115	; 0x73
 8003640:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2274      	movs	r2, #116	; 0x74
 8003648:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <ethernetif_init+0x54>)
 8003650:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a08      	ldr	r2, [pc, #32]	; (8003678 <ethernetif_init+0x58>)
 8003656:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff fe8d 	bl	8003378 <low_level_init>

  return ERR_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	08010300 	.word	0x08010300
 800366c:	0801031c 	.word	0x0801031c
 8003670:	0801032c 	.word	0x0801032c
 8003674:	0800d441 	.word	0x0800d441
 8003678:	080034a9 	.word	0x080034a9

0800367c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003688:	68f9      	ldr	r1, [r7, #12]
 800368a:	4807      	ldr	r0, [pc, #28]	; (80036a8 <pbuf_free_custom+0x2c>)
 800368c:	f001 fe06 	bl	800529c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <pbuf_free_custom+0x30>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d102      	bne.n	800369e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <pbuf_free_custom+0x30>)
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
  }
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	08012f3c 	.word	0x08012f3c
 80036ac:	20004bd8 	.word	0x20004bd8

080036b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80036b4:	f7fd fc46 	bl	8000f44 <HAL_GetTick>
 80036b8:	4603      	mov	r3, r0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08e      	sub	sp, #56	; 0x38
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4e      	ldr	r2, [pc, #312]	; (8003818 <HAL_ETH_MspInit+0x158>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f040 8096 	bne.w	8003810 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80036e4:	4b4d      	ldr	r3, [pc, #308]	; (800381c <HAL_ETH_MspInit+0x15c>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4a4c      	ldr	r2, [pc, #304]	; (800381c <HAL_ETH_MspInit+0x15c>)
 80036ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036ee:	6313      	str	r3, [r2, #48]	; 0x30
 80036f0:	4b4a      	ldr	r3, [pc, #296]	; (800381c <HAL_ETH_MspInit+0x15c>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_ETH_MspInit+0x15c>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4a46      	ldr	r2, [pc, #280]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003706:	6313      	str	r3, [r2, #48]	; 0x30
 8003708:	4b44      	ldr	r3, [pc, #272]	; (800381c <HAL_ETH_MspInit+0x15c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a40      	ldr	r2, [pc, #256]	; (800381c <HAL_ETH_MspInit+0x15c>)
 800371a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800371e:	6313      	str	r3, [r2, #48]	; 0x30
 8003720:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372c:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_ETH_MspInit+0x15c>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	4a3a      	ldr	r2, [pc, #232]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6313      	str	r3, [r2, #48]	; 0x30
 8003738:	4b38      	ldr	r3, [pc, #224]	; (800381c <HAL_ETH_MspInit+0x15c>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003744:	4b35      	ldr	r3, [pc, #212]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	4a34      	ldr	r2, [pc, #208]	; (800381c <HAL_ETH_MspInit+0x15c>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6313      	str	r3, [r2, #48]	; 0x30
 8003750:	4b32      	ldr	r3, [pc, #200]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375c:	4b2f      	ldr	r3, [pc, #188]	; (800381c <HAL_ETH_MspInit+0x15c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4a2e      	ldr	r2, [pc, #184]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	6313      	str	r3, [r2, #48]	; 0x30
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <HAL_ETH_MspInit+0x15c>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003774:	4b29      	ldr	r3, [pc, #164]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_ETH_MspInit+0x15c>)
 800377a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377e:	6313      	str	r3, [r2, #48]	; 0x30
 8003780:	4b26      	ldr	r3, [pc, #152]	; (800381c <HAL_ETH_MspInit+0x15c>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800378c:	2332      	movs	r3, #50	; 0x32
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800379c:	230b      	movs	r3, #11
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a4:	4619      	mov	r1, r3
 80037a6:	481e      	ldr	r0, [pc, #120]	; (8003820 <HAL_ETH_MspInit+0x160>)
 80037a8:	f7fe fdd4 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80037ac:	2386      	movs	r3, #134	; 0x86
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037bc:	230b      	movs	r3, #11
 80037be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c4:	4619      	mov	r1, r3
 80037c6:	4817      	ldr	r0, [pc, #92]	; (8003824 <HAL_ETH_MspInit+0x164>)
 80037c8:	f7fe fdc4 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d2:	2302      	movs	r3, #2
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037da:	2303      	movs	r3, #3
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037de:	230b      	movs	r3, #11
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e6:	4619      	mov	r1, r3
 80037e8:	480f      	ldr	r0, [pc, #60]	; (8003828 <HAL_ETH_MspInit+0x168>)
 80037ea:	f7fe fdb3 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80037ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fc:	2303      	movs	r3, #3
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003800:	230b      	movs	r3, #11
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003808:	4619      	mov	r1, r3
 800380a:	4808      	ldr	r0, [pc, #32]	; (800382c <HAL_ETH_MspInit+0x16c>)
 800380c:	f7fe fda2 	bl	8002354 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003810:	bf00      	nop
 8003812:	3738      	adds	r7, #56	; 0x38
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40028000 	.word	0x40028000
 800381c:	40023800 	.word	0x40023800
 8003820:	40020800 	.word	0x40020800
 8003824:	40020000 	.word	0x40020000
 8003828:	40020400 	.word	0x40020400
 800382c:	40021800 	.word	0x40021800

08003830 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <ETH_PHY_IO_Init+0x10>)
 8003836:	f7fe f933 	bl	8001aa0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20004bdc 	.word	0x20004bdc

08003844 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return 0;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	4807      	ldr	r0, [pc, #28]	; (8003884 <ETH_PHY_IO_ReadReg+0x30>)
 8003868:	f7fd ff82 	bl	8001770 <HAL_ETH_ReadPHYRegister>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	e000      	b.n	800387a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20004bdc 	.word	0x20004bdc

08003888 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	68f9      	ldr	r1, [r7, #12]
 800389a:	4807      	ldr	r0, [pc, #28]	; (80038b8 <ETH_PHY_IO_WriteReg+0x30>)
 800389c:	f7fd ffb3 	bl	8001806 <HAL_ETH_WritePHYRegister>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295
 80038aa:	e000      	b.n	80038ae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20004bdc 	.word	0x20004bdc

080038bc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80038c0:	f7fd fb40 	bl	8000f44 <HAL_GetTick>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b0a0      	sub	sp, #128	; 0x80
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	2264      	movs	r2, #100	; 0x64
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f00b fc6b 	bl	800f1b8 <memset>
  int32_t PHYLinkState = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038ea:	2300      	movs	r3, #0
 80038ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ee:	2300      	movs	r3, #0
 80038f0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80038f2:	483a      	ldr	r0, [pc, #232]	; (80039dc <ethernet_link_check_state+0x110>)
 80038f4:	f7fd fa4d 	bl	8000d92 <LAN8742_GetLinkState>
 80038f8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00c      	beq.n	8003926 <ethernet_link_check_state+0x5a>
 800390c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800390e:	2b01      	cmp	r3, #1
 8003910:	dc09      	bgt.n	8003926 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003912:	4833      	ldr	r0, [pc, #204]	; (80039e0 <ethernet_link_check_state+0x114>)
 8003914:	f7fd fd07 	bl	8001326 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f001 ff43 	bl	80057a4 <netif_set_down>
    netif_set_link_down(netif);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f001 ffa6 	bl	8005870 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003924:	e055      	b.n	80039d2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d14e      	bne.n	80039d2 <ethernet_link_check_state+0x106>
 8003934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003936:	2b01      	cmp	r3, #1
 8003938:	dd4b      	ble.n	80039d2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800393a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800393c:	3b02      	subs	r3, #2
 800393e:	2b03      	cmp	r3, #3
 8003940:	d82a      	bhi.n	8003998 <ethernet_link_check_state+0xcc>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <ethernet_link_check_state+0x7c>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	08003959 	.word	0x08003959
 800394c:	0800396b 	.word	0x0800396b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800398b 	.word	0x0800398b
      duplex = ETH_FULLDUPLEX_MODE;
 8003958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800395c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800395e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003962:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003964:	2301      	movs	r3, #1
 8003966:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003968:	e017      	b.n	800399a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800396a:	2300      	movs	r3, #0
 800396c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800396e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003972:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003974:	2301      	movs	r3, #1
 8003976:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003978:	e00f      	b.n	800399a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800397a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800397e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003980:	2300      	movs	r3, #0
 8003982:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003984:	2301      	movs	r3, #1
 8003986:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003988:	e007      	b.n	800399a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800398a:	2300      	movs	r3, #0
 800398c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800398e:	2300      	movs	r3, #0
 8003990:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003996:	e000      	b.n	800399a <ethernet_link_check_state+0xce>
      break;
 8003998:	bf00      	nop
    if(linkchanged)
 800399a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d018      	beq.n	80039d2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	4619      	mov	r1, r3
 80039a6:	480e      	ldr	r0, [pc, #56]	; (80039e0 <ethernet_link_check_state+0x114>)
 80039a8:	f7fd ff76 	bl	8001898 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80039ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80039b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	4619      	mov	r1, r3
 80039ba:	4809      	ldr	r0, [pc, #36]	; (80039e0 <ethernet_link_check_state+0x114>)
 80039bc:	f7fe f856 	bl	8001a6c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80039c0:	4807      	ldr	r0, [pc, #28]	; (80039e0 <ethernet_link_check_state+0x114>)
 80039c2:	f7fd fc51 	bl	8001268 <HAL_ETH_Start>
      netif_set_up(netif);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f001 fe80 	bl	80056cc <netif_set_up>
      netif_set_link_up(netif);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f001 ff1b 	bl	8005808 <netif_set_link_up>
}
 80039d2:	bf00      	nop
 80039d4:	3780      	adds	r7, #128	; 0x80
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20004cc4 	.word	0x20004cc4
 80039e0:	20004bdc 	.word	0x20004bdc

080039e4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80039ec:	4812      	ldr	r0, [pc, #72]	; (8003a38 <HAL_ETH_RxAllocateCallback+0x54>)
 80039ee:	f001 fbe7 	bl	80051c0 <memp_malloc_pool>
 80039f2:	60f8      	str	r0, [r7, #12]
  if (p)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d014      	beq.n	8003a24 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f103 0220 	add.w	r2, r3, #32
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <HAL_ETH_RxAllocateCallback+0x58>)
 8003a08:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003a12:	9201      	str	r2, [sp, #4]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2241      	movs	r2, #65	; 0x41
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f002 f91d 	bl	8005c5c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003a22:	e005      	b.n	8003a30 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_ETH_RxAllocateCallback+0x5c>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	08012f3c 	.word	0x08012f3c
 8003a3c:	0800367d 	.word	0x0800367d
 8003a40:	20004bd8 	.word	0x20004bd8

08003a44 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3b20      	subs	r3, #32
 8003a62:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e003      	b.n	8003a8e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e009      	b.n	8003ab0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	891a      	ldrh	r2, [r3, #8]
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f2      	bne.n	8003a9c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8003ab6:	887b      	ldrh	r3, [r7, #2]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fc30 	bl	8003320 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003ac0:	bf00      	nop
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <fs_open+0x16>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <fs_open+0x1c>
    return ERR_ARG;
 8003ade:	f06f 030f 	mvn.w	r3, #15
 8003ae2:	e028      	b.n	8003b36 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <fs_open+0x78>)
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e020      	b.n	8003b2c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4619      	mov	r1, r3
 8003af0:	6838      	ldr	r0, [r7, #0]
 8003af2:	f7fc fba5 	bl	8000240 <strcmp>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d114      	bne.n	8003b26 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	7c1a      	ldrb	r2, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e007      	b.n	8003b36 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1db      	bne.n	8003aea <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003b32:	f06f 0305 	mvn.w	r3, #5
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	08013f1c 	.word	0x08013f1c

08003b44 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	1ad3      	subs	r3, r2, r3
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003b7e:	22ac      	movs	r2, #172	; 0xac
 8003b80:	2100      	movs	r1, #0
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f00b fb18 	bl	800f1b8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003b96:	20ac      	movs	r0, #172	; 0xac
 8003b98:	f001 f9a4 	bl	8004ee4 <mem_malloc>
 8003b9c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <http_state_alloc+0x1a>
    http_state_init(ret);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ffe6 	bl	8003b76 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003baa:	687b      	ldr	r3, [r7, #4]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ffbb 	bl	8003b44 <fs_close>
    hs->handle = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <http_state_eof+0x38>
    pbuf_free(hs->req);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f002 f9f5 	bl	8005fd0 <pbuf_free>
    hs->req = NULL;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <http_state_free+0x1a>
    http_state_eof(hs);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ffd6 	bl	8003bb4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f001 f805 	bl	8004c18 <mem_free>
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <http_write+0x22>
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <http_write+0xc8>)
 8003c2e:	f240 2219 	movw	r2, #537	; 0x219
 8003c32:	492c      	ldr	r1, [pc, #176]	; (8003ce4 <http_write+0xcc>)
 8003c34:	482c      	ldr	r0, [pc, #176]	; (8003ce8 <http_write+0xd0>)
 8003c36:	f00b fac7 	bl	800f1c8 <iprintf>
  len = *length;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003c40:	8afb      	ldrh	r3, [r7, #22]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <http_write+0x32>
    return ERR_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e045      	b.n	8003cd6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003c50:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003c52:	8aba      	ldrh	r2, [r7, #20]
 8003c54:	8afb      	ldrh	r3, [r7, #22]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d201      	bcs.n	8003c5e <http_write+0x46>
    len = max_len;
 8003c5a:	8abb      	ldrh	r3, [r7, #20]
 8003c5c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003c66:	8afa      	ldrh	r2, [r7, #22]
 8003c68:	8abb      	ldrh	r3, [r7, #20]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d901      	bls.n	8003c72 <http_write+0x5a>
    len = max_len;
 8003c6e:	8abb      	ldrh	r3, [r7, #20]
 8003c70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	8afa      	ldrh	r2, [r7, #22]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f006 ff31 	bl	800aae0 <tcp_write>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003c82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d10f      	bne.n	8003cac <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d902      	bls.n	8003ca6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	82fb      	strh	r3, [r7, #22]
 8003ca4:	e002      	b.n	8003cac <http_write+0x94>
      } else {
        len /= 2;
 8003ca6:	8afb      	ldrh	r3, [r7, #22]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003cac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d102      	bne.n	8003cbc <http_write+0xa4>
 8003cb6:	8afb      	ldrh	r3, [r7, #22]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d8da      	bhi.n	8003c72 <http_write+0x5a>

  if (err == ERR_OK) {
 8003cbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8afa      	ldrh	r2, [r7, #22]
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	e002      	b.n	8003cd2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003cd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	08010394 	.word	0x08010394
 8003ce4:	080103cc 	.word	0x080103cc
 8003ce8:	080103dc 	.word	0x080103dc

08003cec <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f003 ffad 	bl	8007c5c <tcp_arg>
  altcp_recv(pcb, NULL);
 8003d02:	2100      	movs	r1, #0
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f003 ffbb 	bl	8007c80 <tcp_recv>
  altcp_err(pcb, NULL);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f003 fffb 	bl	8007d08 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2100      	movs	r1, #0
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f004 f830 	bl	8007d7c <tcp_poll>
  altcp_sent(pcb, NULL);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f003 ffd0 	bl	8007cc4 <tcp_sent>
  if (hs != NULL) {
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8003d2a:	68b8      	ldr	r0, [r7, #8]
 8003d2c:	f7ff ff62 	bl	8003bf4 <http_state_free>
  }

  if (abort_conn) {
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f002 fed2 	bl	8006ae0 <tcp_abort>
    return ERR_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e00f      	b.n	8003d60 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f002 fde3 	bl	800690c <tcp_close>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003d52:	2204      	movs	r2, #4
 8003d54:	4904      	ldr	r1, [pc, #16]	; (8003d68 <http_close_or_abort_conn+0x7c>)
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f004 f810 	bl	8007d7c <tcp_poll>
  }
  return err;
 8003d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	0800457b 	.word	0x0800457b

08003d6c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	6839      	ldr	r1, [r7, #0]
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ffb6 	bl	8003cec <http_close_or_abort_conn>
 8003d80:	4603      	mov	r3, r0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ffe8 	bl	8003d6c <http_close_conn>
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <extract_uri_parameters+0x18>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <extract_uri_parameters+0x1c>
    return (0);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e04e      	b.n	8003e5e <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	e042      	b.n	8003e50 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	330a      	adds	r3, #10
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8003ddc:	2126      	movs	r1, #38	; 0x26
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f00b fa48 	bl	800f274 <strchr>
 8003de4:	6178      	str	r0, [r7, #20]
    if (pair) {
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d006      	beq.n	8003dfa <extract_uri_parameters+0x56>
      *pair = '\0';
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
      pair++;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e00c      	b.n	8003e14 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f00b fa39 	bl	800f274 <strchr>
 8003e02:	6178      	str	r0, [r7, #20]
      if (pair) {
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <extract_uri_parameters+0x6c>
        *pair = '\0';
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8003e14:	213d      	movs	r1, #61	; 0x3d
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f00b fa2c 	bl	800f274 <strchr>
 8003e1c:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <extract_uri_parameters+0x98>
      *equals = '\0';
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	331a      	adds	r3, #26
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	e006      	b.n	8003e4a <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	331a      	adds	r3, #26
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	2200      	movs	r2, #0
 8003e48:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	dc02      	bgt.n	8003e5c <extract_uri_parameters+0xb8>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1b6      	bne.n	8003dca <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8003e5c:	693b      	ldr	r3, [r7, #16]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff84 	bl	8003d8a <http_eof>
    return 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e016      	b.n	8003eb4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fe64 	bl	8003b58 <fs_bytes_left>
 8003e90:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dc05      	bgt.n	8003ea4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ff75 	bl	8003d8a <http_eof>
    return 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e007      	b.n	8003eb4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <http_check_eof+0x54>)
 8003ea6:	f240 429d 	movw	r2, #1181	; 0x49d
 8003eaa:	4905      	ldr	r1, [pc, #20]	; (8003ec0 <http_check_eof+0x58>)
 8003eac:	4805      	ldr	r0, [pc, #20]	; (8003ec4 <http_check_eof+0x5c>)
 8003eae:	f00b f98b 	bl	800f1c8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8003eb2:	2301      	movs	r3, #1
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	08010394 	.word	0x08010394
 8003ec0:	08010404 	.word	0x08010404
 8003ec4:	080103dc 	.word	0x080103dc

08003ec8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d803      	bhi.n	8003eea <http_send_data_nonssi+0x22>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	e001      	b.n	8003eee <http_send_data_nonssi+0x26>
 8003eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eee:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6999      	ldr	r1, [r3, #24]
 8003ef4:	f107 020c 	add.w	r2, r7, #12
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fe8c 	bl	8003c18 <http_write>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	89ba      	ldrh	r2, [r7, #12]
 8003f16:	441a      	add	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	89ba      	ldrh	r2, [r7, #12]
 8003f22:	1a9a      	subs	r2, r3, r2
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <http_send+0x18>
    return 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e025      	b.n	8003f96 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8003f52:	6839      	ldr	r1, [r7, #0]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff87 	bl	8003e68 <http_check_eof>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <http_send+0x32>
      return 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e018      	b.n	8003f96 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8003f64:	6839      	ldr	r1, [r7, #0]
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ffae 	bl	8003ec8 <http_send_data_nonssi>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <http_send+0x62>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fdeb 	bl	8003b58 <fs_bytes_left>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	dc05      	bgt.n	8003f94 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003f88:	6839      	ldr	r1, [r7, #0]
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fefd 	bl	8003d8a <http_eof>
    return 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <http_get_404_file+0x80>)
 8003fae:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7ff fd85 	bl	8003ac8 <fs_open>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d024      	beq.n	8004014 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	4a15      	ldr	r2, [pc, #84]	; (8004024 <http_get_404_file+0x84>)
 8003fce:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7ff fd75 	bl	8003ac8 <fs_open>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8003fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d014      	beq.n	8004014 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <http_get_404_file+0x88>)
 8003fee:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f7ff fd65 	bl	8003ac8 <fs_open>
 8003ffe:	4603      	mov	r3, r0
 8004000:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8004002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
        return NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8004014:	687b      	ldr	r3, [r7, #4]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	0801043c 	.word	0x0801043c
 8004024:	08010448 	.word	0x08010448
 8004028:	08010454 	.word	0x08010454

0800402c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <http_parse_request+0x24>
 8004042:	4b65      	ldr	r3, [pc, #404]	; (80041d8 <http_parse_request+0x1ac>)
 8004044:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8004048:	4964      	ldr	r1, [pc, #400]	; (80041dc <http_parse_request+0x1b0>)
 800404a:	4865      	ldr	r0, [pc, #404]	; (80041e0 <http_parse_request+0x1b4>)
 800404c:	f00b f8bc 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <http_parse_request+0x38>
 8004056:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <http_parse_request+0x1ac>)
 8004058:	f240 72af 	movw	r2, #1967	; 0x7af
 800405c:	4961      	ldr	r1, [pc, #388]	; (80041e4 <http_parse_request+0x1b8>)
 800405e:	4860      	ldr	r0, [pc, #384]	; (80041e0 <http_parse_request+0x1b4>)
 8004060:	f00b f8b2 	bl	800f1c8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <http_parse_request+0x48>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8004074:	f06f 0307 	mvn.w	r3, #7
 8004078:	e0a9      	b.n	80041ce <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004086:	621a      	str	r2, [r3, #32]
 8004088:	e005      	b.n	8004096 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004090:	4618      	mov	r0, r3
 8004092:	f002 f85f 	bl	8006154 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8004096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004098:	f002 f83a 	bl	8006110 <pbuf_ref>

  if (hs->req->next != NULL) {
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d012      	beq.n	80040cc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	891b      	ldrh	r3, [r3, #8]
 80040ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bf28      	it	cs
 80040b4:	4613      	movcs	r3, r2
 80040b6:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6a18      	ldr	r0, [r3, #32]
 80040bc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80040be:	2300      	movs	r3, #0
 80040c0:	4949      	ldr	r1, [pc, #292]	; (80041e8 <http_parse_request+0x1bc>)
 80040c2:	f002 f96f 	bl	80063a4 <pbuf_copy_partial>
    data = httpd_req_buf;
 80040c6:	4b48      	ldr	r3, [pc, #288]	; (80041e8 <http_parse_request+0x1bc>)
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ca:	e005      	b.n	80040d8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	895b      	ldrh	r3, [r3, #10]
 80040d6:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80040d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d962      	bls.n	80041a4 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80040de:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040e0:	461a      	mov	r2, r3
 80040e2:	4942      	ldr	r1, [pc, #264]	; (80041ec <http_parse_request+0x1c0>)
 80040e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040e6:	f000 fc0d 	bl	8004904 <lwip_strnstr>
 80040ea:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d058      	beq.n	80041a4 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80040f6:	2204      	movs	r2, #4
 80040f8:	493d      	ldr	r1, [pc, #244]	; (80041f0 <http_parse_request+0x1c4>)
 80040fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040fc:	f00b f8c7 	bl	800f28e <strncmp>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d116      	bne.n	8004134 <http_parse_request+0x108>
        sp1 = data + 3;
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	3303      	adds	r3, #3
 800410a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	b29b      	uxth	r3, r3
 8004116:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	8b7a      	ldrh	r2, [r7, #26]
 8004122:	4934      	ldr	r1, [pc, #208]	; (80041f4 <http_parse_request+0x1c8>)
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fbed 	bl	8004904 <lwip_strnstr>
 800412a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d111      	bne.n	8004156 <http_parse_request+0x12a>
 8004132:	e006      	b.n	8004142 <http_parse_request+0x116>
        data[4] = 0;
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	3304      	adds	r3, #4
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800413c:	f06f 030f 	mvn.w	r3, #15
 8004140:	e045      	b.n	80041ce <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3301      	adds	r3, #1
 8004146:	8b7a      	ldrh	r2, [r7, #26]
 8004148:	4928      	ldr	r1, [pc, #160]	; (80041ec <http_parse_request+0x1c0>)
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fbda 	bl	8004904 <lwip_strnstr>
 8004150:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8004152:	2301      	movs	r3, #1
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3301      	adds	r3, #1
 800415a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01e      	beq.n	80041a4 <http_parse_request+0x178>
 8004166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	429a      	cmp	r2, r3
 800416c:	d91a      	bls.n	80041a4 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800416e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004170:	461a      	mov	r2, r3
 8004172:	4921      	ldr	r1, [pc, #132]	; (80041f8 <http_parse_request+0x1cc>)
 8004174:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004176:	f000 fbc5 	bl	8004904 <lwip_strnstr>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d011      	beq.n	80041a4 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	3301      	adds	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800418c:	8b3b      	ldrh	r3, [r7, #24]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	6979      	ldr	r1, [r7, #20]
 800419a:	68b8      	ldr	r0, [r7, #8]
 800419c:	f000 f82e 	bl	80041fc <http_find_file>
 80041a0:	4603      	mov	r3, r0
 80041a2:	e014      	b.n	80041ce <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 ff99 	bl	80060e0 <pbuf_clen>
 80041ae:	4603      	mov	r3, r0
 80041b0:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	891b      	ldrh	r3, [r3, #8]
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d205      	bcs.n	80041ca <http_parse_request+0x19e>
 80041be:	8a7b      	ldrh	r3, [r7, #18]
 80041c0:	2b05      	cmp	r3, #5
 80041c2:	d802      	bhi.n	80041ca <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80041c4:	f06f 0304 	mvn.w	r3, #4
 80041c8:	e001      	b.n	80041ce <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80041ca:	f06f 030f 	mvn.w	r3, #15
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3738      	adds	r7, #56	; 0x38
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	08010394 	.word	0x08010394
 80041dc:	08010460 	.word	0x08010460
 80041e0:	080103dc 	.word	0x080103dc
 80041e4:	0801046c 	.word	0x0801046c
 80041e8:	20004ce4 	.word	0x20004ce4
 80041ec:	08010478 	.word	0x08010478
 80041f0:	0801047c 	.word	0x0801047c
 80041f4:	08010484 	.word	0x08010484
 80041f8:	08010488 	.word	0x08010488

080041fc <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b093      	sub	sp, #76	; 0x4c
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8004208:	2300      	movs	r3, #0
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc f81b 	bl	8000254 <strlen>
 800421e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d06b      	beq.n	80042fe <http_find_file+0x102>
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	3b01      	subs	r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b2f      	cmp	r3, #47	; 0x2f
 8004232:	d164      	bne.n	80042fe <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004234:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004236:	4a72      	ldr	r2, [pc, #456]	; (8004400 <http_find_file+0x204>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d102      	bne.n	8004242 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	2b01      	cmp	r3, #1
 8004240:	d15d      	bne.n	80042fe <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	3b01      	subs	r3, #1
 8004246:	2b3f      	cmp	r3, #63	; 0x3f
 8004248:	bf28      	it	cs
 800424a:	233f      	movcs	r3, #63	; 0x3f
 800424c:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6a3a      	ldr	r2, [r7, #32]
 8004258:	4619      	mov	r1, r3
 800425a:	4869      	ldr	r0, [pc, #420]	; (8004400 <http_find_file+0x204>)
 800425c:	f00a ff9e 	bl	800f19c <memcpy>
      http_uri_buf[copy_len] = 0;
 8004260:	4a67      	ldr	r2, [pc, #412]	; (8004400 <http_find_file+0x204>)
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	4413      	add	r3, r2
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800426a:	2300      	movs	r3, #0
 800426c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426e:	e043      	b.n	80042f8 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d028      	beq.n	80042c8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800427c:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01e      	beq.n	80042c2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8004284:	4a5f      	ldr	r2, [pc, #380]	; (8004404 <http_find_file+0x208>)
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fb ffe1 	bl	8000254 <strlen>
 8004292:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4293      	cmp	r3, r2
 800429a:	bf28      	it	cs
 800429c:	4613      	movcs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	4a57      	ldr	r2, [pc, #348]	; (8004400 <http_find_file+0x204>)
 80042a4:	1898      	adds	r0, r3, r2
 80042a6:	4a57      	ldr	r2, [pc, #348]	; (8004404 <http_find_file+0x208>)
 80042a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4619      	mov	r1, r3
 80042b2:	f00a ff73 	bl	800f19c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80042b6:	6a3a      	ldr	r2, [r7, #32]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4413      	add	r3, r2
 80042bc:	4a50      	ldr	r2, [pc, #320]	; (8004400 <http_find_file+0x204>)
 80042be:	2100      	movs	r1, #0
 80042c0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80042c2:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <http_find_file+0x204>)
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c6:	e004      	b.n	80042d2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <http_find_file+0x208>)
 80042ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fbf6 	bl	8003ac8 <fs_open>
 80042dc:	4603      	mov	r3, r0
 80042de:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80042e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <http_find_file+0xf6>
        uri = file_name;
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80042f0:	e005      	b.n	80042fe <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80042f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f4:	3301      	adds	r3, #1
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d9b8      	bls.n	8004270 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d161      	bne.n	80043c8 <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	213f      	movs	r1, #63	; 0x3f
 8004308:	4618      	mov	r0, r3
 800430a:	f00a ffb3 	bl	800f274 <strchr>
 800430e:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
      params++;
 800431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431e:	3301      	adds	r3, #1
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <http_find_file+0x20c>)
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800432a:	4b38      	ldr	r3, [pc, #224]	; (800440c <http_find_file+0x210>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d034      	beq.n	800439c <http_find_file+0x1a0>
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <http_find_file+0x214>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d030      	beq.n	800439c <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800433a:	2300      	movs	r3, #0
 800433c:	633b      	str	r3, [r7, #48]	; 0x30
 800433e:	e028      	b.n	8004392 <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8004340:	68b8      	ldr	r0, [r7, #8]
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <http_find_file+0x214>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4413      	add	r3, r2
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	f7fb ff76 	bl	8000240 <strcmp>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d118      	bne.n	800438c <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800435a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff fd21 	bl	8003da4 <extract_uri_parameters>
 8004362:	4603      	mov	r3, r0
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <http_find_file+0x20c>)
 8004366:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <http_find_file+0x214>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	685c      	ldr	r4, [r3, #4]
 8004374:	4b24      	ldr	r3, [pc, #144]	; (8004408 <http_find_file+0x20c>)
 8004376:	6819      	ldr	r1, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004384:	47a0      	blx	r4
 8004386:	4603      	mov	r3, r0
 8004388:	60bb      	str	r3, [r7, #8]
          break;
 800438a:	e007      	b.n	800439c <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	3301      	adds	r3, #1
 8004390:	633b      	str	r3, [r7, #48]	; 0x30
 8004392:	4b1e      	ldr	r3, [pc, #120]	; (800440c <http_find_file+0x210>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004398:	429a      	cmp	r2, r3
 800439a:	dbd1      	blt.n	8004340 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fb90 	bl	8003ac8 <fs_open>
 80043a8:	4603      	mov	r3, r0
 80043aa:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 80043ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <http_find_file+0x1be>
      file = &hs->file_handle;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b8:	e006      	b.n	80043c8 <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	4619      	mov	r1, r3
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fded 	bl	8003fa0 <http_get_404_file>
 80043c6:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80043ce:	f107 0308 	add.w	r3, r7, #8
 80043d2:	4619      	mov	r1, r3
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fde3 	bl	8003fa0 <http_get_404_file>
 80043da:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f810 	bl	8004414 <http_init_file>
 80043f4:	4603      	mov	r3, r0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3744      	adds	r7, #68	; 0x44
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	bf00      	nop
 8004400:	200050e4 	.word	0x200050e4
 8004404:	08013f30 	.word	0x08013f30
 8004408:	2000512c 	.word	0x2000512c
 800440c:	20005128 	.word	0x20005128
 8004410:	20005124 	.word	0x20005124

08004414 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d05c      	beq.n	80044e2 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <http_init_file+0x2a>
 8004430:	4b35      	ldr	r3, [pc, #212]	; (8004508 <http_init_file+0xf4>)
 8004432:	f640 120b 	movw	r2, #2315	; 0x90b
 8004436:	4935      	ldr	r1, [pc, #212]	; (800450c <http_init_file+0xf8>)
 8004438:	4835      	ldr	r0, [pc, #212]	; (8004510 <http_init_file+0xfc>)
 800443a:	f00a fec5 	bl	800f1c8 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	da06      	bge.n	8004462 <http_init_file+0x4e>
 8004454:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <http_init_file+0xf4>)
 8004456:	f640 1234 	movw	r2, #2356	; 0x934
 800445a:	492e      	ldr	r1, [pc, #184]	; (8004514 <http_init_file+0x100>)
 800445c:	482c      	ldr	r0, [pc, #176]	; (8004510 <http_init_file+0xfc>)
 800445e:	f00a feb3 	bl	800f1c8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	461a      	mov	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	7c1b      	ldrb	r3, [r3, #16]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <http_init_file+0x7c>
 8004482:	4b21      	ldr	r3, [pc, #132]	; (8004508 <http_init_file+0xf4>)
 8004484:	f640 1243 	movw	r2, #2371	; 0x943
 8004488:	4923      	ldr	r1, [pc, #140]	; (8004518 <http_init_file+0x104>)
 800448a:	4821      	ldr	r0, [pc, #132]	; (8004510 <http_init_file+0xfc>)
 800448c:	f00a fe9c 	bl	800f1c8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d032      	beq.n	80044fc <http_init_file+0xe8>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	7c1b      	ldrb	r3, [r3, #16]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02b      	beq.n	80044fc <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6998      	ldr	r0, [r3, #24]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	461a      	mov	r2, r3
 80044ae:	491b      	ldr	r1, [pc, #108]	; (800451c <http_init_file+0x108>)
 80044b0:	f000 fa28 	bl	8004904 <lwip_strnstr>
 80044b4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01f      	beq.n	80044fc <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	441a      	add	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad2      	subs	r2, r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
 80044e0:	e00c      	b.n	80044fc <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	08010394 	.word	0x08010394
 800450c:	08010490 	.word	0x08010490
 8004510:	080103dc 	.word	0x080103dc
 8004514:	080104a4 	.word	0x080104a4
 8004518:	080104c4 	.word	0x080104c4
 800451c:	08010488 	.word	0x08010488

08004520 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <http_err+0x1c>
    http_state_free(hs);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fb5c 	bl	8003bf4 <http_state_free>
  }
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <http_sent+0x1c>
    return ERR_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e008      	b.n	8004572 <http_sent+0x2e>
  }

  hs->retries = 0;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	68b8      	ldr	r0, [r7, #8]
 800456c:	f7ff fce1 	bl	8003f32 <http_send>

  return ERR_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d107      	bne.n	800459e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800458e:	2100      	movs	r1, #0
 8004590:	6838      	ldr	r0, [r7, #0]
 8004592:	f7ff fbeb 	bl	8003d6c <http_close_conn>
 8004596:	4603      	mov	r3, r0
 8004598:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e021      	b.n	80045e2 <http_poll+0x68>
  } else {
    hs->retries++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a4:	3301      	adds	r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d105      	bne.n	80045c4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	6838      	ldr	r0, [r7, #0]
 80045bc:	f7ff fbd6 	bl	8003d6c <http_close_conn>
      return ERR_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e00e      	b.n	80045e2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	6838      	ldr	r0, [r7, #0]
 80045d0:	f7ff fcaf 	bl	8003f32 <http_send>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80045da:	6838      	ldr	r0, [r7, #0]
 80045dc:	f007 f86a 	bl	800b6b4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80045fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <http_recv+0x26>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <http_recv+0x26>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d111      	bne.n	8004636 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	891b      	ldrh	r3, [r3, #8]
 800461c:	4619      	mov	r1, r3
 800461e:	68b8      	ldr	r0, [r7, #8]
 8004620:	f002 fc38 	bl	8006e94 <tcp_recved>
      pbuf_free(p);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 fcd3 	bl	8005fd0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800462a:	6979      	ldr	r1, [r7, #20]
 800462c:	68b8      	ldr	r0, [r7, #8]
 800462e:	f7ff fb9d 	bl	8003d6c <http_close_conn>
    return ERR_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e055      	b.n	80046e2 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	891b      	ldrh	r3, [r3, #8]
 800463a:	4619      	mov	r1, r3
 800463c:	68b8      	ldr	r0, [r7, #8]
 800463e:	f002 fc29 	bl	8006e94 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d147      	bne.n	80046da <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	6979      	ldr	r1, [r7, #20]
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff fcec 	bl	800402c <http_parse_request>
 8004654:	4603      	mov	r3, r0
 8004656:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004658:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d015      	beq.n	800468c <http_recv+0xa0>
 8004660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004664:	f113 0f05 	cmn.w	r3, #5
 8004668:	d010      	beq.n	800468c <http_recv+0xa0>
 800466a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800466e:	f113 0f10 	cmn.w	r3, #16
 8004672:	d00b      	beq.n	800468c <http_recv+0xa0>
 8004674:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004678:	f113 0f08 	cmn.w	r3, #8
 800467c:	d006      	beq.n	800468c <http_recv+0xa0>
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <http_recv+0x100>)
 8004680:	f640 2204 	movw	r2, #2564	; 0xa04
 8004684:	491a      	ldr	r1, [pc, #104]	; (80046f0 <http_recv+0x104>)
 8004686:	481b      	ldr	r0, [pc, #108]	; (80046f4 <http_recv+0x108>)
 8004688:	f00a fd9e 	bl	800f1c8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800468c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004690:	f113 0f05 	cmn.w	r3, #5
 8004694:	d00b      	beq.n	80046ae <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <http_recv+0xc2>
          pbuf_free(hs->req);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fc94 	bl	8005fd0 <pbuf_free>
          hs->req = NULL;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2200      	movs	r2, #0
 80046ac:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f001 fc8e 	bl	8005fd0 <pbuf_free>
      if (parsed == ERR_OK) {
 80046b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80046bc:	6979      	ldr	r1, [r7, #20]
 80046be:	68b8      	ldr	r0, [r7, #8]
 80046c0:	f7ff fc37 	bl	8003f32 <http_send>
 80046c4:	e00c      	b.n	80046e0 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80046c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80046ca:	f113 0f10 	cmn.w	r3, #16
 80046ce:	d107      	bne.n	80046e0 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80046d0:	6979      	ldr	r1, [r7, #20]
 80046d2:	68b8      	ldr	r0, [r7, #8]
 80046d4:	f7ff fb4a 	bl	8003d6c <http_close_conn>
 80046d8:	e002      	b.n	80046e0 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f001 fc78 	bl	8005fd0 <pbuf_free>
    }
  }
  return ERR_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	08010394 	.word	0x08010394
 80046f0:	080104f0 	.word	0x080104f0
 80046f4:	080103dc 	.word	0x080103dc

080046f8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <http_accept+0x1c>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <http_accept+0x22>
    return ERR_VAL;
 8004714:	f06f 0305 	mvn.w	r3, #5
 8004718:	e025      	b.n	8004766 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800471a:	2101      	movs	r1, #1
 800471c:	68b8      	ldr	r0, [r7, #8]
 800471e:	f003 f89d 	bl	800785c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8004722:	f7ff fa35 	bl	8003b90 <http_state_alloc>
 8004726:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	e018      	b.n	8004766 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800473a:	6979      	ldr	r1, [r7, #20]
 800473c:	68b8      	ldr	r0, [r7, #8]
 800473e:	f003 fa8d 	bl	8007c5c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8004742:	490b      	ldr	r1, [pc, #44]	; (8004770 <http_accept+0x78>)
 8004744:	68b8      	ldr	r0, [r7, #8]
 8004746:	f003 fa9b 	bl	8007c80 <tcp_recv>
  altcp_err(pcb, http_err);
 800474a:	490a      	ldr	r1, [pc, #40]	; (8004774 <http_accept+0x7c>)
 800474c:	68b8      	ldr	r0, [r7, #8]
 800474e:	f003 fadb 	bl	8007d08 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004752:	2204      	movs	r2, #4
 8004754:	4908      	ldr	r1, [pc, #32]	; (8004778 <http_accept+0x80>)
 8004756:	68b8      	ldr	r0, [r7, #8]
 8004758:	f003 fb10 	bl	8007d7c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800475c:	4907      	ldr	r1, [pc, #28]	; (800477c <http_accept+0x84>)
 800475e:	68b8      	ldr	r0, [r7, #8]
 8004760:	f003 fab0 	bl	8007cc4 <tcp_sent>

  return ERR_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	080045ed 	.word	0x080045ed
 8004774:	08004521 	.word	0x08004521
 8004778:	0800457b 	.word	0x0800457b
 800477c:	08004545 	.word	0x08004545

08004780 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d029      	beq.n	80047e6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004792:	2101      	movs	r1, #1
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f003 f861 	bl	800785c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800479a:	887b      	ldrh	r3, [r7, #2]
 800479c:	461a      	mov	r2, r3
 800479e:	4914      	ldr	r1, [pc, #80]	; (80047f0 <httpd_init_pcb+0x70>)
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f002 f9a9 	bl	8006af8 <tcp_bind>
 80047a6:	4603      	mov	r3, r0
 80047a8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80047aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <httpd_init_pcb+0x40>
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <httpd_init_pcb+0x74>)
 80047b4:	f640 2257 	movw	r2, #2647	; 0xa57
 80047b8:	490f      	ldr	r1, [pc, #60]	; (80047f8 <httpd_init_pcb+0x78>)
 80047ba:	4810      	ldr	r0, [pc, #64]	; (80047fc <httpd_init_pcb+0x7c>)
 80047bc:	f00a fd04 	bl	800f1c8 <iprintf>
    pcb = altcp_listen(pcb);
 80047c0:	21ff      	movs	r1, #255	; 0xff
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f002 fa50 	bl	8006c68 <tcp_listen_with_backlog>
 80047c8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <httpd_init_pcb+0x5e>
 80047d0:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <httpd_init_pcb+0x74>)
 80047d2:	f640 2259 	movw	r2, #2649	; 0xa59
 80047d6:	490a      	ldr	r1, [pc, #40]	; (8004800 <httpd_init_pcb+0x80>)
 80047d8:	4808      	ldr	r0, [pc, #32]	; (80047fc <httpd_init_pcb+0x7c>)
 80047da:	f00a fcf5 	bl	800f1c8 <iprintf>
    altcp_accept(pcb, http_accept);
 80047de:	4909      	ldr	r1, [pc, #36]	; (8004804 <httpd_init_pcb+0x84>)
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f003 fab3 	bl	8007d4c <tcp_accept>
  }
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	08014028 	.word	0x08014028
 80047f4:	08010394 	.word	0x08010394
 80047f8:	0801051c 	.word	0x0801051c
 80047fc:	080103dc 	.word	0x080103dc
 8004800:	08010538 	.word	0x08010538
 8004804:	080046f9 	.word	0x080046f9

08004808 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800480e:	202e      	movs	r0, #46	; 0x2e
 8004810:	f003 fa16 	bl	8007c40 <tcp_new_ip_type>
 8004814:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <httpd_init+0x22>
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <httpd_init+0x34>)
 800481e:	f640 2272 	movw	r2, #2674	; 0xa72
 8004822:	4907      	ldr	r1, [pc, #28]	; (8004840 <httpd_init+0x38>)
 8004824:	4807      	ldr	r0, [pc, #28]	; (8004844 <httpd_init+0x3c>)
 8004826:	f00a fccf 	bl	800f1c8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800482a:	2150      	movs	r1, #80	; 0x50
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff ffa7 	bl	8004780 <httpd_init_pcb>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	08010394 	.word	0x08010394
 8004840:	08010558 	.word	0x08010558
 8004844:	080103dc 	.word	0x080103dc

08004848 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <http_set_cgi_handlers+0x1e>
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <http_set_cgi_handlers+0x48>)
 800485a:	f640 22b2 	movw	r2, #2738	; 0xab2
 800485e:	490d      	ldr	r1, [pc, #52]	; (8004894 <http_set_cgi_handlers+0x4c>)
 8004860:	480d      	ldr	r0, [pc, #52]	; (8004898 <http_set_cgi_handlers+0x50>)
 8004862:	f00a fcb1 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	dc06      	bgt.n	800487a <http_set_cgi_handlers+0x32>
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <http_set_cgi_handlers+0x48>)
 800486e:	f640 22b3 	movw	r2, #2739	; 0xab3
 8004872:	490a      	ldr	r1, [pc, #40]	; (800489c <http_set_cgi_handlers+0x54>)
 8004874:	4808      	ldr	r0, [pc, #32]	; (8004898 <http_set_cgi_handlers+0x50>)
 8004876:	f00a fca7 	bl	800f1c8 <iprintf>

  httpd_cgis = cgis;
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <http_set_cgi_handlers+0x58>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8004880:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <http_set_cgi_handlers+0x5c>)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6013      	str	r3, [r2, #0]
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	08010394 	.word	0x08010394
 8004894:	08010574 	.word	0x08010574
 8004898:	080103dc 	.word	0x080103dc
 800489c:	08010584 	.word	0x08010584
 80048a0:	20005124 	.word	0x20005124
 80048a4:	20005128 	.word	0x20005128

080048a8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	b21a      	sxth	r2, r3
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	b29b      	uxth	r3, r3
 80048be:	b21b      	sxth	r3, r3
 80048c0:	4313      	orrs	r3, r2
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	b29b      	uxth	r3, r3
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	061a      	lsls	r2, r3, #24
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	4313      	orrs	r3, r2
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8004910:	68b8      	ldr	r0, [r7, #8]
 8004912:	f7fb fc9f 	bl	8000254 <strlen>
 8004916:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	e022      	b.n	8004968 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e012      	b.n	800494e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d109      	bne.n	8004948 <lwip_strnstr+0x44>
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	6978      	ldr	r0, [r7, #20]
 800493a:	f00a fca8 	bl	800f28e <strncmp>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	e00f      	b.n	8004968 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	3301      	adds	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <lwip_strnstr+0x62>
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	441a      	add	r2, r3
 800495c:	68f9      	ldr	r1, [r7, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	440b      	add	r3, r1
 8004962:	429a      	cmp	r2, r3
 8004964:	d9e0      	bls.n	8004928 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800497a:	f000 f8d5 	bl	8004b28 <mem_init>
  memp_init();
 800497e:	f000 fbdb 	bl	8005138 <memp_init>
  pbuf_init();
  netif_init();
 8004982:	f000 fcd9 	bl	8005338 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004986:	f007 ff55 	bl	800c834 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800498a:	f001 fdaf 	bl	80064ec <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800498e:	f007 fec7 	bl	800c720 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <ptr_to_mem+0x20>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	4413      	add	r3, r2
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	2000579c 	.word	0x2000579c

080049c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <mem_to_ptr+0x20>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	b29b      	uxth	r3, r3
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	2000579c 	.word	0x2000579c

080049e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80049ec:	4b45      	ldr	r3, [pc, #276]	; (8004b04 <plug_holes+0x120>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d206      	bcs.n	8004a04 <plug_holes+0x20>
 80049f6:	4b44      	ldr	r3, [pc, #272]	; (8004b08 <plug_holes+0x124>)
 80049f8:	f240 12df 	movw	r2, #479	; 0x1df
 80049fc:	4943      	ldr	r1, [pc, #268]	; (8004b0c <plug_holes+0x128>)
 80049fe:	4844      	ldr	r0, [pc, #272]	; (8004b10 <plug_holes+0x12c>)
 8004a00:	f00a fbe2 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004a04:	4b43      	ldr	r3, [pc, #268]	; (8004b14 <plug_holes+0x130>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d306      	bcc.n	8004a1c <plug_holes+0x38>
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <plug_holes+0x124>)
 8004a10:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a14:	4940      	ldr	r1, [pc, #256]	; (8004b18 <plug_holes+0x134>)
 8004a16:	483e      	ldr	r0, [pc, #248]	; (8004b10 <plug_holes+0x12c>)
 8004a18:	f00a fbd6 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	791b      	ldrb	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d006      	beq.n	8004a32 <plug_holes+0x4e>
 8004a24:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <plug_holes+0x124>)
 8004a26:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004a2a:	493c      	ldr	r1, [pc, #240]	; (8004b1c <plug_holes+0x138>)
 8004a2c:	4838      	ldr	r0, [pc, #224]	; (8004b10 <plug_holes+0x12c>)
 8004a2e:	f00a fbcb 	bl	800f1c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a3a:	d906      	bls.n	8004a4a <plug_holes+0x66>
 8004a3c:	4b32      	ldr	r3, [pc, #200]	; (8004b08 <plug_holes+0x124>)
 8004a3e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004a42:	4937      	ldr	r1, [pc, #220]	; (8004b20 <plug_holes+0x13c>)
 8004a44:	4832      	ldr	r0, [pc, #200]	; (8004b10 <plug_holes+0x12c>)
 8004a46:	f00a fbbf 	bl	800f1c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff ffa4 	bl	800499c <ptr_to_mem>
 8004a54:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d024      	beq.n	8004aa8 <plug_holes+0xc4>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	791b      	ldrb	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d120      	bne.n	8004aa8 <plug_holes+0xc4>
 8004a66:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <plug_holes+0x130>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d01b      	beq.n	8004aa8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <plug_holes+0x140>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d102      	bne.n	8004a80 <plug_holes+0x9c>
      lfree = mem;
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <plug_holes+0x140>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	881a      	ldrh	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a90:	d00a      	beq.n	8004aa8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff ff80 	bl	800499c <ptr_to_mem>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff ff8e 	bl	80049c0 <mem_to_ptr>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	885b      	ldrh	r3, [r3, #2]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff ff75 	bl	800499c <ptr_to_mem>
 8004ab2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d01f      	beq.n	8004afc <plug_holes+0x118>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	791b      	ldrb	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d11b      	bne.n	8004afc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <plug_holes+0x140>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d102      	bne.n	8004ad4 <plug_holes+0xf0>
      lfree = pmem;
 8004ace:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <plug_holes+0x140>)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	881a      	ldrh	r2, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ae4:	d00a      	beq.n	8004afc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ff56 	bl	800499c <ptr_to_mem>
 8004af0:	4604      	mov	r4, r0
 8004af2:	68b8      	ldr	r0, [r7, #8]
 8004af4:	f7ff ff64 	bl	80049c0 <mem_to_ptr>
 8004af8:	4603      	mov	r3, r0
 8004afa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd90      	pop	{r4, r7, pc}
 8004b04:	2000579c 	.word	0x2000579c
 8004b08:	080105a0 	.word	0x080105a0
 8004b0c:	080105d0 	.word	0x080105d0
 8004b10:	080105e8 	.word	0x080105e8
 8004b14:	200057a0 	.word	0x200057a0
 8004b18:	08010610 	.word	0x08010610
 8004b1c:	0801062c 	.word	0x0801062c
 8004b20:	08010648 	.word	0x08010648
 8004b24:	200057a4 	.word	0x200057a4

08004b28 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <mem_init+0x68>)
 8004b30:	3303      	adds	r3, #3
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <mem_init+0x6c>)
 8004b3a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004b3c:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <mem_init+0x6c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b48:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004b56:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b5a:	f7ff ff1f 	bl	800499c <ptr_to_mem>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <mem_init+0x70>)
 8004b62:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <mem_init+0x70>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <mem_init+0x70>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b74:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <mem_init+0x70>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b7e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <mem_init+0x6c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <mem_init+0x74>)
 8004b86:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20005148 	.word	0x20005148
 8004b94:	2000579c 	.word	0x2000579c
 8004b98:	200057a0 	.word	0x200057a0
 8004b9c:	200057a4 	.word	0x200057a4

08004ba0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff09 	bl	80049c0 <mem_to_ptr>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fef0 	bl	800499c <ptr_to_mem>
 8004bbc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	885b      	ldrh	r3, [r3, #2]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff feea 	bl	800499c <ptr_to_mem>
 8004bc8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bd2:	d818      	bhi.n	8004c06 <mem_link_valid+0x66>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	885b      	ldrh	r3, [r3, #2]
 8004bd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bdc:	d813      	bhi.n	8004c06 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004be2:	8afa      	ldrh	r2, [r7, #22]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d004      	beq.n	8004bf2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	8afa      	ldrh	r2, [r7, #22]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d109      	bne.n	8004c06 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <mem_link_valid+0x74>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d006      	beq.n	8004c0a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	885b      	ldrh	r3, [r3, #2]
 8004c00:	8afa      	ldrh	r2, [r7, #22]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d001      	beq.n	8004c0a <mem_link_valid+0x6a>
    return 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e000      	b.n	8004c0c <mem_link_valid+0x6c>
  }
  return 1;
 8004c0a:	2301      	movs	r3, #1
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	200057a0 	.word	0x200057a0

08004c18 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d04c      	beq.n	8004cc0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <mem_free+0xb0>)
 8004c32:	f240 2273 	movw	r2, #627	; 0x273
 8004c36:	4925      	ldr	r1, [pc, #148]	; (8004ccc <mem_free+0xb4>)
 8004c38:	4825      	ldr	r0, [pc, #148]	; (8004cd0 <mem_free+0xb8>)
 8004c3a:	f00a fac5 	bl	800f1c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c3e:	e040      	b.n	8004cc2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3b08      	subs	r3, #8
 8004c44:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004c46:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <mem_free+0xbc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d306      	bcc.n	8004c5e <mem_free+0x46>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f103 020c 	add.w	r2, r3, #12
 8004c56:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <mem_free+0xc0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d907      	bls.n	8004c6e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <mem_free+0xb0>)
 8004c60:	f240 227f 	movw	r2, #639	; 0x27f
 8004c64:	491d      	ldr	r1, [pc, #116]	; (8004cdc <mem_free+0xc4>)
 8004c66:	481a      	ldr	r0, [pc, #104]	; (8004cd0 <mem_free+0xb8>)
 8004c68:	f00a faae 	bl	800f1c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c6c:	e029      	b.n	8004cc2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	791b      	ldrb	r3, [r3, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d107      	bne.n	8004c86 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <mem_free+0xb0>)
 8004c78:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004c7c:	4918      	ldr	r1, [pc, #96]	; (8004ce0 <mem_free+0xc8>)
 8004c7e:	4814      	ldr	r0, [pc, #80]	; (8004cd0 <mem_free+0xb8>)
 8004c80:	f00a faa2 	bl	800f1c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c84:	e01d      	b.n	8004cc2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff ff8a 	bl	8004ba0 <mem_link_valid>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d107      	bne.n	8004ca2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <mem_free+0xb0>)
 8004c94:	f240 2295 	movw	r2, #661	; 0x295
 8004c98:	4912      	ldr	r1, [pc, #72]	; (8004ce4 <mem_free+0xcc>)
 8004c9a:	480d      	ldr	r0, [pc, #52]	; (8004cd0 <mem_free+0xb8>)
 8004c9c:	f00a fa94 	bl	800f1c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ca0:	e00f      	b.n	8004cc2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <mem_free+0xd0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d202      	bcs.n	8004cb8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004cb2:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <mem_free+0xd0>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff fe93 	bl	80049e4 <plug_holes>
 8004cbe:	e000      	b.n	8004cc2 <mem_free+0xaa>
    return;
 8004cc0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	080105a0 	.word	0x080105a0
 8004ccc:	08010674 	.word	0x08010674
 8004cd0:	080105e8 	.word	0x080105e8
 8004cd4:	2000579c 	.word	0x2000579c
 8004cd8:	200057a0 	.word	0x200057a0
 8004cdc:	08010698 	.word	0x08010698
 8004ce0:	080106b4 	.word	0x080106b4
 8004ce4:	080106dc 	.word	0x080106dc
 8004ce8:	200057a4 	.word	0x200057a4

08004cec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004cf8:	887b      	ldrh	r3, [r7, #2]
 8004cfa:	3303      	adds	r3, #3
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004d04:	8bfb      	ldrh	r3, [r7, #30]
 8004d06:	2b0b      	cmp	r3, #11
 8004d08:	d801      	bhi.n	8004d0e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004d0e:	8bfb      	ldrh	r3, [r7, #30]
 8004d10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d14:	d803      	bhi.n	8004d1e <mem_trim+0x32>
 8004d16:	8bfa      	ldrh	r2, [r7, #30]
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d201      	bcs.n	8004d22 <mem_trim+0x36>
    return NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e0cc      	b.n	8004ebc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d22:	4b68      	ldr	r3, [pc, #416]	; (8004ec4 <mem_trim+0x1d8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d304      	bcc.n	8004d36 <mem_trim+0x4a>
 8004d2c:	4b66      	ldr	r3, [pc, #408]	; (8004ec8 <mem_trim+0x1dc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d306      	bcc.n	8004d44 <mem_trim+0x58>
 8004d36:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <mem_trim+0x1e0>)
 8004d38:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004d3c:	4964      	ldr	r1, [pc, #400]	; (8004ed0 <mem_trim+0x1e4>)
 8004d3e:	4865      	ldr	r0, [pc, #404]	; (8004ed4 <mem_trim+0x1e8>)
 8004d40:	f00a fa42 	bl	800f1c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d44:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <mem_trim+0x1d8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d304      	bcc.n	8004d58 <mem_trim+0x6c>
 8004d4e:	4b5e      	ldr	r3, [pc, #376]	; (8004ec8 <mem_trim+0x1dc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d301      	bcc.n	8004d5c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	e0af      	b.n	8004ebc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3b08      	subs	r3, #8
 8004d60:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004d62:	69b8      	ldr	r0, [r7, #24]
 8004d64:	f7ff fe2c 	bl	80049c0 <mem_to_ptr>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	8afb      	ldrh	r3, [r7, #22]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b08      	subs	r3, #8
 8004d78:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004d7a:	8bfa      	ldrh	r2, [r7, #30]
 8004d7c:	8abb      	ldrh	r3, [r7, #20]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d906      	bls.n	8004d90 <mem_trim+0xa4>
 8004d82:	4b52      	ldr	r3, [pc, #328]	; (8004ecc <mem_trim+0x1e0>)
 8004d84:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004d88:	4953      	ldr	r1, [pc, #332]	; (8004ed8 <mem_trim+0x1ec>)
 8004d8a:	4852      	ldr	r0, [pc, #328]	; (8004ed4 <mem_trim+0x1e8>)
 8004d8c:	f00a fa1c 	bl	800f1c8 <iprintf>
  if (newsize > size) {
 8004d90:	8bfa      	ldrh	r2, [r7, #30]
 8004d92:	8abb      	ldrh	r3, [r7, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d901      	bls.n	8004d9c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e08f      	b.n	8004ebc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004d9c:	8bfa      	ldrh	r2, [r7, #30]
 8004d9e:	8abb      	ldrh	r3, [r7, #20]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d101      	bne.n	8004da8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	e089      	b.n	8004ebc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fdf5 	bl	800499c <ptr_to_mem>
 8004db2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	791b      	ldrb	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d13f      	bne.n	8004e3c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dc4:	d106      	bne.n	8004dd4 <mem_trim+0xe8>
 8004dc6:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <mem_trim+0x1e0>)
 8004dc8:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004dcc:	4943      	ldr	r1, [pc, #268]	; (8004edc <mem_trim+0x1f0>)
 8004dce:	4841      	ldr	r0, [pc, #260]	; (8004ed4 <mem_trim+0x1e8>)
 8004dd0:	f00a f9fa 	bl	800f1c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004dda:	8afa      	ldrh	r2, [r7, #22]
 8004ddc:	8bfb      	ldrh	r3, [r7, #30]
 8004dde:	4413      	add	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3308      	adds	r3, #8
 8004de4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004de6:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <mem_trim+0x1f4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d106      	bne.n	8004dfe <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004df0:	89fb      	ldrh	r3, [r7, #14]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fdd2 	bl	800499c <ptr_to_mem>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4a39      	ldr	r2, [pc, #228]	; (8004ee0 <mem_trim+0x1f4>)
 8004dfc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004dfe:	89fb      	ldrh	r3, [r7, #14]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fdcb 	bl	800499c <ptr_to_mem>
 8004e06:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	89ba      	ldrh	r2, [r7, #12]
 8004e12:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	8afa      	ldrh	r2, [r7, #22]
 8004e18:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	89fa      	ldrh	r2, [r7, #14]
 8004e1e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e28:	d047      	beq.n	8004eba <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fdb4 	bl	800499c <ptr_to_mem>
 8004e34:	4602      	mov	r2, r0
 8004e36:	89fb      	ldrh	r3, [r7, #14]
 8004e38:	8053      	strh	r3, [r2, #2]
 8004e3a:	e03e      	b.n	8004eba <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004e3c:	8bfb      	ldrh	r3, [r7, #30]
 8004e3e:	f103 0214 	add.w	r2, r3, #20
 8004e42:	8abb      	ldrh	r3, [r7, #20]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d838      	bhi.n	8004eba <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e48:	8afa      	ldrh	r2, [r7, #22]
 8004e4a:	8bfb      	ldrh	r3, [r7, #30]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3308      	adds	r3, #8
 8004e52:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e5c:	d106      	bne.n	8004e6c <mem_trim+0x180>
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <mem_trim+0x1e0>)
 8004e60:	f240 3216 	movw	r2, #790	; 0x316
 8004e64:	491d      	ldr	r1, [pc, #116]	; (8004edc <mem_trim+0x1f0>)
 8004e66:	481b      	ldr	r0, [pc, #108]	; (8004ed4 <mem_trim+0x1e8>)
 8004e68:	f00a f9ae 	bl	800f1c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fd94 	bl	800499c <ptr_to_mem>
 8004e74:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <mem_trim+0x1f4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d202      	bcs.n	8004e86 <mem_trim+0x19a>
      lfree = mem2;
 8004e80:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <mem_trim+0x1f4>)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	8afa      	ldrh	r2, [r7, #22]
 8004e98:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	89fa      	ldrh	r2, [r7, #14]
 8004e9e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ea8:	d007      	beq.n	8004eba <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fd74 	bl	800499c <ptr_to_mem>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	89fb      	ldrh	r3, [r7, #14]
 8004eb8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004eba:	687b      	ldr	r3, [r7, #4]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	2000579c 	.word	0x2000579c
 8004ec8:	200057a0 	.word	0x200057a0
 8004ecc:	080105a0 	.word	0x080105a0
 8004ed0:	08010710 	.word	0x08010710
 8004ed4:	080105e8 	.word	0x080105e8
 8004ed8:	08010728 	.word	0x08010728
 8004edc:	08010748 	.word	0x08010748
 8004ee0:	200057a4 	.word	0x200057a4

08004ee4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <mem_malloc+0x14>
    return NULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e0d9      	b.n	80050ac <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	3303      	adds	r3, #3
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004f04:	8bbb      	ldrh	r3, [r7, #28]
 8004f06:	2b0b      	cmp	r3, #11
 8004f08:	d801      	bhi.n	8004f0e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004f0e:	8bbb      	ldrh	r3, [r7, #28]
 8004f10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f14:	d803      	bhi.n	8004f1e <mem_malloc+0x3a>
 8004f16:	8bba      	ldrh	r2, [r7, #28]
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d201      	bcs.n	8004f22 <mem_malloc+0x3e>
    return NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e0c4      	b.n	80050ac <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004f22:	4b64      	ldr	r3, [pc, #400]	; (80050b4 <mem_malloc+0x1d0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fd4a 	bl	80049c0 <mem_to_ptr>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	83fb      	strh	r3, [r7, #30]
 8004f30:	e0b4      	b.n	800509c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004f32:	8bfb      	ldrh	r3, [r7, #30]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fd31 	bl	800499c <ptr_to_mem>
 8004f3a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f040 80a4 	bne.w	800508e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	8bfb      	ldrh	r3, [r7, #30]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f1a3 0208 	sub.w	r2, r3, #8
 8004f54:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004f56:	429a      	cmp	r2, r3
 8004f58:	f0c0 8099 	bcc.w	800508e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	8bfb      	ldrh	r3, [r7, #30]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f1a3 0208 	sub.w	r2, r3, #8
 8004f6a:	8bbb      	ldrh	r3, [r7, #28]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d333      	bcc.n	8004fda <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004f72:	8bfa      	ldrh	r2, [r7, #30]
 8004f74:	8bbb      	ldrh	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004f7e:	8a7b      	ldrh	r3, [r7, #18]
 8004f80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f84:	d106      	bne.n	8004f94 <mem_malloc+0xb0>
 8004f86:	4b4c      	ldr	r3, [pc, #304]	; (80050b8 <mem_malloc+0x1d4>)
 8004f88:	f240 3287 	movw	r2, #903	; 0x387
 8004f8c:	494b      	ldr	r1, [pc, #300]	; (80050bc <mem_malloc+0x1d8>)
 8004f8e:	484c      	ldr	r0, [pc, #304]	; (80050c0 <mem_malloc+0x1dc>)
 8004f90:	f00a f91a 	bl	800f1c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004f94:	8a7b      	ldrh	r3, [r7, #18]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fd00 	bl	800499c <ptr_to_mem>
 8004f9c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	881a      	ldrh	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8bfa      	ldrh	r2, [r7, #30]
 8004fb0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	8a7a      	ldrh	r2, [r7, #18]
 8004fb6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fc6:	d00b      	beq.n	8004fe0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fce5 	bl	800499c <ptr_to_mem>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	8a7b      	ldrh	r3, [r7, #18]
 8004fd6:	8053      	strh	r3, [r2, #2]
 8004fd8:	e002      	b.n	8004fe0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004fe0:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <mem_malloc+0x1d0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d127      	bne.n	800503a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004fea:	4b32      	ldr	r3, [pc, #200]	; (80050b4 <mem_malloc+0x1d0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004ff0:	e005      	b.n	8004ffe <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fcd0 	bl	800499c <ptr_to_mem>
 8004ffc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	791b      	ldrb	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d004      	beq.n	8005010 <mem_malloc+0x12c>
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <mem_malloc+0x1e0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	429a      	cmp	r2, r3
 800500e:	d1f0      	bne.n	8004ff2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005010:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <mem_malloc+0x1d0>)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005016:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <mem_malloc+0x1d0>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <mem_malloc+0x1e0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d00b      	beq.n	800503a <mem_malloc+0x156>
 8005022:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <mem_malloc+0x1d0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	791b      	ldrb	r3, [r3, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d006      	beq.n	800503a <mem_malloc+0x156>
 800502c:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <mem_malloc+0x1d4>)
 800502e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005032:	4925      	ldr	r1, [pc, #148]	; (80050c8 <mem_malloc+0x1e4>)
 8005034:	4822      	ldr	r0, [pc, #136]	; (80050c0 <mem_malloc+0x1dc>)
 8005036:	f00a f8c7 	bl	800f1c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800503a:	8bba      	ldrh	r2, [r7, #28]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4413      	add	r3, r2
 8005040:	3308      	adds	r3, #8
 8005042:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <mem_malloc+0x1e0>)
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	4293      	cmp	r3, r2
 8005048:	d906      	bls.n	8005058 <mem_malloc+0x174>
 800504a:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <mem_malloc+0x1d4>)
 800504c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005050:	491e      	ldr	r1, [pc, #120]	; (80050cc <mem_malloc+0x1e8>)
 8005052:	481b      	ldr	r0, [pc, #108]	; (80050c0 <mem_malloc+0x1dc>)
 8005054:	f00a f8b8 	bl	800f1c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d006      	beq.n	8005070 <mem_malloc+0x18c>
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <mem_malloc+0x1d4>)
 8005064:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005068:	4919      	ldr	r1, [pc, #100]	; (80050d0 <mem_malloc+0x1ec>)
 800506a:	4815      	ldr	r0, [pc, #84]	; (80050c0 <mem_malloc+0x1dc>)
 800506c:	f00a f8ac 	bl	800f1c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d006      	beq.n	8005088 <mem_malloc+0x1a4>
 800507a:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <mem_malloc+0x1d4>)
 800507c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005080:	4914      	ldr	r1, [pc, #80]	; (80050d4 <mem_malloc+0x1f0>)
 8005082:	480f      	ldr	r0, [pc, #60]	; (80050c0 <mem_malloc+0x1dc>)
 8005084:	f00a f8a0 	bl	800f1c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	3308      	adds	r3, #8
 800508c:	e00e      	b.n	80050ac <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800508e:	8bfb      	ldrh	r3, [r7, #30]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fc83 	bl	800499c <ptr_to_mem>
 8005096:	4603      	mov	r3, r0
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800509c:	8bfa      	ldrh	r2, [r7, #30]
 800509e:	8bbb      	ldrh	r3, [r7, #28]
 80050a0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f4ff af44 	bcc.w	8004f32 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200057a4 	.word	0x200057a4
 80050b8:	080105a0 	.word	0x080105a0
 80050bc:	08010748 	.word	0x08010748
 80050c0:	080105e8 	.word	0x080105e8
 80050c4:	200057a0 	.word	0x200057a0
 80050c8:	0801075c 	.word	0x0801075c
 80050cc:	08010778 	.word	0x08010778
 80050d0:	080107a8 	.word	0x080107a8
 80050d4:	080107d8 	.word	0x080107d8

080050d8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	3303      	adds	r3, #3
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e011      	b.n	800511e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4413      	add	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	885b      	ldrh	r3, [r3, #2]
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4293      	cmp	r3, r2
 8005128:	dbe7      	blt.n	80050fa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800513e:	2300      	movs	r3, #0
 8005140:	80fb      	strh	r3, [r7, #6]
 8005142:	e009      	b.n	8005158 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	4a08      	ldr	r2, [pc, #32]	; (8005168 <memp_init+0x30>)
 8005148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ffc3 	bl	80050d8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	3301      	adds	r3, #1
 8005156:	80fb      	strh	r3, [r7, #6]
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	2b08      	cmp	r3, #8
 800515c:	d9f2      	bls.n	8005144 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800515e:	bf00      	nop
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	08013fc4 	.word	0x08013fc4

0800516c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d012      	beq.n	80051a8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d006      	beq.n	80051a4 <do_memp_malloc_pool+0x38>
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <do_memp_malloc_pool+0x48>)
 8005198:	f44f 728c 	mov.w	r2, #280	; 0x118
 800519c:	4906      	ldr	r1, [pc, #24]	; (80051b8 <do_memp_malloc_pool+0x4c>)
 800519e:	4807      	ldr	r0, [pc, #28]	; (80051bc <do_memp_malloc_pool+0x50>)
 80051a0:	f00a f812 	bl	800f1c8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	e000      	b.n	80051aa <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	080107fc 	.word	0x080107fc
 80051b8:	0801082c 	.word	0x0801082c
 80051bc:	08010850 	.word	0x08010850

080051c0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <memp_malloc_pool+0x1c>
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <memp_malloc_pool+0x38>)
 80051d0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80051d4:	4909      	ldr	r1, [pc, #36]	; (80051fc <memp_malloc_pool+0x3c>)
 80051d6:	480a      	ldr	r0, [pc, #40]	; (8005200 <memp_malloc_pool+0x40>)
 80051d8:	f009 fff6 	bl	800f1c8 <iprintf>
  if (desc == NULL) {
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <memp_malloc_pool+0x26>
    return NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e003      	b.n	80051ee <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ffc0 	bl	800516c <do_memp_malloc_pool>
 80051ec:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	080107fc 	.word	0x080107fc
 80051fc:	08010878 	.word	0x08010878
 8005200:	08010850 	.word	0x08010850

08005204 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d908      	bls.n	8005226 <memp_malloc+0x22>
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <memp_malloc+0x3c>)
 8005216:	f240 1257 	movw	r2, #343	; 0x157
 800521a:	490a      	ldr	r1, [pc, #40]	; (8005244 <memp_malloc+0x40>)
 800521c:	480a      	ldr	r0, [pc, #40]	; (8005248 <memp_malloc+0x44>)
 800521e:	f009 ffd3 	bl	800f1c8 <iprintf>
 8005222:	2300      	movs	r3, #0
 8005224:	e008      	b.n	8005238 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	4a08      	ldr	r2, [pc, #32]	; (800524c <memp_malloc+0x48>)
 800522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff ff9c 	bl	800516c <do_memp_malloc_pool>
 8005234:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	080107fc 	.word	0x080107fc
 8005244:	0801088c 	.word	0x0801088c
 8005248:	08010850 	.word	0x08010850
 800524c:	08013fc4 	.word	0x08013fc4

08005250 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d006      	beq.n	8005272 <do_memp_free_pool+0x22>
 8005264:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <do_memp_free_pool+0x40>)
 8005266:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800526a:	490a      	ldr	r1, [pc, #40]	; (8005294 <do_memp_free_pool+0x44>)
 800526c:	480a      	ldr	r0, [pc, #40]	; (8005298 <do_memp_free_pool+0x48>)
 800526e:	f009 ffab 	bl	800f1c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	080107fc 	.word	0x080107fc
 8005294:	080108ac 	.word	0x080108ac
 8005298:	08010850 	.word	0x08010850

0800529c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <memp_free_pool+0x1e>
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <memp_free_pool+0x3c>)
 80052ae:	f240 1295 	movw	r2, #405	; 0x195
 80052b2:	490a      	ldr	r1, [pc, #40]	; (80052dc <memp_free_pool+0x40>)
 80052b4:	480a      	ldr	r0, [pc, #40]	; (80052e0 <memp_free_pool+0x44>)
 80052b6:	f009 ff87 	bl	800f1c8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <memp_free_pool+0x34>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ffc1 	bl	8005250 <do_memp_free_pool>
 80052ce:	e000      	b.n	80052d2 <memp_free_pool+0x36>
    return;
 80052d0:	bf00      	nop
}
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	080107fc 	.word	0x080107fc
 80052dc:	08010878 	.word	0x08010878
 80052e0:	08010850 	.word	0x08010850

080052e4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	6039      	str	r1, [r7, #0]
 80052ee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d907      	bls.n	8005306 <memp_free+0x22>
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <memp_free+0x44>)
 80052f8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80052fc:	490b      	ldr	r1, [pc, #44]	; (800532c <memp_free+0x48>)
 80052fe:	480c      	ldr	r0, [pc, #48]	; (8005330 <memp_free+0x4c>)
 8005300:	f009 ff62 	bl	800f1c8 <iprintf>
 8005304:	e00c      	b.n	8005320 <memp_free+0x3c>

  if (mem == NULL) {
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <memp_free+0x50>)
 8005310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff ff9a 	bl	8005250 <do_memp_free_pool>
 800531c:	e000      	b.n	8005320 <memp_free+0x3c>
    return;
 800531e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	080107fc 	.word	0x080107fc
 800532c:	080108cc 	.word	0x080108cc
 8005330:	08010850 	.word	0x08010850
 8005334:	08013fc4 	.word	0x08013fc4

08005338 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d108      	bne.n	800536e <netif_add+0x26>
 800535c:	4b57      	ldr	r3, [pc, #348]	; (80054bc <netif_add+0x174>)
 800535e:	f240 1227 	movw	r2, #295	; 0x127
 8005362:	4957      	ldr	r1, [pc, #348]	; (80054c0 <netif_add+0x178>)
 8005364:	4857      	ldr	r0, [pc, #348]	; (80054c4 <netif_add+0x17c>)
 8005366:	f009 ff2f 	bl	800f1c8 <iprintf>
 800536a:	2300      	movs	r3, #0
 800536c:	e0a2      	b.n	80054b4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d108      	bne.n	8005386 <netif_add+0x3e>
 8005374:	4b51      	ldr	r3, [pc, #324]	; (80054bc <netif_add+0x174>)
 8005376:	f44f 7294 	mov.w	r2, #296	; 0x128
 800537a:	4953      	ldr	r1, [pc, #332]	; (80054c8 <netif_add+0x180>)
 800537c:	4851      	ldr	r0, [pc, #324]	; (80054c4 <netif_add+0x17c>)
 800537e:	f009 ff23 	bl	800f1c8 <iprintf>
 8005382:	2300      	movs	r3, #0
 8005384:	e096      	b.n	80054b4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800538c:	4b4f      	ldr	r3, [pc, #316]	; (80054cc <netif_add+0x184>)
 800538e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005396:	4b4d      	ldr	r3, [pc, #308]	; (80054cc <netif_add+0x184>)
 8005398:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80053a0:	4b4a      	ldr	r3, [pc, #296]	; (80054cc <netif_add+0x184>)
 80053a2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a45      	ldr	r2, [pc, #276]	; (80054d0 <netif_add+0x188>)
 80053ba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a3a      	ldr	r2, [r7, #32]
 80053d4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80053d6:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <netif_add+0x18c>)
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f913 	bl	8005618 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	4798      	blx	r3
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <netif_add+0xba>
    return NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	e058      	b.n	80054b4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005408:	2bff      	cmp	r3, #255	; 0xff
 800540a:	d103      	bne.n	8005414 <netif_add+0xcc>
        netif->num = 0;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005418:	4b2f      	ldr	r3, [pc, #188]	; (80054d8 <netif_add+0x190>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	e02b      	b.n	8005478 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	429a      	cmp	r2, r3
 8005426:	d106      	bne.n	8005436 <netif_add+0xee>
 8005428:	4b24      	ldr	r3, [pc, #144]	; (80054bc <netif_add+0x174>)
 800542a:	f240 128b 	movw	r2, #395	; 0x18b
 800542e:	492b      	ldr	r1, [pc, #172]	; (80054dc <netif_add+0x194>)
 8005430:	4824      	ldr	r0, [pc, #144]	; (80054c4 <netif_add+0x17c>)
 8005432:	f009 fec9 	bl	800f1c8 <iprintf>
        num_netifs++;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	3301      	adds	r3, #1
 800543a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2bff      	cmp	r3, #255	; 0xff
 8005440:	dd06      	ble.n	8005450 <netif_add+0x108>
 8005442:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <netif_add+0x174>)
 8005444:	f240 128d 	movw	r2, #397	; 0x18d
 8005448:	4925      	ldr	r1, [pc, #148]	; (80054e0 <netif_add+0x198>)
 800544a:	481e      	ldr	r0, [pc, #120]	; (80054c4 <netif_add+0x17c>)
 800544c:	f009 febc 	bl	800f1c8 <iprintf>
        if (netif2->num == netif->num) {
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800545c:	429a      	cmp	r2, r3
 800545e:	d108      	bne.n	8005472 <netif_add+0x12a>
          netif->num++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005466:	3301      	adds	r3, #1
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005470:	e005      	b.n	800547e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1d0      	bne.n	8005420 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1be      	bne.n	8005402 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800548a:	2bfe      	cmp	r3, #254	; 0xfe
 800548c:	d103      	bne.n	8005496 <netif_add+0x14e>
    netif_num = 0;
 800548e:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <netif_add+0x18c>)
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e006      	b.n	80054a4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800549c:	3301      	adds	r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <netif_add+0x18c>)
 80054a2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80054a4:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <netif_add+0x190>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80054ac:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <netif_add+0x190>)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	080108e8 	.word	0x080108e8
 80054c0:	0801097c 	.word	0x0801097c
 80054c4:	08010938 	.word	0x08010938
 80054c8:	08010998 	.word	0x08010998
 80054cc:	08014028 	.word	0x08014028
 80054d0:	080058f3 	.word	0x080058f3
 80054d4:	2000869c 	.word	0x2000869c
 80054d8:	20008694 	.word	0x20008694
 80054dc:	080109bc 	.word	0x080109bc
 80054e0:	080109d0 	.word	0x080109d0

080054e4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f002 fde9 	bl	80080c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f007 fb25 	bl	800cb48 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <netif_do_set_ipaddr+0x20>
 800551a:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <netif_do_set_ipaddr+0x88>)
 800551c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005520:	491c      	ldr	r1, [pc, #112]	; (8005594 <netif_do_set_ipaddr+0x8c>)
 8005522:	481d      	ldr	r0, [pc, #116]	; (8005598 <netif_do_set_ipaddr+0x90>)
 8005524:	f009 fe50 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <netif_do_set_ipaddr+0x34>
 800552e:	4b18      	ldr	r3, [pc, #96]	; (8005590 <netif_do_set_ipaddr+0x88>)
 8005530:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005534:	4917      	ldr	r1, [pc, #92]	; (8005594 <netif_do_set_ipaddr+0x8c>)
 8005536:	4818      	ldr	r0, [pc, #96]	; (8005598 <netif_do_set_ipaddr+0x90>)
 8005538:	f009 fe46 	bl	800f1c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3304      	adds	r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d01c      	beq.n	8005584 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3304      	adds	r3, #4
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800555a:	f107 0314 	add.w	r3, r7, #20
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff ffbf 	bl	80054e4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <netif_do_set_ipaddr+0x6a>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	e000      	b.n	8005574 <netif_do_set_ipaddr+0x6c>
 8005572:	2300      	movs	r3, #0
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005578:	2101      	movs	r1, #1
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f8d2 	bl	8005724 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	080108e8 	.word	0x080108e8
 8005594:	08010a00 	.word	0x08010a00
 8005598:	08010938 	.word	0x08010938

0800559c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3308      	adds	r3, #8
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d00a      	beq.n	80055cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <netif_do_set_netmask+0x26>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	e000      	b.n	80055c4 <netif_do_set_netmask+0x28>
 80055c2:	2300      	movs	r3, #0
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	330c      	adds	r3, #12
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d00a      	beq.n	800560a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <netif_do_set_gw+0x26>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	e000      	b.n	8005602 <netif_do_set_gw+0x28>
 8005600:	2300      	movs	r3, #0
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005634:	4b1c      	ldr	r3, [pc, #112]	; (80056a8 <netif_set_addr+0x90>)
 8005636:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800563e:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <netif_set_addr+0x90>)
 8005640:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005648:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <netif_set_addr+0x90>)
 800564a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <netif_set_addr+0x42>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <netif_set_addr+0x46>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <netif_set_addr+0x48>
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d006      	beq.n	8005676 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005668:	f107 0310 	add.w	r3, r7, #16
 800566c:	461a      	mov	r2, r3
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff ff49 	bl	8005508 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff ff8e 	bl	800559c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff ffa8 	bl	80055da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005690:	f107 0310 	add.w	r3, r7, #16
 8005694:	461a      	mov	r2, r3
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff ff35 	bl	8005508 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800569e:	bf00      	nop
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	08014028 	.word	0x08014028

080056ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80056b4:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <netif_set_default+0x1c>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20008698 	.word	0x20008698

080056cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d107      	bne.n	80056ea <netif_set_up+0x1e>
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <netif_set_up+0x4c>)
 80056dc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80056e0:	490e      	ldr	r1, [pc, #56]	; (800571c <netif_set_up+0x50>)
 80056e2:	480f      	ldr	r0, [pc, #60]	; (8005720 <netif_set_up+0x54>)
 80056e4:	f009 fd70 	bl	800f1c8 <iprintf>
 80056e8:	e013      	b.n	8005712 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10c      	bne.n	8005712 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	b2da      	uxtb	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800570a:	2103      	movs	r1, #3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f809 	bl	8005724 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	080108e8 	.word	0x080108e8
 800571c:	08010a70 	.word	0x08010a70
 8005720:	08010938 	.word	0x08010938

08005724 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <netif_issue_reports+0x20>
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <netif_issue_reports+0x74>)
 8005738:	f240 326d 	movw	r2, #877	; 0x36d
 800573c:	4917      	ldr	r1, [pc, #92]	; (800579c <netif_issue_reports+0x78>)
 800573e:	4818      	ldr	r0, [pc, #96]	; (80057a0 <netif_issue_reports+0x7c>)
 8005740:	f009 fd42 	bl	800f1c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d01e      	beq.n	8005790 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005758:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d013      	beq.n	8005792 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3304      	adds	r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3304      	adds	r3, #4
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f008 f947 	bl	800da1c <etharp_request>
 800578e:	e000      	b.n	8005792 <netif_issue_reports+0x6e>
    return;
 8005790:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	080108e8 	.word	0x080108e8
 800579c:	08010a8c 	.word	0x08010a8c
 80057a0:	08010938 	.word	0x08010938

080057a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <netif_set_down+0x1e>
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <netif_set_down+0x58>)
 80057b4:	f240 329b 	movw	r2, #923	; 0x39b
 80057b8:	4911      	ldr	r1, [pc, #68]	; (8005800 <netif_set_down+0x5c>)
 80057ba:	4812      	ldr	r0, [pc, #72]	; (8005804 <netif_set_down+0x60>)
 80057bc:	f009 fd04 	bl	800f1c8 <iprintf>
 80057c0:	e019      	b.n	80057f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d012      	beq.n	80057f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f007 fcd1 	bl	800d198 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	080108e8 	.word	0x080108e8
 8005800:	08010ab0 	.word	0x08010ab0
 8005804:	08010938 	.word	0x08010938

08005808 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <netif_set_link_up+0x1e>
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <netif_set_link_up+0x5c>)
 8005818:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800581c:	4912      	ldr	r1, [pc, #72]	; (8005868 <netif_set_link_up+0x60>)
 800581e:	4813      	ldr	r0, [pc, #76]	; (800586c <netif_set_link_up+0x64>)
 8005820:	f009 fcd2 	bl	800f1c8 <iprintf>
 8005824:	e01b      	b.n	800585e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d114      	bne.n	800585e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800583a:	f043 0304 	orr.w	r3, r3, #4
 800583e:	b2da      	uxtb	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005846:	2103      	movs	r1, #3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ff6b 	bl	8005724 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <netif_set_link_up+0x56>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	080108e8 	.word	0x080108e8
 8005868:	08010ad0 	.word	0x08010ad0
 800586c:	08010938 	.word	0x08010938

08005870 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d107      	bne.n	800588e <netif_set_link_down+0x1e>
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <netif_set_link_down+0x54>)
 8005880:	f240 4206 	movw	r2, #1030	; 0x406
 8005884:	4910      	ldr	r1, [pc, #64]	; (80058c8 <netif_set_link_down+0x58>)
 8005886:	4811      	ldr	r0, [pc, #68]	; (80058cc <netif_set_link_down+0x5c>)
 8005888:	f009 fc9e 	bl	800f1c8 <iprintf>
 800588c:	e017      	b.n	80058be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d010      	beq.n	80058be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058a2:	f023 0304 	bic.w	r3, r3, #4
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <netif_set_link_down+0x4e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	080108e8 	.word	0x080108e8
 80058c8:	08010af4 	.word	0x08010af4
 80058cc:	08010938 	.word	0x08010938

080058d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	61da      	str	r2, [r3, #28]
  }
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80058fe:	f06f 030b 	mvn.w	r3, #11
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d013      	beq.n	8005948 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005920:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <netif_get_by_index+0x48>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e00c      	b.n	8005942 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800592e:	3301      	adds	r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	79fa      	ldrb	r2, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d101      	bne.n	800593c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	e006      	b.n	800594a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1ef      	bne.n	8005928 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20008694 	.word	0x20008694

0800595c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005962:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <pbuf_free_ooseq+0x38>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <pbuf_free_ooseq+0x3c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	607b      	str	r3, [r7, #4]
 800596e:	e00a      	b.n	8005986 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f002 fbe3 	bl	8008144 <tcp_free_ooseq>
      return;
 800597e:	e005      	b.n	800598c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	607b      	str	r3, [r7, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f1      	bne.n	8005970 <pbuf_free_ooseq+0x14>
    }
  }
}
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000869d 	.word	0x2000869d
 8005998:	200086ac 	.word	0x200086ac

0800599c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80059a0:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <pbuf_pool_is_empty+0x14>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	2000869d 	.word	0x2000869d

080059b4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	4611      	mov	r1, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	460b      	mov	r3, r1
 80059c4:	80fb      	strh	r3, [r7, #6]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	88fa      	ldrh	r2, [r7, #6]
 80059da:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88ba      	ldrh	r2, [r7, #4]
 80059e0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80059e2:	8b3b      	ldrh	r3, [r7, #24]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	7f3a      	ldrb	r2, [r7, #28]
 80059ee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	73da      	strb	r2, [r3, #15]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08c      	sub	sp, #48	; 0x30
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
 8005a12:	460b      	mov	r3, r1
 8005a14:	80bb      	strh	r3, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a24:	d07f      	beq.n	8005b26 <pbuf_alloc+0x11e>
 8005a26:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a2a:	f300 80c8 	bgt.w	8005bbe <pbuf_alloc+0x1b6>
 8005a2e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a32:	d010      	beq.n	8005a56 <pbuf_alloc+0x4e>
 8005a34:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a38:	f300 80c1 	bgt.w	8005bbe <pbuf_alloc+0x1b6>
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d002      	beq.n	8005a46 <pbuf_alloc+0x3e>
 8005a40:	2b41      	cmp	r3, #65	; 0x41
 8005a42:	f040 80bc 	bne.w	8005bbe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005a46:	887a      	ldrh	r2, [r7, #2]
 8005a48:	88bb      	ldrh	r3, [r7, #4]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f000 f8d1 	bl	8005bf4 <pbuf_alloc_reference>
 8005a52:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005a54:	e0bd      	b.n	8005bd2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005a5e:	88bb      	ldrh	r3, [r7, #4]
 8005a60:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005a62:	2008      	movs	r0, #8
 8005a64:	f7ff fbce 	bl	8005204 <memp_malloc>
 8005a68:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005a70:	f7ff ff94 	bl	800599c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a7c:	f000 faa8 	bl	8005fd0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e0a7      	b.n	8005bd4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005a84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a86:	3303      	adds	r3, #3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	8b7a      	ldrh	r2, [r7, #26]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	bf28      	it	cs
 8005a9c:	4613      	movcs	r3, r2
 8005a9e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005aa2:	3310      	adds	r3, #16
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3303      	adds	r3, #3
 8005aaa:	f023 0303 	bic.w	r3, r3, #3
 8005aae:	4618      	mov	r0, r3
 8005ab0:	89f9      	ldrh	r1, [r7, #14]
 8005ab2:	8b7a      	ldrh	r2, [r7, #26]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	887b      	ldrh	r3, [r7, #2]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	460b      	mov	r3, r1
 8005abe:	4601      	mov	r1, r0
 8005ac0:	6938      	ldr	r0, [r7, #16]
 8005ac2:	f7ff ff77 	bl	80059b4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d006      	beq.n	8005ae0 <pbuf_alloc+0xd8>
 8005ad2:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <pbuf_alloc+0x1d4>)
 8005ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ad8:	4941      	ldr	r1, [pc, #260]	; (8005be0 <pbuf_alloc+0x1d8>)
 8005ada:	4842      	ldr	r0, [pc, #264]	; (8005be4 <pbuf_alloc+0x1dc>)
 8005adc:	f009 fb74 	bl	800f1c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005ae0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ae2:	3303      	adds	r3, #3
 8005ae4:	f023 0303 	bic.w	r3, r3, #3
 8005ae8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005aec:	d106      	bne.n	8005afc <pbuf_alloc+0xf4>
 8005aee:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <pbuf_alloc+0x1d4>)
 8005af0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005af4:	493c      	ldr	r1, [pc, #240]	; (8005be8 <pbuf_alloc+0x1e0>)
 8005af6:	483b      	ldr	r0, [pc, #236]	; (8005be4 <pbuf_alloc+0x1dc>)
 8005af8:	f009 fb66 	bl	800f1c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
 8005b06:	e002      	b.n	8005b0e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005b12:	8b7a      	ldrh	r2, [r7, #26]
 8005b14:	89fb      	ldrh	r3, [r7, #14]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005b1e:	8b7b      	ldrh	r3, [r7, #26]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d19e      	bne.n	8005a62 <pbuf_alloc+0x5a>
      break;
 8005b24:	e055      	b.n	8005bd2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005b26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b28:	3303      	adds	r3, #3
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	88bb      	ldrh	r3, [r7, #4]
 8005b34:	3303      	adds	r3, #3
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f023 0303 	bic.w	r3, r3, #3
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005b42:	8b3b      	ldrh	r3, [r7, #24]
 8005b44:	3310      	adds	r3, #16
 8005b46:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b48:	8b3a      	ldrh	r2, [r7, #24]
 8005b4a:	88bb      	ldrh	r3, [r7, #4]
 8005b4c:	3303      	adds	r3, #3
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d306      	bcc.n	8005b64 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005b56:	8afa      	ldrh	r2, [r7, #22]
 8005b58:	88bb      	ldrh	r3, [r7, #4]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d201      	bcs.n	8005b68 <pbuf_alloc+0x160>
        return NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e035      	b.n	8005bd4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005b68:	8afb      	ldrh	r3, [r7, #22]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff f9ba 	bl	8004ee4 <mem_malloc>
 8005b70:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <pbuf_alloc+0x174>
        return NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e02b      	b.n	8005bd4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005b7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b7e:	3310      	adds	r3, #16
 8005b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b82:	4413      	add	r3, r2
 8005b84:	3303      	adds	r3, #3
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	88b9      	ldrh	r1, [r7, #4]
 8005b8e:	88ba      	ldrh	r2, [r7, #4]
 8005b90:	2300      	movs	r3, #0
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	887b      	ldrh	r3, [r7, #2]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b9e:	f7ff ff09 	bl	80059b4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d010      	beq.n	8005bd0 <pbuf_alloc+0x1c8>
 8005bae:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <pbuf_alloc+0x1d4>)
 8005bb0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005bb4:	490d      	ldr	r1, [pc, #52]	; (8005bec <pbuf_alloc+0x1e4>)
 8005bb6:	480b      	ldr	r0, [pc, #44]	; (8005be4 <pbuf_alloc+0x1dc>)
 8005bb8:	f009 fb06 	bl	800f1c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005bbc:	e008      	b.n	8005bd0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <pbuf_alloc+0x1d4>)
 8005bc0:	f240 1227 	movw	r2, #295	; 0x127
 8005bc4:	490a      	ldr	r1, [pc, #40]	; (8005bf0 <pbuf_alloc+0x1e8>)
 8005bc6:	4807      	ldr	r0, [pc, #28]	; (8005be4 <pbuf_alloc+0x1dc>)
 8005bc8:	f009 fafe 	bl	800f1c8 <iprintf>
      return NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e001      	b.n	8005bd4 <pbuf_alloc+0x1cc>
      break;
 8005bd0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3728      	adds	r7, #40	; 0x28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	08010b18 	.word	0x08010b18
 8005be0:	08010b48 	.word	0x08010b48
 8005be4:	08010b78 	.word	0x08010b78
 8005be8:	08010ba0 	.word	0x08010ba0
 8005bec:	08010bd4 	.word	0x08010bd4
 8005bf0:	08010c00 	.word	0x08010c00

08005bf4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	807b      	strh	r3, [r7, #2]
 8005c00:	4613      	mov	r3, r2
 8005c02:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005c04:	883b      	ldrh	r3, [r7, #0]
 8005c06:	2b41      	cmp	r3, #65	; 0x41
 8005c08:	d009      	beq.n	8005c1e <pbuf_alloc_reference+0x2a>
 8005c0a:	883b      	ldrh	r3, [r7, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d006      	beq.n	8005c1e <pbuf_alloc_reference+0x2a>
 8005c10:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <pbuf_alloc_reference+0x5c>)
 8005c12:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005c16:	490f      	ldr	r1, [pc, #60]	; (8005c54 <pbuf_alloc_reference+0x60>)
 8005c18:	480f      	ldr	r0, [pc, #60]	; (8005c58 <pbuf_alloc_reference+0x64>)
 8005c1a:	f009 fad5 	bl	800f1c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005c1e:	2007      	movs	r0, #7
 8005c20:	f7ff faf0 	bl	8005204 <memp_malloc>
 8005c24:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e00b      	b.n	8005c48 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005c30:	8879      	ldrh	r1, [r7, #2]
 8005c32:	887a      	ldrh	r2, [r7, #2]
 8005c34:	2300      	movs	r3, #0
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	883b      	ldrh	r3, [r7, #0]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff feb7 	bl	80059b4 <pbuf_init_alloced_pbuf>
  return p;
 8005c46:	68fb      	ldr	r3, [r7, #12]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	08010b18 	.word	0x08010b18
 8005c54:	08010c1c 	.word	0x08010c1c
 8005c58:	08010b78 	.word	0x08010b78

08005c5c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	607b      	str	r3, [r7, #4]
 8005c64:	4603      	mov	r3, r0
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	81bb      	strh	r3, [r7, #12]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005c74:	8a7b      	ldrh	r3, [r7, #18]
 8005c76:	3303      	adds	r3, #3
 8005c78:	f023 0203 	bic.w	r2, r3, #3
 8005c7c:	89bb      	ldrh	r3, [r7, #12]
 8005c7e:	441a      	add	r2, r3
 8005c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d901      	bls.n	8005c8a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e018      	b.n	8005cbc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005c90:	8a7b      	ldrh	r3, [r7, #18]
 8005c92:	3303      	adds	r3, #3
 8005c94:	f023 0303 	bic.w	r3, r3, #3
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e001      	b.n	8005ca4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	89b9      	ldrh	r1, [r7, #12]
 8005ca8:	89ba      	ldrh	r2, [r7, #12]
 8005caa:	2302      	movs	r3, #2
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	6979      	ldr	r1, [r7, #20]
 8005cb6:	f7ff fe7d 	bl	80059b4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005cba:	687b      	ldr	r3, [r7, #4]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <pbuf_realloc+0x20>
 8005cd6:	4b3a      	ldr	r3, [pc, #232]	; (8005dc0 <pbuf_realloc+0xfc>)
 8005cd8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005cdc:	4939      	ldr	r1, [pc, #228]	; (8005dc4 <pbuf_realloc+0x100>)
 8005cde:	483a      	ldr	r0, [pc, #232]	; (8005dc8 <pbuf_realloc+0x104>)
 8005ce0:	f009 fa72 	bl	800f1c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	891b      	ldrh	r3, [r3, #8]
 8005ce8:	887a      	ldrh	r2, [r7, #2]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d263      	bcs.n	8005db6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	891a      	ldrh	r2, [r3, #8]
 8005cf2:	887b      	ldrh	r3, [r7, #2]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005cf8:	887b      	ldrh	r3, [r7, #2]
 8005cfa:	817b      	strh	r3, [r7, #10]
  q = p;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d00:	e018      	b.n	8005d34 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	895b      	ldrh	r3, [r3, #10]
 8005d06:	897a      	ldrh	r2, [r7, #10]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	891a      	ldrh	r2, [r3, #8]
 8005d10:	893b      	ldrh	r3, [r7, #8]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <pbuf_realloc+0x70>
 8005d26:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <pbuf_realloc+0xfc>)
 8005d28:	f240 12af 	movw	r2, #431	; 0x1af
 8005d2c:	4927      	ldr	r1, [pc, #156]	; (8005dcc <pbuf_realloc+0x108>)
 8005d2e:	4826      	ldr	r0, [pc, #152]	; (8005dc8 <pbuf_realloc+0x104>)
 8005d30:	f009 fa4a 	bl	800f1c8 <iprintf>
  while (rem_len > q->len) {
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	895b      	ldrh	r3, [r3, #10]
 8005d38:	897a      	ldrh	r2, [r7, #10]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d8e1      	bhi.n	8005d02 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	7b1b      	ldrb	r3, [r3, #12]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d121      	bne.n	8005d8e <pbuf_realloc+0xca>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	895b      	ldrh	r3, [r3, #10]
 8005d4e:	897a      	ldrh	r2, [r7, #10]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d01c      	beq.n	8005d8e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	7b5b      	ldrb	r3, [r3, #13]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	897b      	ldrh	r3, [r7, #10]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	4619      	mov	r1, r3
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7fe ffba 	bl	8004cec <mem_trim>
 8005d78:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <pbuf_realloc+0xca>
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <pbuf_realloc+0xfc>)
 8005d82:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005d86:	4912      	ldr	r1, [pc, #72]	; (8005dd0 <pbuf_realloc+0x10c>)
 8005d88:	480f      	ldr	r0, [pc, #60]	; (8005dc8 <pbuf_realloc+0x104>)
 8005d8a:	f009 fa1d 	bl	800f1c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	897a      	ldrh	r2, [r7, #10]
 8005d92:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	895a      	ldrh	r2, [r3, #10]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 f911 	bl	8005fd0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e000      	b.n	8005db8 <pbuf_realloc+0xf4>
    return;
 8005db6:	bf00      	nop

}
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	08010b18 	.word	0x08010b18
 8005dc4:	08010c30 	.word	0x08010c30
 8005dc8:	08010b78 	.word	0x08010b78
 8005dcc:	08010c48 	.word	0x08010c48
 8005dd0:	08010c60 	.word	0x08010c60

08005dd4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <pbuf_add_header_impl+0x22>
 8005de8:	4b2b      	ldr	r3, [pc, #172]	; (8005e98 <pbuf_add_header_impl+0xc4>)
 8005dea:	f240 12df 	movw	r2, #479	; 0x1df
 8005dee:	492b      	ldr	r1, [pc, #172]	; (8005e9c <pbuf_add_header_impl+0xc8>)
 8005df0:	482b      	ldr	r0, [pc, #172]	; (8005ea0 <pbuf_add_header_impl+0xcc>)
 8005df2:	f009 f9e9 	bl	800f1c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <pbuf_add_header_impl+0x30>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e02:	d301      	bcc.n	8005e08 <pbuf_add_header_impl+0x34>
    return 1;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e043      	b.n	8005e90 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <pbuf_add_header_impl+0x3e>
    return 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e03e      	b.n	8005e90 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	891a      	ldrh	r2, [r3, #8]
 8005e1a:	8a7b      	ldrh	r3, [r7, #18]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8a7a      	ldrh	r2, [r7, #18]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d901      	bls.n	8005e2a <pbuf_add_header_impl+0x56>
    return 1;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e032      	b.n	8005e90 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	7b1b      	ldrb	r3, [r3, #12]
 8005e2e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005e30:	8a3b      	ldrh	r3, [r7, #16]
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	425b      	negs	r3, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3310      	adds	r3, #16
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d20d      	bcs.n	8005e6c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e01d      	b.n	8005e90 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d006      	beq.n	8005e68 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	425b      	negs	r3, r3
 8005e62:	4413      	add	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e001      	b.n	8005e6c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e011      	b.n	8005e90 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	895a      	ldrh	r2, [r3, #10]
 8005e76:	8a7b      	ldrh	r3, [r7, #18]
 8005e78:	4413      	add	r3, r2
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	891a      	ldrh	r2, [r3, #8]
 8005e84:	8a7b      	ldrh	r3, [r7, #18]
 8005e86:	4413      	add	r3, r2
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	811a      	strh	r2, [r3, #8]


  return 0;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	08010b18 	.word	0x08010b18
 8005e9c:	08010c7c 	.word	0x08010c7c
 8005ea0:	08010b78 	.word	0x08010b78

08005ea4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff ff8e 	bl	8005dd4 <pbuf_add_header_impl>
 8005eb8:	4603      	mov	r3, r0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <pbuf_remove_header+0x1e>
 8005ed4:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <pbuf_remove_header+0x94>)
 8005ed6:	f240 224b 	movw	r2, #587	; 0x24b
 8005eda:	4920      	ldr	r1, [pc, #128]	; (8005f5c <pbuf_remove_header+0x98>)
 8005edc:	4820      	ldr	r0, [pc, #128]	; (8005f60 <pbuf_remove_header+0x9c>)
 8005ede:	f009 f973 	bl	800f1c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <pbuf_remove_header+0x2c>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eee:	d301      	bcc.n	8005ef4 <pbuf_remove_header+0x30>
    return 1;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e02c      	b.n	8005f4e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <pbuf_remove_header+0x3a>
    return 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e027      	b.n	8005f4e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	895b      	ldrh	r3, [r3, #10]
 8005f06:	89fa      	ldrh	r2, [r7, #14]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d908      	bls.n	8005f1e <pbuf_remove_header+0x5a>
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <pbuf_remove_header+0x94>)
 8005f0e:	f240 2255 	movw	r2, #597	; 0x255
 8005f12:	4914      	ldr	r1, [pc, #80]	; (8005f64 <pbuf_remove_header+0xa0>)
 8005f14:	4812      	ldr	r0, [pc, #72]	; (8005f60 <pbuf_remove_header+0x9c>)
 8005f16:	f009 f957 	bl	800f1c8 <iprintf>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e017      	b.n	8005f4e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	441a      	add	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	895a      	ldrh	r2, [r3, #10]
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	891a      	ldrh	r2, [r3, #8]
 8005f42:	89fb      	ldrh	r3, [r7, #14]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	08010b18 	.word	0x08010b18
 8005f5c:	08010c7c 	.word	0x08010c7c
 8005f60:	08010b78 	.word	0x08010b78
 8005f64:	08010c88 	.word	0x08010c88

08005f68 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
 8005f74:	4613      	mov	r3, r2
 8005f76:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005f78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	da08      	bge.n	8005f92 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005f80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f84:	425b      	negs	r3, r3
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ff9b 	bl	8005ec4 <pbuf_remove_header>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	e007      	b.n	8005fa2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f96:	787a      	ldrb	r2, [r7, #1]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff ff1a 	bl	8005dd4 <pbuf_add_header_impl>
 8005fa0:	4603      	mov	r3, r0
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005fb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff ffd2 	bl	8005f68 <pbuf_header_impl>
 8005fc4:	4603      	mov	r3, r0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10b      	bne.n	8005ff6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <pbuf_free+0x22>
 8005fe4:	4b38      	ldr	r3, [pc, #224]	; (80060c8 <pbuf_free+0xf8>)
 8005fe6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005fea:	4938      	ldr	r1, [pc, #224]	; (80060cc <pbuf_free+0xfc>)
 8005fec:	4838      	ldr	r0, [pc, #224]	; (80060d0 <pbuf_free+0x100>)
 8005fee:	f009 f8eb 	bl	800f1c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e063      	b.n	80060be <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005ffa:	e05c      	b.n	80060b6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	7b9b      	ldrb	r3, [r3, #14]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d106      	bne.n	8006012 <pbuf_free+0x42>
 8006004:	4b30      	ldr	r3, [pc, #192]	; (80060c8 <pbuf_free+0xf8>)
 8006006:	f240 22f1 	movw	r2, #753	; 0x2f1
 800600a:	4932      	ldr	r1, [pc, #200]	; (80060d4 <pbuf_free+0x104>)
 800600c:	4830      	ldr	r0, [pc, #192]	; (80060d0 <pbuf_free+0x100>)
 800600e:	f009 f8db 	bl	800f1c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7b9b      	ldrb	r3, [r3, #14]
 8006016:	3b01      	subs	r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	739a      	strb	r2, [r3, #14]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	7b9b      	ldrb	r3, [r3, #14]
 8006022:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006024:	7dbb      	ldrb	r3, [r7, #22]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d143      	bne.n	80060b2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7b1b      	ldrb	r3, [r3, #12]
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	7b5b      	ldrb	r3, [r3, #13]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d011      	beq.n	800606a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <pbuf_free+0x90>
 8006052:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <pbuf_free+0xf8>)
 8006054:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006058:	491f      	ldr	r1, [pc, #124]	; (80060d8 <pbuf_free+0x108>)
 800605a:	481d      	ldr	r0, [pc, #116]	; (80060d0 <pbuf_free+0x100>)
 800605c:	f009 f8b4 	bl	800f1c8 <iprintf>
        pc->custom_free_function(p);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
 8006068:	e01d      	b.n	80060a6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d104      	bne.n	800607a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	2008      	movs	r0, #8
 8006074:	f7ff f936 	bl	80052e4 <memp_free>
 8006078:	e015      	b.n	80060a6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d104      	bne.n	800608a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	2007      	movs	r0, #7
 8006084:	f7ff f92e 	bl	80052e4 <memp_free>
 8006088:	e00d      	b.n	80060a6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <pbuf_free+0xc8>
          mem_free(p);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fe fdc1 	bl	8004c18 <mem_free>
 8006096:	e006      	b.n	80060a6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <pbuf_free+0xf8>)
 800609a:	f240 320f 	movw	r2, #783	; 0x30f
 800609e:	490f      	ldr	r1, [pc, #60]	; (80060dc <pbuf_free+0x10c>)
 80060a0:	480b      	ldr	r0, [pc, #44]	; (80060d0 <pbuf_free+0x100>)
 80060a2:	f009 f891 	bl	800f1c8 <iprintf>
        }
      }
      count++;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	3301      	adds	r3, #1
 80060aa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	e001      	b.n	80060b6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d19f      	bne.n	8005ffc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	08010b18 	.word	0x08010b18
 80060cc:	08010c7c 	.word	0x08010c7c
 80060d0:	08010b78 	.word	0x08010b78
 80060d4:	08010ca8 	.word	0x08010ca8
 80060d8:	08010cc0 	.word	0x08010cc0
 80060dc:	08010ce4 	.word	0x08010ce4

080060e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80060ec:	e005      	b.n	80060fa <pbuf_clen+0x1a>
    ++len;
 80060ee:	89fb      	ldrh	r3, [r7, #14]
 80060f0:	3301      	adds	r3, #1
 80060f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f6      	bne.n	80060ee <pbuf_clen+0xe>
  }
  return len;
 8006100:	89fb      	ldrh	r3, [r7, #14]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d010      	beq.n	8006140 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7b9b      	ldrb	r3, [r3, #14]
 8006122:	3301      	adds	r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	7b9b      	ldrb	r3, [r3, #14]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <pbuf_ref+0x30>
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <pbuf_ref+0x38>)
 8006134:	f240 3242 	movw	r2, #834	; 0x342
 8006138:	4904      	ldr	r1, [pc, #16]	; (800614c <pbuf_ref+0x3c>)
 800613a:	4805      	ldr	r0, [pc, #20]	; (8006150 <pbuf_ref+0x40>)
 800613c:	f009 f844 	bl	800f1c8 <iprintf>
  }
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	08010b18 	.word	0x08010b18
 800614c:	08010cf8 	.word	0x08010cf8
 8006150:	08010b78 	.word	0x08010b78

08006154 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <pbuf_cat+0x16>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d107      	bne.n	800617a <pbuf_cat+0x26>
 800616a:	4b20      	ldr	r3, [pc, #128]	; (80061ec <pbuf_cat+0x98>)
 800616c:	f240 3259 	movw	r2, #857	; 0x359
 8006170:	491f      	ldr	r1, [pc, #124]	; (80061f0 <pbuf_cat+0x9c>)
 8006172:	4820      	ldr	r0, [pc, #128]	; (80061f4 <pbuf_cat+0xa0>)
 8006174:	f009 f828 	bl	800f1c8 <iprintf>
 8006178:	e034      	b.n	80061e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	e00a      	b.n	8006196 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	891a      	ldrh	r2, [r3, #8]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	891b      	ldrh	r3, [r3, #8]
 8006188:	4413      	add	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f0      	bne.n	8006180 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	891a      	ldrh	r2, [r3, #8]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	895b      	ldrh	r3, [r3, #10]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d006      	beq.n	80061b8 <pbuf_cat+0x64>
 80061aa:	4b10      	ldr	r3, [pc, #64]	; (80061ec <pbuf_cat+0x98>)
 80061ac:	f240 3262 	movw	r2, #866	; 0x362
 80061b0:	4911      	ldr	r1, [pc, #68]	; (80061f8 <pbuf_cat+0xa4>)
 80061b2:	4810      	ldr	r0, [pc, #64]	; (80061f4 <pbuf_cat+0xa0>)
 80061b4:	f009 f808 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <pbuf_cat+0x7a>
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <pbuf_cat+0x98>)
 80061c2:	f240 3263 	movw	r2, #867	; 0x363
 80061c6:	490d      	ldr	r1, [pc, #52]	; (80061fc <pbuf_cat+0xa8>)
 80061c8:	480a      	ldr	r0, [pc, #40]	; (80061f4 <pbuf_cat+0xa0>)
 80061ca:	f008 fffd 	bl	800f1c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	891a      	ldrh	r2, [r3, #8]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	891b      	ldrh	r3, [r3, #8]
 80061d6:	4413      	add	r3, r2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	08010b18 	.word	0x08010b18
 80061f0:	08010d0c 	.word	0x08010d0c
 80061f4:	08010b78 	.word	0x08010b78
 80061f8:	08010d44 	.word	0x08010d44
 80061fc:	08010d74 	.word	0x08010d74

08006200 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800620a:	2300      	movs	r3, #0
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <pbuf_copy+0x2a>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <pbuf_copy+0x2a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	891a      	ldrh	r2, [r3, #8]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	891b      	ldrh	r3, [r3, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	d209      	bcs.n	800623e <pbuf_copy+0x3e>
 800622a:	4b57      	ldr	r3, [pc, #348]	; (8006388 <pbuf_copy+0x188>)
 800622c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006230:	4956      	ldr	r1, [pc, #344]	; (800638c <pbuf_copy+0x18c>)
 8006232:	4857      	ldr	r0, [pc, #348]	; (8006390 <pbuf_copy+0x190>)
 8006234:	f008 ffc8 	bl	800f1c8 <iprintf>
 8006238:	f06f 030f 	mvn.w	r3, #15
 800623c:	e09f      	b.n	800637e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	895b      	ldrh	r3, [r3, #10]
 8006242:	461a      	mov	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad2      	subs	r2, r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	895b      	ldrh	r3, [r3, #10]
 800624c:	4619      	mov	r1, r3
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1acb      	subs	r3, r1, r3
 8006252:	429a      	cmp	r2, r3
 8006254:	d306      	bcc.n	8006264 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	895b      	ldrh	r3, [r3, #10]
 800625a:	461a      	mov	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e005      	b.n	8006270 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	895b      	ldrh	r3, [r3, #10]
 8006268:	461a      	mov	r2, r3
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	18d0      	adds	r0, r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4413      	add	r3, r2
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4619      	mov	r1, r3
 8006284:	f008 ff8a 	bl	800f19c <memcpy>
    offset_to += len;
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	895b      	ldrh	r3, [r3, #10]
 800629c:	461a      	mov	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d906      	bls.n	80062b2 <pbuf_copy+0xb2>
 80062a4:	4b38      	ldr	r3, [pc, #224]	; (8006388 <pbuf_copy+0x188>)
 80062a6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80062aa:	493a      	ldr	r1, [pc, #232]	; (8006394 <pbuf_copy+0x194>)
 80062ac:	4838      	ldr	r0, [pc, #224]	; (8006390 <pbuf_copy+0x190>)
 80062ae:	f008 ff8b 	bl	800f1c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	895b      	ldrh	r3, [r3, #10]
 80062b6:	461a      	mov	r2, r3
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d906      	bls.n	80062cc <pbuf_copy+0xcc>
 80062be:	4b32      	ldr	r3, [pc, #200]	; (8006388 <pbuf_copy+0x188>)
 80062c0:	f240 32da 	movw	r2, #986	; 0x3da
 80062c4:	4934      	ldr	r1, [pc, #208]	; (8006398 <pbuf_copy+0x198>)
 80062c6:	4832      	ldr	r0, [pc, #200]	; (8006390 <pbuf_copy+0x190>)
 80062c8:	f008 ff7e 	bl	800f1c8 <iprintf>
    if (offset_from >= p_from->len) {
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	895b      	ldrh	r3, [r3, #10]
 80062d0:	461a      	mov	r2, r3
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d304      	bcc.n	80062e2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	895b      	ldrh	r3, [r3, #10]
 80062e6:	461a      	mov	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d114      	bne.n	8006318 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10c      	bne.n	8006318 <pbuf_copy+0x118>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <pbuf_copy+0x118>
 8006304:	4b20      	ldr	r3, [pc, #128]	; (8006388 <pbuf_copy+0x188>)
 8006306:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800630a:	4924      	ldr	r1, [pc, #144]	; (800639c <pbuf_copy+0x19c>)
 800630c:	4820      	ldr	r0, [pc, #128]	; (8006390 <pbuf_copy+0x190>)
 800630e:	f008 ff5b 	bl	800f1c8 <iprintf>
 8006312:	f06f 030f 	mvn.w	r3, #15
 8006316:	e032      	b.n	800637e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d013      	beq.n	8006346 <pbuf_copy+0x146>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	895a      	ldrh	r2, [r3, #10]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	891b      	ldrh	r3, [r3, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d10d      	bne.n	8006346 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d009      	beq.n	8006346 <pbuf_copy+0x146>
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <pbuf_copy+0x188>)
 8006334:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006338:	4919      	ldr	r1, [pc, #100]	; (80063a0 <pbuf_copy+0x1a0>)
 800633a:	4815      	ldr	r0, [pc, #84]	; (8006390 <pbuf_copy+0x190>)
 800633c:	f008 ff44 	bl	800f1c8 <iprintf>
 8006340:	f06f 0305 	mvn.w	r3, #5
 8006344:	e01b      	b.n	800637e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d013      	beq.n	8006374 <pbuf_copy+0x174>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	895a      	ldrh	r2, [r3, #10]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	891b      	ldrh	r3, [r3, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	d10d      	bne.n	8006374 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <pbuf_copy+0x174>
 8006360:	4b09      	ldr	r3, [pc, #36]	; (8006388 <pbuf_copy+0x188>)
 8006362:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006366:	490e      	ldr	r1, [pc, #56]	; (80063a0 <pbuf_copy+0x1a0>)
 8006368:	4809      	ldr	r0, [pc, #36]	; (8006390 <pbuf_copy+0x190>)
 800636a:	f008 ff2d 	bl	800f1c8 <iprintf>
 800636e:	f06f 0305 	mvn.w	r3, #5
 8006372:	e004      	b.n	800637e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f47f af61 	bne.w	800623e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	08010b18 	.word	0x08010b18
 800638c:	08010dc0 	.word	0x08010dc0
 8006390:	08010b78 	.word	0x08010b78
 8006394:	08010df0 	.word	0x08010df0
 8006398:	08010e08 	.word	0x08010e08
 800639c:	08010e24 	.word	0x08010e24
 80063a0:	08010e34 	.word	0x08010e34

080063a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4611      	mov	r1, r2
 80063b0:	461a      	mov	r2, r3
 80063b2:	460b      	mov	r3, r1
 80063b4:	80fb      	strh	r3, [r7, #6]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d108      	bne.n	80063da <pbuf_copy_partial+0x36>
 80063c8:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <pbuf_copy_partial+0xd4>)
 80063ca:	f240 420a 	movw	r2, #1034	; 0x40a
 80063ce:	492b      	ldr	r1, [pc, #172]	; (800647c <pbuf_copy_partial+0xd8>)
 80063d0:	482b      	ldr	r0, [pc, #172]	; (8006480 <pbuf_copy_partial+0xdc>)
 80063d2:	f008 fef9 	bl	800f1c8 <iprintf>
 80063d6:	2300      	movs	r3, #0
 80063d8:	e04a      	b.n	8006470 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d108      	bne.n	80063f2 <pbuf_copy_partial+0x4e>
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <pbuf_copy_partial+0xd4>)
 80063e2:	f240 420b 	movw	r2, #1035	; 0x40b
 80063e6:	4927      	ldr	r1, [pc, #156]	; (8006484 <pbuf_copy_partial+0xe0>)
 80063e8:	4825      	ldr	r0, [pc, #148]	; (8006480 <pbuf_copy_partial+0xdc>)
 80063ea:	f008 feed 	bl	800f1c8 <iprintf>
 80063ee:	2300      	movs	r3, #0
 80063f0:	e03e      	b.n	8006470 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e034      	b.n	8006462 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80063f8:	88bb      	ldrh	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <pbuf_copy_partial+0x70>
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	895b      	ldrh	r3, [r3, #10]
 8006402:	88ba      	ldrh	r2, [r7, #4]
 8006404:	429a      	cmp	r2, r3
 8006406:	d305      	bcc.n	8006414 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	895b      	ldrh	r3, [r3, #10]
 800640c:	88ba      	ldrh	r2, [r7, #4]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	80bb      	strh	r3, [r7, #4]
 8006412:	e023      	b.n	800645c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	895a      	ldrh	r2, [r3, #10]
 8006418:	88bb      	ldrh	r3, [r7, #4]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800641e:	8b3a      	ldrh	r2, [r7, #24]
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	429a      	cmp	r2, r3
 8006424:	d901      	bls.n	800642a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800642a:	8b7b      	ldrh	r3, [r7, #26]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	18d0      	adds	r0, r2, r3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	88bb      	ldrh	r3, [r7, #4]
 8006436:	4413      	add	r3, r2
 8006438:	8b3a      	ldrh	r2, [r7, #24]
 800643a:	4619      	mov	r1, r3
 800643c:	f008 feae 	bl	800f19c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006440:	8afa      	ldrh	r2, [r7, #22]
 8006442:	8b3b      	ldrh	r3, [r7, #24]
 8006444:	4413      	add	r3, r2
 8006446:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006448:	8b7a      	ldrh	r2, [r7, #26]
 800644a:	8b3b      	ldrh	r3, [r7, #24]
 800644c:	4413      	add	r3, r2
 800644e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006450:	88fa      	ldrh	r2, [r7, #6]
 8006452:	8b3b      	ldrh	r3, [r7, #24]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <pbuf_copy_partial+0xca>
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1c4      	bne.n	80063f8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800646e:	8afb      	ldrh	r3, [r7, #22]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08010b18 	.word	0x08010b18
 800647c:	08010e60 	.word	0x08010e60
 8006480:	08010b78 	.word	0x08010b78
 8006484:	08010e80 	.word	0x08010e80

08006488 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	603a      	str	r2, [r7, #0]
 8006492:	71fb      	strb	r3, [r7, #7]
 8006494:	460b      	mov	r3, r1
 8006496:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	8919      	ldrh	r1, [r3, #8]
 800649c:	88ba      	ldrh	r2, [r7, #4]
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fab1 	bl	8005a08 <pbuf_alloc>
 80064a6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <pbuf_clone+0x2a>
    return NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e011      	b.n	80064d6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff fea3 	bl	8006200 <pbuf_copy>
 80064ba:	4603      	mov	r3, r0
 80064bc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80064be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d006      	beq.n	80064d4 <pbuf_clone+0x4c>
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <pbuf_clone+0x58>)
 80064c8:	f240 5224 	movw	r2, #1316	; 0x524
 80064cc:	4905      	ldr	r1, [pc, #20]	; (80064e4 <pbuf_clone+0x5c>)
 80064ce:	4806      	ldr	r0, [pc, #24]	; (80064e8 <pbuf_clone+0x60>)
 80064d0:	f008 fe7a 	bl	800f1c8 <iprintf>
  return q;
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	08010b18 	.word	0x08010b18
 80064e4:	08010f8c 	.word	0x08010f8c
 80064e8:	08010b78 	.word	0x08010b78

080064ec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80064f0:	f008 fe82 	bl	800f1f8 <rand>
 80064f4:	4603      	mov	r3, r0
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006502:	b29a      	uxth	r2, r3
 8006504:	4b01      	ldr	r3, [pc, #4]	; (800650c <tcp_init+0x20>)
 8006506:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006508:	bf00      	nop
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20000020 	.word	0x20000020

08006510 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	7d1b      	ldrb	r3, [r3, #20]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d105      	bne.n	800652c <tcp_free+0x1c>
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <tcp_free+0x2c>)
 8006522:	22d4      	movs	r2, #212	; 0xd4
 8006524:	4906      	ldr	r1, [pc, #24]	; (8006540 <tcp_free+0x30>)
 8006526:	4807      	ldr	r0, [pc, #28]	; (8006544 <tcp_free+0x34>)
 8006528:	f008 fe4e 	bl	800f1c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	2001      	movs	r0, #1
 8006530:	f7fe fed8 	bl	80052e4 <memp_free>
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	08011018 	.word	0x08011018
 8006540:	08011048 	.word	0x08011048
 8006544:	0801105c 	.word	0x0801105c

08006548 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7d1b      	ldrb	r3, [r3, #20]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d105      	bne.n	8006564 <tcp_free_listen+0x1c>
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <tcp_free_listen+0x2c>)
 800655a:	22df      	movs	r2, #223	; 0xdf
 800655c:	4906      	ldr	r1, [pc, #24]	; (8006578 <tcp_free_listen+0x30>)
 800655e:	4807      	ldr	r0, [pc, #28]	; (800657c <tcp_free_listen+0x34>)
 8006560:	f008 fe32 	bl	800f1c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	2002      	movs	r0, #2
 8006568:	f7fe febc 	bl	80052e4 <memp_free>
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	08011018 	.word	0x08011018
 8006578:	08011084 	.word	0x08011084
 800657c:	0801105c 	.word	0x0801105c

08006580 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006584:	f001 f85c 	bl	8007640 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <tcp_tmr+0x28>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	b2da      	uxtb	r2, r3
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <tcp_tmr+0x28>)
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <tcp_tmr+0x28>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80065a0:	f000 fd0e 	bl	8006fc0 <tcp_slowtmr>
  }
}
 80065a4:	bf00      	nop
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	200086b5 	.word	0x200086b5

080065ac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d105      	bne.n	80065c8 <tcp_remove_listener+0x1c>
 80065bc:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <tcp_remove_listener+0x48>)
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	490d      	ldr	r1, [pc, #52]	; (80065f8 <tcp_remove_listener+0x4c>)
 80065c2:	480e      	ldr	r0, [pc, #56]	; (80065fc <tcp_remove_listener+0x50>)
 80065c4:	f008 fe00 	bl	800f1c8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e00a      	b.n	80065e4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d102      	bne.n	80065de <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f1      	bne.n	80065ce <tcp_remove_listener+0x22>
    }
  }
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	08011018 	.word	0x08011018
 80065f8:	080110a0 	.word	0x080110a0
 80065fc:	0801105c 	.word	0x0801105c

08006600 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <tcp_listen_closed+0x1c>
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <tcp_listen_closed+0x60>)
 8006610:	f240 1211 	movw	r2, #273	; 0x111
 8006614:	4913      	ldr	r1, [pc, #76]	; (8006664 <tcp_listen_closed+0x64>)
 8006616:	4814      	ldr	r0, [pc, #80]	; (8006668 <tcp_listen_closed+0x68>)
 8006618:	f008 fdd6 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7d1b      	ldrb	r3, [r3, #20]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d006      	beq.n	8006632 <tcp_listen_closed+0x32>
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <tcp_listen_closed+0x60>)
 8006626:	f44f 7289 	mov.w	r2, #274	; 0x112
 800662a:	4910      	ldr	r1, [pc, #64]	; (800666c <tcp_listen_closed+0x6c>)
 800662c:	480e      	ldr	r0, [pc, #56]	; (8006668 <tcp_listen_closed+0x68>)
 800662e:	f008 fdcb 	bl	800f1c8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006632:	2301      	movs	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e00b      	b.n	8006650 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006638:	4a0d      	ldr	r2, [pc, #52]	; (8006670 <tcp_listen_closed+0x70>)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff ffb1 	bl	80065ac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3301      	adds	r3, #1
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b03      	cmp	r3, #3
 8006654:	d9f0      	bls.n	8006638 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	08011018 	.word	0x08011018
 8006664:	080110c8 	.word	0x080110c8
 8006668:	0801105c 	.word	0x0801105c
 800666c:	080110d4 	.word	0x080110d4
 8006670:	08014000 	.word	0x08014000

08006674 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006674:	b5b0      	push	{r4, r5, r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af04      	add	r7, sp, #16
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <tcp_close_shutdown+0x20>
 8006686:	4b63      	ldr	r3, [pc, #396]	; (8006814 <tcp_close_shutdown+0x1a0>)
 8006688:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800668c:	4962      	ldr	r1, [pc, #392]	; (8006818 <tcp_close_shutdown+0x1a4>)
 800668e:	4863      	ldr	r0, [pc, #396]	; (800681c <tcp_close_shutdown+0x1a8>)
 8006690:	f008 fd9a 	bl	800f1c8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d066      	beq.n	8006768 <tcp_close_shutdown+0xf4>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	7d1b      	ldrb	r3, [r3, #20]
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d003      	beq.n	80066aa <tcp_close_shutdown+0x36>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	7d1b      	ldrb	r3, [r3, #20]
 80066a6:	2b07      	cmp	r3, #7
 80066a8:	d15e      	bne.n	8006768 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <tcp_close_shutdown+0x48>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80066ba:	d055      	beq.n	8006768 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8b5b      	ldrh	r3, [r3, #26]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <tcp_close_shutdown+0x62>
 80066c8:	4b52      	ldr	r3, [pc, #328]	; (8006814 <tcp_close_shutdown+0x1a0>)
 80066ca:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80066ce:	4954      	ldr	r1, [pc, #336]	; (8006820 <tcp_close_shutdown+0x1ac>)
 80066d0:	4852      	ldr	r0, [pc, #328]	; (800681c <tcp_close_shutdown+0x1a8>)
 80066d2:	f008 fd79 	bl	800f1c8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80066de:	687d      	ldr	r5, [r7, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3304      	adds	r3, #4
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	8ad2      	ldrh	r2, [r2, #22]
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	8b09      	ldrh	r1, [r1, #24]
 80066ec:	9102      	str	r1, [sp, #8]
 80066ee:	9201      	str	r2, [sp, #4]
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	462b      	mov	r3, r5
 80066f4:	4622      	mov	r2, r4
 80066f6:	4601      	mov	r1, r0
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f005 fd8f 	bl	800c21c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fb6c 	bl	8007ddc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006704:	4b47      	ldr	r3, [pc, #284]	; (8006824 <tcp_close_shutdown+0x1b0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d105      	bne.n	800671a <tcp_close_shutdown+0xa6>
 800670e:	4b45      	ldr	r3, [pc, #276]	; (8006824 <tcp_close_shutdown+0x1b0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4a43      	ldr	r2, [pc, #268]	; (8006824 <tcp_close_shutdown+0x1b0>)
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e013      	b.n	8006742 <tcp_close_shutdown+0xce>
 800671a:	4b42      	ldr	r3, [pc, #264]	; (8006824 <tcp_close_shutdown+0x1b0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e00c      	b.n	800673c <tcp_close_shutdown+0xc8>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	429a      	cmp	r2, r3
 800672a:	d104      	bne.n	8006736 <tcp_close_shutdown+0xc2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	e005      	b.n	8006742 <tcp_close_shutdown+0xce>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1ef      	bne.n	8006722 <tcp_close_shutdown+0xae>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	60da      	str	r2, [r3, #12]
 8006748:	4b37      	ldr	r3, [pc, #220]	; (8006828 <tcp_close_shutdown+0x1b4>)
 800674a:	2201      	movs	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800674e:	4b37      	ldr	r3, [pc, #220]	; (800682c <tcp_close_shutdown+0x1b8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	d102      	bne.n	800675e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006758:	f004 f804 	bl	800a764 <tcp_trigger_input_pcb_close>
 800675c:	e002      	b.n	8006764 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff fed6 	bl	8006510 <tcp_free>
      }
      return ERR_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	e050      	b.n	800680a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7d1b      	ldrb	r3, [r3, #20]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d03b      	beq.n	80067e8 <tcp_close_shutdown+0x174>
 8006770:	2b02      	cmp	r3, #2
 8006772:	dc44      	bgt.n	80067fe <tcp_close_shutdown+0x18a>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <tcp_close_shutdown+0x10a>
 8006778:	2b01      	cmp	r3, #1
 800677a:	d02a      	beq.n	80067d2 <tcp_close_shutdown+0x15e>
 800677c:	e03f      	b.n	80067fe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8adb      	ldrh	r3, [r3, #22]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d021      	beq.n	80067ca <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006786:	4b2a      	ldr	r3, [pc, #168]	; (8006830 <tcp_close_shutdown+0x1bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d105      	bne.n	800679c <tcp_close_shutdown+0x128>
 8006790:	4b27      	ldr	r3, [pc, #156]	; (8006830 <tcp_close_shutdown+0x1bc>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	4a26      	ldr	r2, [pc, #152]	; (8006830 <tcp_close_shutdown+0x1bc>)
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e013      	b.n	80067c4 <tcp_close_shutdown+0x150>
 800679c:	4b24      	ldr	r3, [pc, #144]	; (8006830 <tcp_close_shutdown+0x1bc>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	e00c      	b.n	80067be <tcp_close_shutdown+0x14a>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d104      	bne.n	80067b8 <tcp_close_shutdown+0x144>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	e005      	b.n	80067c4 <tcp_close_shutdown+0x150>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1ef      	bne.n	80067a4 <tcp_close_shutdown+0x130>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fea0 	bl	8006510 <tcp_free>
      break;
 80067d0:	e01a      	b.n	8006808 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff ff14 	bl	8006600 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4816      	ldr	r0, [pc, #88]	; (8006834 <tcp_close_shutdown+0x1c0>)
 80067dc:	f001 fb4e 	bl	8007e7c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff feb1 	bl	8006548 <tcp_free_listen>
      break;
 80067e6:	e00f      	b.n	8006808 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	480e      	ldr	r0, [pc, #56]	; (8006824 <tcp_close_shutdown+0x1b0>)
 80067ec:	f001 fb46 	bl	8007e7c <tcp_pcb_remove>
 80067f0:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <tcp_close_shutdown+0x1b4>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fe8a 	bl	8006510 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80067fc:	e004      	b.n	8006808 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f81a 	bl	8006838 <tcp_close_shutdown_fin>
 8006804:	4603      	mov	r3, r0
 8006806:	e000      	b.n	800680a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bdb0      	pop	{r4, r5, r7, pc}
 8006812:	bf00      	nop
 8006814:	08011018 	.word	0x08011018
 8006818:	080110ec 	.word	0x080110ec
 800681c:	0801105c 	.word	0x0801105c
 8006820:	0801110c 	.word	0x0801110c
 8006824:	200086ac 	.word	0x200086ac
 8006828:	200086b4 	.word	0x200086b4
 800682c:	200086ec 	.word	0x200086ec
 8006830:	200086a4 	.word	0x200086a4
 8006834:	200086a8 	.word	0x200086a8

08006838 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <tcp_close_shutdown_fin+0x1c>
 8006846:	4b2e      	ldr	r3, [pc, #184]	; (8006900 <tcp_close_shutdown_fin+0xc8>)
 8006848:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800684c:	492d      	ldr	r1, [pc, #180]	; (8006904 <tcp_close_shutdown_fin+0xcc>)
 800684e:	482e      	ldr	r0, [pc, #184]	; (8006908 <tcp_close_shutdown_fin+0xd0>)
 8006850:	f008 fcba 	bl	800f1c8 <iprintf>

  switch (pcb->state) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	7d1b      	ldrb	r3, [r3, #20]
 8006858:	2b07      	cmp	r3, #7
 800685a:	d020      	beq.n	800689e <tcp_close_shutdown_fin+0x66>
 800685c:	2b07      	cmp	r3, #7
 800685e:	dc2b      	bgt.n	80068b8 <tcp_close_shutdown_fin+0x80>
 8006860:	2b03      	cmp	r3, #3
 8006862:	d002      	beq.n	800686a <tcp_close_shutdown_fin+0x32>
 8006864:	2b04      	cmp	r3, #4
 8006866:	d00d      	beq.n	8006884 <tcp_close_shutdown_fin+0x4c>
 8006868:	e026      	b.n	80068b8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f004 fde4 	bl	800b438 <tcp_send_fin>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d11f      	bne.n	80068bc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2205      	movs	r2, #5
 8006880:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006882:	e01b      	b.n	80068bc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f004 fdd7 	bl	800b438 <tcp_send_fin>
 800688a:	4603      	mov	r3, r0
 800688c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800688e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d114      	bne.n	80068c0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2205      	movs	r2, #5
 800689a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800689c:	e010      	b.n	80068c0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f004 fdca 	bl	800b438 <tcp_send_fin>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80068a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d109      	bne.n	80068c4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2209      	movs	r2, #9
 80068b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068b6:	e005      	b.n	80068c4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e01c      	b.n	80068f6 <tcp_close_shutdown_fin+0xbe>
      break;
 80068bc:	bf00      	nop
 80068be:	e002      	b.n	80068c6 <tcp_close_shutdown_fin+0x8e>
      break;
 80068c0:	bf00      	nop
 80068c2:	e000      	b.n	80068c6 <tcp_close_shutdown_fin+0x8e>
      break;
 80068c4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80068c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f004 fef0 	bl	800b6b4 <tcp_output>
 80068d4:	e00d      	b.n	80068f2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80068d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068de:	d108      	bne.n	80068f2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8b5b      	ldrh	r3, [r3, #26]
 80068e4:	f043 0308 	orr.w	r3, r3, #8
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e001      	b.n	80068f6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80068f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	08011018 	.word	0x08011018
 8006904:	080110c8 	.word	0x080110c8
 8006908:	0801105c 	.word	0x0801105c

0800690c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <tcp_close+0x22>
 800691a:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <tcp_close+0x4c>)
 800691c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006920:	490e      	ldr	r1, [pc, #56]	; (800695c <tcp_close+0x50>)
 8006922:	480f      	ldr	r0, [pc, #60]	; (8006960 <tcp_close+0x54>)
 8006924:	f008 fc50 	bl	800f1c8 <iprintf>
 8006928:	f06f 030f 	mvn.w	r3, #15
 800692c:	e00f      	b.n	800694e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	7d1b      	ldrb	r3, [r3, #20]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d006      	beq.n	8006944 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	8b5b      	ldrh	r3, [r3, #26]
 800693a:	f043 0310 	orr.w	r3, r3, #16
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006944:	2101      	movs	r1, #1
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fe94 	bl	8006674 <tcp_close_shutdown>
 800694c:	4603      	mov	r3, r0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	08011018 	.word	0x08011018
 800695c:	08011128 	.word	0x08011128
 8006960:	0801105c 	.word	0x0801105c

08006964 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	; 0x38
 8006968:	af04      	add	r7, sp, #16
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d107      	bne.n	8006984 <tcp_abandon+0x20>
 8006974:	4b52      	ldr	r3, [pc, #328]	; (8006ac0 <tcp_abandon+0x15c>)
 8006976:	f240 223d 	movw	r2, #573	; 0x23d
 800697a:	4952      	ldr	r1, [pc, #328]	; (8006ac4 <tcp_abandon+0x160>)
 800697c:	4852      	ldr	r0, [pc, #328]	; (8006ac8 <tcp_abandon+0x164>)
 800697e:	f008 fc23 	bl	800f1c8 <iprintf>
 8006982:	e099      	b.n	8006ab8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	7d1b      	ldrb	r3, [r3, #20]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d106      	bne.n	800699a <tcp_abandon+0x36>
 800698c:	4b4c      	ldr	r3, [pc, #304]	; (8006ac0 <tcp_abandon+0x15c>)
 800698e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006992:	494e      	ldr	r1, [pc, #312]	; (8006acc <tcp_abandon+0x168>)
 8006994:	484c      	ldr	r0, [pc, #304]	; (8006ac8 <tcp_abandon+0x164>)
 8006996:	f008 fc17 	bl	800f1c8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7d1b      	ldrb	r3, [r3, #20]
 800699e:	2b0a      	cmp	r3, #10
 80069a0:	d107      	bne.n	80069b2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	484a      	ldr	r0, [pc, #296]	; (8006ad0 <tcp_abandon+0x16c>)
 80069a6:	f001 fa69 	bl	8007e7c <tcp_pcb_remove>
    tcp_free(pcb);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fdb0 	bl	8006510 <tcp_free>
 80069b0:	e082      	b.n	8006ab8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069be:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069cc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7d1b      	ldrb	r3, [r3, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d126      	bne.n	8006a2a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8adb      	ldrh	r3, [r3, #22]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d02e      	beq.n	8006a42 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80069e4:	4b3b      	ldr	r3, [pc, #236]	; (8006ad4 <tcp_abandon+0x170>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d105      	bne.n	80069fa <tcp_abandon+0x96>
 80069ee:	4b39      	ldr	r3, [pc, #228]	; (8006ad4 <tcp_abandon+0x170>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4a37      	ldr	r2, [pc, #220]	; (8006ad4 <tcp_abandon+0x170>)
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e013      	b.n	8006a22 <tcp_abandon+0xbe>
 80069fa:	4b36      	ldr	r3, [pc, #216]	; (8006ad4 <tcp_abandon+0x170>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e00c      	b.n	8006a1c <tcp_abandon+0xb8>
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d104      	bne.n	8006a16 <tcp_abandon+0xb2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	60da      	str	r2, [r3, #12]
 8006a14:	e005      	b.n	8006a22 <tcp_abandon+0xbe>
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1ef      	bne.n	8006a02 <tcp_abandon+0x9e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	60da      	str	r2, [r3, #12]
 8006a28:	e00b      	b.n	8006a42 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	8adb      	ldrh	r3, [r3, #22]
 8006a32:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4828      	ldr	r0, [pc, #160]	; (8006ad8 <tcp_abandon+0x174>)
 8006a38:	f001 fa20 	bl	8007e7c <tcp_pcb_remove>
 8006a3c:	4b27      	ldr	r3, [pc, #156]	; (8006adc <tcp_abandon+0x178>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fed6 	bl	8007800 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fecd 	bl	8007800 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d004      	beq.n	8006a78 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fec4 	bl	8007800 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00e      	beq.n	8006a9c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	8b12      	ldrh	r2, [r2, #24]
 8006a88:	9202      	str	r2, [sp, #8]
 8006a8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a8c:	9201      	str	r2, [sp, #4]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	460b      	mov	r3, r1
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	69b9      	ldr	r1, [r7, #24]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f005 fbc0 	bl	800c21c <tcp_rst>
    }
    last_state = pcb->state;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	7d1b      	ldrb	r3, [r3, #20]
 8006aa0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fd34 	bl	8006510 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d004      	beq.n	8006ab8 <tcp_abandon+0x154>
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f06f 010c 	mvn.w	r1, #12
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	4798      	blx	r3
  }
}
 8006ab8:	3728      	adds	r7, #40	; 0x28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	08011018 	.word	0x08011018
 8006ac4:	0801115c 	.word	0x0801115c
 8006ac8:	0801105c 	.word	0x0801105c
 8006acc:	08011178 	.word	0x08011178
 8006ad0:	200086b0 	.word	0x200086b0
 8006ad4:	200086a4 	.word	0x200086a4
 8006ad8:	200086ac 	.word	0x200086ac
 8006adc:	200086b4 	.word	0x200086b4

08006ae0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006ae8:	2101      	movs	r1, #1
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff ff3a 	bl	8006964 <tcp_abandon>
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006b06:	2304      	movs	r3, #4
 8006b08:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006b10:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <tcp_bind+0x114>)
 8006b12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <tcp_bind+0x36>
 8006b1a:	4b3d      	ldr	r3, [pc, #244]	; (8006c10 <tcp_bind+0x118>)
 8006b1c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006b20:	493c      	ldr	r1, [pc, #240]	; (8006c14 <tcp_bind+0x11c>)
 8006b22:	483d      	ldr	r0, [pc, #244]	; (8006c18 <tcp_bind+0x120>)
 8006b24:	f008 fb50 	bl	800f1c8 <iprintf>
 8006b28:	f06f 030f 	mvn.w	r3, #15
 8006b2c:	e06a      	b.n	8006c04 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7d1b      	ldrb	r3, [r3, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <tcp_bind+0x52>
 8006b36:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <tcp_bind+0x118>)
 8006b38:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006b3c:	4937      	ldr	r1, [pc, #220]	; (8006c1c <tcp_bind+0x124>)
 8006b3e:	4836      	ldr	r0, [pc, #216]	; (8006c18 <tcp_bind+0x120>)
 8006b40:	f008 fb42 	bl	800f1c8 <iprintf>
 8006b44:	f06f 0305 	mvn.w	r3, #5
 8006b48:	e05c      	b.n	8006c04 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006b50:	f000 f9f0 	bl	8006f34 <tcp_new_port>
 8006b54:	4603      	mov	r3, r0
 8006b56:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006b58:	88fb      	ldrh	r3, [r7, #6]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d135      	bne.n	8006bca <tcp_bind+0xd2>
      return ERR_BUF;
 8006b5e:	f06f 0301 	mvn.w	r3, #1
 8006b62:	e04f      	b.n	8006c04 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	e02b      	b.n	8006bc2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006b6a:	4a2d      	ldr	r2, [pc, #180]	; (8006c20 <tcp_bind+0x128>)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	e01e      	b.n	8006bb6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	8adb      	ldrh	r3, [r3, #22]
 8006b7c:	88fa      	ldrh	r2, [r7, #6]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d116      	bne.n	8006bb0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006b82:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d010      	beq.n	8006baa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00c      	beq.n	8006baa <tcp_bind+0xb2>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d102      	bne.n	8006bb0 <tcp_bind+0xb8>
              return ERR_USE;
 8006baa:	f06f 0307 	mvn.w	r3, #7
 8006bae:	e029      	b.n	8006c04 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1dd      	bne.n	8006b78 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	dbcf      	blt.n	8006b6a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00c      	beq.n	8006bea <tcp_bind+0xf2>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <tcp_bind+0xec>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	e000      	b.n	8006be6 <tcp_bind+0xee>
 8006be4:	2300      	movs	r3, #0
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	88fa      	ldrh	r2, [r7, #6]
 8006bee:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <tcp_bind+0x12c>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
 8006bf8:	4a0a      	ldr	r2, [pc, #40]	; (8006c24 <tcp_bind+0x12c>)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	f005 fccf 	bl	800c5a0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	08014028 	.word	0x08014028
 8006c10:	08011018 	.word	0x08011018
 8006c14:	080111ac 	.word	0x080111ac
 8006c18:	0801105c 	.word	0x0801105c
 8006c1c:	080111c4 	.word	0x080111c4
 8006c20:	08014000 	.word	0x08014000
 8006c24:	200086a4 	.word	0x200086a4

08006c28 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <tcp_accept_null+0x22>
 8006c3c:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <tcp_accept_null+0x34>)
 8006c3e:	f240 320f 	movw	r2, #783	; 0x30f
 8006c42:	4907      	ldr	r1, [pc, #28]	; (8006c60 <tcp_accept_null+0x38>)
 8006c44:	4807      	ldr	r0, [pc, #28]	; (8006c64 <tcp_accept_null+0x3c>)
 8006c46:	f008 fabf 	bl	800f1c8 <iprintf>

  tcp_abort(pcb);
 8006c4a:	68b8      	ldr	r0, [r7, #8]
 8006c4c:	f7ff ff48 	bl	8006ae0 <tcp_abort>

  return ERR_ABRT;
 8006c50:	f06f 030c 	mvn.w	r3, #12
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	08011018 	.word	0x08011018
 8006c60:	080111ec 	.word	0x080111ec
 8006c64:	0801105c 	.word	0x0801105c

08006c68 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	2200      	movs	r2, #0
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f806 	bl	8006c8c <tcp_listen_with_backlog_and_err>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	460b      	mov	r3, r1
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <tcp_listen_with_backlog_and_err+0x2c>
 8006ca4:	4b47      	ldr	r3, [pc, #284]	; (8006dc4 <tcp_listen_with_backlog_and_err+0x138>)
 8006ca6:	f240 3259 	movw	r2, #857	; 0x359
 8006caa:	4947      	ldr	r1, [pc, #284]	; (8006dc8 <tcp_listen_with_backlog_and_err+0x13c>)
 8006cac:	4847      	ldr	r0, [pc, #284]	; (8006dcc <tcp_listen_with_backlog_and_err+0x140>)
 8006cae:	f008 fa8b 	bl	800f1c8 <iprintf>
 8006cb2:	23f0      	movs	r3, #240	; 0xf0
 8006cb4:	76fb      	strb	r3, [r7, #27]
 8006cb6:	e079      	b.n	8006dac <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	7d1b      	ldrb	r3, [r3, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <tcp_listen_with_backlog_and_err+0x48>
 8006cc0:	4b40      	ldr	r3, [pc, #256]	; (8006dc4 <tcp_listen_with_backlog_and_err+0x138>)
 8006cc2:	f240 325a 	movw	r2, #858	; 0x35a
 8006cc6:	4942      	ldr	r1, [pc, #264]	; (8006dd0 <tcp_listen_with_backlog_and_err+0x144>)
 8006cc8:	4840      	ldr	r0, [pc, #256]	; (8006dcc <tcp_listen_with_backlog_and_err+0x140>)
 8006cca:	f008 fa7d 	bl	800f1c8 <iprintf>
 8006cce:	23f1      	movs	r3, #241	; 0xf1
 8006cd0:	76fb      	strb	r3, [r7, #27]
 8006cd2:	e06b      	b.n	8006dac <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	7d1b      	ldrb	r3, [r3, #20]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d104      	bne.n	8006ce6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006ce0:	23f7      	movs	r3, #247	; 0xf7
 8006ce2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006ce4:	e062      	b.n	8006dac <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006ce6:	2002      	movs	r0, #2
 8006ce8:	f7fe fa8c 	bl	8005204 <memp_malloc>
 8006cec:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006cf4:	23ff      	movs	r3, #255	; 0xff
 8006cf6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006cf8:	e058      	b.n	8006dac <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	691a      	ldr	r2, [r3, #16]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8ada      	ldrh	r2, [r3, #22]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	7d5a      	ldrb	r2, [r3, #21]
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	7a5a      	ldrb	r2, [r3, #9]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2200      	movs	r2, #0
 8006d24:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	7ada      	ldrb	r2, [r3, #11]
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	7a9a      	ldrb	r2, [r3, #10]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8adb      	ldrh	r3, [r3, #22]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d021      	beq.n	8006d8a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d46:	4b23      	ldr	r3, [pc, #140]	; (8006dd4 <tcp_listen_with_backlog_and_err+0x148>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d105      	bne.n	8006d5c <tcp_listen_with_backlog_and_err+0xd0>
 8006d50:	4b20      	ldr	r3, [pc, #128]	; (8006dd4 <tcp_listen_with_backlog_and_err+0x148>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <tcp_listen_with_backlog_and_err+0x148>)
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	e013      	b.n	8006d84 <tcp_listen_with_backlog_and_err+0xf8>
 8006d5c:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <tcp_listen_with_backlog_and_err+0x148>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	e00c      	b.n	8006d7e <tcp_listen_with_backlog_and_err+0xf2>
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d104      	bne.n	8006d78 <tcp_listen_with_backlog_and_err+0xec>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	60da      	str	r2, [r3, #12]
 8006d76:	e005      	b.n	8006d84 <tcp_listen_with_backlog_and_err+0xf8>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1ef      	bne.n	8006d64 <tcp_listen_with_backlog_and_err+0xd8>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff fbc0 	bl	8006510 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	4a11      	ldr	r2, [pc, #68]	; (8006dd8 <tcp_listen_with_backlog_and_err+0x14c>)
 8006d94:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006d96:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <tcp_listen_with_backlog_and_err+0x150>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	60da      	str	r2, [r3, #12]
 8006d9e:	4a0f      	ldr	r2, [pc, #60]	; (8006ddc <tcp_listen_with_backlog_and_err+0x150>)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	f005 fbfc 	bl	800c5a0 <tcp_timer_needed>
  res = ERR_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7efa      	ldrb	r2, [r7, #27]
 8006db6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006db8:	69fb      	ldr	r3, [r7, #28]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08011018 	.word	0x08011018
 8006dc8:	0801120c 	.word	0x0801120c
 8006dcc:	0801105c 	.word	0x0801105c
 8006dd0:	0801123c 	.word	0x0801123c
 8006dd4:	200086a4 	.word	0x200086a4
 8006dd8:	08006c29 	.word	0x08006c29
 8006ddc:	200086a8 	.word	0x200086a8

08006de0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <tcp_update_rcv_ann_wnd+0x1c>
 8006dee:	4b25      	ldr	r3, [pc, #148]	; (8006e84 <tcp_update_rcv_ann_wnd+0xa4>)
 8006df0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006df4:	4924      	ldr	r1, [pc, #144]	; (8006e88 <tcp_update_rcv_ann_wnd+0xa8>)
 8006df6:	4825      	ldr	r0, [pc, #148]	; (8006e8c <tcp_update_rcv_ann_wnd+0xac>)
 8006df8:	f008 f9e6 	bl	800f1c8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006e04:	4413      	add	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006e10:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006e14:	bf28      	it	cs
 8006e16:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006e1a:	b292      	uxth	r2, r2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	db08      	blt.n	8006e38 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	e020      	b.n	8006e7a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dd03      	ble.n	8006e4e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e4c:	e014      	b.n	8006e78 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e60:	d306      	bcc.n	8006e70 <tcp_update_rcv_ann_wnd+0x90>
 8006e62:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <tcp_update_rcv_ann_wnd+0xa4>)
 8006e64:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006e68:	4909      	ldr	r1, [pc, #36]	; (8006e90 <tcp_update_rcv_ann_wnd+0xb0>)
 8006e6a:	4808      	ldr	r0, [pc, #32]	; (8006e8c <tcp_update_rcv_ann_wnd+0xac>)
 8006e6c:	f008 f9ac 	bl	800f1c8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006e78:	2300      	movs	r3, #0
  }
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	08011018 	.word	0x08011018
 8006e88:	08011274 	.word	0x08011274
 8006e8c:	0801105c 	.word	0x0801105c
 8006e90:	08011298 	.word	0x08011298

08006e94 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d107      	bne.n	8006eb6 <tcp_recved+0x22>
 8006ea6:	4b1f      	ldr	r3, [pc, #124]	; (8006f24 <tcp_recved+0x90>)
 8006ea8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006eac:	491e      	ldr	r1, [pc, #120]	; (8006f28 <tcp_recved+0x94>)
 8006eae:	481f      	ldr	r0, [pc, #124]	; (8006f2c <tcp_recved+0x98>)
 8006eb0:	f008 f98a 	bl	800f1c8 <iprintf>
 8006eb4:	e032      	b.n	8006f1c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7d1b      	ldrb	r3, [r3, #20]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d106      	bne.n	8006ecc <tcp_recved+0x38>
 8006ebe:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <tcp_recved+0x90>)
 8006ec0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006ec4:	491a      	ldr	r1, [pc, #104]	; (8006f30 <tcp_recved+0x9c>)
 8006ec6:	4819      	ldr	r0, [pc, #100]	; (8006f2c <tcp_recved+0x98>)
 8006ec8:	f008 f97e 	bl	800f1c8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006ed0:	887b      	ldrh	r3, [r7, #2]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006ed6:	89fb      	ldrh	r3, [r7, #14]
 8006ed8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006edc:	d804      	bhi.n	8006ee8 <tcp_recved+0x54>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee2:	89fa      	ldrh	r2, [r7, #14]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d204      	bcs.n	8006ef2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006eee:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ef0:	e002      	b.n	8006ef8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	89fa      	ldrh	r2, [r7, #14]
 8006ef6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff ff71 	bl	8006de0 <tcp_update_rcv_ann_wnd>
 8006efe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006f06:	d309      	bcc.n	8006f1c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8b5b      	ldrh	r3, [r3, #26]
 8006f0c:	f043 0302 	orr.w	r3, r3, #2
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f004 fbcc 	bl	800b6b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	08011018 	.word	0x08011018
 8006f28:	080112b4 	.word	0x080112b4
 8006f2c:	0801105c 	.word	0x0801105c
 8006f30:	080112cc 	.word	0x080112cc

08006f34 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006f3e:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <tcp_new_port+0x84>)
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <tcp_new_port+0x84>)
 8006f48:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006f4a:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <tcp_new_port+0x84>)
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d103      	bne.n	8006f5e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006f56:	4b18      	ldr	r3, [pc, #96]	; (8006fb8 <tcp_new_port+0x84>)
 8006f58:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006f5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006f5e:	2300      	movs	r3, #0
 8006f60:	71fb      	strb	r3, [r7, #7]
 8006f62:	e01e      	b.n	8006fa2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	4a15      	ldr	r2, [pc, #84]	; (8006fbc <tcp_new_port+0x88>)
 8006f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	e011      	b.n	8006f96 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	8ada      	ldrh	r2, [r3, #22]
 8006f76:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <tcp_new_port+0x84>)
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d108      	bne.n	8006f90 <tcp_new_port+0x5c>
        n++;
 8006f7e:	88bb      	ldrh	r3, [r7, #4]
 8006f80:	3301      	adds	r3, #1
 8006f82:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006f84:	88bb      	ldrh	r3, [r7, #4]
 8006f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f8a:	d3d8      	bcc.n	8006f3e <tcp_new_port+0xa>
          return 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e00d      	b.n	8006fac <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1ea      	bne.n	8006f72 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	71fb      	strb	r3, [r7, #7]
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d9dd      	bls.n	8006f64 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006fa8:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <tcp_new_port+0x84>)
 8006faa:	881b      	ldrh	r3, [r3, #0]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	20000020 	.word	0x20000020
 8006fbc:	08014000 	.word	0x08014000

08006fc0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b090      	sub	sp, #64	; 0x40
 8006fc4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006fcc:	4b94      	ldr	r3, [pc, #592]	; (8007220 <tcp_slowtmr+0x260>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	4a93      	ldr	r2, [pc, #588]	; (8007220 <tcp_slowtmr+0x260>)
 8006fd4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006fd6:	4b93      	ldr	r3, [pc, #588]	; (8007224 <tcp_slowtmr+0x264>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	4b91      	ldr	r3, [pc, #580]	; (8007224 <tcp_slowtmr+0x264>)
 8006fe0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006fe6:	4b90      	ldr	r3, [pc, #576]	; (8007228 <tcp_slowtmr+0x268>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006fec:	e29d      	b.n	800752a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	7d1b      	ldrb	r3, [r3, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <tcp_slowtmr+0x44>
 8006ff6:	4b8d      	ldr	r3, [pc, #564]	; (800722c <tcp_slowtmr+0x26c>)
 8006ff8:	f240 42be 	movw	r2, #1214	; 0x4be
 8006ffc:	498c      	ldr	r1, [pc, #560]	; (8007230 <tcp_slowtmr+0x270>)
 8006ffe:	488d      	ldr	r0, [pc, #564]	; (8007234 <tcp_slowtmr+0x274>)
 8007000:	f008 f8e2 	bl	800f1c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	7d1b      	ldrb	r3, [r3, #20]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d106      	bne.n	800701a <tcp_slowtmr+0x5a>
 800700c:	4b87      	ldr	r3, [pc, #540]	; (800722c <tcp_slowtmr+0x26c>)
 800700e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007012:	4989      	ldr	r1, [pc, #548]	; (8007238 <tcp_slowtmr+0x278>)
 8007014:	4887      	ldr	r0, [pc, #540]	; (8007234 <tcp_slowtmr+0x274>)
 8007016:	f008 f8d7 	bl	800f1c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	7d1b      	ldrb	r3, [r3, #20]
 800701e:	2b0a      	cmp	r3, #10
 8007020:	d106      	bne.n	8007030 <tcp_slowtmr+0x70>
 8007022:	4b82      	ldr	r3, [pc, #520]	; (800722c <tcp_slowtmr+0x26c>)
 8007024:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007028:	4984      	ldr	r1, [pc, #528]	; (800723c <tcp_slowtmr+0x27c>)
 800702a:	4882      	ldr	r0, [pc, #520]	; (8007234 <tcp_slowtmr+0x274>)
 800702c:	f008 f8cc 	bl	800f1c8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	7f9a      	ldrb	r2, [r3, #30]
 8007034:	4b7b      	ldr	r3, [pc, #492]	; (8007224 <tcp_slowtmr+0x264>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d105      	bne.n	8007048 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007046:	e270      	b.n	800752a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007048:	4b76      	ldr	r3, [pc, #472]	; (8007224 <tcp_slowtmr+0x264>)
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	7d1b      	ldrb	r3, [r3, #20]
 8007060:	2b02      	cmp	r3, #2
 8007062:	d10a      	bne.n	800707a <tcp_slowtmr+0xba>
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800706a:	2b05      	cmp	r3, #5
 800706c:	d905      	bls.n	800707a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800706e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007072:	3301      	adds	r3, #1
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007078:	e11e      	b.n	80072b8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007080:	2b0b      	cmp	r3, #11
 8007082:	d905      	bls.n	8007090 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007088:	3301      	adds	r3, #1
 800708a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800708e:	e113      	b.n	80072b8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007092:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007096:	2b00      	cmp	r3, #0
 8007098:	d075      	beq.n	8007186 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d006      	beq.n	80070b0 <tcp_slowtmr+0xf0>
 80070a2:	4b62      	ldr	r3, [pc, #392]	; (800722c <tcp_slowtmr+0x26c>)
 80070a4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80070a8:	4965      	ldr	r1, [pc, #404]	; (8007240 <tcp_slowtmr+0x280>)
 80070aa:	4862      	ldr	r0, [pc, #392]	; (8007234 <tcp_slowtmr+0x274>)
 80070ac:	f008 f88c 	bl	800f1c8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <tcp_slowtmr+0x106>
 80070b8:	4b5c      	ldr	r3, [pc, #368]	; (800722c <tcp_slowtmr+0x26c>)
 80070ba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80070be:	4961      	ldr	r1, [pc, #388]	; (8007244 <tcp_slowtmr+0x284>)
 80070c0:	485c      	ldr	r0, [pc, #368]	; (8007234 <tcp_slowtmr+0x274>)
 80070c2:	f008 f881 	bl	800f1c8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80070cc:	2b0b      	cmp	r3, #11
 80070ce:	d905      	bls.n	80070dc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80070d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070d4:	3301      	adds	r3, #1
 80070d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070da:	e0ed      	b.n	80072b8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80070e2:	3b01      	subs	r3, #1
 80070e4:	4a58      	ldr	r2, [pc, #352]	; (8007248 <tcp_slowtmr+0x288>)
 80070e6:	5cd3      	ldrb	r3, [r2, r3]
 80070e8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070f0:	7c7a      	ldrb	r2, [r7, #17]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d907      	bls.n	8007106 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070fc:	3301      	adds	r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800710c:	7c7a      	ldrb	r2, [r7, #17]
 800710e:	429a      	cmp	r2, r3
 8007110:	f200 80d2 	bhi.w	80072b8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007114:	2301      	movs	r3, #1
 8007116:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800711e:	2b00      	cmp	r3, #0
 8007120:	d108      	bne.n	8007134 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007124:	f005 f96e 	bl	800c404 <tcp_zero_window_probe>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d014      	beq.n	8007158 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800712e:	2300      	movs	r3, #0
 8007130:	623b      	str	r3, [r7, #32]
 8007132:	e011      	b.n	8007158 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800713a:	4619      	mov	r1, r3
 800713c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800713e:	f004 f833 	bl	800b1a8 <tcp_split_unsent_seg>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d107      	bne.n	8007158 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800714a:	f004 fab3 	bl	800b6b4 <tcp_output>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 80ac 	beq.w	80072b8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800716e:	2b06      	cmp	r3, #6
 8007170:	f200 80a2 	bhi.w	80072b8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800717a:	3301      	adds	r3, #1
 800717c:	b2da      	uxtb	r2, r3
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007184:	e098      	b.n	80072b8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800718c:	2b00      	cmp	r3, #0
 800718e:	db0f      	blt.n	80071b0 <tcp_slowtmr+0x1f0>
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007196:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800719a:	4293      	cmp	r3, r2
 800719c:	d008      	beq.n	80071b0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b21a      	sxth	r2, r3
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80071bc:	429a      	cmp	r2, r3
 80071be:	db7b      	blt.n	80072b8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80071c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071c2:	f004 fd69 	bl	800bc98 <tcp_rexmit_rto_prepare>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <tcp_slowtmr+0x21c>
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d171      	bne.n	80072b8 <tcp_slowtmr+0x2f8>
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d06d      	beq.n	80072b8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	7d1b      	ldrb	r3, [r3, #20]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d03a      	beq.n	800725a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071ea:	2b0c      	cmp	r3, #12
 80071ec:	bf28      	it	cs
 80071ee:	230c      	movcs	r3, #12
 80071f0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80071f8:	10db      	asrs	r3, r3, #3
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007204:	4413      	add	r3, r2
 8007206:	7efa      	ldrb	r2, [r7, #27]
 8007208:	4910      	ldr	r1, [pc, #64]	; (800724c <tcp_slowtmr+0x28c>)
 800720a:	5c8a      	ldrb	r2, [r1, r2]
 800720c:	4093      	lsls	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007216:	4293      	cmp	r3, r2
 8007218:	dc1a      	bgt.n	8007250 <tcp_slowtmr+0x290>
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	b21a      	sxth	r2, r3
 800721e:	e019      	b.n	8007254 <tcp_slowtmr+0x294>
 8007220:	200086a0 	.word	0x200086a0
 8007224:	200086b6 	.word	0x200086b6
 8007228:	200086ac 	.word	0x200086ac
 800722c:	08011018 	.word	0x08011018
 8007230:	0801135c 	.word	0x0801135c
 8007234:	0801105c 	.word	0x0801105c
 8007238:	08011388 	.word	0x08011388
 800723c:	080113b4 	.word	0x080113b4
 8007240:	080113e4 	.word	0x080113e4
 8007244:	08011418 	.word	0x08011418
 8007248:	08013ff8 	.word	0x08013ff8
 800724c:	08013fe8 	.word	0x08013fe8
 8007250:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	2200      	movs	r2, #0
 800725e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800726c:	4293      	cmp	r3, r2
 800726e:	bf28      	it	cs
 8007270:	4613      	movcs	r3, r2
 8007272:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007274:	8a7b      	ldrh	r3, [r7, #18]
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	b29b      	uxth	r3, r3
 800728e:	429a      	cmp	r2, r3
 8007290:	d206      	bcs.n	80072a0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80072b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b4:	f004 fd60 	bl	800bd78 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	7d1b      	ldrb	r3, [r3, #20]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d111      	bne.n	80072e4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	8b5b      	ldrh	r3, [r3, #26]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072cc:	4b9c      	ldr	r3, [pc, #624]	; (8007540 <tcp_slowtmr+0x580>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b28      	cmp	r3, #40	; 0x28
 80072d8:	d904      	bls.n	80072e4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80072da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072de:	3301      	adds	r3, #1
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	7a5b      	ldrb	r3, [r3, #9]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d04a      	beq.n	8007386 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d003      	beq.n	8007300 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80072fc:	2b07      	cmp	r3, #7
 80072fe:	d142      	bne.n	8007386 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007300:	4b8f      	ldr	r3, [pc, #572]	; (8007540 <tcp_slowtmr+0x580>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007310:	4b8c      	ldr	r3, [pc, #560]	; (8007544 <tcp_slowtmr+0x584>)
 8007312:	440b      	add	r3, r1
 8007314:	498c      	ldr	r1, [pc, #560]	; (8007548 <tcp_slowtmr+0x588>)
 8007316:	fba1 1303 	umull	r1, r3, r1, r3
 800731a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800731c:	429a      	cmp	r2, r3
 800731e:	d90a      	bls.n	8007336 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007324:	3301      	adds	r3, #1
 8007326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800732a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800732e:	3301      	adds	r3, #1
 8007330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007334:	e027      	b.n	8007386 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007336:	4b82      	ldr	r3, [pc, #520]	; (8007540 <tcp_slowtmr+0x580>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800734c:	4618      	mov	r0, r3
 800734e:	4b7f      	ldr	r3, [pc, #508]	; (800754c <tcp_slowtmr+0x58c>)
 8007350:	fb00 f303 	mul.w	r3, r0, r3
 8007354:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007356:	497c      	ldr	r1, [pc, #496]	; (8007548 <tcp_slowtmr+0x588>)
 8007358:	fba1 1303 	umull	r1, r3, r1, r3
 800735c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800735e:	429a      	cmp	r2, r3
 8007360:	d911      	bls.n	8007386 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007364:	f005 f80e 	bl	800c384 <tcp_keepalive>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800736e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800737c:	3301      	adds	r3, #1
 800737e:	b2da      	uxtb	r2, r3
 8007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007382:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738a:	2b00      	cmp	r3, #0
 800738c:	d011      	beq.n	80073b2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800738e:	4b6c      	ldr	r3, [pc, #432]	; (8007540 <tcp_slowtmr+0x580>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800739e:	4619      	mov	r1, r3
 80073a0:	460b      	mov	r3, r1
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	440b      	add	r3, r1
 80073a6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d302      	bcc.n	80073b2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80073ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ae:	f000 fec9 	bl	8008144 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	7d1b      	ldrb	r3, [r3, #20]
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d10b      	bne.n	80073d2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073ba:	4b61      	ldr	r3, [pc, #388]	; (8007540 <tcp_slowtmr+0x580>)
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b28      	cmp	r3, #40	; 0x28
 80073c6:	d904      	bls.n	80073d2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80073c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073cc:	3301      	adds	r3, #1
 80073ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	7d1b      	ldrb	r3, [r3, #20]
 80073d6:	2b09      	cmp	r3, #9
 80073d8:	d10b      	bne.n	80073f2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80073da:	4b59      	ldr	r3, [pc, #356]	; (8007540 <tcp_slowtmr+0x580>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2bf0      	cmp	r3, #240	; 0xf0
 80073e6:	d904      	bls.n	80073f2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80073e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ec:	3301      	adds	r3, #1
 80073ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80073f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d060      	beq.n	80074bc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007400:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007404:	f000 fcea 	bl	8007ddc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d010      	beq.n	8007430 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800740e:	4b50      	ldr	r3, [pc, #320]	; (8007550 <tcp_slowtmr+0x590>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007414:	429a      	cmp	r2, r3
 8007416:	d106      	bne.n	8007426 <tcp_slowtmr+0x466>
 8007418:	4b4e      	ldr	r3, [pc, #312]	; (8007554 <tcp_slowtmr+0x594>)
 800741a:	f240 526d 	movw	r2, #1389	; 0x56d
 800741e:	494e      	ldr	r1, [pc, #312]	; (8007558 <tcp_slowtmr+0x598>)
 8007420:	484e      	ldr	r0, [pc, #312]	; (800755c <tcp_slowtmr+0x59c>)
 8007422:	f007 fed1 	bl	800f1c8 <iprintf>
        prev->next = pcb->next;
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	e00f      	b.n	8007450 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007430:	4b47      	ldr	r3, [pc, #284]	; (8007550 <tcp_slowtmr+0x590>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007436:	429a      	cmp	r2, r3
 8007438:	d006      	beq.n	8007448 <tcp_slowtmr+0x488>
 800743a:	4b46      	ldr	r3, [pc, #280]	; (8007554 <tcp_slowtmr+0x594>)
 800743c:	f240 5271 	movw	r2, #1393	; 0x571
 8007440:	4947      	ldr	r1, [pc, #284]	; (8007560 <tcp_slowtmr+0x5a0>)
 8007442:	4846      	ldr	r0, [pc, #280]	; (800755c <tcp_slowtmr+0x59c>)
 8007444:	f007 fec0 	bl	800f1c8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	4a40      	ldr	r2, [pc, #256]	; (8007550 <tcp_slowtmr+0x590>)
 800744e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007450:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007454:	2b00      	cmp	r3, #0
 8007456:	d013      	beq.n	8007480 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007460:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	3304      	adds	r3, #4
 8007466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007468:	8ad2      	ldrh	r2, [r2, #22]
 800746a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800746c:	8b09      	ldrh	r1, [r1, #24]
 800746e:	9102      	str	r1, [sp, #8]
 8007470:	9201      	str	r2, [sp, #4]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	462b      	mov	r3, r5
 8007476:	4622      	mov	r2, r4
 8007478:	4601      	mov	r1, r0
 800747a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800747c:	f004 fece 	bl	800c21c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	7d1b      	ldrb	r3, [r3, #20]
 800748a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007496:	6838      	ldr	r0, [r7, #0]
 8007498:	f7ff f83a 	bl	8006510 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800749c:	4b31      	ldr	r3, [pc, #196]	; (8007564 <tcp_slowtmr+0x5a4>)
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <tcp_slowtmr+0x4f2>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f06f 010c 	mvn.w	r1, #12
 80074ae:	68b8      	ldr	r0, [r7, #8]
 80074b0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80074b2:	4b2c      	ldr	r3, [pc, #176]	; (8007564 <tcp_slowtmr+0x5a4>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d037      	beq.n	800752a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80074ba:	e592      	b.n	8006fe2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	7f1b      	ldrb	r3, [r3, #28]
 80074ca:	3301      	adds	r3, #1
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	7f1a      	ldrb	r2, [r3, #28]
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	7f5b      	ldrb	r3, [r3, #29]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d325      	bcc.n	800752a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80074e4:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <tcp_slowtmr+0x5a4>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <tcp_slowtmr+0x54c>
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074fc:	6912      	ldr	r2, [r2, #16]
 80074fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800750a:	e002      	b.n	8007512 <tcp_slowtmr+0x552>
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007512:	4b14      	ldr	r3, [pc, #80]	; (8007564 <tcp_slowtmr+0x5a4>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d000      	beq.n	800751c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800751a:	e562      	b.n	8006fe2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800751c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007526:	f004 f8c5 	bl	800b6b4 <tcp_output>
  while (pcb != NULL) {
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2b00      	cmp	r3, #0
 800752e:	f47f ad5e 	bne.w	8006fee <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007536:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <tcp_slowtmr+0x5a8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800753c:	e069      	b.n	8007612 <tcp_slowtmr+0x652>
 800753e:	bf00      	nop
 8007540:	200086a0 	.word	0x200086a0
 8007544:	000a4cb8 	.word	0x000a4cb8
 8007548:	10624dd3 	.word	0x10624dd3
 800754c:	000124f8 	.word	0x000124f8
 8007550:	200086ac 	.word	0x200086ac
 8007554:	08011018 	.word	0x08011018
 8007558:	08011450 	.word	0x08011450
 800755c:	0801105c 	.word	0x0801105c
 8007560:	0801147c 	.word	0x0801147c
 8007564:	200086b4 	.word	0x200086b4
 8007568:	200086b0 	.word	0x200086b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	7d1b      	ldrb	r3, [r3, #20]
 8007570:	2b0a      	cmp	r3, #10
 8007572:	d006      	beq.n	8007582 <tcp_slowtmr+0x5c2>
 8007574:	4b2b      	ldr	r3, [pc, #172]	; (8007624 <tcp_slowtmr+0x664>)
 8007576:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800757a:	492b      	ldr	r1, [pc, #172]	; (8007628 <tcp_slowtmr+0x668>)
 800757c:	482b      	ldr	r0, [pc, #172]	; (800762c <tcp_slowtmr+0x66c>)
 800757e:	f007 fe23 	bl	800f1c8 <iprintf>
    pcb_remove = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007588:	4b29      	ldr	r3, [pc, #164]	; (8007630 <tcp_slowtmr+0x670>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2bf0      	cmp	r3, #240	; 0xf0
 8007594:	d904      	bls.n	80075a0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800759a:	3301      	adds	r3, #1
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80075a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d02f      	beq.n	8007608 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80075a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075aa:	f000 fc17 	bl	8007ddc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d010      	beq.n	80075d6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80075b4:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <tcp_slowtmr+0x674>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d106      	bne.n	80075cc <tcp_slowtmr+0x60c>
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <tcp_slowtmr+0x664>)
 80075c0:	f240 52af 	movw	r2, #1455	; 0x5af
 80075c4:	491c      	ldr	r1, [pc, #112]	; (8007638 <tcp_slowtmr+0x678>)
 80075c6:	4819      	ldr	r0, [pc, #100]	; (800762c <tcp_slowtmr+0x66c>)
 80075c8:	f007 fdfe 	bl	800f1c8 <iprintf>
        prev->next = pcb->next;
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	60da      	str	r2, [r3, #12]
 80075d4:	e00f      	b.n	80075f6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80075d6:	4b17      	ldr	r3, [pc, #92]	; (8007634 <tcp_slowtmr+0x674>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d006      	beq.n	80075ee <tcp_slowtmr+0x62e>
 80075e0:	4b10      	ldr	r3, [pc, #64]	; (8007624 <tcp_slowtmr+0x664>)
 80075e2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80075e6:	4915      	ldr	r1, [pc, #84]	; (800763c <tcp_slowtmr+0x67c>)
 80075e8:	4810      	ldr	r0, [pc, #64]	; (800762c <tcp_slowtmr+0x66c>)
 80075ea:	f007 fded 	bl	800f1c8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	4a10      	ldr	r2, [pc, #64]	; (8007634 <tcp_slowtmr+0x674>)
 80075f4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007600:	69f8      	ldr	r0, [r7, #28]
 8007602:	f7fe ff85 	bl	8006510 <tcp_free>
 8007606:	e004      	b.n	8007612 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1a9      	bne.n	800756c <tcp_slowtmr+0x5ac>
    }
  }
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	3730      	adds	r7, #48	; 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bdb0      	pop	{r4, r5, r7, pc}
 8007622:	bf00      	nop
 8007624:	08011018 	.word	0x08011018
 8007628:	080114a8 	.word	0x080114a8
 800762c:	0801105c 	.word	0x0801105c
 8007630:	200086a0 	.word	0x200086a0
 8007634:	200086b0 	.word	0x200086b0
 8007638:	080114d8 	.word	0x080114d8
 800763c:	08011500 	.word	0x08011500

08007640 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007646:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <tcp_fasttmr+0xbc>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <tcp_fasttmr+0xbc>)
 8007650:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007652:	4b2b      	ldr	r3, [pc, #172]	; (8007700 <tcp_fasttmr+0xc0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007658:	e048      	b.n	80076ec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7f9a      	ldrb	r2, [r3, #30]
 800765e:	4b27      	ldr	r3, [pc, #156]	; (80076fc <tcp_fasttmr+0xbc>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d03f      	beq.n	80076e6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007666:	4b25      	ldr	r3, [pc, #148]	; (80076fc <tcp_fasttmr+0xbc>)
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8b5b      	ldrh	r3, [r3, #26]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d010      	beq.n	800769c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	8b5b      	ldrh	r3, [r3, #26]
 800767e:	f043 0302 	orr.w	r3, r3, #2
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f004 f813 	bl	800b6b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8b5b      	ldrh	r3, [r3, #26]
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8b5b      	ldrh	r3, [r3, #26]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d009      	beq.n	80076bc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8b5b      	ldrh	r3, [r3, #26]
 80076ac:	f023 0308 	bic.w	r3, r3, #8
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff f8be 	bl	8006838 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80076ca:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <tcp_fasttmr+0xc4>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f819 	bl	8007708 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <tcp_fasttmr+0xc4>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d000      	beq.n	80076e0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80076de:	e7b8      	b.n	8007652 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	607b      	str	r3, [r7, #4]
 80076e4:	e002      	b.n	80076ec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1b3      	bne.n	800765a <tcp_fasttmr+0x1a>
    }
  }
}
 80076f2:	bf00      	nop
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	200086b6 	.word	0x200086b6
 8007700:	200086ac 	.word	0x200086ac
 8007704:	200086b4 	.word	0x200086b4

08007708 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007708:	b590      	push	{r4, r7, lr}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <tcp_process_refused_data+0x22>
 8007716:	4b37      	ldr	r3, [pc, #220]	; (80077f4 <tcp_process_refused_data+0xec>)
 8007718:	f240 6209 	movw	r2, #1545	; 0x609
 800771c:	4936      	ldr	r1, [pc, #216]	; (80077f8 <tcp_process_refused_data+0xf0>)
 800771e:	4837      	ldr	r0, [pc, #220]	; (80077fc <tcp_process_refused_data+0xf4>)
 8007720:	f007 fd52 	bl	800f1c8 <iprintf>
 8007724:	f06f 030f 	mvn.w	r3, #15
 8007728:	e060      	b.n	80077ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800772e:	7b5b      	ldrb	r3, [r3, #13]
 8007730:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007736:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <tcp_process_refused_data+0x58>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6918      	ldr	r0, [r3, #16]
 8007752:	2300      	movs	r3, #0
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	47a0      	blx	r4
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	e007      	b.n	8007770 <tcp_process_refused_data+0x68>
 8007760:	2300      	movs	r3, #0
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	2000      	movs	r0, #0
 8007768:	f000 f8c2 	bl	80078f0 <tcp_recv_null>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d12a      	bne.n	80077ce <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d033      	beq.n	80077ea <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007786:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800778a:	d005      	beq.n	8007798 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007790:	3301      	adds	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00b      	beq.n	80077ba <tcp_process_refused_data+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6918      	ldr	r0, [r3, #16]
 80077ac:	2300      	movs	r3, #0
 80077ae:	2200      	movs	r2, #0
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	47a0      	blx	r4
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
 80077b8:	e001      	b.n	80077be <tcp_process_refused_data+0xb6>
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80077be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c2:	f113 0f0d 	cmn.w	r3, #13
 80077c6:	d110      	bne.n	80077ea <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80077c8:	f06f 030c 	mvn.w	r3, #12
 80077cc:	e00e      	b.n	80077ec <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80077ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077d2:	f113 0f0d 	cmn.w	r3, #13
 80077d6:	d102      	bne.n	80077de <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80077d8:	f06f 030c 	mvn.w	r3, #12
 80077dc:	e006      	b.n	80077ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80077e4:	f06f 0304 	mvn.w	r3, #4
 80077e8:	e000      	b.n	80077ec <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd90      	pop	{r4, r7, pc}
 80077f4:	08011018 	.word	0x08011018
 80077f8:	08011528 	.word	0x08011528
 80077fc:	0801105c 	.word	0x0801105c

08007800 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007808:	e007      	b.n	800781a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f80a 	bl	800782a <tcp_seg_free>
    seg = next;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f4      	bne.n	800780a <tcp_segs_free+0xa>
  }
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00c      	beq.n	8007852 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe fbc3 	bl	8005fd0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	2003      	movs	r0, #3
 800784e:	f7fd fd49 	bl	80052e4 <memp_free>
  }
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d107      	bne.n	800787e <tcp_setprio+0x22>
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <tcp_setprio+0x30>)
 8007870:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007874:	4906      	ldr	r1, [pc, #24]	; (8007890 <tcp_setprio+0x34>)
 8007876:	4807      	ldr	r0, [pc, #28]	; (8007894 <tcp_setprio+0x38>)
 8007878:	f007 fca6 	bl	800f1c8 <iprintf>
 800787c:	e002      	b.n	8007884 <tcp_setprio+0x28>

  pcb->prio = prio;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	755a      	strb	r2, [r3, #21]
}
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	08011018 	.word	0x08011018
 8007890:	08011550 	.word	0x08011550
 8007894:	0801105c 	.word	0x0801105c

08007898 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <tcp_seg_copy+0x1c>
 80078a6:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <tcp_seg_copy+0x4c>)
 80078a8:	f240 6282 	movw	r2, #1666	; 0x682
 80078ac:	490e      	ldr	r1, [pc, #56]	; (80078e8 <tcp_seg_copy+0x50>)
 80078ae:	480f      	ldr	r0, [pc, #60]	; (80078ec <tcp_seg_copy+0x54>)
 80078b0:	f007 fc8a 	bl	800f1c8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80078b4:	2003      	movs	r0, #3
 80078b6:	f7fd fca5 	bl	8005204 <memp_malloc>
 80078ba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <tcp_seg_copy+0x2e>
    return NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e00a      	b.n	80078dc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80078c6:	2210      	movs	r2, #16
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f007 fc66 	bl	800f19c <memcpy>
  pbuf_ref(cseg->p);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fc1b 	bl	8006110 <pbuf_ref>
  return cseg;
 80078da:	68fb      	ldr	r3, [r7, #12]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	08011018 	.word	0x08011018
 80078e8:	0801156c 	.word	0x0801156c
 80078ec:	0801105c 	.word	0x0801105c

080078f0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d109      	bne.n	8007918 <tcp_recv_null+0x28>
 8007904:	4b12      	ldr	r3, [pc, #72]	; (8007950 <tcp_recv_null+0x60>)
 8007906:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800790a:	4912      	ldr	r1, [pc, #72]	; (8007954 <tcp_recv_null+0x64>)
 800790c:	4812      	ldr	r0, [pc, #72]	; (8007958 <tcp_recv_null+0x68>)
 800790e:	f007 fc5b 	bl	800f1c8 <iprintf>
 8007912:	f06f 030f 	mvn.w	r3, #15
 8007916:	e016      	b.n	8007946 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	891b      	ldrh	r3, [r3, #8]
 8007922:	4619      	mov	r1, r3
 8007924:	68b8      	ldr	r0, [r7, #8]
 8007926:	f7ff fab5 	bl	8006e94 <tcp_recved>
    pbuf_free(p);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fe fb50 	bl	8005fd0 <pbuf_free>
 8007930:	e008      	b.n	8007944 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800793a:	68b8      	ldr	r0, [r7, #8]
 800793c:	f7fe ffe6 	bl	800690c <tcp_close>
 8007940:	4603      	mov	r3, r0
 8007942:	e000      	b.n	8007946 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	08011018 	.word	0x08011018
 8007954:	08011588 	.word	0x08011588
 8007958:	0801105c 	.word	0x0801105c

0800795c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	db01      	blt.n	8007972 <tcp_kill_prio+0x16>
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	e000      	b.n	8007974 <tcp_kill_prio+0x18>
 8007972:	237f      	movs	r3, #127	; 0x7f
 8007974:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007976:	7afb      	ldrb	r3, [r7, #11]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d034      	beq.n	80079e6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	3b01      	subs	r3, #1
 8007980:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800798a:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <tcp_kill_prio+0x94>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e01f      	b.n	80079d2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	7d5b      	ldrb	r3, [r3, #21]
 8007996:	7afa      	ldrb	r2, [r7, #11]
 8007998:	429a      	cmp	r2, r3
 800799a:	d80c      	bhi.n	80079b6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80079a0:	7afa      	ldrb	r2, [r7, #11]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d112      	bne.n	80079cc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <tcp_kill_prio+0x98>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d80a      	bhi.n	80079cc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80079b6:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <tcp_kill_prio+0x98>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	7d5b      	ldrb	r3, [r3, #21]
 80079ca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1dc      	bne.n	8007992 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80079de:	6938      	ldr	r0, [r7, #16]
 80079e0:	f7ff f87e 	bl	8006ae0 <tcp_abort>
 80079e4:	e000      	b.n	80079e8 <tcp_kill_prio+0x8c>
    return;
 80079e6:	bf00      	nop
  }
}
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	200086ac 	.word	0x200086ac
 80079f4:	200086a0 	.word	0x200086a0

080079f8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d009      	beq.n	8007a1c <tcp_kill_state+0x24>
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	2b09      	cmp	r3, #9
 8007a0c:	d006      	beq.n	8007a1c <tcp_kill_state+0x24>
 8007a0e:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <tcp_kill_state+0x80>)
 8007a10:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007a14:	4919      	ldr	r1, [pc, #100]	; (8007a7c <tcp_kill_state+0x84>)
 8007a16:	481a      	ldr	r0, [pc, #104]	; (8007a80 <tcp_kill_state+0x88>)
 8007a18:	f007 fbd6 	bl	800f1c8 <iprintf>

  inactivity = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a24:	4b17      	ldr	r3, [pc, #92]	; (8007a84 <tcp_kill_state+0x8c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	e017      	b.n	8007a5c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	7d1b      	ldrb	r3, [r3, #20]
 8007a30:	79fa      	ldrb	r2, [r7, #7]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d10f      	bne.n	8007a56 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <tcp_kill_state+0x90>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d807      	bhi.n	8007a56 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007a46:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <tcp_kill_state+0x90>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e4      	bne.n	8007a2c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007a68:	2100      	movs	r1, #0
 8007a6a:	6938      	ldr	r0, [r7, #16]
 8007a6c:	f7fe ff7a 	bl	8006964 <tcp_abandon>
  }
}
 8007a70:	bf00      	nop
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	08011018 	.word	0x08011018
 8007a7c:	080115a4 	.word	0x080115a4
 8007a80:	0801105c 	.word	0x0801105c
 8007a84:	200086ac 	.word	0x200086ac
 8007a88:	200086a0 	.word	0x200086a0

08007a8c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a9a:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <tcp_kill_timewait+0x58>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e012      	b.n	8007ac8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007aa2:	4b11      	ldr	r3, [pc, #68]	; (8007ae8 <tcp_kill_timewait+0x5c>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d807      	bhi.n	8007ac2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <tcp_kill_timewait+0x5c>)
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e9      	bne.n	8007aa2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007ad4:	68b8      	ldr	r0, [r7, #8]
 8007ad6:	f7ff f803 	bl	8006ae0 <tcp_abort>
  }
}
 8007ada:	bf00      	nop
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200086b0 	.word	0x200086b0
 8007ae8:	200086a0 	.word	0x200086a0

08007aec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007af2:	4b10      	ldr	r3, [pc, #64]	; (8007b34 <tcp_handle_closepend+0x48>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007af8:	e014      	b.n	8007b24 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8b5b      	ldrh	r3, [r3, #26]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d009      	beq.n	8007b20 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8b5b      	ldrh	r3, [r3, #26]
 8007b10:	f023 0308 	bic.w	r3, r3, #8
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fe fe8c 	bl	8006838 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e7      	bne.n	8007afa <tcp_handle_closepend+0xe>
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	200086ac 	.word	0x200086ac

08007b38 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b42:	2001      	movs	r0, #1
 8007b44:	f7fd fb5e 	bl	8005204 <memp_malloc>
 8007b48:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d126      	bne.n	8007b9e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007b50:	f7ff ffcc 	bl	8007aec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007b54:	f7ff ff9a 	bl	8007a8c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b58:	2001      	movs	r0, #1
 8007b5a:	f7fd fb53 	bl	8005204 <memp_malloc>
 8007b5e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d11b      	bne.n	8007b9e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007b66:	2009      	movs	r0, #9
 8007b68:	f7ff ff46 	bl	80079f8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f7fd fb49 	bl	8005204 <memp_malloc>
 8007b72:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d111      	bne.n	8007b9e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007b7a:	2008      	movs	r0, #8
 8007b7c:	f7ff ff3c 	bl	80079f8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b80:	2001      	movs	r0, #1
 8007b82:	f7fd fb3f 	bl	8005204 <memp_malloc>
 8007b86:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d107      	bne.n	8007b9e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fee3 	bl	800795c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b96:	2001      	movs	r0, #1
 8007b98:	f7fd fb34 	bl	8005204 <memp_malloc>
 8007b9c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d03f      	beq.n	8007c24 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007ba4:	229c      	movs	r2, #156	; 0x9c
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f007 fb05 	bl	800f1b8 <memset>
    pcb->prio = prio;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	79fa      	ldrb	r2, [r7, #7]
 8007bb2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007bba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	22ff      	movs	r2, #255	; 0xff
 8007bd2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007bda:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2206      	movs	r2, #6
 8007be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2206      	movs	r2, #6
 8007be8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bf0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <tcp_alloc+0xf8>)
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007c02:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <tcp_alloc+0xfc>)
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007c10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4a08      	ldr	r2, [pc, #32]	; (8007c38 <tcp_alloc+0x100>)
 8007c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <tcp_alloc+0x104>)
 8007c20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007c24:	68fb      	ldr	r3, [r7, #12]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	200086a0 	.word	0x200086a0
 8007c34:	200086b6 	.word	0x200086b6
 8007c38:	080078f1 	.word	0x080078f1
 8007c3c:	006ddd00 	.word	0x006ddd00

08007c40 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8007c4a:	2040      	movs	r0, #64	; 0x40
 8007c4c:	f7ff ff74 	bl	8007b38 <tcp_alloc>
 8007c50:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8007c52:	68fb      	ldr	r3, [r7, #12]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	611a      	str	r2, [r3, #16]
  }
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00e      	beq.n	8007cae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7d1b      	ldrb	r3, [r3, #20]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d106      	bne.n	8007ca6 <tcp_recv+0x26>
 8007c98:	4b07      	ldr	r3, [pc, #28]	; (8007cb8 <tcp_recv+0x38>)
 8007c9a:	f240 72df 	movw	r2, #2015	; 0x7df
 8007c9e:	4907      	ldr	r1, [pc, #28]	; (8007cbc <tcp_recv+0x3c>)
 8007ca0:	4807      	ldr	r0, [pc, #28]	; (8007cc0 <tcp_recv+0x40>)
 8007ca2:	f007 fa91 	bl	800f1c8 <iprintf>
    pcb->recv = recv;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	08011018 	.word	0x08011018
 8007cbc:	080115b4 	.word	0x080115b4
 8007cc0:	0801105c 	.word	0x0801105c

08007cc4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00e      	beq.n	8007cf2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7d1b      	ldrb	r3, [r3, #20]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d106      	bne.n	8007cea <tcp_sent+0x26>
 8007cdc:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <tcp_sent+0x38>)
 8007cde:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007ce2:	4907      	ldr	r1, [pc, #28]	; (8007d00 <tcp_sent+0x3c>)
 8007ce4:	4807      	ldr	r0, [pc, #28]	; (8007d04 <tcp_sent+0x40>)
 8007ce6:	f007 fa6f 	bl	800f1c8 <iprintf>
    pcb->sent = sent;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	08011018 	.word	0x08011018
 8007d00:	080115dc 	.word	0x080115dc
 8007d04:	0801105c 	.word	0x0801105c

08007d08 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7d1b      	ldrb	r3, [r3, #20]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d106      	bne.n	8007d2e <tcp_err+0x26>
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <tcp_err+0x38>)
 8007d22:	f640 020d 	movw	r2, #2061	; 0x80d
 8007d26:	4907      	ldr	r1, [pc, #28]	; (8007d44 <tcp_err+0x3c>)
 8007d28:	4807      	ldr	r0, [pc, #28]	; (8007d48 <tcp_err+0x40>)
 8007d2a:	f007 fa4d 	bl	800f1c8 <iprintf>
    pcb->errf = err;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	08011018 	.word	0x08011018
 8007d44:	08011604 	.word	0x08011604
 8007d48:	0801105c 	.word	0x0801105c

08007d4c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <tcp_accept+0x22>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7d1b      	ldrb	r3, [r3, #20]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d104      	bne.n	8007d6e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	619a      	str	r2, [r3, #24]
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
	...

08007d7c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d107      	bne.n	8007da0 <tcp_poll+0x24>
 8007d90:	4b0e      	ldr	r3, [pc, #56]	; (8007dcc <tcp_poll+0x50>)
 8007d92:	f640 023d 	movw	r2, #2109	; 0x83d
 8007d96:	490e      	ldr	r1, [pc, #56]	; (8007dd0 <tcp_poll+0x54>)
 8007d98:	480e      	ldr	r0, [pc, #56]	; (8007dd4 <tcp_poll+0x58>)
 8007d9a:	f007 fa15 	bl	800f1c8 <iprintf>
 8007d9e:	e011      	b.n	8007dc4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	7d1b      	ldrb	r3, [r3, #20]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d106      	bne.n	8007db6 <tcp_poll+0x3a>
 8007da8:	4b08      	ldr	r3, [pc, #32]	; (8007dcc <tcp_poll+0x50>)
 8007daa:	f640 023e 	movw	r2, #2110	; 0x83e
 8007dae:	490a      	ldr	r1, [pc, #40]	; (8007dd8 <tcp_poll+0x5c>)
 8007db0:	4808      	ldr	r0, [pc, #32]	; (8007dd4 <tcp_poll+0x58>)
 8007db2:	f007 fa09 	bl	800f1c8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	79fa      	ldrb	r2, [r7, #7]
 8007dc2:	775a      	strb	r2, [r3, #29]
}
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	08011018 	.word	0x08011018
 8007dd0:	0801162c 	.word	0x0801162c
 8007dd4:	0801105c 	.word	0x0801105c
 8007dd8:	08011644 	.word	0x08011644

08007ddc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d107      	bne.n	8007dfa <tcp_pcb_purge+0x1e>
 8007dea:	4b21      	ldr	r3, [pc, #132]	; (8007e70 <tcp_pcb_purge+0x94>)
 8007dec:	f640 0251 	movw	r2, #2129	; 0x851
 8007df0:	4920      	ldr	r1, [pc, #128]	; (8007e74 <tcp_pcb_purge+0x98>)
 8007df2:	4821      	ldr	r0, [pc, #132]	; (8007e78 <tcp_pcb_purge+0x9c>)
 8007df4:	f007 f9e8 	bl	800f1c8 <iprintf>
 8007df8:	e037      	b.n	8007e6a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7d1b      	ldrb	r3, [r3, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d033      	beq.n	8007e6a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007e06:	2b0a      	cmp	r3, #10
 8007e08:	d02f      	beq.n	8007e6a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d02b      	beq.n	8007e6a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe f8d6 	bl	8005fd0 <pbuf_free>
      pcb->refused_data = NULL;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f986 	bl	8008144 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e3e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff fcdb 	bl	8007800 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fcd6 	bl	8007800 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	66da      	str	r2, [r3, #108]	; 0x6c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	08011018 	.word	0x08011018
 8007e74:	08011664 	.word	0x08011664
 8007e78:	0801105c 	.word	0x0801105c

08007e7c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <tcp_pcb_remove+0x1e>
 8007e8c:	4b3e      	ldr	r3, [pc, #248]	; (8007f88 <tcp_pcb_remove+0x10c>)
 8007e8e:	f640 0283 	movw	r2, #2179	; 0x883
 8007e92:	493e      	ldr	r1, [pc, #248]	; (8007f8c <tcp_pcb_remove+0x110>)
 8007e94:	483e      	ldr	r0, [pc, #248]	; (8007f90 <tcp_pcb_remove+0x114>)
 8007e96:	f007 f997 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d106      	bne.n	8007eae <tcp_pcb_remove+0x32>
 8007ea0:	4b39      	ldr	r3, [pc, #228]	; (8007f88 <tcp_pcb_remove+0x10c>)
 8007ea2:	f640 0284 	movw	r2, #2180	; 0x884
 8007ea6:	493b      	ldr	r1, [pc, #236]	; (8007f94 <tcp_pcb_remove+0x118>)
 8007ea8:	4839      	ldr	r0, [pc, #228]	; (8007f90 <tcp_pcb_remove+0x114>)
 8007eaa:	f007 f98d 	bl	800f1c8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d105      	bne.n	8007ec4 <tcp_pcb_remove+0x48>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	e013      	b.n	8007eec <tcp_pcb_remove+0x70>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e00c      	b.n	8007ee6 <tcp_pcb_remove+0x6a>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d104      	bne.n	8007ee0 <tcp_pcb_remove+0x64>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	60da      	str	r2, [r3, #12]
 8007ede:	e005      	b.n	8007eec <tcp_pcb_remove+0x70>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1ef      	bne.n	8007ecc <tcp_pcb_remove+0x50>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007ef2:	6838      	ldr	r0, [r7, #0]
 8007ef4:	f7ff ff72 	bl	8007ddc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	7d1b      	ldrb	r3, [r3, #20]
 8007efc:	2b0a      	cmp	r3, #10
 8007efe:	d013      	beq.n	8007f28 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d00f      	beq.n	8007f28 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	8b5b      	ldrh	r3, [r3, #26]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	8b5b      	ldrh	r3, [r3, #26]
 8007f18:	f043 0302 	orr.w	r3, r3, #2
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007f22:	6838      	ldr	r0, [r7, #0]
 8007f24:	f003 fbc6 	bl	800b6b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	7d1b      	ldrb	r3, [r3, #20]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d020      	beq.n	8007f72 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d006      	beq.n	8007f46 <tcp_pcb_remove+0xca>
 8007f38:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <tcp_pcb_remove+0x10c>)
 8007f3a:	f640 0293 	movw	r2, #2195	; 0x893
 8007f3e:	4916      	ldr	r1, [pc, #88]	; (8007f98 <tcp_pcb_remove+0x11c>)
 8007f40:	4813      	ldr	r0, [pc, #76]	; (8007f90 <tcp_pcb_remove+0x114>)
 8007f42:	f007 f941 	bl	800f1c8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d006      	beq.n	8007f5c <tcp_pcb_remove+0xe0>
 8007f4e:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <tcp_pcb_remove+0x10c>)
 8007f50:	f640 0294 	movw	r2, #2196	; 0x894
 8007f54:	4911      	ldr	r1, [pc, #68]	; (8007f9c <tcp_pcb_remove+0x120>)
 8007f56:	480e      	ldr	r0, [pc, #56]	; (8007f90 <tcp_pcb_remove+0x114>)
 8007f58:	f007 f936 	bl	800f1c8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <tcp_pcb_remove+0xf6>
 8007f64:	4b08      	ldr	r3, [pc, #32]	; (8007f88 <tcp_pcb_remove+0x10c>)
 8007f66:	f640 0296 	movw	r2, #2198	; 0x896
 8007f6a:	490d      	ldr	r1, [pc, #52]	; (8007fa0 <tcp_pcb_remove+0x124>)
 8007f6c:	4808      	ldr	r0, [pc, #32]	; (8007f90 <tcp_pcb_remove+0x114>)
 8007f6e:	f007 f92b 	bl	800f1c8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2200      	movs	r2, #0
 8007f76:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	08011018 	.word	0x08011018
 8007f8c:	08011680 	.word	0x08011680
 8007f90:	0801105c 	.word	0x0801105c
 8007f94:	0801169c 	.word	0x0801169c
 8007f98:	080116bc 	.word	0x080116bc
 8007f9c:	080116d4 	.word	0x080116d4
 8007fa0:	080116f0 	.word	0x080116f0

08007fa4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <tcp_next_iss+0x1c>
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <tcp_next_iss+0x38>)
 8007fb4:	f640 02af 	movw	r2, #2223	; 0x8af
 8007fb8:	4909      	ldr	r1, [pc, #36]	; (8007fe0 <tcp_next_iss+0x3c>)
 8007fba:	480a      	ldr	r0, [pc, #40]	; (8007fe4 <tcp_next_iss+0x40>)
 8007fbc:	f007 f904 	bl	800f1c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <tcp_next_iss+0x44>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	4b09      	ldr	r3, [pc, #36]	; (8007fec <tcp_next_iss+0x48>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4413      	add	r3, r2
 8007fca:	4a07      	ldr	r2, [pc, #28]	; (8007fe8 <tcp_next_iss+0x44>)
 8007fcc:	6013      	str	r3, [r2, #0]
  return iss;
 8007fce:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <tcp_next_iss+0x44>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	08011018 	.word	0x08011018
 8007fe0:	08011708 	.word	0x08011708
 8007fe4:	0801105c 	.word	0x0801105c
 8007fe8:	20000024 	.word	0x20000024
 8007fec:	200086a0 	.word	0x200086a0

08007ff0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d106      	bne.n	8008012 <tcp_eff_send_mss_netif+0x22>
 8008004:	4b14      	ldr	r3, [pc, #80]	; (8008058 <tcp_eff_send_mss_netif+0x68>)
 8008006:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800800a:	4914      	ldr	r1, [pc, #80]	; (800805c <tcp_eff_send_mss_netif+0x6c>)
 800800c:	4814      	ldr	r0, [pc, #80]	; (8008060 <tcp_eff_send_mss_netif+0x70>)
 800800e:	f007 f8db 	bl	800f1c8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	e019      	b.n	8008050 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008020:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008022:	8afb      	ldrh	r3, [r7, #22]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d012      	beq.n	800804e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008028:	2328      	movs	r3, #40	; 0x28
 800802a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800802c:	8afa      	ldrh	r2, [r7, #22]
 800802e:	8abb      	ldrh	r3, [r7, #20]
 8008030:	429a      	cmp	r2, r3
 8008032:	d904      	bls.n	800803e <tcp_eff_send_mss_netif+0x4e>
 8008034:	8afa      	ldrh	r2, [r7, #22]
 8008036:	8abb      	ldrh	r3, [r7, #20]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	b29b      	uxth	r3, r3
 800803c:	e000      	b.n	8008040 <tcp_eff_send_mss_netif+0x50>
 800803e:	2300      	movs	r3, #0
 8008040:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008042:	8a7a      	ldrh	r2, [r7, #18]
 8008044:	89fb      	ldrh	r3, [r7, #14]
 8008046:	4293      	cmp	r3, r2
 8008048:	bf28      	it	cs
 800804a:	4613      	movcs	r3, r2
 800804c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800804e:	89fb      	ldrh	r3, [r7, #14]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	08011018 	.word	0x08011018
 800805c:	08011724 	.word	0x08011724
 8008060:	0801105c 	.word	0x0801105c

08008064 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d119      	bne.n	80080ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008078:	4b10      	ldr	r3, [pc, #64]	; (80080bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800807a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800807e:	4910      	ldr	r1, [pc, #64]	; (80080c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008080:	4810      	ldr	r0, [pc, #64]	; (80080c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008082:	f007 f8a1 	bl	800f1c8 <iprintf>

  while (pcb != NULL) {
 8008086:	e011      	b.n	80080ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	d108      	bne.n	80080a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7fe fd20 	bl	8006ae0 <tcp_abort>
      pcb = next;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	e002      	b.n	80080ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1ea      	bne.n	8008088 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	08011018 	.word	0x08011018
 80080c0:	0801174c 	.word	0x0801174c
 80080c4:	0801105c 	.word	0x0801105c

080080c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d02a      	beq.n	800812e <tcp_netif_ip_addr_changed+0x66>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d026      	beq.n	800812e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80080e0:	4b15      	ldr	r3, [pc, #84]	; (8008138 <tcp_netif_ip_addr_changed+0x70>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff ffbc 	bl	8008064 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80080ec:	4b13      	ldr	r3, [pc, #76]	; (800813c <tcp_netif_ip_addr_changed+0x74>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff ffb6 	bl	8008064 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d017      	beq.n	800812e <tcp_netif_ip_addr_changed+0x66>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d013      	beq.n	800812e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008106:	4b0e      	ldr	r3, [pc, #56]	; (8008140 <tcp_netif_ip_addr_changed+0x78>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	e00c      	b.n	8008128 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d103      	bne.n	8008122 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1ef      	bne.n	800810e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200086ac 	.word	0x200086ac
 800813c:	200086a4 	.word	0x200086a4
 8008140:	200086a8 	.word	0x200086a8

08008144 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fb51 	bl	8007800 <tcp_segs_free>
    pcb->ooseq = NULL;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b08d      	sub	sp, #52	; 0x34
 8008170:	af04      	add	r7, sp, #16
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d105      	bne.n	8008188 <tcp_input+0x1c>
 800817c:	4b9b      	ldr	r3, [pc, #620]	; (80083ec <tcp_input+0x280>)
 800817e:	2283      	movs	r2, #131	; 0x83
 8008180:	499b      	ldr	r1, [pc, #620]	; (80083f0 <tcp_input+0x284>)
 8008182:	489c      	ldr	r0, [pc, #624]	; (80083f4 <tcp_input+0x288>)
 8008184:	f007 f820 	bl	800f1c8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a9a      	ldr	r2, [pc, #616]	; (80083f8 <tcp_input+0x28c>)
 800818e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	895b      	ldrh	r3, [r3, #10]
 8008194:	2b13      	cmp	r3, #19
 8008196:	f240 83d1 	bls.w	800893c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800819a:	4b98      	ldr	r3, [pc, #608]	; (80083fc <tcp_input+0x290>)
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	4a97      	ldr	r2, [pc, #604]	; (80083fc <tcp_input+0x290>)
 80081a0:	6812      	ldr	r2, [r2, #0]
 80081a2:	4611      	mov	r1, r2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f006 f86f 	bl	800e288 <ip4_addr_isbroadcast_u32>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f040 83c7 	bne.w	8008940 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80081b2:	4b92      	ldr	r3, [pc, #584]	; (80083fc <tcp_input+0x290>)
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80081ba:	2be0      	cmp	r3, #224	; 0xe0
 80081bc:	f000 83c0 	beq.w	8008940 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80081c0:	4b8d      	ldr	r3, [pc, #564]	; (80083f8 <tcp_input+0x28c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	899b      	ldrh	r3, [r3, #12]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fc fb6d 	bl	80048a8 <lwip_htons>
 80081ce:	4603      	mov	r3, r0
 80081d0:	0b1b      	lsrs	r3, r3, #12
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80081da:	7cbb      	ldrb	r3, [r7, #18]
 80081dc:	2b13      	cmp	r3, #19
 80081de:	f240 83b1 	bls.w	8008944 <tcp_input+0x7d8>
 80081e2:	7cbb      	ldrb	r3, [r7, #18]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	891b      	ldrh	r3, [r3, #8]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	f200 83aa 	bhi.w	8008944 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80081f0:	7cbb      	ldrb	r3, [r7, #18]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b14      	subs	r3, #20
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	4b81      	ldr	r3, [pc, #516]	; (8008400 <tcp_input+0x294>)
 80081fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80081fc:	4b81      	ldr	r3, [pc, #516]	; (8008404 <tcp_input+0x298>)
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	895a      	ldrh	r2, [r3, #10]
 8008206:	7cbb      	ldrb	r3, [r7, #18]
 8008208:	b29b      	uxth	r3, r3
 800820a:	429a      	cmp	r2, r3
 800820c:	d309      	bcc.n	8008222 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800820e:	4b7c      	ldr	r3, [pc, #496]	; (8008400 <tcp_input+0x294>)
 8008210:	881a      	ldrh	r2, [r3, #0]
 8008212:	4b7d      	ldr	r3, [pc, #500]	; (8008408 <tcp_input+0x29c>)
 8008214:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008216:	7cbb      	ldrb	r3, [r7, #18]
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fd fe52 	bl	8005ec4 <pbuf_remove_header>
 8008220:	e04e      	b.n	80082c0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <tcp_input+0xca>
 800822a:	4b70      	ldr	r3, [pc, #448]	; (80083ec <tcp_input+0x280>)
 800822c:	22c2      	movs	r2, #194	; 0xc2
 800822e:	4977      	ldr	r1, [pc, #476]	; (800840c <tcp_input+0x2a0>)
 8008230:	4870      	ldr	r0, [pc, #448]	; (80083f4 <tcp_input+0x288>)
 8008232:	f006 ffc9 	bl	800f1c8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008236:	2114      	movs	r1, #20
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7fd fe43 	bl	8005ec4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	895a      	ldrh	r2, [r3, #10]
 8008242:	4b71      	ldr	r3, [pc, #452]	; (8008408 <tcp_input+0x29c>)
 8008244:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008246:	4b6e      	ldr	r3, [pc, #440]	; (8008400 <tcp_input+0x294>)
 8008248:	881a      	ldrh	r2, [r3, #0]
 800824a:	4b6f      	ldr	r3, [pc, #444]	; (8008408 <tcp_input+0x29c>)
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008252:	4b6d      	ldr	r3, [pc, #436]	; (8008408 <tcp_input+0x29c>)
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7fd fe33 	bl	8005ec4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	895b      	ldrh	r3, [r3, #10]
 8008264:	8a3a      	ldrh	r2, [r7, #16]
 8008266:	429a      	cmp	r2, r3
 8008268:	f200 836e 	bhi.w	8008948 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	4a64      	ldr	r2, [pc, #400]	; (8008404 <tcp_input+0x298>)
 8008274:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	8a3a      	ldrh	r2, [r7, #16]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7fd fe20 	bl	8005ec4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	891a      	ldrh	r2, [r3, #8]
 8008288:	8a3b      	ldrh	r3, [r7, #16]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	b29a      	uxth	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	895b      	ldrh	r3, [r3, #10]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <tcp_input+0x13a>
 800829a:	4b54      	ldr	r3, [pc, #336]	; (80083ec <tcp_input+0x280>)
 800829c:	22df      	movs	r2, #223	; 0xdf
 800829e:	495c      	ldr	r1, [pc, #368]	; (8008410 <tcp_input+0x2a4>)
 80082a0:	4854      	ldr	r0, [pc, #336]	; (80083f4 <tcp_input+0x288>)
 80082a2:	f006 ff91 	bl	800f1c8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	891a      	ldrh	r2, [r3, #8]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	891b      	ldrh	r3, [r3, #8]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d005      	beq.n	80082c0 <tcp_input+0x154>
 80082b4:	4b4d      	ldr	r3, [pc, #308]	; (80083ec <tcp_input+0x280>)
 80082b6:	22e0      	movs	r2, #224	; 0xe0
 80082b8:	4956      	ldr	r1, [pc, #344]	; (8008414 <tcp_input+0x2a8>)
 80082ba:	484e      	ldr	r0, [pc, #312]	; (80083f4 <tcp_input+0x288>)
 80082bc:	f006 ff84 	bl	800f1c8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80082c0:	4b4d      	ldr	r3, [pc, #308]	; (80083f8 <tcp_input+0x28c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	4a4b      	ldr	r2, [pc, #300]	; (80083f8 <tcp_input+0x28c>)
 80082ca:	6814      	ldr	r4, [r2, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fc faeb 	bl	80048a8 <lwip_htons>
 80082d2:	4603      	mov	r3, r0
 80082d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80082d6:	4b48      	ldr	r3, [pc, #288]	; (80083f8 <tcp_input+0x28c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	885b      	ldrh	r3, [r3, #2]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	4a46      	ldr	r2, [pc, #280]	; (80083f8 <tcp_input+0x28c>)
 80082e0:	6814      	ldr	r4, [r2, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fc fae0 	bl	80048a8 <lwip_htons>
 80082e8:	4603      	mov	r3, r0
 80082ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80082ec:	4b42      	ldr	r3, [pc, #264]	; (80083f8 <tcp_input+0x28c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	4a41      	ldr	r2, [pc, #260]	; (80083f8 <tcp_input+0x28c>)
 80082f4:	6814      	ldr	r4, [r2, #0]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fc faeb 	bl	80048d2 <lwip_htonl>
 80082fc:	4603      	mov	r3, r0
 80082fe:	6063      	str	r3, [r4, #4]
 8008300:	6863      	ldr	r3, [r4, #4]
 8008302:	4a45      	ldr	r2, [pc, #276]	; (8008418 <tcp_input+0x2ac>)
 8008304:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008306:	4b3c      	ldr	r3, [pc, #240]	; (80083f8 <tcp_input+0x28c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	4a3a      	ldr	r2, [pc, #232]	; (80083f8 <tcp_input+0x28c>)
 800830e:	6814      	ldr	r4, [r2, #0]
 8008310:	4618      	mov	r0, r3
 8008312:	f7fc fade 	bl	80048d2 <lwip_htonl>
 8008316:	4603      	mov	r3, r0
 8008318:	60a3      	str	r3, [r4, #8]
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	4a3f      	ldr	r2, [pc, #252]	; (800841c <tcp_input+0x2b0>)
 800831e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008320:	4b35      	ldr	r3, [pc, #212]	; (80083f8 <tcp_input+0x28c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	89db      	ldrh	r3, [r3, #14]
 8008326:	b29b      	uxth	r3, r3
 8008328:	4a33      	ldr	r2, [pc, #204]	; (80083f8 <tcp_input+0x28c>)
 800832a:	6814      	ldr	r4, [r2, #0]
 800832c:	4618      	mov	r0, r3
 800832e:	f7fc fabb 	bl	80048a8 <lwip_htons>
 8008332:	4603      	mov	r3, r0
 8008334:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008336:	4b30      	ldr	r3, [pc, #192]	; (80083f8 <tcp_input+0x28c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	899b      	ldrh	r3, [r3, #12]
 800833c:	b29b      	uxth	r3, r3
 800833e:	4618      	mov	r0, r3
 8008340:	f7fc fab2 	bl	80048a8 <lwip_htons>
 8008344:	4603      	mov	r3, r0
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800834c:	b2da      	uxtb	r2, r3
 800834e:	4b34      	ldr	r3, [pc, #208]	; (8008420 <tcp_input+0x2b4>)
 8008350:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	891a      	ldrh	r2, [r3, #8]
 8008356:	4b33      	ldr	r3, [pc, #204]	; (8008424 <tcp_input+0x2b8>)
 8008358:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800835a:	4b31      	ldr	r3, [pc, #196]	; (8008420 <tcp_input+0x2b4>)
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00c      	beq.n	8008380 <tcp_input+0x214>
    tcplen++;
 8008366:	4b2f      	ldr	r3, [pc, #188]	; (8008424 <tcp_input+0x2b8>)
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	3301      	adds	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	4b2d      	ldr	r3, [pc, #180]	; (8008424 <tcp_input+0x2b8>)
 8008370:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	891a      	ldrh	r2, [r3, #8]
 8008376:	4b2b      	ldr	r3, [pc, #172]	; (8008424 <tcp_input+0x2b8>)
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	f200 82e6 	bhi.w	800894c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008384:	4b28      	ldr	r3, [pc, #160]	; (8008428 <tcp_input+0x2bc>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	61fb      	str	r3, [r7, #28]
 800838a:	e09d      	b.n	80084c8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	7d1b      	ldrb	r3, [r3, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <tcp_input+0x234>
 8008394:	4b15      	ldr	r3, [pc, #84]	; (80083ec <tcp_input+0x280>)
 8008396:	22fb      	movs	r2, #251	; 0xfb
 8008398:	4924      	ldr	r1, [pc, #144]	; (800842c <tcp_input+0x2c0>)
 800839a:	4816      	ldr	r0, [pc, #88]	; (80083f4 <tcp_input+0x288>)
 800839c:	f006 ff14 	bl	800f1c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	7d1b      	ldrb	r3, [r3, #20]
 80083a4:	2b0a      	cmp	r3, #10
 80083a6:	d105      	bne.n	80083b4 <tcp_input+0x248>
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <tcp_input+0x280>)
 80083aa:	22fc      	movs	r2, #252	; 0xfc
 80083ac:	4920      	ldr	r1, [pc, #128]	; (8008430 <tcp_input+0x2c4>)
 80083ae:	4811      	ldr	r0, [pc, #68]	; (80083f4 <tcp_input+0x288>)
 80083b0:	f006 ff0a 	bl	800f1c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	7d1b      	ldrb	r3, [r3, #20]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d105      	bne.n	80083c8 <tcp_input+0x25c>
 80083bc:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <tcp_input+0x280>)
 80083be:	22fd      	movs	r2, #253	; 0xfd
 80083c0:	491c      	ldr	r1, [pc, #112]	; (8008434 <tcp_input+0x2c8>)
 80083c2:	480c      	ldr	r0, [pc, #48]	; (80083f4 <tcp_input+0x288>)
 80083c4:	f006 ff00 	bl	800f1c8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	7a1b      	ldrb	r3, [r3, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d033      	beq.n	8008438 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	7a1a      	ldrb	r2, [r3, #8]
 80083d4:	4b09      	ldr	r3, [pc, #36]	; (80083fc <tcp_input+0x290>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083dc:	3301      	adds	r3, #1
 80083de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d029      	beq.n	8008438 <tcp_input+0x2cc>
      prev = pcb;
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	61bb      	str	r3, [r7, #24]
      continue;
 80083e8:	e06b      	b.n	80084c2 <tcp_input+0x356>
 80083ea:	bf00      	nop
 80083ec:	08011780 	.word	0x08011780
 80083f0:	080117b4 	.word	0x080117b4
 80083f4:	080117cc 	.word	0x080117cc
 80083f8:	200086c8 	.word	0x200086c8
 80083fc:	20005130 	.word	0x20005130
 8008400:	200086cc 	.word	0x200086cc
 8008404:	200086d0 	.word	0x200086d0
 8008408:	200086ce 	.word	0x200086ce
 800840c:	080117f4 	.word	0x080117f4
 8008410:	08011804 	.word	0x08011804
 8008414:	08011810 	.word	0x08011810
 8008418:	200086d8 	.word	0x200086d8
 800841c:	200086dc 	.word	0x200086dc
 8008420:	200086e4 	.word	0x200086e4
 8008424:	200086e2 	.word	0x200086e2
 8008428:	200086ac 	.word	0x200086ac
 800842c:	08011830 	.word	0x08011830
 8008430:	08011858 	.word	0x08011858
 8008434:	08011884 	.word	0x08011884
    }

    if (pcb->remote_port == tcphdr->src &&
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	8b1a      	ldrh	r2, [r3, #24]
 800843c:	4b72      	ldr	r3, [pc, #456]	; (8008608 <tcp_input+0x49c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	429a      	cmp	r2, r3
 8008446:	d13a      	bne.n	80084be <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	8ada      	ldrh	r2, [r3, #22]
 800844c:	4b6e      	ldr	r3, [pc, #440]	; (8008608 <tcp_input+0x49c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008454:	429a      	cmp	r2, r3
 8008456:	d132      	bne.n	80084be <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	4b6b      	ldr	r3, [pc, #428]	; (800860c <tcp_input+0x4a0>)
 800845e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008460:	429a      	cmp	r2, r3
 8008462:	d12c      	bne.n	80084be <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	4b68      	ldr	r3, [pc, #416]	; (800860c <tcp_input+0x4a0>)
 800846a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800846c:	429a      	cmp	r2, r3
 800846e:	d126      	bne.n	80084be <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	69fa      	ldr	r2, [r7, #28]
 8008476:	429a      	cmp	r2, r3
 8008478:	d106      	bne.n	8008488 <tcp_input+0x31c>
 800847a:	4b65      	ldr	r3, [pc, #404]	; (8008610 <tcp_input+0x4a4>)
 800847c:	f240 120d 	movw	r2, #269	; 0x10d
 8008480:	4964      	ldr	r1, [pc, #400]	; (8008614 <tcp_input+0x4a8>)
 8008482:	4865      	ldr	r0, [pc, #404]	; (8008618 <tcp_input+0x4ac>)
 8008484:	f006 fea0 	bl	800f1c8 <iprintf>
      if (prev != NULL) {
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <tcp_input+0x338>
        prev->next = pcb->next;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008496:	4b61      	ldr	r3, [pc, #388]	; (800861c <tcp_input+0x4b0>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800849e:	4a5f      	ldr	r2, [pc, #380]	; (800861c <tcp_input+0x4b0>)
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d111      	bne.n	80084d2 <tcp_input+0x366>
 80084ae:	4b58      	ldr	r3, [pc, #352]	; (8008610 <tcp_input+0x4a4>)
 80084b0:	f240 1215 	movw	r2, #277	; 0x115
 80084b4:	495a      	ldr	r1, [pc, #360]	; (8008620 <tcp_input+0x4b4>)
 80084b6:	4858      	ldr	r0, [pc, #352]	; (8008618 <tcp_input+0x4ac>)
 80084b8:	f006 fe86 	bl	800f1c8 <iprintf>
      break;
 80084bc:	e009      	b.n	80084d2 <tcp_input+0x366>
    }
    prev = pcb;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	61fb      	str	r3, [r7, #28]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f47f af5e 	bne.w	800838c <tcp_input+0x220>
 80084d0:	e000      	b.n	80084d4 <tcp_input+0x368>
      break;
 80084d2:	bf00      	nop
  }

  if (pcb == NULL) {
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 80aa 	bne.w	8008630 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80084dc:	4b51      	ldr	r3, [pc, #324]	; (8008624 <tcp_input+0x4b8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	e03f      	b.n	8008564 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	7d1b      	ldrb	r3, [r3, #20]
 80084e8:	2b0a      	cmp	r3, #10
 80084ea:	d006      	beq.n	80084fa <tcp_input+0x38e>
 80084ec:	4b48      	ldr	r3, [pc, #288]	; (8008610 <tcp_input+0x4a4>)
 80084ee:	f240 121f 	movw	r2, #287	; 0x11f
 80084f2:	494d      	ldr	r1, [pc, #308]	; (8008628 <tcp_input+0x4bc>)
 80084f4:	4848      	ldr	r0, [pc, #288]	; (8008618 <tcp_input+0x4ac>)
 80084f6:	f006 fe67 	bl	800f1c8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	7a1b      	ldrb	r3, [r3, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	7a1a      	ldrb	r2, [r3, #8]
 8008506:	4b41      	ldr	r3, [pc, #260]	; (800860c <tcp_input+0x4a0>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800850e:	3301      	adds	r3, #1
 8008510:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008512:	429a      	cmp	r2, r3
 8008514:	d122      	bne.n	800855c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	8b1a      	ldrh	r2, [r3, #24]
 800851a:	4b3b      	ldr	r3, [pc, #236]	; (8008608 <tcp_input+0x49c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	b29b      	uxth	r3, r3
 8008522:	429a      	cmp	r2, r3
 8008524:	d11b      	bne.n	800855e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	8ada      	ldrh	r2, [r3, #22]
 800852a:	4b37      	ldr	r3, [pc, #220]	; (8008608 <tcp_input+0x49c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	885b      	ldrh	r3, [r3, #2]
 8008530:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008532:	429a      	cmp	r2, r3
 8008534:	d113      	bne.n	800855e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	4b34      	ldr	r3, [pc, #208]	; (800860c <tcp_input+0x4a0>)
 800853c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800853e:	429a      	cmp	r2, r3
 8008540:	d10d      	bne.n	800855e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	4b31      	ldr	r3, [pc, #196]	; (800860c <tcp_input+0x4a0>)
 8008548:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800854a:	429a      	cmp	r2, r3
 800854c:	d107      	bne.n	800855e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800854e:	69f8      	ldr	r0, [r7, #28]
 8008550:	f000 fb56 	bl	8008c00 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7fd fd3b 	bl	8005fd0 <pbuf_free>
        return;
 800855a:	e1fd      	b.n	8008958 <tcp_input+0x7ec>
        continue;
 800855c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1bc      	bne.n	80084e4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800856e:	4b2f      	ldr	r3, [pc, #188]	; (800862c <tcp_input+0x4c0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e02a      	b.n	80085cc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	7a1b      	ldrb	r3, [r3, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00c      	beq.n	8008598 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	7a1a      	ldrb	r2, [r3, #8]
 8008582:	4b22      	ldr	r3, [pc, #136]	; (800860c <tcp_input+0x4a0>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800858a:	3301      	adds	r3, #1
 800858c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800858e:	429a      	cmp	r2, r3
 8008590:	d002      	beq.n	8008598 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	61bb      	str	r3, [r7, #24]
        continue;
 8008596:	e016      	b.n	80085c6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	8ada      	ldrh	r2, [r3, #22]
 800859c:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <tcp_input+0x49c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	885b      	ldrh	r3, [r3, #2]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d10c      	bne.n	80085c2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	4b17      	ldr	r3, [pc, #92]	; (800860c <tcp_input+0x4a0>)
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d00f      	beq.n	80085d4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00d      	beq.n	80085d6 <tcp_input+0x46a>
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1d1      	bne.n	8008576 <tcp_input+0x40a>
 80085d2:	e000      	b.n	80085d6 <tcp_input+0x46a>
            break;
 80085d4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d029      	beq.n	8008630 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80085ea:	4b10      	ldr	r3, [pc, #64]	; (800862c <tcp_input+0x4c0>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80085f2:	4a0e      	ldr	r2, [pc, #56]	; (800862c <tcp_input+0x4c0>)
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80085f8:	6978      	ldr	r0, [r7, #20]
 80085fa:	f000 fa03 	bl	8008a04 <tcp_listen_input>
      }
      pbuf_free(p);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fd fce6 	bl	8005fd0 <pbuf_free>
      return;
 8008604:	e1a8      	b.n	8008958 <tcp_input+0x7ec>
 8008606:	bf00      	nop
 8008608:	200086c8 	.word	0x200086c8
 800860c:	20005130 	.word	0x20005130
 8008610:	08011780 	.word	0x08011780
 8008614:	080118ac 	.word	0x080118ac
 8008618:	080117cc 	.word	0x080117cc
 800861c:	200086ac 	.word	0x200086ac
 8008620:	080118d8 	.word	0x080118d8
 8008624:	200086b0 	.word	0x200086b0
 8008628:	08011904 	.word	0x08011904
 800862c:	200086a8 	.word	0x200086a8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 8158 	beq.w	80088e8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008638:	4b95      	ldr	r3, [pc, #596]	; (8008890 <tcp_input+0x724>)
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	891a      	ldrh	r2, [r3, #8]
 8008642:	4b93      	ldr	r3, [pc, #588]	; (8008890 <tcp_input+0x724>)
 8008644:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008646:	4a92      	ldr	r2, [pc, #584]	; (8008890 <tcp_input+0x724>)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800864c:	4b91      	ldr	r3, [pc, #580]	; (8008894 <tcp_input+0x728>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a8f      	ldr	r2, [pc, #572]	; (8008890 <tcp_input+0x724>)
 8008652:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008654:	4b90      	ldr	r3, [pc, #576]	; (8008898 <tcp_input+0x72c>)
 8008656:	2200      	movs	r2, #0
 8008658:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800865a:	4b90      	ldr	r3, [pc, #576]	; (800889c <tcp_input+0x730>)
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008660:	4b8f      	ldr	r3, [pc, #572]	; (80088a0 <tcp_input+0x734>)
 8008662:	2200      	movs	r2, #0
 8008664:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008666:	4b8f      	ldr	r3, [pc, #572]	; (80088a4 <tcp_input+0x738>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	f003 0308 	and.w	r3, r3, #8
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7b5b      	ldrb	r3, [r3, #13]
 8008676:	f043 0301 	orr.w	r3, r3, #1
 800867a:	b2da      	uxtb	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008684:	2b00      	cmp	r3, #0
 8008686:	d017      	beq.n	80086b8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008688:	69f8      	ldr	r0, [r7, #28]
 800868a:	f7ff f83d 	bl	8007708 <tcp_process_refused_data>
 800868e:	4603      	mov	r3, r0
 8008690:	f113 0f0d 	cmn.w	r3, #13
 8008694:	d007      	beq.n	80086a6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00c      	beq.n	80086b8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800869e:	4b82      	ldr	r3, [pc, #520]	; (80088a8 <tcp_input+0x73c>)
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f040 80e3 	bne.w	8008876 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80086b0:	69f8      	ldr	r0, [r7, #28]
 80086b2:	f003 fe05 	bl	800c2c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80086b6:	e0de      	b.n	8008876 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80086b8:	4a7c      	ldr	r2, [pc, #496]	; (80088ac <tcp_input+0x740>)
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80086be:	69f8      	ldr	r0, [r7, #28]
 80086c0:	f000 fb18 	bl	8008cf4 <tcp_process>
 80086c4:	4603      	mov	r3, r0
 80086c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80086c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086cc:	f113 0f0d 	cmn.w	r3, #13
 80086d0:	f000 80d3 	beq.w	800887a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80086d4:	4b71      	ldr	r3, [pc, #452]	; (800889c <tcp_input+0x730>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d015      	beq.n	800870c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <tcp_input+0x590>
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f0:	69fa      	ldr	r2, [r7, #28]
 80086f2:	6912      	ldr	r2, [r2, #16]
 80086f4:	f06f 010d 	mvn.w	r1, #13
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80086fc:	69f9      	ldr	r1, [r7, #28]
 80086fe:	486c      	ldr	r0, [pc, #432]	; (80088b0 <tcp_input+0x744>)
 8008700:	f7ff fbbc 	bl	8007e7c <tcp_pcb_remove>
        tcp_free(pcb);
 8008704:	69f8      	ldr	r0, [r7, #28]
 8008706:	f7fd ff03 	bl	8006510 <tcp_free>
 800870a:	e0da      	b.n	80088c2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008710:	4b63      	ldr	r3, [pc, #396]	; (80088a0 <tcp_input+0x734>)
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01d      	beq.n	8008754 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008718:	4b61      	ldr	r3, [pc, #388]	; (80088a0 <tcp_input+0x734>)
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <tcp_input+0x5d2>
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	6910      	ldr	r0, [r2, #16]
 8008732:	89fa      	ldrh	r2, [r7, #14]
 8008734:	69f9      	ldr	r1, [r7, #28]
 8008736:	4798      	blx	r3
 8008738:	4603      	mov	r3, r0
 800873a:	74fb      	strb	r3, [r7, #19]
 800873c:	e001      	b.n	8008742 <tcp_input+0x5d6>
 800873e:	2300      	movs	r3, #0
 8008740:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008742:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008746:	f113 0f0d 	cmn.w	r3, #13
 800874a:	f000 8098 	beq.w	800887e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800874e:	4b54      	ldr	r3, [pc, #336]	; (80088a0 <tcp_input+0x734>)
 8008750:	2200      	movs	r2, #0
 8008752:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008754:	69f8      	ldr	r0, [r7, #28]
 8008756:	f000 f915 	bl	8008984 <tcp_input_delayed_close>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	f040 8090 	bne.w	8008882 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008762:	4b4d      	ldr	r3, [pc, #308]	; (8008898 <tcp_input+0x72c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d041      	beq.n	80087ee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <tcp_input+0x614>
 8008772:	4b50      	ldr	r3, [pc, #320]	; (80088b4 <tcp_input+0x748>)
 8008774:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008778:	494f      	ldr	r1, [pc, #316]	; (80088b8 <tcp_input+0x74c>)
 800877a:	4850      	ldr	r0, [pc, #320]	; (80088bc <tcp_input+0x750>)
 800877c:	f006 fd24 	bl	800f1c8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	8b5b      	ldrh	r3, [r3, #26]
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	2b00      	cmp	r3, #0
 800878a:	d008      	beq.n	800879e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800878c:	4b42      	ldr	r3, [pc, #264]	; (8008898 <tcp_input+0x72c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4618      	mov	r0, r3
 8008792:	f7fd fc1d 	bl	8005fd0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008796:	69f8      	ldr	r0, [r7, #28]
 8008798:	f7fe f9a2 	bl	8006ae0 <tcp_abort>
            goto aborted;
 800879c:	e091      	b.n	80088c2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00c      	beq.n	80087c2 <tcp_input+0x656>
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	6918      	ldr	r0, [r3, #16]
 80087b2:	4b39      	ldr	r3, [pc, #228]	; (8008898 <tcp_input+0x72c>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	2300      	movs	r3, #0
 80087b8:	69f9      	ldr	r1, [r7, #28]
 80087ba:	47a0      	blx	r4
 80087bc:	4603      	mov	r3, r0
 80087be:	74fb      	strb	r3, [r7, #19]
 80087c0:	e008      	b.n	80087d4 <tcp_input+0x668>
 80087c2:	4b35      	ldr	r3, [pc, #212]	; (8008898 <tcp_input+0x72c>)
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	2300      	movs	r3, #0
 80087c8:	69f9      	ldr	r1, [r7, #28]
 80087ca:	2000      	movs	r0, #0
 80087cc:	f7ff f890 	bl	80078f0 <tcp_recv_null>
 80087d0:	4603      	mov	r3, r0
 80087d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80087d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087d8:	f113 0f0d 	cmn.w	r3, #13
 80087dc:	d053      	beq.n	8008886 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80087de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80087e6:	4b2c      	ldr	r3, [pc, #176]	; (8008898 <tcp_input+0x72c>)
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80087ee:	4b2b      	ldr	r3, [pc, #172]	; (800889c <tcp_input+0x730>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d030      	beq.n	800885c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008806:	7b5a      	ldrb	r2, [r3, #13]
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800880c:	f042 0220 	orr.w	r2, r2, #32
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	735a      	strb	r2, [r3, #13]
 8008814:	e022      	b.n	800885c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800881e:	d005      	beq.n	800882c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008824:	3301      	adds	r3, #1
 8008826:	b29a      	uxth	r2, r3
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00b      	beq.n	800884e <tcp_input+0x6e2>
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	6918      	ldr	r0, [r3, #16]
 8008840:	2300      	movs	r3, #0
 8008842:	2200      	movs	r2, #0
 8008844:	69f9      	ldr	r1, [r7, #28]
 8008846:	47a0      	blx	r4
 8008848:	4603      	mov	r3, r0
 800884a:	74fb      	strb	r3, [r7, #19]
 800884c:	e001      	b.n	8008852 <tcp_input+0x6e6>
 800884e:	2300      	movs	r3, #0
 8008850:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008852:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008856:	f113 0f0d 	cmn.w	r3, #13
 800885a:	d016      	beq.n	800888a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800885c:	4b13      	ldr	r3, [pc, #76]	; (80088ac <tcp_input+0x740>)
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008862:	69f8      	ldr	r0, [r7, #28]
 8008864:	f000 f88e 	bl	8008984 <tcp_input_delayed_close>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d128      	bne.n	80088c0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800886e:	69f8      	ldr	r0, [r7, #28]
 8008870:	f002 ff20 	bl	800b6b4 <tcp_output>
 8008874:	e025      	b.n	80088c2 <tcp_input+0x756>
        goto aborted;
 8008876:	bf00      	nop
 8008878:	e023      	b.n	80088c2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800887a:	bf00      	nop
 800887c:	e021      	b.n	80088c2 <tcp_input+0x756>
              goto aborted;
 800887e:	bf00      	nop
 8008880:	e01f      	b.n	80088c2 <tcp_input+0x756>
          goto aborted;
 8008882:	bf00      	nop
 8008884:	e01d      	b.n	80088c2 <tcp_input+0x756>
            goto aborted;
 8008886:	bf00      	nop
 8008888:	e01b      	b.n	80088c2 <tcp_input+0x756>
              goto aborted;
 800888a:	bf00      	nop
 800888c:	e019      	b.n	80088c2 <tcp_input+0x756>
 800888e:	bf00      	nop
 8008890:	200086b8 	.word	0x200086b8
 8008894:	200086c8 	.word	0x200086c8
 8008898:	200086e8 	.word	0x200086e8
 800889c:	200086e5 	.word	0x200086e5
 80088a0:	200086e0 	.word	0x200086e0
 80088a4:	200086e4 	.word	0x200086e4
 80088a8:	200086e2 	.word	0x200086e2
 80088ac:	200086ec 	.word	0x200086ec
 80088b0:	200086ac 	.word	0x200086ac
 80088b4:	08011780 	.word	0x08011780
 80088b8:	08011934 	.word	0x08011934
 80088bc:	080117cc 	.word	0x080117cc
          goto aborted;
 80088c0:	bf00      	nop
    tcp_input_pcb = NULL;
 80088c2:	4b27      	ldr	r3, [pc, #156]	; (8008960 <tcp_input+0x7f4>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80088c8:	4b26      	ldr	r3, [pc, #152]	; (8008964 <tcp_input+0x7f8>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80088ce:	4b26      	ldr	r3, [pc, #152]	; (8008968 <tcp_input+0x7fc>)
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d03f      	beq.n	8008956 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80088d6:	4b24      	ldr	r3, [pc, #144]	; (8008968 <tcp_input+0x7fc>)
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fd fb78 	bl	8005fd0 <pbuf_free>
      inseg.p = NULL;
 80088e0:	4b21      	ldr	r3, [pc, #132]	; (8008968 <tcp_input+0x7fc>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80088e6:	e036      	b.n	8008956 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80088e8:	4b20      	ldr	r3, [pc, #128]	; (800896c <tcp_input+0x800>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	899b      	ldrh	r3, [r3, #12]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fb ffd9 	bl	80048a8 <lwip_htons>
 80088f6:	4603      	mov	r3, r0
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	f003 0304 	and.w	r3, r3, #4
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d118      	bne.n	8008934 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008902:	4b1b      	ldr	r3, [pc, #108]	; (8008970 <tcp_input+0x804>)
 8008904:	6819      	ldr	r1, [r3, #0]
 8008906:	4b1b      	ldr	r3, [pc, #108]	; (8008974 <tcp_input+0x808>)
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	4b1a      	ldr	r3, [pc, #104]	; (8008978 <tcp_input+0x80c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008912:	4b16      	ldr	r3, [pc, #88]	; (800896c <tcp_input+0x800>)
 8008914:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008916:	885b      	ldrh	r3, [r3, #2]
 8008918:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800891a:	4a14      	ldr	r2, [pc, #80]	; (800896c <tcp_input+0x800>)
 800891c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800891e:	8812      	ldrh	r2, [r2, #0]
 8008920:	b292      	uxth	r2, r2
 8008922:	9202      	str	r2, [sp, #8]
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	4b15      	ldr	r3, [pc, #84]	; (800897c <tcp_input+0x810>)
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	4b15      	ldr	r3, [pc, #84]	; (8008980 <tcp_input+0x814>)
 800892c:	4602      	mov	r2, r0
 800892e:	2000      	movs	r0, #0
 8008930:	f003 fc74 	bl	800c21c <tcp_rst>
    pbuf_free(p);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7fd fb4b 	bl	8005fd0 <pbuf_free>
  return;
 800893a:	e00c      	b.n	8008956 <tcp_input+0x7ea>
    goto dropped;
 800893c:	bf00      	nop
 800893e:	e006      	b.n	800894e <tcp_input+0x7e2>
    goto dropped;
 8008940:	bf00      	nop
 8008942:	e004      	b.n	800894e <tcp_input+0x7e2>
    goto dropped;
 8008944:	bf00      	nop
 8008946:	e002      	b.n	800894e <tcp_input+0x7e2>
      goto dropped;
 8008948:	bf00      	nop
 800894a:	e000      	b.n	800894e <tcp_input+0x7e2>
      goto dropped;
 800894c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7fd fb3e 	bl	8005fd0 <pbuf_free>
 8008954:	e000      	b.n	8008958 <tcp_input+0x7ec>
  return;
 8008956:	bf00      	nop
}
 8008958:	3724      	adds	r7, #36	; 0x24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd90      	pop	{r4, r7, pc}
 800895e:	bf00      	nop
 8008960:	200086ec 	.word	0x200086ec
 8008964:	200086e8 	.word	0x200086e8
 8008968:	200086b8 	.word	0x200086b8
 800896c:	200086c8 	.word	0x200086c8
 8008970:	200086dc 	.word	0x200086dc
 8008974:	200086e2 	.word	0x200086e2
 8008978:	200086d8 	.word	0x200086d8
 800897c:	20005140 	.word	0x20005140
 8008980:	20005144 	.word	0x20005144

08008984 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d106      	bne.n	80089a0 <tcp_input_delayed_close+0x1c>
 8008992:	4b17      	ldr	r3, [pc, #92]	; (80089f0 <tcp_input_delayed_close+0x6c>)
 8008994:	f240 225a 	movw	r2, #602	; 0x25a
 8008998:	4916      	ldr	r1, [pc, #88]	; (80089f4 <tcp_input_delayed_close+0x70>)
 800899a:	4817      	ldr	r0, [pc, #92]	; (80089f8 <tcp_input_delayed_close+0x74>)
 800899c:	f006 fc14 	bl	800f1c8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80089a0:	4b16      	ldr	r3, [pc, #88]	; (80089fc <tcp_input_delayed_close+0x78>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01c      	beq.n	80089e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8b5b      	ldrh	r3, [r3, #26]
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10d      	bne.n	80089d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d008      	beq.n	80089d4 <tcp_input_delayed_close+0x50>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6912      	ldr	r2, [r2, #16]
 80089cc:	f06f 010e 	mvn.w	r1, #14
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	480a      	ldr	r0, [pc, #40]	; (8008a00 <tcp_input_delayed_close+0x7c>)
 80089d8:	f7ff fa50 	bl	8007e7c <tcp_pcb_remove>
    tcp_free(pcb);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7fd fd97 	bl	8006510 <tcp_free>
    return 1;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	08011780 	.word	0x08011780
 80089f4:	08011950 	.word	0x08011950
 80089f8:	080117cc 	.word	0x080117cc
 80089fc:	200086e5 	.word	0x200086e5
 8008a00:	200086ac 	.word	0x200086ac

08008a04 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b08b      	sub	sp, #44	; 0x2c
 8008a08:	af04      	add	r7, sp, #16
 8008a0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008a0c:	4b6f      	ldr	r3, [pc, #444]	; (8008bcc <tcp_listen_input+0x1c8>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 80d2 	bne.w	8008bbe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d106      	bne.n	8008a2e <tcp_listen_input+0x2a>
 8008a20:	4b6b      	ldr	r3, [pc, #428]	; (8008bd0 <tcp_listen_input+0x1cc>)
 8008a22:	f240 2281 	movw	r2, #641	; 0x281
 8008a26:	496b      	ldr	r1, [pc, #428]	; (8008bd4 <tcp_listen_input+0x1d0>)
 8008a28:	486b      	ldr	r0, [pc, #428]	; (8008bd8 <tcp_listen_input+0x1d4>)
 8008a2a:	f006 fbcd 	bl	800f1c8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008a2e:	4b67      	ldr	r3, [pc, #412]	; (8008bcc <tcp_listen_input+0x1c8>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f003 0310 	and.w	r3, r3, #16
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d019      	beq.n	8008a6e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a3a:	4b68      	ldr	r3, [pc, #416]	; (8008bdc <tcp_listen_input+0x1d8>)
 8008a3c:	6819      	ldr	r1, [r3, #0]
 8008a3e:	4b68      	ldr	r3, [pc, #416]	; (8008be0 <tcp_listen_input+0x1dc>)
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	4b67      	ldr	r3, [pc, #412]	; (8008be4 <tcp_listen_input+0x1e0>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a4a:	4b67      	ldr	r3, [pc, #412]	; (8008be8 <tcp_listen_input+0x1e4>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a4e:	885b      	ldrh	r3, [r3, #2]
 8008a50:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a52:	4a65      	ldr	r2, [pc, #404]	; (8008be8 <tcp_listen_input+0x1e4>)
 8008a54:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a56:	8812      	ldrh	r2, [r2, #0]
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	9202      	str	r2, [sp, #8]
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	4b63      	ldr	r3, [pc, #396]	; (8008bec <tcp_listen_input+0x1e8>)
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4b63      	ldr	r3, [pc, #396]	; (8008bf0 <tcp_listen_input+0x1ec>)
 8008a64:	4602      	mov	r2, r0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f003 fbd8 	bl	800c21c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008a6c:	e0a9      	b.n	8008bc2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008a6e:	4b57      	ldr	r3, [pc, #348]	; (8008bcc <tcp_listen_input+0x1c8>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 80a3 	beq.w	8008bc2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7d5b      	ldrb	r3, [r3, #21]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff f859 	bl	8007b38 <tcp_alloc>
 8008a86:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d111      	bne.n	8008ab2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <tcp_listen_input+0xa8>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6910      	ldr	r0, [r2, #16]
 8008a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4798      	blx	r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73bb      	strb	r3, [r7, #14]
      return;
 8008aaa:	e08b      	b.n	8008bc4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008aac:	23f0      	movs	r3, #240	; 0xf0
 8008aae:	73bb      	strb	r3, [r7, #14]
      return;
 8008ab0:	e088      	b.n	8008bc4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008ab2:	4b50      	ldr	r3, [pc, #320]	; (8008bf4 <tcp_listen_input+0x1f0>)
 8008ab4:	695a      	ldr	r2, [r3, #20]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008aba:	4b4e      	ldr	r3, [pc, #312]	; (8008bf4 <tcp_listen_input+0x1f0>)
 8008abc:	691a      	ldr	r2, [r3, #16]
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	8ada      	ldrh	r2, [r3, #22]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008aca:	4b47      	ldr	r3, [pc, #284]	; (8008be8 <tcp_listen_input+0x1e4>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008adc:	4b41      	ldr	r3, [pc, #260]	; (8008be4 <tcp_listen_input+0x1e0>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008aee:	6978      	ldr	r0, [r7, #20]
 8008af0:	f7ff fa58 	bl	8007fa4 <tcp_next_iss>
 8008af4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008b0e:	4b35      	ldr	r3, [pc, #212]	; (8008be4 <tcp_listen_input+0x1e0>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	1e5a      	subs	r2, r3, #1
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	7a5b      	ldrb	r3, [r3, #9]
 8008b2a:	f003 030c 	and.w	r3, r3, #12
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7a1a      	ldrb	r2, [r3, #8]
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008b3c:	4b2e      	ldr	r3, [pc, #184]	; (8008bf8 <tcp_listen_input+0x1f4>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	60da      	str	r2, [r3, #12]
 8008b44:	4a2c      	ldr	r2, [pc, #176]	; (8008bf8 <tcp_listen_input+0x1f4>)
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	f003 fd29 	bl	800c5a0 <tcp_timer_needed>
 8008b4e:	4b2b      	ldr	r3, [pc, #172]	; (8008bfc <tcp_listen_input+0x1f8>)
 8008b50:	2201      	movs	r2, #1
 8008b52:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008b54:	6978      	ldr	r0, [r7, #20]
 8008b56:	f001 fd8f 	bl	800a678 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008b5a:	4b23      	ldr	r3, [pc, #140]	; (8008be8 <tcp_listen_input+0x1e4>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	89db      	ldrh	r3, [r3, #14]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f005 f8ed 	bl	800dd5c <ip4_route>
 8008b82:	4601      	mov	r1, r0
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	3304      	adds	r3, #4
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7ff fa30 	bl	8007ff0 <tcp_eff_send_mss_netif>
 8008b90:	4603      	mov	r3, r0
 8008b92:	461a      	mov	r2, r3
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008b98:	2112      	movs	r1, #18
 8008b9a:	6978      	ldr	r0, [r7, #20]
 8008b9c:	f002 fc9c 	bl	800b4d8 <tcp_enqueue_flags>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008bac:	2100      	movs	r1, #0
 8008bae:	6978      	ldr	r0, [r7, #20]
 8008bb0:	f7fd fed8 	bl	8006964 <tcp_abandon>
      return;
 8008bb4:	e006      	b.n	8008bc4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008bb6:	6978      	ldr	r0, [r7, #20]
 8008bb8:	f002 fd7c 	bl	800b6b4 <tcp_output>
  return;
 8008bbc:	e001      	b.n	8008bc2 <tcp_listen_input+0x1be>
    return;
 8008bbe:	bf00      	nop
 8008bc0:	e000      	b.n	8008bc4 <tcp_listen_input+0x1c0>
  return;
 8008bc2:	bf00      	nop
}
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd90      	pop	{r4, r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200086e4 	.word	0x200086e4
 8008bd0:	08011780 	.word	0x08011780
 8008bd4:	08011978 	.word	0x08011978
 8008bd8:	080117cc 	.word	0x080117cc
 8008bdc:	200086dc 	.word	0x200086dc
 8008be0:	200086e2 	.word	0x200086e2
 8008be4:	200086d8 	.word	0x200086d8
 8008be8:	200086c8 	.word	0x200086c8
 8008bec:	20005140 	.word	0x20005140
 8008bf0:	20005144 	.word	0x20005144
 8008bf4:	20005130 	.word	0x20005130
 8008bf8:	200086ac 	.word	0x200086ac
 8008bfc:	200086b4 	.word	0x200086b4

08008c00 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af04      	add	r7, sp, #16
 8008c06:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008c08:	4b2f      	ldr	r3, [pc, #188]	; (8008cc8 <tcp_timewait_input+0xc8>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d153      	bne.n	8008cbc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <tcp_timewait_input+0x28>
 8008c1a:	4b2c      	ldr	r3, [pc, #176]	; (8008ccc <tcp_timewait_input+0xcc>)
 8008c1c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008c20:	492b      	ldr	r1, [pc, #172]	; (8008cd0 <tcp_timewait_input+0xd0>)
 8008c22:	482c      	ldr	r0, [pc, #176]	; (8008cd4 <tcp_timewait_input+0xd4>)
 8008c24:	f006 fad0 	bl	800f1c8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008c28:	4b27      	ldr	r3, [pc, #156]	; (8008cc8 <tcp_timewait_input+0xc8>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d02a      	beq.n	8008c8a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008c34:	4b28      	ldr	r3, [pc, #160]	; (8008cd8 <tcp_timewait_input+0xd8>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	db2d      	blt.n	8008c9e <tcp_timewait_input+0x9e>
 8008c42:	4b25      	ldr	r3, [pc, #148]	; (8008cd8 <tcp_timewait_input+0xd8>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c4e:	440b      	add	r3, r1
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dc23      	bgt.n	8008c9e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c56:	4b21      	ldr	r3, [pc, #132]	; (8008cdc <tcp_timewait_input+0xdc>)
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	4b21      	ldr	r3, [pc, #132]	; (8008ce0 <tcp_timewait_input+0xe0>)
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <tcp_timewait_input+0xd8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c66:	4b1f      	ldr	r3, [pc, #124]	; (8008ce4 <tcp_timewait_input+0xe4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c6a:	885b      	ldrh	r3, [r3, #2]
 8008c6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <tcp_timewait_input+0xe4>)
 8008c70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c72:	8812      	ldrh	r2, [r2, #0]
 8008c74:	b292      	uxth	r2, r2
 8008c76:	9202      	str	r2, [sp, #8]
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <tcp_timewait_input+0xe8>)
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	4b1b      	ldr	r3, [pc, #108]	; (8008cec <tcp_timewait_input+0xec>)
 8008c80:	4602      	mov	r2, r0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f003 faca 	bl	800c21c <tcp_rst>
      return;
 8008c88:	e01b      	b.n	8008cc2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008c8a:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <tcp_timewait_input+0xc8>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008c96:	4b16      	ldr	r3, [pc, #88]	; (8008cf0 <tcp_timewait_input+0xf0>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008c9e:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <tcp_timewait_input+0xe0>)
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00c      	beq.n	8008cc0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	8b5b      	ldrh	r3, [r3, #26]
 8008caa:	f043 0302 	orr.w	r3, r3, #2
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f002 fcfd 	bl	800b6b4 <tcp_output>
  }
  return;
 8008cba:	e001      	b.n	8008cc0 <tcp_timewait_input+0xc0>
    return;
 8008cbc:	bf00      	nop
 8008cbe:	e000      	b.n	8008cc2 <tcp_timewait_input+0xc2>
  return;
 8008cc0:	bf00      	nop
}
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	200086e4 	.word	0x200086e4
 8008ccc:	08011780 	.word	0x08011780
 8008cd0:	08011998 	.word	0x08011998
 8008cd4:	080117cc 	.word	0x080117cc
 8008cd8:	200086d8 	.word	0x200086d8
 8008cdc:	200086dc 	.word	0x200086dc
 8008ce0:	200086e2 	.word	0x200086e2
 8008ce4:	200086c8 	.word	0x200086c8
 8008ce8:	20005140 	.word	0x20005140
 8008cec:	20005144 	.word	0x20005144
 8008cf0:	200086a0 	.word	0x200086a0

08008cf4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b08d      	sub	sp, #52	; 0x34
 8008cf8:	af04      	add	r7, sp, #16
 8008cfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <tcp_process+0x24>
 8008d0a:	4b9d      	ldr	r3, [pc, #628]	; (8008f80 <tcp_process+0x28c>)
 8008d0c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008d10:	499c      	ldr	r1, [pc, #624]	; (8008f84 <tcp_process+0x290>)
 8008d12:	489d      	ldr	r0, [pc, #628]	; (8008f88 <tcp_process+0x294>)
 8008d14:	f006 fa58 	bl	800f1c8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008d18:	4b9c      	ldr	r3, [pc, #624]	; (8008f8c <tcp_process+0x298>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d04e      	beq.n	8008dc2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7d1b      	ldrb	r3, [r3, #20]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d108      	bne.n	8008d3e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d30:	4b97      	ldr	r3, [pc, #604]	; (8008f90 <tcp_process+0x29c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d123      	bne.n	8008d80 <tcp_process+0x8c>
        acceptable = 1;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	76fb      	strb	r3, [r7, #27]
 8008d3c:	e020      	b.n	8008d80 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d42:	4b94      	ldr	r3, [pc, #592]	; (8008f94 <tcp_process+0x2a0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d102      	bne.n	8008d50 <tcp_process+0x5c>
        acceptable = 1;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	76fb      	strb	r3, [r7, #27]
 8008d4e:	e017      	b.n	8008d80 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008d50:	4b90      	ldr	r3, [pc, #576]	; (8008f94 <tcp_process+0x2a0>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	db10      	blt.n	8008d80 <tcp_process+0x8c>
 8008d5e:	4b8d      	ldr	r3, [pc, #564]	; (8008f94 <tcp_process+0x2a0>)
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d6a:	440b      	add	r3, r1
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dc06      	bgt.n	8008d80 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8b5b      	ldrh	r3, [r3, #26]
 8008d76:	f043 0302 	orr.w	r3, r3, #2
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008d80:	7efb      	ldrb	r3, [r7, #27]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d01b      	beq.n	8008dbe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	7d1b      	ldrb	r3, [r3, #20]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <tcp_process+0xa8>
 8008d8e:	4b7c      	ldr	r3, [pc, #496]	; (8008f80 <tcp_process+0x28c>)
 8008d90:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008d94:	4980      	ldr	r1, [pc, #512]	; (8008f98 <tcp_process+0x2a4>)
 8008d96:	487c      	ldr	r0, [pc, #496]	; (8008f88 <tcp_process+0x294>)
 8008d98:	f006 fa16 	bl	800f1c8 <iprintf>
      recv_flags |= TF_RESET;
 8008d9c:	4b7f      	ldr	r3, [pc, #508]	; (8008f9c <tcp_process+0x2a8>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	f043 0308 	orr.w	r3, r3, #8
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	4b7d      	ldr	r3, [pc, #500]	; (8008f9c <tcp_process+0x2a8>)
 8008da8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	8b5b      	ldrh	r3, [r3, #26]
 8008dae:	f023 0301 	bic.w	r3, r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008db8:	f06f 030d 	mvn.w	r3, #13
 8008dbc:	e37a      	b.n	80094b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e378      	b.n	80094b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008dc2:	4b72      	ldr	r3, [pc, #456]	; (8008f8c <tcp_process+0x298>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d010      	beq.n	8008df0 <tcp_process+0xfc>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	7d1b      	ldrb	r3, [r3, #20]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d00c      	beq.n	8008df0 <tcp_process+0xfc>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7d1b      	ldrb	r3, [r3, #20]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d008      	beq.n	8008df0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	8b5b      	ldrh	r3, [r3, #26]
 8008de2:	f043 0302 	orr.w	r3, r3, #2
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e361      	b.n	80094b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	8b5b      	ldrh	r3, [r3, #26]
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d103      	bne.n	8008e04 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008dfc:	4b68      	ldr	r3, [pc, #416]	; (8008fa0 <tcp_process+0x2ac>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 fc2f 	bl	800a678 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	7d1b      	ldrb	r3, [r3, #20]
 8008e1e:	3b02      	subs	r3, #2
 8008e20:	2b07      	cmp	r3, #7
 8008e22:	f200 8337 	bhi.w	8009494 <tcp_process+0x7a0>
 8008e26:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <tcp_process+0x138>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008e4d 	.word	0x08008e4d
 8008e30:	0800907d 	.word	0x0800907d
 8008e34:	080091f5 	.word	0x080091f5
 8008e38:	0800921f 	.word	0x0800921f
 8008e3c:	08009343 	.word	0x08009343
 8008e40:	080091f5 	.word	0x080091f5
 8008e44:	080093cf 	.word	0x080093cf
 8008e48:	0800945f 	.word	0x0800945f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008e4c:	4b4f      	ldr	r3, [pc, #316]	; (8008f8c <tcp_process+0x298>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80e4 	beq.w	8009022 <tcp_process+0x32e>
 8008e5a:	4b4c      	ldr	r3, [pc, #304]	; (8008f8c <tcp_process+0x298>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80dd 	beq.w	8009022 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	4b48      	ldr	r3, [pc, #288]	; (8008f90 <tcp_process+0x29c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	f040 80d5 	bne.w	8009022 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008e78:	4b46      	ldr	r3, [pc, #280]	; (8008f94 <tcp_process+0x2a0>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008e8a:	4b41      	ldr	r3, [pc, #260]	; (8008f90 <tcp_process+0x29c>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008e92:	4b44      	ldr	r3, [pc, #272]	; (8008fa4 <tcp_process+0x2b0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	89db      	ldrh	r3, [r3, #14]
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008eac:	4b39      	ldr	r3, [pc, #228]	; (8008f94 <tcp_process+0x2a0>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	1e5a      	subs	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2204      	movs	r2, #4
 8008eba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f004 ff49 	bl	800dd5c <ip4_route>
 8008eca:	4601      	mov	r1, r0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7ff f88c 	bl	8007ff0 <tcp_eff_send_mss_netif>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ee4:	009a      	lsls	r2, r3, #2
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008eea:	005b      	lsls	r3, r3, #1
 8008eec:	f241 111c 	movw	r1, #4380	; 0x111c
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf38      	it	cc
 8008ef4:	460b      	movcc	r3, r1
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d204      	bcs.n	8008f04 <tcp_process+0x210>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	e00d      	b.n	8008f20 <tcp_process+0x22c>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d904      	bls.n	8008f1c <tcp_process+0x228>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	e001      	b.n	8008f20 <tcp_process+0x22c>
 8008f1c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d106      	bne.n	8008f3e <tcp_process+0x24a>
 8008f30:	4b13      	ldr	r3, [pc, #76]	; (8008f80 <tcp_process+0x28c>)
 8008f32:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008f36:	491c      	ldr	r1, [pc, #112]	; (8008fa8 <tcp_process+0x2b4>)
 8008f38:	4813      	ldr	r0, [pc, #76]	; (8008f88 <tcp_process+0x294>)
 8008f3a:	f006 f945 	bl	800f1c8 <iprintf>
        --pcb->snd_queuelen;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f44:	3b01      	subs	r3, #1
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f52:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d12a      	bne.n	8008fb0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <tcp_process+0x280>
 8008f66:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <tcp_process+0x28c>)
 8008f68:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008f6c:	490f      	ldr	r1, [pc, #60]	; (8008fac <tcp_process+0x2b8>)
 8008f6e:	4806      	ldr	r0, [pc, #24]	; (8008f88 <tcp_process+0x294>)
 8008f70:	f006 f92a 	bl	800f1c8 <iprintf>
          pcb->unsent = rseg->next;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008f7c:	e01c      	b.n	8008fb8 <tcp_process+0x2c4>
 8008f7e:	bf00      	nop
 8008f80:	08011780 	.word	0x08011780
 8008f84:	080119b8 	.word	0x080119b8
 8008f88:	080117cc 	.word	0x080117cc
 8008f8c:	200086e4 	.word	0x200086e4
 8008f90:	200086dc 	.word	0x200086dc
 8008f94:	200086d8 	.word	0x200086d8
 8008f98:	080119d4 	.word	0x080119d4
 8008f9c:	200086e5 	.word	0x200086e5
 8008fa0:	200086a0 	.word	0x200086a0
 8008fa4:	200086c8 	.word	0x200086c8
 8008fa8:	080119f4 	.word	0x080119f4
 8008fac:	08011a0c 	.word	0x08011a0c
        } else {
          pcb->unacked = rseg->next;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008fb8:	69f8      	ldr	r0, [r7, #28]
 8008fba:	f7fe fc36 	bl	800782a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fcc:	861a      	strh	r2, [r3, #48]	; 0x30
 8008fce:	e006      	b.n	8008fde <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00a      	beq.n	8008ffe <tcp_process+0x30a>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6910      	ldr	r0, [r2, #16]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4798      	blx	r3
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	76bb      	strb	r3, [r7, #26]
 8008ffc:	e001      	b.n	8009002 <tcp_process+0x30e>
 8008ffe:	2300      	movs	r3, #0
 8009000:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009002:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009006:	f113 0f0d 	cmn.w	r3, #13
 800900a:	d102      	bne.n	8009012 <tcp_process+0x31e>
          return ERR_ABRT;
 800900c:	f06f 030c 	mvn.w	r3, #12
 8009010:	e250      	b.n	80094b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	8b5b      	ldrh	r3, [r3, #26]
 8009016:	f043 0302 	orr.w	r3, r3, #2
 800901a:	b29a      	uxth	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009020:	e23a      	b.n	8009498 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009022:	4b98      	ldr	r3, [pc, #608]	; (8009284 <tcp_process+0x590>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0310 	and.w	r3, r3, #16
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 8234 	beq.w	8009498 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009030:	4b95      	ldr	r3, [pc, #596]	; (8009288 <tcp_process+0x594>)
 8009032:	6819      	ldr	r1, [r3, #0]
 8009034:	4b95      	ldr	r3, [pc, #596]	; (800928c <tcp_process+0x598>)
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	4b95      	ldr	r3, [pc, #596]	; (8009290 <tcp_process+0x59c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009040:	4b94      	ldr	r3, [pc, #592]	; (8009294 <tcp_process+0x5a0>)
 8009042:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009044:	885b      	ldrh	r3, [r3, #2]
 8009046:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009048:	4a92      	ldr	r2, [pc, #584]	; (8009294 <tcp_process+0x5a0>)
 800904a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800904c:	8812      	ldrh	r2, [r2, #0]
 800904e:	b292      	uxth	r2, r2
 8009050:	9202      	str	r2, [sp, #8]
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	4b90      	ldr	r3, [pc, #576]	; (8009298 <tcp_process+0x5a4>)
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	4b90      	ldr	r3, [pc, #576]	; (800929c <tcp_process+0x5a8>)
 800905a:	4602      	mov	r2, r0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f003 f8dd 	bl	800c21c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009068:	2b05      	cmp	r3, #5
 800906a:	f200 8215 	bhi.w	8009498 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f002 fea7 	bl	800bdc8 <tcp_rexmit_rto>
      break;
 800907a:	e20d      	b.n	8009498 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800907c:	4b81      	ldr	r3, [pc, #516]	; (8009284 <tcp_process+0x590>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 80a1 	beq.w	80091cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800908a:	4b7f      	ldr	r3, [pc, #508]	; (8009288 <tcp_process+0x594>)
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	3b01      	subs	r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	db7e      	blt.n	8009198 <tcp_process+0x4a4>
 800909a:	4b7b      	ldr	r3, [pc, #492]	; (8009288 <tcp_process+0x594>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dc77      	bgt.n	8009198 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2204      	movs	r2, #4
 80090ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d102      	bne.n	80090bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80090b6:	23fa      	movs	r3, #250	; 0xfa
 80090b8:	76bb      	strb	r3, [r7, #26]
 80090ba:	e01d      	b.n	80090f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d106      	bne.n	80090d4 <tcp_process+0x3e0>
 80090c6:	4b76      	ldr	r3, [pc, #472]	; (80092a0 <tcp_process+0x5ac>)
 80090c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80090cc:	4975      	ldr	r1, [pc, #468]	; (80092a4 <tcp_process+0x5b0>)
 80090ce:	4876      	ldr	r0, [pc, #472]	; (80092a8 <tcp_process+0x5b4>)
 80090d0:	f006 f87a 	bl	800f1c8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <tcp_process+0x400>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6910      	ldr	r0, [r2, #16]
 80090e8:	2200      	movs	r2, #0
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	4798      	blx	r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	76bb      	strb	r3, [r7, #26]
 80090f2:	e001      	b.n	80090f8 <tcp_process+0x404>
 80090f4:	23f0      	movs	r3, #240	; 0xf0
 80090f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80090f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009100:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009104:	f113 0f0d 	cmn.w	r3, #13
 8009108:	d002      	beq.n	8009110 <tcp_process+0x41c>
              tcp_abort(pcb);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fd fce8 	bl	8006ae0 <tcp_abort>
            }
            return ERR_ABRT;
 8009110:	f06f 030c 	mvn.w	r3, #12
 8009114:	e1ce      	b.n	80094b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fae0 	bl	80096dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800911c:	4b63      	ldr	r3, [pc, #396]	; (80092ac <tcp_process+0x5b8>)
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <tcp_process+0x43c>
            recv_acked--;
 8009124:	4b61      	ldr	r3, [pc, #388]	; (80092ac <tcp_process+0x5b8>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	4b5f      	ldr	r3, [pc, #380]	; (80092ac <tcp_process+0x5b8>)
 800912e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009134:	009a      	lsls	r2, r3, #2
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009140:	428b      	cmp	r3, r1
 8009142:	bf38      	it	cc
 8009144:	460b      	movcc	r3, r1
 8009146:	429a      	cmp	r2, r3
 8009148:	d204      	bcs.n	8009154 <tcp_process+0x460>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	b29b      	uxth	r3, r3
 8009152:	e00d      	b.n	8009170 <tcp_process+0x47c>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	f241 121c 	movw	r2, #4380	; 0x111c
 800915e:	4293      	cmp	r3, r2
 8009160:	d904      	bls.n	800916c <tcp_process+0x478>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	b29b      	uxth	r3, r3
 800916a:	e001      	b.n	8009170 <tcp_process+0x47c>
 800916c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009176:	4b4e      	ldr	r3, [pc, #312]	; (80092b0 <tcp_process+0x5bc>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d037      	beq.n	80091f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	8b5b      	ldrh	r3, [r3, #26]
 8009186:	f043 0302 	orr.w	r3, r3, #2
 800918a:	b29a      	uxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2207      	movs	r2, #7
 8009194:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009196:	e02c      	b.n	80091f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009198:	4b3b      	ldr	r3, [pc, #236]	; (8009288 <tcp_process+0x594>)
 800919a:	6819      	ldr	r1, [r3, #0]
 800919c:	4b3b      	ldr	r3, [pc, #236]	; (800928c <tcp_process+0x598>)
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	4b3b      	ldr	r3, [pc, #236]	; (8009290 <tcp_process+0x59c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091a8:	4b3a      	ldr	r3, [pc, #232]	; (8009294 <tcp_process+0x5a0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091ac:	885b      	ldrh	r3, [r3, #2]
 80091ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091b0:	4a38      	ldr	r2, [pc, #224]	; (8009294 <tcp_process+0x5a0>)
 80091b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091b4:	8812      	ldrh	r2, [r2, #0]
 80091b6:	b292      	uxth	r2, r2
 80091b8:	9202      	str	r2, [sp, #8]
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	4b36      	ldr	r3, [pc, #216]	; (8009298 <tcp_process+0x5a4>)
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	4b36      	ldr	r3, [pc, #216]	; (800929c <tcp_process+0x5a8>)
 80091c2:	4602      	mov	r2, r0
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f003 f829 	bl	800c21c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80091ca:	e167      	b.n	800949c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80091cc:	4b2d      	ldr	r3, [pc, #180]	; (8009284 <tcp_process+0x590>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8161 	beq.w	800949c <tcp_process+0x7a8>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	1e5a      	subs	r2, r3, #1
 80091e0:	4b2b      	ldr	r3, [pc, #172]	; (8009290 <tcp_process+0x59c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	f040 8159 	bne.w	800949c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f002 fe0e 	bl	800be0c <tcp_rexmit>
      break;
 80091f0:	e154      	b.n	800949c <tcp_process+0x7a8>
 80091f2:	e153      	b.n	800949c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fa71 	bl	80096dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80091fa:	4b2d      	ldr	r3, [pc, #180]	; (80092b0 <tcp_process+0x5bc>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 814c 	beq.w	80094a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8b5b      	ldrh	r3, [r3, #26]
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	b29a      	uxth	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2207      	movs	r2, #7
 800921a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800921c:	e140      	b.n	80094a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fa5c 	bl	80096dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009224:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <tcp_process+0x5bc>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	2b00      	cmp	r3, #0
 800922e:	d071      	beq.n	8009314 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009230:	4b14      	ldr	r3, [pc, #80]	; (8009284 <tcp_process+0x590>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	f003 0310 	and.w	r3, r3, #16
 8009238:	2b00      	cmp	r3, #0
 800923a:	d060      	beq.n	80092fe <tcp_process+0x60a>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009240:	4b11      	ldr	r3, [pc, #68]	; (8009288 <tcp_process+0x594>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d15a      	bne.n	80092fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800924c:	2b00      	cmp	r3, #0
 800924e:	d156      	bne.n	80092fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	8b5b      	ldrh	r3, [r3, #26]
 8009254:	f043 0302 	orr.w	r3, r3, #2
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7fe fdbc 	bl	8007ddc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009264:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <tcp_process+0x5c0>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	429a      	cmp	r2, r3
 800926c:	d105      	bne.n	800927a <tcp_process+0x586>
 800926e:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <tcp_process+0x5c0>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4a0f      	ldr	r2, [pc, #60]	; (80092b4 <tcp_process+0x5c0>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	e02e      	b.n	80092d8 <tcp_process+0x5e4>
 800927a:	4b0e      	ldr	r3, [pc, #56]	; (80092b4 <tcp_process+0x5c0>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e027      	b.n	80092d2 <tcp_process+0x5de>
 8009282:	bf00      	nop
 8009284:	200086e4 	.word	0x200086e4
 8009288:	200086dc 	.word	0x200086dc
 800928c:	200086e2 	.word	0x200086e2
 8009290:	200086d8 	.word	0x200086d8
 8009294:	200086c8 	.word	0x200086c8
 8009298:	20005140 	.word	0x20005140
 800929c:	20005144 	.word	0x20005144
 80092a0:	08011780 	.word	0x08011780
 80092a4:	08011a20 	.word	0x08011a20
 80092a8:	080117cc 	.word	0x080117cc
 80092ac:	200086e0 	.word	0x200086e0
 80092b0:	200086e5 	.word	0x200086e5
 80092b4:	200086ac 	.word	0x200086ac
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d104      	bne.n	80092cc <tcp_process+0x5d8>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	60da      	str	r2, [r3, #12]
 80092ca:	e005      	b.n	80092d8 <tcp_process+0x5e4>
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	617b      	str	r3, [r7, #20]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1ef      	bne.n	80092b8 <tcp_process+0x5c4>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	60da      	str	r2, [r3, #12]
 80092de:	4b77      	ldr	r3, [pc, #476]	; (80094bc <tcp_process+0x7c8>)
 80092e0:	2201      	movs	r2, #1
 80092e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	220a      	movs	r2, #10
 80092e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80092ea:	4b75      	ldr	r3, [pc, #468]	; (80094c0 <tcp_process+0x7cc>)
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60da      	str	r2, [r3, #12]
 80092f2:	4a73      	ldr	r2, [pc, #460]	; (80094c0 <tcp_process+0x7cc>)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	f003 f952 	bl	800c5a0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80092fc:	e0d2      	b.n	80094a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	8b5b      	ldrh	r3, [r3, #26]
 8009302:	f043 0302 	orr.w	r3, r3, #2
 8009306:	b29a      	uxth	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2208      	movs	r2, #8
 8009310:	751a      	strb	r2, [r3, #20]
      break;
 8009312:	e0c7      	b.n	80094a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009314:	4b6b      	ldr	r3, [pc, #428]	; (80094c4 <tcp_process+0x7d0>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 80c1 	beq.w	80094a4 <tcp_process+0x7b0>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009326:	4b68      	ldr	r3, [pc, #416]	; (80094c8 <tcp_process+0x7d4>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	f040 80ba 	bne.w	80094a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009334:	2b00      	cmp	r3, #0
 8009336:	f040 80b5 	bne.w	80094a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2206      	movs	r2, #6
 800933e:	751a      	strb	r2, [r3, #20]
      break;
 8009340:	e0b0      	b.n	80094a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f9ca 	bl	80096dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009348:	4b60      	ldr	r3, [pc, #384]	; (80094cc <tcp_process+0x7d8>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f003 0320 	and.w	r3, r3, #32
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 80a9 	beq.w	80094a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	8b5b      	ldrh	r3, [r3, #26]
 800935a:	f043 0302 	orr.w	r3, r3, #2
 800935e:	b29a      	uxth	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fe fd39 	bl	8007ddc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800936a:	4b59      	ldr	r3, [pc, #356]	; (80094d0 <tcp_process+0x7dc>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d105      	bne.n	8009380 <tcp_process+0x68c>
 8009374:	4b56      	ldr	r3, [pc, #344]	; (80094d0 <tcp_process+0x7dc>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	4a55      	ldr	r2, [pc, #340]	; (80094d0 <tcp_process+0x7dc>)
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	e013      	b.n	80093a8 <tcp_process+0x6b4>
 8009380:	4b53      	ldr	r3, [pc, #332]	; (80094d0 <tcp_process+0x7dc>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	e00c      	b.n	80093a2 <tcp_process+0x6ae>
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	429a      	cmp	r2, r3
 8009390:	d104      	bne.n	800939c <tcp_process+0x6a8>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	60da      	str	r2, [r3, #12]
 800939a:	e005      	b.n	80093a8 <tcp_process+0x6b4>
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	613b      	str	r3, [r7, #16]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1ef      	bne.n	8009388 <tcp_process+0x694>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	60da      	str	r2, [r3, #12]
 80093ae:	4b43      	ldr	r3, [pc, #268]	; (80094bc <tcp_process+0x7c8>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	220a      	movs	r2, #10
 80093b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80093ba:	4b41      	ldr	r3, [pc, #260]	; (80094c0 <tcp_process+0x7cc>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60da      	str	r2, [r3, #12]
 80093c2:	4a3f      	ldr	r2, [pc, #252]	; (80094c0 <tcp_process+0x7cc>)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	f003 f8ea 	bl	800c5a0 <tcp_timer_needed>
      }
      break;
 80093cc:	e06c      	b.n	80094a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f984 	bl	80096dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80093d4:	4b3b      	ldr	r3, [pc, #236]	; (80094c4 <tcp_process+0x7d0>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d065      	beq.n	80094ac <tcp_process+0x7b8>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093e4:	4b38      	ldr	r3, [pc, #224]	; (80094c8 <tcp_process+0x7d4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d15f      	bne.n	80094ac <tcp_process+0x7b8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d15b      	bne.n	80094ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7fe fcf1 	bl	8007ddc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80093fa:	4b35      	ldr	r3, [pc, #212]	; (80094d0 <tcp_process+0x7dc>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d105      	bne.n	8009410 <tcp_process+0x71c>
 8009404:	4b32      	ldr	r3, [pc, #200]	; (80094d0 <tcp_process+0x7dc>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	4a31      	ldr	r2, [pc, #196]	; (80094d0 <tcp_process+0x7dc>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	e013      	b.n	8009438 <tcp_process+0x744>
 8009410:	4b2f      	ldr	r3, [pc, #188]	; (80094d0 <tcp_process+0x7dc>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	e00c      	b.n	8009432 <tcp_process+0x73e>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	429a      	cmp	r2, r3
 8009420:	d104      	bne.n	800942c <tcp_process+0x738>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	60da      	str	r2, [r3, #12]
 800942a:	e005      	b.n	8009438 <tcp_process+0x744>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1ef      	bne.n	8009418 <tcp_process+0x724>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	60da      	str	r2, [r3, #12]
 800943e:	4b1f      	ldr	r3, [pc, #124]	; (80094bc <tcp_process+0x7c8>)
 8009440:	2201      	movs	r2, #1
 8009442:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	220a      	movs	r2, #10
 8009448:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800944a:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <tcp_process+0x7cc>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60da      	str	r2, [r3, #12]
 8009452:	4a1b      	ldr	r2, [pc, #108]	; (80094c0 <tcp_process+0x7cc>)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	f003 f8a2 	bl	800c5a0 <tcp_timer_needed>
      }
      break;
 800945c:	e026      	b.n	80094ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f93c 	bl	80096dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009464:	4b17      	ldr	r3, [pc, #92]	; (80094c4 <tcp_process+0x7d0>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 0310 	and.w	r3, r3, #16
 800946c:	2b00      	cmp	r3, #0
 800946e:	d01f      	beq.n	80094b0 <tcp_process+0x7bc>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009474:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <tcp_process+0x7d4>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d119      	bne.n	80094b0 <tcp_process+0x7bc>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d115      	bne.n	80094b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009484:	4b11      	ldr	r3, [pc, #68]	; (80094cc <tcp_process+0x7d8>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f043 0310 	orr.w	r3, r3, #16
 800948c:	b2da      	uxtb	r2, r3
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <tcp_process+0x7d8>)
 8009490:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009492:	e00d      	b.n	80094b0 <tcp_process+0x7bc>
    default:
      break;
 8009494:	bf00      	nop
 8009496:	e00c      	b.n	80094b2 <tcp_process+0x7be>
      break;
 8009498:	bf00      	nop
 800949a:	e00a      	b.n	80094b2 <tcp_process+0x7be>
      break;
 800949c:	bf00      	nop
 800949e:	e008      	b.n	80094b2 <tcp_process+0x7be>
      break;
 80094a0:	bf00      	nop
 80094a2:	e006      	b.n	80094b2 <tcp_process+0x7be>
      break;
 80094a4:	bf00      	nop
 80094a6:	e004      	b.n	80094b2 <tcp_process+0x7be>
      break;
 80094a8:	bf00      	nop
 80094aa:	e002      	b.n	80094b2 <tcp_process+0x7be>
      break;
 80094ac:	bf00      	nop
 80094ae:	e000      	b.n	80094b2 <tcp_process+0x7be>
      break;
 80094b0:	bf00      	nop
  }
  return ERR_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3724      	adds	r7, #36	; 0x24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd90      	pop	{r4, r7, pc}
 80094bc:	200086b4 	.word	0x200086b4
 80094c0:	200086b0 	.word	0x200086b0
 80094c4:	200086e4 	.word	0x200086e4
 80094c8:	200086dc 	.word	0x200086dc
 80094cc:	200086e5 	.word	0x200086e5
 80094d0:	200086ac 	.word	0x200086ac

080094d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80094d4:	b590      	push	{r4, r7, lr}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d106      	bne.n	80094f2 <tcp_oos_insert_segment+0x1e>
 80094e4:	4b3b      	ldr	r3, [pc, #236]	; (80095d4 <tcp_oos_insert_segment+0x100>)
 80094e6:	f240 421f 	movw	r2, #1055	; 0x41f
 80094ea:	493b      	ldr	r1, [pc, #236]	; (80095d8 <tcp_oos_insert_segment+0x104>)
 80094ec:	483b      	ldr	r0, [pc, #236]	; (80095dc <tcp_oos_insert_segment+0x108>)
 80094ee:	f005 fe6b 	bl	800f1c8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	899b      	ldrh	r3, [r3, #12]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fb f9d4 	bl	80048a8 <lwip_htons>
 8009500:	4603      	mov	r3, r0
 8009502:	b2db      	uxtb	r3, r3
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	2b00      	cmp	r3, #0
 800950a:	d028      	beq.n	800955e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800950c:	6838      	ldr	r0, [r7, #0]
 800950e:	f7fe f977 	bl	8007800 <tcp_segs_free>
    next = NULL;
 8009512:	2300      	movs	r3, #0
 8009514:	603b      	str	r3, [r7, #0]
 8009516:	e056      	b.n	80095c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	899b      	ldrh	r3, [r3, #12]
 800951e:	b29b      	uxth	r3, r3
 8009520:	4618      	mov	r0, r3
 8009522:	f7fb f9c1 	bl	80048a8 <lwip_htons>
 8009526:	4603      	mov	r3, r0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00d      	beq.n	800954e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	899b      	ldrh	r3, [r3, #12]
 8009538:	b29c      	uxth	r4, r3
 800953a:	2001      	movs	r0, #1
 800953c:	f7fb f9b4 	bl	80048a8 <lwip_htons>
 8009540:	4603      	mov	r3, r0
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	4322      	orrs	r2, r4
 800954a:	b292      	uxth	r2, r2
 800954c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7fe f966 	bl	800782a <tcp_seg_free>
    while (next &&
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00e      	beq.n	8009582 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	891b      	ldrh	r3, [r3, #8]
 8009568:	461a      	mov	r2, r3
 800956a:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <tcp_oos_insert_segment+0x10c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	441a      	add	r2, r3
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	8909      	ldrh	r1, [r1, #8]
 800957a:	440b      	add	r3, r1
 800957c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800957e:	2b00      	cmp	r3, #0
 8009580:	daca      	bge.n	8009518 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01e      	beq.n	80095c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	891b      	ldrh	r3, [r3, #8]
 800958c:	461a      	mov	r2, r3
 800958e:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <tcp_oos_insert_segment+0x10c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	441a      	add	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd12      	ble.n	80095c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <tcp_oos_insert_segment+0x10c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	891b      	ldrh	r3, [r3, #8]
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7fc fb7f 	bl	8005cc4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	601a      	str	r2, [r3, #0]
}
 80095cc:	bf00      	nop
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd90      	pop	{r4, r7, pc}
 80095d4:	08011780 	.word	0x08011780
 80095d8:	08011a40 	.word	0x08011a40
 80095dc:	080117cc 	.word	0x080117cc
 80095e0:	200086d8 	.word	0x200086d8

080095e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80095e4:	b5b0      	push	{r4, r5, r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
 80095f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80095f2:	e03e      	b.n	8009672 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	4618      	mov	r0, r3
 8009604:	f7fc fd6c 	bl	80060e0 <pbuf_clen>
 8009608:	4603      	mov	r3, r0
 800960a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009612:	8a7a      	ldrh	r2, [r7, #18]
 8009614:	429a      	cmp	r2, r3
 8009616:	d906      	bls.n	8009626 <tcp_free_acked_segments+0x42>
 8009618:	4b2a      	ldr	r3, [pc, #168]	; (80096c4 <tcp_free_acked_segments+0xe0>)
 800961a:	f240 4257 	movw	r2, #1111	; 0x457
 800961e:	492a      	ldr	r1, [pc, #168]	; (80096c8 <tcp_free_acked_segments+0xe4>)
 8009620:	482a      	ldr	r0, [pc, #168]	; (80096cc <tcp_free_acked_segments+0xe8>)
 8009622:	f005 fdd1 	bl	800f1c8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800962c:	8a7b      	ldrh	r3, [r7, #18]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	b29a      	uxth	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	891a      	ldrh	r2, [r3, #8]
 800963c:	4b24      	ldr	r3, [pc, #144]	; (80096d0 <tcp_free_acked_segments+0xec>)
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	4413      	add	r3, r2
 8009642:	b29a      	uxth	r2, r3
 8009644:	4b22      	ldr	r3, [pc, #136]	; (80096d0 <tcp_free_acked_segments+0xec>)
 8009646:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009648:	6978      	ldr	r0, [r7, #20]
 800964a:	f7fe f8ee 	bl	800782a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00c      	beq.n	8009672 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <tcp_free_acked_segments+0x8e>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <tcp_free_acked_segments+0x8e>
 8009664:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <tcp_free_acked_segments+0xe0>)
 8009666:	f240 4261 	movw	r2, #1121	; 0x461
 800966a:	491a      	ldr	r1, [pc, #104]	; (80096d4 <tcp_free_acked_segments+0xf0>)
 800966c:	4817      	ldr	r0, [pc, #92]	; (80096cc <tcp_free_acked_segments+0xe8>)
 800966e:	f005 fdab 	bl	800f1c8 <iprintf>
  while (seg_list != NULL &&
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d020      	beq.n	80096ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	4618      	mov	r0, r3
 8009680:	f7fb f927 	bl	80048d2 <lwip_htonl>
 8009684:	4604      	mov	r4, r0
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	891b      	ldrh	r3, [r3, #8]
 800968a:	461d      	mov	r5, r3
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	899b      	ldrh	r3, [r3, #12]
 8009692:	b29b      	uxth	r3, r3
 8009694:	4618      	mov	r0, r3
 8009696:	f7fb f907 	bl	80048a8 <lwip_htons>
 800969a:	4603      	mov	r3, r0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <tcp_free_acked_segments+0xc6>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <tcp_free_acked_segments+0xc8>
 80096aa:	2300      	movs	r3, #0
 80096ac:	442b      	add	r3, r5
 80096ae:	18e2      	adds	r2, r4, r3
 80096b0:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <tcp_free_acked_segments+0xf4>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	dd9c      	ble.n	80095f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80096ba:	68bb      	ldr	r3, [r7, #8]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bdb0      	pop	{r4, r5, r7, pc}
 80096c4:	08011780 	.word	0x08011780
 80096c8:	08011a68 	.word	0x08011a68
 80096cc:	080117cc 	.word	0x080117cc
 80096d0:	200086e0 	.word	0x200086e0
 80096d4:	08011a90 	.word	0x08011a90
 80096d8:	200086dc 	.word	0x200086dc

080096dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80096dc:	b5b0      	push	{r4, r5, r7, lr}
 80096de:	b094      	sub	sp, #80	; 0x50
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <tcp_receive+0x20>
 80096ee:	4b91      	ldr	r3, [pc, #580]	; (8009934 <tcp_receive+0x258>)
 80096f0:	f240 427b 	movw	r2, #1147	; 0x47b
 80096f4:	4990      	ldr	r1, [pc, #576]	; (8009938 <tcp_receive+0x25c>)
 80096f6:	4891      	ldr	r0, [pc, #580]	; (800993c <tcp_receive+0x260>)
 80096f8:	f005 fd66 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7d1b      	ldrb	r3, [r3, #20]
 8009700:	2b03      	cmp	r3, #3
 8009702:	d806      	bhi.n	8009712 <tcp_receive+0x36>
 8009704:	4b8b      	ldr	r3, [pc, #556]	; (8009934 <tcp_receive+0x258>)
 8009706:	f240 427c 	movw	r2, #1148	; 0x47c
 800970a:	498d      	ldr	r1, [pc, #564]	; (8009940 <tcp_receive+0x264>)
 800970c:	488b      	ldr	r0, [pc, #556]	; (800993c <tcp_receive+0x260>)
 800970e:	f005 fd5b 	bl	800f1c8 <iprintf>

  if (flags & TCP_ACK) {
 8009712:	4b8c      	ldr	r3, [pc, #560]	; (8009944 <tcp_receive+0x268>)
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 8264 	beq.w	8009be8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009726:	461a      	mov	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800972c:	4413      	add	r3, r2
 800972e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009734:	4b84      	ldr	r3, [pc, #528]	; (8009948 <tcp_receive+0x26c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	db1b      	blt.n	8009776 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009742:	4b81      	ldr	r3, [pc, #516]	; (8009948 <tcp_receive+0x26c>)
 8009744:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009746:	429a      	cmp	r2, r3
 8009748:	d106      	bne.n	8009758 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800974e:	4b7f      	ldr	r3, [pc, #508]	; (800994c <tcp_receive+0x270>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	db0e      	blt.n	8009776 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800975c:	4b7b      	ldr	r3, [pc, #492]	; (800994c <tcp_receive+0x270>)
 800975e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009760:	429a      	cmp	r2, r3
 8009762:	d125      	bne.n	80097b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009764:	4b7a      	ldr	r3, [pc, #488]	; (8009950 <tcp_receive+0x274>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	89db      	ldrh	r3, [r3, #14]
 800976a:	b29a      	uxth	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009772:	429a      	cmp	r2, r3
 8009774:	d91c      	bls.n	80097b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009776:	4b76      	ldr	r3, [pc, #472]	; (8009950 <tcp_receive+0x274>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	89db      	ldrh	r3, [r3, #14]
 800977c:	b29a      	uxth	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009790:	429a      	cmp	r2, r3
 8009792:	d205      	bcs.n	80097a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80097a0:	4b69      	ldr	r3, [pc, #420]	; (8009948 <tcp_receive+0x26c>)
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80097a8:	4b68      	ldr	r3, [pc, #416]	; (800994c <tcp_receive+0x270>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80097b0:	4b66      	ldr	r3, [pc, #408]	; (800994c <tcp_receive+0x270>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	dc58      	bgt.n	8009870 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80097be:	4b65      	ldr	r3, [pc, #404]	; (8009954 <tcp_receive+0x278>)
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d14b      	bne.n	800985e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80097d0:	4413      	add	r3, r2
 80097d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d142      	bne.n	800985e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80097de:	2b00      	cmp	r3, #0
 80097e0:	db3d      	blt.n	800985e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097e6:	4b59      	ldr	r3, [pc, #356]	; (800994c <tcp_receive+0x270>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d137      	bne.n	800985e <tcp_receive+0x182>
              found_dupack = 1;
 80097ee:	2301      	movs	r3, #1
 80097f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097f8:	2bff      	cmp	r3, #255	; 0xff
 80097fa:	d007      	beq.n	800980c <tcp_receive+0x130>
                ++pcb->dupacks;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009802:	3301      	adds	r3, #1
 8009804:	b2da      	uxtb	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009812:	2b03      	cmp	r3, #3
 8009814:	d91b      	bls.n	800984e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009820:	4413      	add	r3, r2
 8009822:	b29a      	uxth	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800982a:	429a      	cmp	r2, r3
 800982c:	d30a      	bcc.n	8009844 <tcp_receive+0x168>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009838:	4413      	add	r3, r2
 800983a:	b29a      	uxth	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009842:	e004      	b.n	800984e <tcp_receive+0x172>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800984a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009854:	2b02      	cmp	r3, #2
 8009856:	d902      	bls.n	800985e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f002 fb43 	bl	800bee4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800985e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009860:	2b00      	cmp	r3, #0
 8009862:	f040 8161 	bne.w	8009b28 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800986e:	e15b      	b.n	8009b28 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009870:	4b36      	ldr	r3, [pc, #216]	; (800994c <tcp_receive+0x270>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	3b01      	subs	r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	f2c0 814e 	blt.w	8009b1e <tcp_receive+0x442>
 8009882:	4b32      	ldr	r3, [pc, #200]	; (800994c <tcp_receive+0x270>)
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	f300 8146 	bgt.w	8009b1e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8b5b      	ldrh	r3, [r3, #26]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	d010      	beq.n	80098c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	8b5b      	ldrh	r3, [r3, #26]
 80098a2:	f023 0304 	bic.w	r3, r3, #4
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80098ce:	10db      	asrs	r3, r3, #3
 80098d0:	b21b      	sxth	r3, r3
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098da:	b29b      	uxth	r3, r3
 80098dc:	4413      	add	r3, r2
 80098de:	b29b      	uxth	r3, r3
 80098e0:	b21a      	sxth	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80098e8:	4b18      	ldr	r3, [pc, #96]	; (800994c <tcp_receive+0x270>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009900:	4b12      	ldr	r3, [pc, #72]	; (800994c <tcp_receive+0x270>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7d1b      	ldrb	r3, [r3, #20]
 800990c:	2b03      	cmp	r3, #3
 800990e:	f240 8097 	bls.w	8009a40 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800991e:	429a      	cmp	r2, r3
 8009920:	d245      	bcs.n	80099ae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	8b5b      	ldrh	r3, [r3, #26]
 8009926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800992a:	2b00      	cmp	r3, #0
 800992c:	d014      	beq.n	8009958 <tcp_receive+0x27c>
 800992e:	2301      	movs	r3, #1
 8009930:	e013      	b.n	800995a <tcp_receive+0x27e>
 8009932:	bf00      	nop
 8009934:	08011780 	.word	0x08011780
 8009938:	08011ab0 	.word	0x08011ab0
 800993c:	080117cc 	.word	0x080117cc
 8009940:	08011acc 	.word	0x08011acc
 8009944:	200086e4 	.word	0x200086e4
 8009948:	200086d8 	.word	0x200086d8
 800994c:	200086dc 	.word	0x200086dc
 8009950:	200086c8 	.word	0x200086c8
 8009954:	200086e2 	.word	0x200086e2
 8009958:	2302      	movs	r3, #2
 800995a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800995e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009962:	b29a      	uxth	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009968:	fb12 f303 	smulbb	r3, r2, r3
 800996c:	b29b      	uxth	r3, r3
 800996e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009970:	4293      	cmp	r3, r2
 8009972:	bf28      	it	cs
 8009974:	4613      	movcs	r3, r2
 8009976:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800997e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009980:	4413      	add	r3, r2
 8009982:	b29a      	uxth	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800998a:	429a      	cmp	r2, r3
 800998c:	d309      	bcc.n	80099a2 <tcp_receive+0x2c6>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009994:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009996:	4413      	add	r3, r2
 8009998:	b29a      	uxth	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80099a0:	e04e      	b.n	8009a40 <tcp_receive+0x364>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80099ac:	e048      	b.n	8009a40 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099b6:	4413      	add	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d309      	bcc.n	80099d8 <tcp_receive+0x2fc>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099cc:	4413      	add	r3, r2
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80099d6:	e004      	b.n	80099e2 <tcp_receive+0x306>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d326      	bcc.n	8009a40 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a12:	4413      	add	r3, r2
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d30a      	bcc.n	8009a36 <tcp_receive+0x35a>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a2a:	4413      	add	r3, r2
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a34:	e004      	b.n	8009a40 <tcp_receive+0x364>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a48:	4a98      	ldr	r2, [pc, #608]	; (8009cac <tcp_receive+0x5d0>)
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff fdca 	bl	80095e4 <tcp_free_acked_segments>
 8009a50:	4602      	mov	r2, r0
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5e:	4a94      	ldr	r2, [pc, #592]	; (8009cb0 <tcp_receive+0x5d4>)
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff fdbf 	bl	80095e4 <tcp_free_acked_segments>
 8009a66:	4602      	mov	r2, r0
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d104      	bne.n	8009a7e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a7a:	861a      	strh	r2, [r3, #48]	; 0x30
 8009a7c:	e002      	b.n	8009a84 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009aa0:	4b84      	ldr	r3, [pc, #528]	; (8009cb4 <tcp_receive+0x5d8>)
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	8b5b      	ldrh	r3, [r3, #26]
 8009ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d035      	beq.n	8009b26 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d118      	bne.n	8009af4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00c      	beq.n	8009ae4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fa fefb 	bl	80048d2 <lwip_htonl>
 8009adc:	4603      	mov	r3, r0
 8009ade:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dc20      	bgt.n	8009b26 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	8b5b      	ldrh	r3, [r3, #26]
 8009ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009af2:	e018      	b.n	8009b26 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fa fee6 	bl	80048d2 <lwip_htonl>
 8009b06:	4603      	mov	r3, r0
 8009b08:	1ae3      	subs	r3, r4, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dc0b      	bgt.n	8009b26 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	8b5b      	ldrh	r3, [r3, #26]
 8009b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b1c:	e003      	b.n	8009b26 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f002 fbce 	bl	800c2c0 <tcp_send_empty_ack>
 8009b24:	e000      	b.n	8009b28 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b26:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d05b      	beq.n	8009be8 <tcp_receive+0x50c>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b34:	4b60      	ldr	r3, [pc, #384]	; (8009cb8 <tcp_receive+0x5dc>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da54      	bge.n	8009be8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009b3e:	4b5f      	ldr	r3, [pc, #380]	; (8009cbc <tcp_receive+0x5e0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009b52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b5c:	10db      	asrs	r3, r3, #3
 8009b5e:	b21b      	sxth	r3, r3
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b76:	4413      	add	r3, r2
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	b21a      	sxth	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009b80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	da05      	bge.n	8009b94 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009b88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b8c:	425b      	negs	r3, r3
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009b94:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009b9e:	109b      	asrs	r3, r3, #2
 8009ba0:	b21b      	sxth	r3, r3
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009bb8:	4413      	add	r3, r2
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	b21a      	sxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009bc8:	10db      	asrs	r3, r3, #3
 8009bca:	b21b      	sxth	r3, r3
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	b21a      	sxth	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009be8:	4b35      	ldr	r3, [pc, #212]	; (8009cc0 <tcp_receive+0x5e4>)
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 84e2 	beq.w	800a5b6 <tcp_receive+0xeda>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	7d1b      	ldrb	r3, [r3, #20]
 8009bf6:	2b06      	cmp	r3, #6
 8009bf8:	f200 84dd 	bhi.w	800a5b6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c00:	4b30      	ldr	r3, [pc, #192]	; (8009cc4 <tcp_receive+0x5e8>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f2c0 808f 	blt.w	8009d2c <tcp_receive+0x650>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c12:	4b2b      	ldr	r3, [pc, #172]	; (8009cc0 <tcp_receive+0x5e4>)
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	4619      	mov	r1, r3
 8009c18:	4b2a      	ldr	r3, [pc, #168]	; (8009cc4 <tcp_receive+0x5e8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	440b      	add	r3, r1
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	3301      	adds	r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f300 8082 	bgt.w	8009d2c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009c28:	4b27      	ldr	r3, [pc, #156]	; (8009cc8 <tcp_receive+0x5ec>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c32:	4b24      	ldr	r3, [pc, #144]	; (8009cc4 <tcp_receive+0x5e8>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009c3a:	4b23      	ldr	r3, [pc, #140]	; (8009cc8 <tcp_receive+0x5ec>)
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d106      	bne.n	8009c50 <tcp_receive+0x574>
 8009c42:	4b22      	ldr	r3, [pc, #136]	; (8009ccc <tcp_receive+0x5f0>)
 8009c44:	f240 5294 	movw	r2, #1428	; 0x594
 8009c48:	4921      	ldr	r1, [pc, #132]	; (8009cd0 <tcp_receive+0x5f4>)
 8009c4a:	4822      	ldr	r0, [pc, #136]	; (8009cd4 <tcp_receive+0x5f8>)
 8009c4c:	f005 fabc 	bl	800f1c8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d906      	bls.n	8009c68 <tcp_receive+0x58c>
 8009c5a:	4b1c      	ldr	r3, [pc, #112]	; (8009ccc <tcp_receive+0x5f0>)
 8009c5c:	f240 5295 	movw	r2, #1429	; 0x595
 8009c60:	491d      	ldr	r1, [pc, #116]	; (8009cd8 <tcp_receive+0x5fc>)
 8009c62:	481c      	ldr	r0, [pc, #112]	; (8009cd4 <tcp_receive+0x5f8>)
 8009c64:	f005 fab0 	bl	800f1c8 <iprintf>
      off = (u16_t)off32;
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009c6e:	4b16      	ldr	r3, [pc, #88]	; (8009cc8 <tcp_receive+0x5ec>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	891b      	ldrh	r3, [r3, #8]
 8009c74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d906      	bls.n	8009c8a <tcp_receive+0x5ae>
 8009c7c:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <tcp_receive+0x5f0>)
 8009c7e:	f240 5297 	movw	r2, #1431	; 0x597
 8009c82:	4916      	ldr	r1, [pc, #88]	; (8009cdc <tcp_receive+0x600>)
 8009c84:	4813      	ldr	r0, [pc, #76]	; (8009cd4 <tcp_receive+0x5f8>)
 8009c86:	f005 fa9f 	bl	800f1c8 <iprintf>
      inseg.len -= off;
 8009c8a:	4b0f      	ldr	r3, [pc, #60]	; (8009cc8 <tcp_receive+0x5ec>)
 8009c8c:	891a      	ldrh	r2, [r3, #8]
 8009c8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <tcp_receive+0x5ec>)
 8009c98:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009c9a:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <tcp_receive+0x5ec>)
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	891a      	ldrh	r2, [r3, #8]
 8009ca0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009ca8:	e02a      	b.n	8009d00 <tcp_receive+0x624>
 8009caa:	bf00      	nop
 8009cac:	08011ae8 	.word	0x08011ae8
 8009cb0:	08011af0 	.word	0x08011af0
 8009cb4:	200086e0 	.word	0x200086e0
 8009cb8:	200086dc 	.word	0x200086dc
 8009cbc:	200086a0 	.word	0x200086a0
 8009cc0:	200086e2 	.word	0x200086e2
 8009cc4:	200086d8 	.word	0x200086d8
 8009cc8:	200086b8 	.word	0x200086b8
 8009ccc:	08011780 	.word	0x08011780
 8009cd0:	08011af8 	.word	0x08011af8
 8009cd4:	080117cc 	.word	0x080117cc
 8009cd8:	08011b08 	.word	0x08011b08
 8009cdc:	08011b18 	.word	0x08011b18
        off -= p->len;
 8009ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ce2:	895b      	ldrh	r3, [r3, #10]
 8009ce4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009cf2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d02:	895b      	ldrh	r3, [r3, #10]
 8009d04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d8e9      	bhi.n	8009ce0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009d0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d10:	4619      	mov	r1, r3
 8009d12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009d14:	f7fc f8d6 	bl	8005ec4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	4a91      	ldr	r2, [pc, #580]	; (8009f64 <tcp_receive+0x888>)
 8009d1e:	6013      	str	r3, [r2, #0]
 8009d20:	4b91      	ldr	r3, [pc, #580]	; (8009f68 <tcp_receive+0x88c>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	4a8f      	ldr	r2, [pc, #572]	; (8009f64 <tcp_receive+0x888>)
 8009d26:	6812      	ldr	r2, [r2, #0]
 8009d28:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009d2a:	e00d      	b.n	8009d48 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009d2c:	4b8d      	ldr	r3, [pc, #564]	; (8009f64 <tcp_receive+0x888>)
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da06      	bge.n	8009d48 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	8b5b      	ldrh	r3, [r3, #26]
 8009d3e:	f043 0302 	orr.w	r3, r3, #2
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009d48:	4b86      	ldr	r3, [pc, #536]	; (8009f64 <tcp_receive+0x888>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f2c0 842a 	blt.w	800a5ac <tcp_receive+0xed0>
 8009d58:	4b82      	ldr	r3, [pc, #520]	; (8009f64 <tcp_receive+0x888>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d64:	440b      	add	r3, r1
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	3301      	adds	r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f300 841e 	bgt.w	800a5ac <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d74:	4b7b      	ldr	r3, [pc, #492]	; (8009f64 <tcp_receive+0x888>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	f040 829a 	bne.w	800a2b2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009d7e:	4b7a      	ldr	r3, [pc, #488]	; (8009f68 <tcp_receive+0x88c>)
 8009d80:	891c      	ldrh	r4, [r3, #8]
 8009d82:	4b79      	ldr	r3, [pc, #484]	; (8009f68 <tcp_receive+0x88c>)
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	899b      	ldrh	r3, [r3, #12]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fa fd8c 	bl	80048a8 <lwip_htons>
 8009d90:	4603      	mov	r3, r0
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f003 0303 	and.w	r3, r3, #3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <tcp_receive+0x6c4>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e000      	b.n	8009da2 <tcp_receive+0x6c6>
 8009da0:	2300      	movs	r3, #0
 8009da2:	4423      	add	r3, r4
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	4b71      	ldr	r3, [pc, #452]	; (8009f6c <tcp_receive+0x890>)
 8009da8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009dae:	4b6f      	ldr	r3, [pc, #444]	; (8009f6c <tcp_receive+0x890>)
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d275      	bcs.n	8009ea2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009db6:	4b6c      	ldr	r3, [pc, #432]	; (8009f68 <tcp_receive+0x88c>)
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	899b      	ldrh	r3, [r3, #12]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fa fd72 	bl	80048a8 <lwip_htons>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01f      	beq.n	8009e10 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009dd0:	4b65      	ldr	r3, [pc, #404]	; (8009f68 <tcp_receive+0x88c>)
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	899b      	ldrh	r3, [r3, #12]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	b21b      	sxth	r3, r3
 8009dda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dde:	b21c      	sxth	r4, r3
 8009de0:	4b61      	ldr	r3, [pc, #388]	; (8009f68 <tcp_receive+0x88c>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	899b      	ldrh	r3, [r3, #12]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fa fd5d 	bl	80048a8 <lwip_htons>
 8009dee:	4603      	mov	r3, r0
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fa fd54 	bl	80048a8 <lwip_htons>
 8009e00:	4603      	mov	r3, r0
 8009e02:	b21b      	sxth	r3, r3
 8009e04:	4323      	orrs	r3, r4
 8009e06:	b21a      	sxth	r2, r3
 8009e08:	4b57      	ldr	r3, [pc, #348]	; (8009f68 <tcp_receive+0x88c>)
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	b292      	uxth	r2, r2
 8009e0e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e14:	4b54      	ldr	r3, [pc, #336]	; (8009f68 <tcp_receive+0x88c>)
 8009e16:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e18:	4b53      	ldr	r3, [pc, #332]	; (8009f68 <tcp_receive+0x88c>)
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	899b      	ldrh	r3, [r3, #12]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fa fd41 	bl	80048a8 <lwip_htons>
 8009e26:	4603      	mov	r3, r0
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f003 0302 	and.w	r3, r3, #2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d005      	beq.n	8009e3e <tcp_receive+0x762>
            inseg.len -= 1;
 8009e32:	4b4d      	ldr	r3, [pc, #308]	; (8009f68 <tcp_receive+0x88c>)
 8009e34:	891b      	ldrh	r3, [r3, #8]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	4b4b      	ldr	r3, [pc, #300]	; (8009f68 <tcp_receive+0x88c>)
 8009e3c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009e3e:	4b4a      	ldr	r3, [pc, #296]	; (8009f68 <tcp_receive+0x88c>)
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	4a49      	ldr	r2, [pc, #292]	; (8009f68 <tcp_receive+0x88c>)
 8009e44:	8912      	ldrh	r2, [r2, #8]
 8009e46:	4611      	mov	r1, r2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fb ff3b 	bl	8005cc4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009e4e:	4b46      	ldr	r3, [pc, #280]	; (8009f68 <tcp_receive+0x88c>)
 8009e50:	891c      	ldrh	r4, [r3, #8]
 8009e52:	4b45      	ldr	r3, [pc, #276]	; (8009f68 <tcp_receive+0x88c>)
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	899b      	ldrh	r3, [r3, #12]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fa fd24 	bl	80048a8 <lwip_htons>
 8009e60:	4603      	mov	r3, r0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <tcp_receive+0x794>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <tcp_receive+0x796>
 8009e70:	2300      	movs	r3, #0
 8009e72:	4423      	add	r3, r4
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	4b3d      	ldr	r3, [pc, #244]	; (8009f6c <tcp_receive+0x890>)
 8009e78:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e7a:	4b3c      	ldr	r3, [pc, #240]	; (8009f6c <tcp_receive+0x890>)
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	4b38      	ldr	r3, [pc, #224]	; (8009f64 <tcp_receive+0x888>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	441a      	add	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e8e:	440b      	add	r3, r1
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d006      	beq.n	8009ea2 <tcp_receive+0x7c6>
 8009e94:	4b36      	ldr	r3, [pc, #216]	; (8009f70 <tcp_receive+0x894>)
 8009e96:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009e9a:	4936      	ldr	r1, [pc, #216]	; (8009f74 <tcp_receive+0x898>)
 8009e9c:	4836      	ldr	r0, [pc, #216]	; (8009f78 <tcp_receive+0x89c>)
 8009e9e:	f005 f993 	bl	800f1c8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80e7 	beq.w	800a07a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009eac:	4b2e      	ldr	r3, [pc, #184]	; (8009f68 <tcp_receive+0x88c>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	899b      	ldrh	r3, [r3, #12]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fa fcf7 	bl	80048a8 <lwip_htons>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d010      	beq.n	8009ee8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009ec6:	e00a      	b.n	8009ede <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ecc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f7fd fca6 	bl	800782a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1f0      	bne.n	8009ec8 <tcp_receive+0x7ec>
 8009ee6:	e0c8      	b.n	800a07a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009eee:	e052      	b.n	8009f96 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	899b      	ldrh	r3, [r3, #12]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fa fcd5 	bl	80048a8 <lwip_htons>
 8009efe:	4603      	mov	r3, r0
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d03d      	beq.n	8009f86 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009f0a:	4b17      	ldr	r3, [pc, #92]	; (8009f68 <tcp_receive+0x88c>)
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	899b      	ldrh	r3, [r3, #12]
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fa fcc8 	bl	80048a8 <lwip_htons>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d130      	bne.n	8009f86 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009f24:	4b10      	ldr	r3, [pc, #64]	; (8009f68 <tcp_receive+0x88c>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	899b      	ldrh	r3, [r3, #12]
 8009f2a:	b29c      	uxth	r4, r3
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	f7fa fcbb 	bl	80048a8 <lwip_htons>
 8009f32:	4603      	mov	r3, r0
 8009f34:	461a      	mov	r2, r3
 8009f36:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <tcp_receive+0x88c>)
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	4322      	orrs	r2, r4
 8009f3c:	b292      	uxth	r2, r2
 8009f3e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009f40:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <tcp_receive+0x88c>)
 8009f42:	891c      	ldrh	r4, [r3, #8]
 8009f44:	4b08      	ldr	r3, [pc, #32]	; (8009f68 <tcp_receive+0x88c>)
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	899b      	ldrh	r3, [r3, #12]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fa fcab 	bl	80048a8 <lwip_htons>
 8009f52:	4603      	mov	r3, r0
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00e      	beq.n	8009f7c <tcp_receive+0x8a0>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e00d      	b.n	8009f7e <tcp_receive+0x8a2>
 8009f62:	bf00      	nop
 8009f64:	200086d8 	.word	0x200086d8
 8009f68:	200086b8 	.word	0x200086b8
 8009f6c:	200086e2 	.word	0x200086e2
 8009f70:	08011780 	.word	0x08011780
 8009f74:	08011b28 	.word	0x08011b28
 8009f78:	080117cc 	.word	0x080117cc
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4423      	add	r3, r4
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	4b98      	ldr	r3, [pc, #608]	; (800a1e4 <tcp_receive+0xb08>)
 8009f84:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f88:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009f90:	6938      	ldr	r0, [r7, #16]
 8009f92:	f7fd fc4a 	bl	800782a <tcp_seg_free>
            while (next &&
 8009f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00e      	beq.n	8009fba <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009f9c:	4b91      	ldr	r3, [pc, #580]	; (800a1e4 <tcp_receive+0xb08>)
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4b91      	ldr	r3, [pc, #580]	; (800a1e8 <tcp_receive+0xb0c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	441a      	add	r2, r3
 8009fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fb0:	8909      	ldrh	r1, [r1, #8]
 8009fb2:	440b      	add	r3, r1
 8009fb4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	da9a      	bge.n	8009ef0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d059      	beq.n	800a074 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009fc0:	4b88      	ldr	r3, [pc, #544]	; (800a1e4 <tcp_receive+0xb08>)
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4b88      	ldr	r3, [pc, #544]	; (800a1e8 <tcp_receive+0xb0c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	441a      	add	r2, r3
 8009fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dd4d      	ble.n	800a074 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	4b81      	ldr	r3, [pc, #516]	; (800a1e8 <tcp_receive+0xb0c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	4b80      	ldr	r3, [pc, #512]	; (800a1ec <tcp_receive+0xb10>)
 8009fec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009fee:	4b7f      	ldr	r3, [pc, #508]	; (800a1ec <tcp_receive+0xb10>)
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	899b      	ldrh	r3, [r3, #12]
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fa fc56 	bl	80048a8 <lwip_htons>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	f003 0302 	and.w	r3, r3, #2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d005      	beq.n	800a014 <tcp_receive+0x938>
                inseg.len -= 1;
 800a008:	4b78      	ldr	r3, [pc, #480]	; (800a1ec <tcp_receive+0xb10>)
 800a00a:	891b      	ldrh	r3, [r3, #8]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	b29a      	uxth	r2, r3
 800a010:	4b76      	ldr	r3, [pc, #472]	; (800a1ec <tcp_receive+0xb10>)
 800a012:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a014:	4b75      	ldr	r3, [pc, #468]	; (800a1ec <tcp_receive+0xb10>)
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	4a74      	ldr	r2, [pc, #464]	; (800a1ec <tcp_receive+0xb10>)
 800a01a:	8912      	ldrh	r2, [r2, #8]
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fb fe50 	bl	8005cc4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a024:	4b71      	ldr	r3, [pc, #452]	; (800a1ec <tcp_receive+0xb10>)
 800a026:	891c      	ldrh	r4, [r3, #8]
 800a028:	4b70      	ldr	r3, [pc, #448]	; (800a1ec <tcp_receive+0xb10>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	899b      	ldrh	r3, [r3, #12]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	4618      	mov	r0, r3
 800a032:	f7fa fc39 	bl	80048a8 <lwip_htons>
 800a036:	4603      	mov	r3, r0
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	f003 0303 	and.w	r3, r3, #3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <tcp_receive+0x96a>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <tcp_receive+0x96c>
 800a046:	2300      	movs	r3, #0
 800a048:	4423      	add	r3, r4
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	4b65      	ldr	r3, [pc, #404]	; (800a1e4 <tcp_receive+0xb08>)
 800a04e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a050:	4b64      	ldr	r3, [pc, #400]	; (800a1e4 <tcp_receive+0xb08>)
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	4b64      	ldr	r3, [pc, #400]	; (800a1e8 <tcp_receive+0xb0c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	441a      	add	r2, r3
 800a05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	429a      	cmp	r2, r3
 800a064:	d006      	beq.n	800a074 <tcp_receive+0x998>
 800a066:	4b62      	ldr	r3, [pc, #392]	; (800a1f0 <tcp_receive+0xb14>)
 800a068:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a06c:	4961      	ldr	r1, [pc, #388]	; (800a1f4 <tcp_receive+0xb18>)
 800a06e:	4862      	ldr	r0, [pc, #392]	; (800a1f8 <tcp_receive+0xb1c>)
 800a070:	f005 f8aa 	bl	800f1c8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a078:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a07a:	4b5a      	ldr	r3, [pc, #360]	; (800a1e4 <tcp_receive+0xb08>)
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	4b59      	ldr	r3, [pc, #356]	; (800a1e8 <tcp_receive+0xb0c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	441a      	add	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a08e:	4b55      	ldr	r3, [pc, #340]	; (800a1e4 <tcp_receive+0xb08>)
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	429a      	cmp	r2, r3
 800a094:	d206      	bcs.n	800a0a4 <tcp_receive+0x9c8>
 800a096:	4b56      	ldr	r3, [pc, #344]	; (800a1f0 <tcp_receive+0xb14>)
 800a098:	f240 6207 	movw	r2, #1543	; 0x607
 800a09c:	4957      	ldr	r1, [pc, #348]	; (800a1fc <tcp_receive+0xb20>)
 800a09e:	4856      	ldr	r0, [pc, #344]	; (800a1f8 <tcp_receive+0xb1c>)
 800a0a0:	f005 f892 	bl	800f1c8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a0a8:	4b4e      	ldr	r3, [pc, #312]	; (800a1e4 <tcp_receive+0xb08>)
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7fc fe93 	bl	8006de0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a0ba:	4b4c      	ldr	r3, [pc, #304]	; (800a1ec <tcp_receive+0xb10>)
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	891b      	ldrh	r3, [r3, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d006      	beq.n	800a0d2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a0c4:	4b49      	ldr	r3, [pc, #292]	; (800a1ec <tcp_receive+0xb10>)
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	4a4d      	ldr	r2, [pc, #308]	; (800a200 <tcp_receive+0xb24>)
 800a0ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a0cc:	4b47      	ldr	r3, [pc, #284]	; (800a1ec <tcp_receive+0xb10>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a0d2:	4b46      	ldr	r3, [pc, #280]	; (800a1ec <tcp_receive+0xb10>)
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	899b      	ldrh	r3, [r3, #12]
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fa fbe4 	bl	80048a8 <lwip_htons>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 80b8 	beq.w	800a25e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a0ee:	4b45      	ldr	r3, [pc, #276]	; (800a204 <tcp_receive+0xb28>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	f043 0320 	orr.w	r3, r3, #32
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	4b42      	ldr	r3, [pc, #264]	; (800a204 <tcp_receive+0xb28>)
 800a0fa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a0fc:	e0af      	b.n	800a25e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a102:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	4a36      	ldr	r2, [pc, #216]	; (800a1e8 <tcp_receive+0xb0c>)
 800a10e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	891b      	ldrh	r3, [r3, #8]
 800a114:	461c      	mov	r4, r3
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	899b      	ldrh	r3, [r3, #12]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fa fbc2 	bl	80048a8 <lwip_htons>
 800a124:	4603      	mov	r3, r0
 800a126:	b2db      	uxtb	r3, r3
 800a128:	f003 0303 	and.w	r3, r3, #3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <tcp_receive+0xa58>
 800a130:	2301      	movs	r3, #1
 800a132:	e000      	b.n	800a136 <tcp_receive+0xa5a>
 800a134:	2300      	movs	r3, #0
 800a136:	191a      	adds	r2, r3, r4
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	441a      	add	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a146:	461c      	mov	r4, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	891b      	ldrh	r3, [r3, #8]
 800a14c:	461d      	mov	r5, r3
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	899b      	ldrh	r3, [r3, #12]
 800a154:	b29b      	uxth	r3, r3
 800a156:	4618      	mov	r0, r3
 800a158:	f7fa fba6 	bl	80048a8 <lwip_htons>
 800a15c:	4603      	mov	r3, r0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <tcp_receive+0xa90>
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <tcp_receive+0xa92>
 800a16c:	2300      	movs	r3, #0
 800a16e:	442b      	add	r3, r5
 800a170:	429c      	cmp	r4, r3
 800a172:	d206      	bcs.n	800a182 <tcp_receive+0xaa6>
 800a174:	4b1e      	ldr	r3, [pc, #120]	; (800a1f0 <tcp_receive+0xb14>)
 800a176:	f240 622b 	movw	r2, #1579	; 0x62b
 800a17a:	4923      	ldr	r1, [pc, #140]	; (800a208 <tcp_receive+0xb2c>)
 800a17c:	481e      	ldr	r0, [pc, #120]	; (800a1f8 <tcp_receive+0xb1c>)
 800a17e:	f005 f823 	bl	800f1c8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	891b      	ldrh	r3, [r3, #8]
 800a186:	461c      	mov	r4, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	899b      	ldrh	r3, [r3, #12]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4618      	mov	r0, r3
 800a192:	f7fa fb89 	bl	80048a8 <lwip_htons>
 800a196:	4603      	mov	r3, r0
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <tcp_receive+0xaca>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e000      	b.n	800a1a8 <tcp_receive+0xacc>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	1919      	adds	r1, r3, r4
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1ae:	b28b      	uxth	r3, r1
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7fc fe11 	bl	8006de0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	891b      	ldrh	r3, [r3, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d028      	beq.n	800a21a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a1c8:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <tcp_receive+0xb24>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01d      	beq.n	800a20c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a1d0:	4b0b      	ldr	r3, [pc, #44]	; (800a200 <tcp_receive+0xb24>)
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	f7fb ffba 	bl	8006154 <pbuf_cat>
 800a1e0:	e018      	b.n	800a214 <tcp_receive+0xb38>
 800a1e2:	bf00      	nop
 800a1e4:	200086e2 	.word	0x200086e2
 800a1e8:	200086d8 	.word	0x200086d8
 800a1ec:	200086b8 	.word	0x200086b8
 800a1f0:	08011780 	.word	0x08011780
 800a1f4:	08011b60 	.word	0x08011b60
 800a1f8:	080117cc 	.word	0x080117cc
 800a1fc:	08011b9c 	.word	0x08011b9c
 800a200:	200086e8 	.word	0x200086e8
 800a204:	200086e5 	.word	0x200086e5
 800a208:	08011bbc 	.word	0x08011bbc
            } else {
              recv_data = cseg->p;
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	4a70      	ldr	r2, [pc, #448]	; (800a3d4 <tcp_receive+0xcf8>)
 800a212:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2200      	movs	r2, #0
 800a218:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	899b      	ldrh	r3, [r3, #12]
 800a220:	b29b      	uxth	r3, r3
 800a222:	4618      	mov	r0, r3
 800a224:	f7fa fb40 	bl	80048a8 <lwip_htons>
 800a228:	4603      	mov	r3, r0
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00d      	beq.n	800a250 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a234:	4b68      	ldr	r3, [pc, #416]	; (800a3d8 <tcp_receive+0xcfc>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	f043 0320 	orr.w	r3, r3, #32
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	4b66      	ldr	r3, [pc, #408]	; (800a3d8 <tcp_receive+0xcfc>)
 800a240:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7d1b      	ldrb	r3, [r3, #20]
 800a246:	2b04      	cmp	r3, #4
 800a248:	d102      	bne.n	800a250 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2207      	movs	r2, #7
 800a24e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a258:	68b8      	ldr	r0, [r7, #8]
 800a25a:	f7fd fae6 	bl	800782a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a262:	2b00      	cmp	r3, #0
 800a264:	d008      	beq.n	800a278 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a272:	429a      	cmp	r2, r3
 800a274:	f43f af43 	beq.w	800a0fe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	8b5b      	ldrh	r3, [r3, #26]
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00e      	beq.n	800a2a2 <tcp_receive+0xbc6>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	8b5b      	ldrh	r3, [r3, #26]
 800a288:	f023 0301 	bic.w	r3, r3, #1
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	835a      	strh	r2, [r3, #26]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	8b5b      	ldrh	r3, [r3, #26]
 800a296:	f043 0302 	orr.w	r3, r3, #2
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a2a0:	e188      	b.n	800a5b4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	8b5b      	ldrh	r3, [r3, #26]
 800a2a6:	f043 0301 	orr.w	r3, r3, #1
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a2b0:	e180      	b.n	800a5b4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d106      	bne.n	800a2c8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a2ba:	4848      	ldr	r0, [pc, #288]	; (800a3dc <tcp_receive+0xd00>)
 800a2bc:	f7fd faec 	bl	8007898 <tcp_seg_copy>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	675a      	str	r2, [r3, #116]	; 0x74
 800a2c6:	e16d      	b.n	800a5a4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2d2:	e157      	b.n	800a584 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	685a      	ldr	r2, [r3, #4]
 800a2da:	4b41      	ldr	r3, [pc, #260]	; (800a3e0 <tcp_receive+0xd04>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d11d      	bne.n	800a31e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a2e2:	4b3e      	ldr	r3, [pc, #248]	; (800a3dc <tcp_receive+0xd00>)
 800a2e4:	891a      	ldrh	r2, [r3, #8]
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e8:	891b      	ldrh	r3, [r3, #8]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	f240 814f 	bls.w	800a58e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a2f0:	483a      	ldr	r0, [pc, #232]	; (800a3dc <tcp_receive+0xd00>)
 800a2f2:	f7fd fad1 	bl	8007898 <tcp_seg_copy>
 800a2f6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 8149 	beq.w	800a592 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <tcp_receive+0xc32>
                    prev->next = cseg;
 800a306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	e002      	b.n	800a314 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a314:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a316:	6978      	ldr	r0, [r7, #20]
 800a318:	f7ff f8dc 	bl	80094d4 <tcp_oos_insert_segment>
                }
                break;
 800a31c:	e139      	b.n	800a592 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a320:	2b00      	cmp	r3, #0
 800a322:	d117      	bne.n	800a354 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a324:	4b2e      	ldr	r3, [pc, #184]	; (800a3e0 <tcp_receive+0xd04>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	da57      	bge.n	800a3e4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a334:	4829      	ldr	r0, [pc, #164]	; (800a3dc <tcp_receive+0xd00>)
 800a336:	f7fd faaf 	bl	8007898 <tcp_seg_copy>
 800a33a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 8129 	beq.w	800a596 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a34a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a34c:	69b8      	ldr	r0, [r7, #24]
 800a34e:	f7ff f8c1 	bl	80094d4 <tcp_oos_insert_segment>
                  }
                  break;
 800a352:	e120      	b.n	800a596 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a354:	4b22      	ldr	r3, [pc, #136]	; (800a3e0 <tcp_receive+0xd04>)
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	3b01      	subs	r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	db3e      	blt.n	800a3e4 <tcp_receive+0xd08>
 800a366:	4b1e      	ldr	r3, [pc, #120]	; (800a3e0 <tcp_receive+0xd04>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	3301      	adds	r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	dc35      	bgt.n	800a3e4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a378:	4818      	ldr	r0, [pc, #96]	; (800a3dc <tcp_receive+0xd00>)
 800a37a:	f7fd fa8d 	bl	8007898 <tcp_seg_copy>
 800a37e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8109 	beq.w	800a59a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a390:	8912      	ldrh	r2, [r2, #8]
 800a392:	441a      	add	r2, r3
 800a394:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <tcp_receive+0xd04>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	dd12      	ble.n	800a3c4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a39e:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <tcp_receive+0xd04>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ba:	891b      	ldrh	r3, [r3, #8]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f7fb fc80 	bl	8005cc4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a3ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3cc:	69f8      	ldr	r0, [r7, #28]
 800a3ce:	f7ff f881 	bl	80094d4 <tcp_oos_insert_segment>
                  }
                  break;
 800a3d2:	e0e2      	b.n	800a59a <tcp_receive+0xebe>
 800a3d4:	200086e8 	.word	0x200086e8
 800a3d8:	200086e5 	.word	0x200086e5
 800a3dc:	200086b8 	.word	0x200086b8
 800a3e0:	200086d8 	.word	0x200086d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f040 80c6 	bne.w	800a57e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a3f2:	4b80      	ldr	r3, [pc, #512]	; (800a5f4 <tcp_receive+0xf18>)
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f340 80bd 	ble.w	800a57e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	899b      	ldrh	r3, [r3, #12]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fa fa4b 	bl	80048a8 <lwip_htons>
 800a412:	4603      	mov	r3, r0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f040 80bf 	bne.w	800a59e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a420:	4875      	ldr	r0, [pc, #468]	; (800a5f8 <tcp_receive+0xf1c>)
 800a422:	f7fd fa39 	bl	8007898 <tcp_seg_copy>
 800a426:	4602      	mov	r2, r0
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 80b6 	beq.w	800a5a2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a43e:	8912      	ldrh	r2, [r2, #8]
 800a440:	441a      	add	r2, r3
 800a442:	4b6c      	ldr	r3, [pc, #432]	; (800a5f4 <tcp_receive+0xf18>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	dd12      	ble.n	800a472 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a44c:	4b69      	ldr	r3, [pc, #420]	; (800a5f4 <tcp_receive+0xf18>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	b29a      	uxth	r2, r3
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	891b      	ldrh	r3, [r3, #8]
 800a46a:	4619      	mov	r1, r3
 800a46c:	4610      	mov	r0, r2
 800a46e:	f7fb fc29 	bl	8005cc4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a472:	4b62      	ldr	r3, [pc, #392]	; (800a5fc <tcp_receive+0xf20>)
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	4b5e      	ldr	r3, [pc, #376]	; (800a5f4 <tcp_receive+0xf18>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	441a      	add	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a486:	440b      	add	r3, r1
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f340 8089 	ble.w	800a5a2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	899b      	ldrh	r3, [r3, #12]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fa fa04 	bl	80048a8 <lwip_htons>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d022      	beq.n	800a4f2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	899b      	ldrh	r3, [r3, #12]
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	b21b      	sxth	r3, r3
 800a4b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a4bc:	b21c      	sxth	r4, r3
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	899b      	ldrh	r3, [r3, #12]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fa f9ed 	bl	80048a8 <lwip_htons>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fa f9e4 	bl	80048a8 <lwip_htons>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	b21b      	sxth	r3, r3
 800a4e4:	4323      	orrs	r3, r4
 800a4e6:	b21a      	sxth	r2, r3
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	b292      	uxth	r2, r2
 800a4f0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4fc:	4413      	add	r3, r2
 800a4fe:	b299      	uxth	r1, r3
 800a500:	4b3c      	ldr	r3, [pc, #240]	; (800a5f4 <tcp_receive+0xf18>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	b29a      	uxth	r2, r3
 800a506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	1a8a      	subs	r2, r1, r2
 800a50c:	b292      	uxth	r2, r2
 800a50e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	891b      	ldrh	r3, [r3, #8]
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f7fb fbd0 	bl	8005cc4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	891c      	ldrh	r4, [r3, #8]
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	899b      	ldrh	r3, [r3, #12]
 800a532:	b29b      	uxth	r3, r3
 800a534:	4618      	mov	r0, r3
 800a536:	f7fa f9b7 	bl	80048a8 <lwip_htons>
 800a53a:	4603      	mov	r3, r0
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 0303 	and.w	r3, r3, #3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <tcp_receive+0xe6e>
 800a546:	2301      	movs	r3, #1
 800a548:	e000      	b.n	800a54c <tcp_receive+0xe70>
 800a54a:	2300      	movs	r3, #0
 800a54c:	4423      	add	r3, r4
 800a54e:	b29a      	uxth	r2, r3
 800a550:	4b2a      	ldr	r3, [pc, #168]	; (800a5fc <tcp_receive+0xf20>)
 800a552:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a554:	4b29      	ldr	r3, [pc, #164]	; (800a5fc <tcp_receive+0xf20>)
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	461a      	mov	r2, r3
 800a55a:	4b26      	ldr	r3, [pc, #152]	; (800a5f4 <tcp_receive+0xf18>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	441a      	add	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	6879      	ldr	r1, [r7, #4]
 800a566:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a568:	440b      	add	r3, r1
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d019      	beq.n	800a5a2 <tcp_receive+0xec6>
 800a56e:	4b24      	ldr	r3, [pc, #144]	; (800a600 <tcp_receive+0xf24>)
 800a570:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a574:	4923      	ldr	r1, [pc, #140]	; (800a604 <tcp_receive+0xf28>)
 800a576:	4824      	ldr	r0, [pc, #144]	; (800a608 <tcp_receive+0xf2c>)
 800a578:	f004 fe26 	bl	800f1c8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a57c:	e011      	b.n	800a5a2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	63bb      	str	r3, [r7, #56]	; 0x38
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	2b00      	cmp	r3, #0
 800a588:	f47f aea4 	bne.w	800a2d4 <tcp_receive+0xbf8>
 800a58c:	e00a      	b.n	800a5a4 <tcp_receive+0xec8>
                break;
 800a58e:	bf00      	nop
 800a590:	e008      	b.n	800a5a4 <tcp_receive+0xec8>
                break;
 800a592:	bf00      	nop
 800a594:	e006      	b.n	800a5a4 <tcp_receive+0xec8>
                  break;
 800a596:	bf00      	nop
 800a598:	e004      	b.n	800a5a4 <tcp_receive+0xec8>
                  break;
 800a59a:	bf00      	nop
 800a59c:	e002      	b.n	800a5a4 <tcp_receive+0xec8>
                  break;
 800a59e:	bf00      	nop
 800a5a0:	e000      	b.n	800a5a4 <tcp_receive+0xec8>
                break;
 800a5a2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 fe8b 	bl	800c2c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a5aa:	e003      	b.n	800a5b4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f001 fe87 	bl	800c2c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a5b2:	e01a      	b.n	800a5ea <tcp_receive+0xf0e>
 800a5b4:	e019      	b.n	800a5ea <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a5b6:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <tcp_receive+0xf18>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	db0a      	blt.n	800a5da <tcp_receive+0xefe>
 800a5c4:	4b0b      	ldr	r3, [pc, #44]	; (800a5f4 <tcp_receive+0xf18>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	6879      	ldr	r1, [r7, #4]
 800a5ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5d0:	440b      	add	r3, r1
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	dd07      	ble.n	800a5ea <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	8b5b      	ldrh	r3, [r3, #26]
 800a5de:	f043 0302 	orr.w	r3, r3, #2
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a5e8:	e7ff      	b.n	800a5ea <tcp_receive+0xf0e>
 800a5ea:	bf00      	nop
 800a5ec:	3750      	adds	r7, #80	; 0x50
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	200086d8 	.word	0x200086d8
 800a5f8:	200086b8 	.word	0x200086b8
 800a5fc:	200086e2 	.word	0x200086e2
 800a600:	08011780 	.word	0x08011780
 800a604:	08011b28 	.word	0x08011b28
 800a608:	080117cc 	.word	0x080117cc

0800a60c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a612:	4b15      	ldr	r3, [pc, #84]	; (800a668 <tcp_get_next_optbyte+0x5c>)
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	b291      	uxth	r1, r2
 800a61a:	4a13      	ldr	r2, [pc, #76]	; (800a668 <tcp_get_next_optbyte+0x5c>)
 800a61c:	8011      	strh	r1, [r2, #0]
 800a61e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a620:	4b12      	ldr	r3, [pc, #72]	; (800a66c <tcp_get_next_optbyte+0x60>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d004      	beq.n	800a632 <tcp_get_next_optbyte+0x26>
 800a628:	4b11      	ldr	r3, [pc, #68]	; (800a670 <tcp_get_next_optbyte+0x64>)
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	88fa      	ldrh	r2, [r7, #6]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d208      	bcs.n	800a644 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a632:	4b10      	ldr	r3, [pc, #64]	; (800a674 <tcp_get_next_optbyte+0x68>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3314      	adds	r3, #20
 800a638:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	4413      	add	r3, r2
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	e00b      	b.n	800a65c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a644:	88fb      	ldrh	r3, [r7, #6]
 800a646:	b2da      	uxtb	r2, r3
 800a648:	4b09      	ldr	r3, [pc, #36]	; (800a670 <tcp_get_next_optbyte+0x64>)
 800a64a:	881b      	ldrh	r3, [r3, #0]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a652:	4b06      	ldr	r3, [pc, #24]	; (800a66c <tcp_get_next_optbyte+0x60>)
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	797b      	ldrb	r3, [r7, #5]
 800a658:	4413      	add	r3, r2
 800a65a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	200086d4 	.word	0x200086d4
 800a66c:	200086d0 	.word	0x200086d0
 800a670:	200086ce 	.word	0x200086ce
 800a674:	200086c8 	.word	0x200086c8

0800a678 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d106      	bne.n	800a694 <tcp_parseopt+0x1c>
 800a686:	4b32      	ldr	r3, [pc, #200]	; (800a750 <tcp_parseopt+0xd8>)
 800a688:	f240 727d 	movw	r2, #1917	; 0x77d
 800a68c:	4931      	ldr	r1, [pc, #196]	; (800a754 <tcp_parseopt+0xdc>)
 800a68e:	4832      	ldr	r0, [pc, #200]	; (800a758 <tcp_parseopt+0xe0>)
 800a690:	f004 fd9a 	bl	800f1c8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a694:	4b31      	ldr	r3, [pc, #196]	; (800a75c <tcp_parseopt+0xe4>)
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d055      	beq.n	800a748 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a69c:	4b30      	ldr	r3, [pc, #192]	; (800a760 <tcp_parseopt+0xe8>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	801a      	strh	r2, [r3, #0]
 800a6a2:	e045      	b.n	800a730 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a6a4:	f7ff ffb2 	bl	800a60c <tcp_get_next_optbyte>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d006      	beq.n	800a6c0 <tcp_parseopt+0x48>
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	dc2b      	bgt.n	800a70e <tcp_parseopt+0x96>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d041      	beq.n	800a73e <tcp_parseopt+0xc6>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d127      	bne.n	800a70e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a6be:	e037      	b.n	800a730 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a6c0:	f7ff ffa4 	bl	800a60c <tcp_get_next_optbyte>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d13b      	bne.n	800a742 <tcp_parseopt+0xca>
 800a6ca:	4b25      	ldr	r3, [pc, #148]	; (800a760 <tcp_parseopt+0xe8>)
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	4a22      	ldr	r2, [pc, #136]	; (800a75c <tcp_parseopt+0xe4>)
 800a6d2:	8812      	ldrh	r2, [r2, #0]
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	da34      	bge.n	800a742 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a6d8:	f7ff ff98 	bl	800a60c <tcp_get_next_optbyte>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a6e4:	f7ff ff92 	bl	800a60c <tcp_get_next_optbyte>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	89bb      	ldrh	r3, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a6f2:	89bb      	ldrh	r3, [r7, #12]
 800a6f4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a6f8:	d804      	bhi.n	800a704 <tcp_parseopt+0x8c>
 800a6fa:	89bb      	ldrh	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <tcp_parseopt+0x8c>
 800a700:	89ba      	ldrh	r2, [r7, #12]
 800a702:	e001      	b.n	800a708 <tcp_parseopt+0x90>
 800a704:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a70c:	e010      	b.n	800a730 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a70e:	f7ff ff7d 	bl	800a60c <tcp_get_next_optbyte>
 800a712:	4603      	mov	r3, r0
 800a714:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a716:	7afb      	ldrb	r3, [r7, #11]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d914      	bls.n	800a746 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a71c:	7afb      	ldrb	r3, [r7, #11]
 800a71e:	b29a      	uxth	r2, r3
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <tcp_parseopt+0xe8>)
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	4413      	add	r3, r2
 800a726:	b29b      	uxth	r3, r3
 800a728:	3b02      	subs	r3, #2
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <tcp_parseopt+0xe8>)
 800a72e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a730:	4b0b      	ldr	r3, [pc, #44]	; (800a760 <tcp_parseopt+0xe8>)
 800a732:	881a      	ldrh	r2, [r3, #0]
 800a734:	4b09      	ldr	r3, [pc, #36]	; (800a75c <tcp_parseopt+0xe4>)
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d3b3      	bcc.n	800a6a4 <tcp_parseopt+0x2c>
 800a73c:	e004      	b.n	800a748 <tcp_parseopt+0xd0>
          return;
 800a73e:	bf00      	nop
 800a740:	e002      	b.n	800a748 <tcp_parseopt+0xd0>
            return;
 800a742:	bf00      	nop
 800a744:	e000      	b.n	800a748 <tcp_parseopt+0xd0>
            return;
 800a746:	bf00      	nop
      }
    }
  }
}
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	08011780 	.word	0x08011780
 800a754:	08011be4 	.word	0x08011be4
 800a758:	080117cc 	.word	0x080117cc
 800a75c:	200086cc 	.word	0x200086cc
 800a760:	200086d4 	.word	0x200086d4

0800a764 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a764:	b480      	push	{r7}
 800a766:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <tcp_trigger_input_pcb_close+0x1c>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f043 0310 	orr.w	r3, r3, #16
 800a770:	b2da      	uxtb	r2, r3
 800a772:	4b03      	ldr	r3, [pc, #12]	; (800a780 <tcp_trigger_input_pcb_close+0x1c>)
 800a774:	701a      	strb	r2, [r3, #0]
}
 800a776:	bf00      	nop
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	200086e5 	.word	0x200086e5

0800a784 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <tcp_route+0x28>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	7a1b      	ldrb	r3, [r3, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d006      	beq.n	800a7ac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	7a1b      	ldrb	r3, [r3, #8]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fb f8b4 	bl	8005910 <netif_get_by_index>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	e003      	b.n	800a7b4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f003 fad5 	bl	800dd5c <ip4_route>
 800a7b2:	4603      	mov	r3, r0
  }
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a7bc:	b590      	push	{r4, r7, lr}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	603b      	str	r3, [r7, #0]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d105      	bne.n	800a7de <tcp_create_segment+0x22>
 800a7d2:	4b44      	ldr	r3, [pc, #272]	; (800a8e4 <tcp_create_segment+0x128>)
 800a7d4:	22a3      	movs	r2, #163	; 0xa3
 800a7d6:	4944      	ldr	r1, [pc, #272]	; (800a8e8 <tcp_create_segment+0x12c>)
 800a7d8:	4844      	ldr	r0, [pc, #272]	; (800a8ec <tcp_create_segment+0x130>)
 800a7da:	f004 fcf5 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d105      	bne.n	800a7f0 <tcp_create_segment+0x34>
 800a7e4:	4b3f      	ldr	r3, [pc, #252]	; (800a8e4 <tcp_create_segment+0x128>)
 800a7e6:	22a4      	movs	r2, #164	; 0xa4
 800a7e8:	4941      	ldr	r1, [pc, #260]	; (800a8f0 <tcp_create_segment+0x134>)
 800a7ea:	4840      	ldr	r0, [pc, #256]	; (800a8ec <tcp_create_segment+0x130>)
 800a7ec:	f004 fcec 	bl	800f1c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a7f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a7fe:	2003      	movs	r0, #3
 800a800:	f7fa fd00 	bl	8005204 <memp_malloc>
 800a804:	6138      	str	r0, [r7, #16]
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a80c:	68b8      	ldr	r0, [r7, #8]
 800a80e:	f7fb fbdf 	bl	8005fd0 <pbuf_free>
    return NULL;
 800a812:	2300      	movs	r3, #0
 800a814:	e061      	b.n	800a8da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a81c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	891a      	ldrh	r2, [r3, #8]
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
 800a830:	b29b      	uxth	r3, r3
 800a832:	429a      	cmp	r2, r3
 800a834:	d205      	bcs.n	800a842 <tcp_create_segment+0x86>
 800a836:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <tcp_create_segment+0x128>)
 800a838:	22b0      	movs	r2, #176	; 0xb0
 800a83a:	492e      	ldr	r1, [pc, #184]	; (800a8f4 <tcp_create_segment+0x138>)
 800a83c:	482b      	ldr	r0, [pc, #172]	; (800a8ec <tcp_create_segment+0x130>)
 800a83e:	f004 fcc3 	bl	800f1c8 <iprintf>
  seg->len = p->tot_len - optlen;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	891a      	ldrh	r2, [r3, #8]
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a852:	2114      	movs	r1, #20
 800a854:	68b8      	ldr	r0, [r7, #8]
 800a856:	f7fb fb25 	bl	8005ea4 <pbuf_add_header>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d004      	beq.n	800a86a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a860:	6938      	ldr	r0, [r7, #16]
 800a862:	f7fc ffe2 	bl	800782a <tcp_seg_free>
    return NULL;
 800a866:	2300      	movs	r3, #0
 800a868:	e037      	b.n	800a8da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	8ada      	ldrh	r2, [r3, #22]
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	68dc      	ldr	r4, [r3, #12]
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7fa f813 	bl	80048a8 <lwip_htons>
 800a882:	4603      	mov	r3, r0
 800a884:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	8b1a      	ldrh	r2, [r3, #24]
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	68dc      	ldr	r4, [r3, #12]
 800a88e:	4610      	mov	r0, r2
 800a890:	f7fa f80a 	bl	80048a8 <lwip_htons>
 800a894:	4603      	mov	r3, r0
 800a896:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	68dc      	ldr	r4, [r3, #12]
 800a89c:	6838      	ldr	r0, [r7, #0]
 800a89e:	f7fa f818 	bl	80048d2 <lwip_htonl>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
 800a8a8:	089b      	lsrs	r3, r3, #2
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	3305      	adds	r3, #5
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	031b      	lsls	r3, r3, #12
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	68dc      	ldr	r4, [r3, #12]
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	f7f9 fff0 	bl	80048a8 <lwip_htons>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	749a      	strb	r2, [r3, #18]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	74da      	strb	r2, [r3, #19]
  return seg;
 800a8d8:	693b      	ldr	r3, [r7, #16]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd90      	pop	{r4, r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	08011c00 	.word	0x08011c00
 800a8e8:	08011c34 	.word	0x08011c34
 800a8ec:	08011c54 	.word	0x08011c54
 800a8f0:	08011c7c 	.word	0x08011c7c
 800a8f4:	08011ca0 	.word	0x08011ca0

0800a8f8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	607b      	str	r3, [r7, #4]
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]
 800a904:	460b      	mov	r3, r1
 800a906:	81bb      	strh	r3, [r7, #12]
 800a908:	4613      	mov	r3, r2
 800a90a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a90c:	89bb      	ldrh	r3, [r7, #12]
 800a90e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <tcp_pbuf_prealloc+0x2a>
 800a916:	4b30      	ldr	r3, [pc, #192]	; (800a9d8 <tcp_pbuf_prealloc+0xe0>)
 800a918:	22e8      	movs	r2, #232	; 0xe8
 800a91a:	4930      	ldr	r1, [pc, #192]	; (800a9dc <tcp_pbuf_prealloc+0xe4>)
 800a91c:	4830      	ldr	r0, [pc, #192]	; (800a9e0 <tcp_pbuf_prealloc+0xe8>)
 800a91e:	f004 fc53 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d105      	bne.n	800a934 <tcp_pbuf_prealloc+0x3c>
 800a928:	4b2b      	ldr	r3, [pc, #172]	; (800a9d8 <tcp_pbuf_prealloc+0xe0>)
 800a92a:	22e9      	movs	r2, #233	; 0xe9
 800a92c:	492d      	ldr	r1, [pc, #180]	; (800a9e4 <tcp_pbuf_prealloc+0xec>)
 800a92e:	482c      	ldr	r0, [pc, #176]	; (800a9e0 <tcp_pbuf_prealloc+0xe8>)
 800a930:	f004 fc4a 	bl	800f1c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a934:	89ba      	ldrh	r2, [r7, #12]
 800a936:	897b      	ldrh	r3, [r7, #10]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d221      	bcs.n	800a980 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a93c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d111      	bne.n	800a96c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	8b5b      	ldrh	r3, [r3, #26]
 800a94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a950:	2b00      	cmp	r3, #0
 800a952:	d115      	bne.n	800a980 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a954:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d007      	beq.n	800a96c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d009      	beq.n	800a980 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a96c:	89bb      	ldrh	r3, [r7, #12]
 800a96e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800a972:	f023 0203 	bic.w	r2, r3, #3
 800a976:	897b      	ldrh	r3, [r7, #10]
 800a978:	4293      	cmp	r3, r2
 800a97a:	bf28      	it	cs
 800a97c:	4613      	movcs	r3, r2
 800a97e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a980:	8af9      	ldrh	r1, [r7, #22]
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fb f83d 	bl	8005a08 <pbuf_alloc>
 800a98e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a996:	2300      	movs	r3, #0
 800a998:	e019      	b.n	800a9ce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d006      	beq.n	800a9b0 <tcp_pbuf_prealloc+0xb8>
 800a9a2:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <tcp_pbuf_prealloc+0xe0>)
 800a9a4:	f240 120b 	movw	r2, #267	; 0x10b
 800a9a8:	490f      	ldr	r1, [pc, #60]	; (800a9e8 <tcp_pbuf_prealloc+0xf0>)
 800a9aa:	480d      	ldr	r0, [pc, #52]	; (800a9e0 <tcp_pbuf_prealloc+0xe8>)
 800a9ac:	f004 fc0c 	bl	800f1c8 <iprintf>
  *oversize = p->len - length;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	895a      	ldrh	r2, [r3, #10]
 800a9b4:	89bb      	ldrh	r3, [r7, #12]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	89ba      	ldrh	r2, [r7, #12]
 800a9c2:	811a      	strh	r2, [r3, #8]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	891a      	ldrh	r2, [r3, #8]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	815a      	strh	r2, [r3, #10]
  return p;
 800a9cc:	693b      	ldr	r3, [r7, #16]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	08011c00 	.word	0x08011c00
 800a9dc:	08011cb8 	.word	0x08011cb8
 800a9e0:	08011c54 	.word	0x08011c54
 800a9e4:	08011cdc 	.word	0x08011cdc
 800a9e8:	08011cfc 	.word	0x08011cfc

0800a9ec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <tcp_write_checks+0x20>
 800a9fe:	4b33      	ldr	r3, [pc, #204]	; (800aacc <tcp_write_checks+0xe0>)
 800aa00:	f240 1233 	movw	r2, #307	; 0x133
 800aa04:	4932      	ldr	r1, [pc, #200]	; (800aad0 <tcp_write_checks+0xe4>)
 800aa06:	4833      	ldr	r0, [pc, #204]	; (800aad4 <tcp_write_checks+0xe8>)
 800aa08:	f004 fbde 	bl	800f1c8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	7d1b      	ldrb	r3, [r3, #20]
 800aa10:	2b04      	cmp	r3, #4
 800aa12:	d00e      	beq.n	800aa32 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800aa18:	2b07      	cmp	r3, #7
 800aa1a:	d00a      	beq.n	800aa32 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d006      	beq.n	800aa32 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d002      	beq.n	800aa32 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800aa2c:	f06f 030a 	mvn.w	r3, #10
 800aa30:	e048      	b.n	800aac4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800aa32:	887b      	ldrh	r3, [r7, #2]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <tcp_write_checks+0x50>
    return ERR_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	e043      	b.n	800aac4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa42:	887a      	ldrh	r2, [r7, #2]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d909      	bls.n	800aa5c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	8b5b      	ldrh	r3, [r3, #26]
 800aa4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800aa56:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5a:	e033      	b.n	800aac4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d909      	bls.n	800aa7a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	8b5b      	ldrh	r3, [r3, #26]
 800aa6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800aa74:	f04f 33ff 	mov.w	r3, #4294967295
 800aa78:	e024      	b.n	800aac4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00f      	beq.n	800aaa4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d11a      	bne.n	800aac2 <tcp_write_checks+0xd6>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d116      	bne.n	800aac2 <tcp_write_checks+0xd6>
 800aa94:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <tcp_write_checks+0xe0>)
 800aa96:	f240 1255 	movw	r2, #341	; 0x155
 800aa9a:	490f      	ldr	r1, [pc, #60]	; (800aad8 <tcp_write_checks+0xec>)
 800aa9c:	480d      	ldr	r0, [pc, #52]	; (800aad4 <tcp_write_checks+0xe8>)
 800aa9e:	f004 fb93 	bl	800f1c8 <iprintf>
 800aaa2:	e00e      	b.n	800aac2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d103      	bne.n	800aab4 <tcp_write_checks+0xc8>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d006      	beq.n	800aac2 <tcp_write_checks+0xd6>
 800aab4:	4b05      	ldr	r3, [pc, #20]	; (800aacc <tcp_write_checks+0xe0>)
 800aab6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800aaba:	4908      	ldr	r1, [pc, #32]	; (800aadc <tcp_write_checks+0xf0>)
 800aabc:	4805      	ldr	r0, [pc, #20]	; (800aad4 <tcp_write_checks+0xe8>)
 800aabe:	f004 fb83 	bl	800f1c8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	08011c00 	.word	0x08011c00
 800aad0:	08011d10 	.word	0x08011d10
 800aad4:	08011c54 	.word	0x08011c54
 800aad8:	08011d30 	.word	0x08011d30
 800aadc:	08011d6c 	.word	0x08011d6c

0800aae0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800aae0:	b590      	push	{r4, r7, lr}
 800aae2:	b09b      	sub	sp, #108	; 0x6c
 800aae4:	af04      	add	r7, sp, #16
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4611      	mov	r1, r2
 800aaec:	461a      	mov	r2, r3
 800aaee:	460b      	mov	r3, r1
 800aaf0:	80fb      	strh	r3, [r7, #6]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	653b      	str	r3, [r7, #80]	; 0x50
 800aafe:	2300      	movs	r3, #0
 800ab00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab02:	2300      	movs	r3, #0
 800ab04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab06:	2300      	movs	r3, #0
 800ab08:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d109      	bne.n	800ab3c <tcp_write+0x5c>
 800ab28:	4ba4      	ldr	r3, [pc, #656]	; (800adbc <tcp_write+0x2dc>)
 800ab2a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ab2e:	49a4      	ldr	r1, [pc, #656]	; (800adc0 <tcp_write+0x2e0>)
 800ab30:	48a4      	ldr	r0, [pc, #656]	; (800adc4 <tcp_write+0x2e4>)
 800ab32:	f004 fb49 	bl	800f1c8 <iprintf>
 800ab36:	f06f 030f 	mvn.w	r3, #15
 800ab3a:	e32a      	b.n	800b192 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab42:	085b      	lsrs	r3, r3, #1
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	bf28      	it	cs
 800ab4e:	4613      	movcs	r3, r2
 800ab50:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ab52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d102      	bne.n	800ab5e <tcp_write+0x7e>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab5c:	e000      	b.n	800ab60 <tcp_write+0x80>
 800ab5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab60:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d109      	bne.n	800ab7c <tcp_write+0x9c>
 800ab68:	4b94      	ldr	r3, [pc, #592]	; (800adbc <tcp_write+0x2dc>)
 800ab6a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ab6e:	4996      	ldr	r1, [pc, #600]	; (800adc8 <tcp_write+0x2e8>)
 800ab70:	4894      	ldr	r0, [pc, #592]	; (800adc4 <tcp_write+0x2e4>)
 800ab72:	f004 fb29 	bl	800f1c8 <iprintf>
 800ab76:	f06f 030f 	mvn.w	r3, #15
 800ab7a:	e30a      	b.n	800b192 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff ff33 	bl	800a9ec <tcp_write_checks>
 800ab86:	4603      	mov	r3, r0
 800ab88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ab8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <tcp_write+0xba>
    return err;
 800ab94:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ab98:	e2fb      	b.n	800b192 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aba0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aba4:	2300      	movs	r3, #0
 800aba6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 80f6 	beq.w	800ada0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abb8:	653b      	str	r3, [r7, #80]	; 0x50
 800abba:	e002      	b.n	800abc2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800abbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800abc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1f8      	bne.n	800abbc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800abca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abcc:	7a9b      	ldrb	r3, [r3, #10]
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	f003 0304 	and.w	r3, r3, #4
 800abd6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800abd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800abda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abdc:	891b      	ldrh	r3, [r3, #8]
 800abde:	4619      	mov	r1, r3
 800abe0:	8c3b      	ldrh	r3, [r7, #32]
 800abe2:	440b      	add	r3, r1
 800abe4:	429a      	cmp	r2, r3
 800abe6:	da06      	bge.n	800abf6 <tcp_write+0x116>
 800abe8:	4b74      	ldr	r3, [pc, #464]	; (800adbc <tcp_write+0x2dc>)
 800abea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800abee:	4977      	ldr	r1, [pc, #476]	; (800adcc <tcp_write+0x2ec>)
 800abf0:	4874      	ldr	r0, [pc, #464]	; (800adc4 <tcp_write+0x2e4>)
 800abf2:	f004 fae9 	bl	800f1c8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800abf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abf8:	891a      	ldrh	r2, [r3, #8]
 800abfa:	8c3b      	ldrh	r3, [r7, #32]
 800abfc:	4413      	add	r3, r2
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ac0c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ac0e:	8a7b      	ldrh	r3, [r7, #18]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d026      	beq.n	800ac62 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ac14:	8a7b      	ldrh	r3, [r7, #18]
 800ac16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d206      	bcs.n	800ac2a <tcp_write+0x14a>
 800ac1c:	4b67      	ldr	r3, [pc, #412]	; (800adbc <tcp_write+0x2dc>)
 800ac1e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ac22:	496b      	ldr	r1, [pc, #428]	; (800add0 <tcp_write+0x2f0>)
 800ac24:	4867      	ldr	r0, [pc, #412]	; (800adc4 <tcp_write+0x2e4>)
 800ac26:	f004 facf 	bl	800f1c8 <iprintf>
      seg = last_unsent;
 800ac2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac2c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ac2e:	8a7b      	ldrh	r3, [r7, #18]
 800ac30:	88fa      	ldrh	r2, [r7, #6]
 800ac32:	4293      	cmp	r3, r2
 800ac34:	bf28      	it	cs
 800ac36:	4613      	movcs	r3, r2
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	bf28      	it	cs
 800ac40:	4613      	movcs	r3, r2
 800ac42:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ac44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ac48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ac50:	8a7a      	ldrh	r2, [r7, #18]
 800ac52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ac5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ac5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ac62:	8a7b      	ldrh	r3, [r7, #18]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00b      	beq.n	800ac80 <tcp_write+0x1a0>
 800ac68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ac6c:	88fb      	ldrh	r3, [r7, #6]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d006      	beq.n	800ac80 <tcp_write+0x1a0>
 800ac72:	4b52      	ldr	r3, [pc, #328]	; (800adbc <tcp_write+0x2dc>)
 800ac74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac78:	4956      	ldr	r1, [pc, #344]	; (800add4 <tcp_write+0x2f4>)
 800ac7a:	4852      	ldr	r0, [pc, #328]	; (800adc4 <tcp_write+0x2e4>)
 800ac7c:	f004 faa4 	bl	800f1c8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ac80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ac84:	88fb      	ldrh	r3, [r7, #6]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	f080 8167 	bcs.w	800af5a <tcp_write+0x47a>
 800ac8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8163 	beq.w	800af5a <tcp_write+0x47a>
 800ac94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac96:	891b      	ldrh	r3, [r3, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 815e 	beq.w	800af5a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ac9e:	88fa      	ldrh	r2, [r7, #6]
 800aca0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aca4:	1ad2      	subs	r2, r2, r3
 800aca6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aca8:	4293      	cmp	r3, r2
 800acaa:	bfa8      	it	ge
 800acac:	4613      	movge	r3, r2
 800acae:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800acb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800acb4:	797b      	ldrb	r3, [r7, #5]
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d027      	beq.n	800ad0e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800acbe:	f107 0012 	add.w	r0, r7, #18
 800acc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800acc4:	8bf9      	ldrh	r1, [r7, #30]
 800acc6:	2301      	movs	r3, #1
 800acc8:	9302      	str	r3, [sp, #8]
 800acca:	797b      	ldrb	r3, [r7, #5]
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	4603      	mov	r3, r0
 800acd4:	2000      	movs	r0, #0
 800acd6:	f7ff fe0f 	bl	800a8f8 <tcp_pbuf_prealloc>
 800acda:	6578      	str	r0, [r7, #84]	; 0x54
 800acdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 8225 	beq.w	800b12e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ace4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ace6:	6858      	ldr	r0, [r3, #4]
 800ace8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	4413      	add	r3, r2
 800acf0:	8bfa      	ldrh	r2, [r7, #30]
 800acf2:	4619      	mov	r1, r3
 800acf4:	f004 fa52 	bl	800f19c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800acf8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800acfa:	f7fb f9f1 	bl	80060e0 <pbuf_clen>
 800acfe:	4603      	mov	r3, r0
 800ad00:	461a      	mov	r2, r3
 800ad02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ad06:	4413      	add	r3, r2
 800ad08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ad0c:	e041      	b.n	800ad92 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ad0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
 800ad14:	e002      	b.n	800ad1c <tcp_write+0x23c>
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1f8      	bne.n	800ad16 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ad24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad26:	7b1b      	ldrb	r3, [r3, #12]
 800ad28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d115      	bne.n	800ad5c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad36:	8952      	ldrh	r2, [r2, #10]
 800ad38:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d10d      	bne.n	800ad5c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ad40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <tcp_write+0x276>
 800ad48:	4b1c      	ldr	r3, [pc, #112]	; (800adbc <tcp_write+0x2dc>)
 800ad4a:	f240 2231 	movw	r2, #561	; 0x231
 800ad4e:	4922      	ldr	r1, [pc, #136]	; (800add8 <tcp_write+0x2f8>)
 800ad50:	481c      	ldr	r0, [pc, #112]	; (800adc4 <tcp_write+0x2e4>)
 800ad52:	f004 fa39 	bl	800f1c8 <iprintf>
          extendlen = seglen;
 800ad56:	8bfb      	ldrh	r3, [r7, #30]
 800ad58:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ad5a:	e01a      	b.n	800ad92 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ad5c:	8bfb      	ldrh	r3, [r7, #30]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	4619      	mov	r1, r3
 800ad62:	2000      	movs	r0, #0
 800ad64:	f7fa fe50 	bl	8005a08 <pbuf_alloc>
 800ad68:	6578      	str	r0, [r7, #84]	; 0x54
 800ad6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 81e0 	beq.w	800b132 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ad72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	441a      	add	r2, r3
 800ad7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad7c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ad7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ad80:	f7fb f9ae 	bl	80060e0 <pbuf_clen>
 800ad84:	4603      	mov	r3, r0
 800ad86:	461a      	mov	r2, r3
 800ad88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ad92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad96:	8bfb      	ldrh	r3, [r7, #30]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ad9e:	e0dc      	b.n	800af5a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 80d7 	beq.w	800af5a <tcp_write+0x47a>
 800adac:	4b03      	ldr	r3, [pc, #12]	; (800adbc <tcp_write+0x2dc>)
 800adae:	f240 224a 	movw	r2, #586	; 0x24a
 800adb2:	490a      	ldr	r1, [pc, #40]	; (800addc <tcp_write+0x2fc>)
 800adb4:	4803      	ldr	r0, [pc, #12]	; (800adc4 <tcp_write+0x2e4>)
 800adb6:	f004 fa07 	bl	800f1c8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800adba:	e0ce      	b.n	800af5a <tcp_write+0x47a>
 800adbc:	08011c00 	.word	0x08011c00
 800adc0:	08011da0 	.word	0x08011da0
 800adc4:	08011c54 	.word	0x08011c54
 800adc8:	08011db8 	.word	0x08011db8
 800adcc:	08011dec 	.word	0x08011dec
 800add0:	08011e04 	.word	0x08011e04
 800add4:	08011e24 	.word	0x08011e24
 800add8:	08011e44 	.word	0x08011e44
 800addc:	08011e70 	.word	0x08011e70
    struct pbuf *p;
    u16_t left = len - pos;
 800ade0:	88fa      	ldrh	r2, [r7, #6]
 800ade2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800adea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800adee:	b29b      	uxth	r3, r3
 800adf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800adf6:	8b7a      	ldrh	r2, [r7, #26]
 800adf8:	8bbb      	ldrh	r3, [r7, #28]
 800adfa:	4293      	cmp	r3, r2
 800adfc:	bf28      	it	cs
 800adfe:	4613      	movcs	r3, r2
 800ae00:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ae02:	797b      	ldrb	r3, [r7, #5]
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d036      	beq.n	800ae7a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ae0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	8b3b      	ldrh	r3, [r7, #24]
 800ae14:	4413      	add	r3, r2
 800ae16:	b299      	uxth	r1, r3
 800ae18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	bf0c      	ite	eq
 800ae1e:	2301      	moveq	r3, #1
 800ae20:	2300      	movne	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	f107 0012 	add.w	r0, r7, #18
 800ae28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ae2a:	9302      	str	r3, [sp, #8]
 800ae2c:	797b      	ldrb	r3, [r7, #5]
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	4603      	mov	r3, r0
 800ae36:	2036      	movs	r0, #54	; 0x36
 800ae38:	f7ff fd5e 	bl	800a8f8 <tcp_pbuf_prealloc>
 800ae3c:	6338      	str	r0, [r7, #48]	; 0x30
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f000 8178 	beq.w	800b136 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	895b      	ldrh	r3, [r3, #10]
 800ae4a:	8b3a      	ldrh	r2, [r7, #24]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d906      	bls.n	800ae5e <tcp_write+0x37e>
 800ae50:	4b8c      	ldr	r3, [pc, #560]	; (800b084 <tcp_write+0x5a4>)
 800ae52:	f240 2266 	movw	r2, #614	; 0x266
 800ae56:	498c      	ldr	r1, [pc, #560]	; (800b088 <tcp_write+0x5a8>)
 800ae58:	488c      	ldr	r0, [pc, #560]	; (800b08c <tcp_write+0x5ac>)
 800ae5a:	f004 f9b5 	bl	800f1c8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ae66:	18d0      	adds	r0, r2, r3
 800ae68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	4413      	add	r3, r2
 800ae70:	8b3a      	ldrh	r2, [r7, #24]
 800ae72:	4619      	mov	r1, r3
 800ae74:	f004 f992 	bl	800f19c <memcpy>
 800ae78:	e02f      	b.n	800aeda <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ae7a:	8a7b      	ldrh	r3, [r7, #18]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d006      	beq.n	800ae8e <tcp_write+0x3ae>
 800ae80:	4b80      	ldr	r3, [pc, #512]	; (800b084 <tcp_write+0x5a4>)
 800ae82:	f240 2271 	movw	r2, #625	; 0x271
 800ae86:	4982      	ldr	r1, [pc, #520]	; (800b090 <tcp_write+0x5b0>)
 800ae88:	4880      	ldr	r0, [pc, #512]	; (800b08c <tcp_write+0x5ac>)
 800ae8a:	f004 f99d 	bl	800f1c8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ae8e:	8b3b      	ldrh	r3, [r7, #24]
 800ae90:	2201      	movs	r2, #1
 800ae92:	4619      	mov	r1, r3
 800ae94:	2036      	movs	r0, #54	; 0x36
 800ae96:	f7fa fdb7 	bl	8005a08 <pbuf_alloc>
 800ae9a:	6178      	str	r0, [r7, #20]
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 814b 	beq.w	800b13a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800aea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	441a      	add	r2, r3
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aeb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aeba:	4619      	mov	r1, r3
 800aebc:	2036      	movs	r0, #54	; 0x36
 800aebe:	f7fa fda3 	bl	8005a08 <pbuf_alloc>
 800aec2:	6338      	str	r0, [r7, #48]	; 0x30
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d103      	bne.n	800aed2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800aeca:	6978      	ldr	r0, [r7, #20]
 800aecc:	f7fb f880 	bl	8005fd0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800aed0:	e136      	b.n	800b140 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800aed2:	6979      	ldr	r1, [r7, #20]
 800aed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed6:	f7fb f93d 	bl	8006154 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800aeda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aedc:	f7fb f900 	bl	80060e0 <pbuf_clen>
 800aee0:	4603      	mov	r3, r0
 800aee2:	461a      	mov	r2, r3
 800aee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aee8:	4413      	add	r3, r2
 800aeea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800aeee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aef2:	2b09      	cmp	r3, #9
 800aef4:	d903      	bls.n	800aefe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800aef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef8:	f7fb f86a 	bl	8005fd0 <pbuf_free>
      goto memerr;
 800aefc:	e120      	b.n	800b140 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800af02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af06:	441a      	add	r2, r3
 800af08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	4613      	mov	r3, r2
 800af10:	2200      	movs	r2, #0
 800af12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f7ff fc51 	bl	800a7bc <tcp_create_segment>
 800af1a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800af1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 810d 	beq.w	800b13e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800af24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af26:	2b00      	cmp	r3, #0
 800af28:	d102      	bne.n	800af30 <tcp_write+0x450>
      queue = seg;
 800af2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af2c:	647b      	str	r3, [r7, #68]	; 0x44
 800af2e:	e00c      	b.n	800af4a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800af30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af32:	2b00      	cmp	r3, #0
 800af34:	d106      	bne.n	800af44 <tcp_write+0x464>
 800af36:	4b53      	ldr	r3, [pc, #332]	; (800b084 <tcp_write+0x5a4>)
 800af38:	f240 22ab 	movw	r2, #683	; 0x2ab
 800af3c:	4955      	ldr	r1, [pc, #340]	; (800b094 <tcp_write+0x5b4>)
 800af3e:	4853      	ldr	r0, [pc, #332]	; (800b08c <tcp_write+0x5ac>)
 800af40:	f004 f942 	bl	800f1c8 <iprintf>
      prev_seg->next = seg;
 800af44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af48:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800af4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af4c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800af4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800af52:	8b3b      	ldrh	r3, [r7, #24]
 800af54:	4413      	add	r3, r2
 800af56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800af5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800af5e:	88fb      	ldrh	r3, [r7, #6]
 800af60:	429a      	cmp	r2, r3
 800af62:	f4ff af3d 	bcc.w	800ade0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800af66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d02c      	beq.n	800afc6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800af6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af72:	e01e      	b.n	800afb2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af76:	891a      	ldrh	r2, [r3, #8]
 800af78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af7a:	4413      	add	r3, r2
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d110      	bne.n	800afac <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af90:	8952      	ldrh	r2, [r2, #10]
 800af92:	4413      	add	r3, r2
 800af94:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	4618      	mov	r0, r3
 800af9a:	f004 f8ff 	bl	800f19c <memcpy>
        p->len += oversize_used;
 800af9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa0:	895a      	ldrh	r2, [r3, #10]
 800afa2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800afa4:	4413      	add	r3, r2
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800afac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1dd      	bne.n	800af74 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800afb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afba:	891a      	ldrh	r2, [r3, #8]
 800afbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800afbe:	4413      	add	r3, r2
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afc4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800afc6:	8a7a      	ldrh	r2, [r7, #18]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800afce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d018      	beq.n	800b006 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800afd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d106      	bne.n	800afe8 <tcp_write+0x508>
 800afda:	4b2a      	ldr	r3, [pc, #168]	; (800b084 <tcp_write+0x5a4>)
 800afdc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800afe0:	492d      	ldr	r1, [pc, #180]	; (800b098 <tcp_write+0x5b8>)
 800afe2:	482a      	ldr	r0, [pc, #168]	; (800b08c <tcp_write+0x5ac>)
 800afe4:	f004 f8f0 	bl	800f1c8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800afe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fb f8b0 	bl	8006154 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800aff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aff6:	891a      	ldrh	r2, [r3, #8]
 800aff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800affa:	891b      	ldrh	r3, [r3, #8]
 800affc:	4413      	add	r3, r2
 800affe:	b29a      	uxth	r2, r3
 800b000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b002:	811a      	strh	r2, [r3, #8]
 800b004:	e037      	b.n	800b076 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b006:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d034      	beq.n	800b076 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <tcp_write+0x53a>
 800b012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d106      	bne.n	800b028 <tcp_write+0x548>
 800b01a:	4b1a      	ldr	r3, [pc, #104]	; (800b084 <tcp_write+0x5a4>)
 800b01c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b020:	491e      	ldr	r1, [pc, #120]	; (800b09c <tcp_write+0x5bc>)
 800b022:	481a      	ldr	r0, [pc, #104]	; (800b08c <tcp_write+0x5ac>)
 800b024:	f004 f8d0 	bl	800f1c8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b02e:	e009      	b.n	800b044 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b032:	891a      	ldrh	r2, [r3, #8]
 800b034:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b036:	4413      	add	r3, r2
 800b038:	b29a      	uxth	r2, r3
 800b03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	62bb      	str	r3, [r7, #40]	; 0x28
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1f1      	bne.n	800b030 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	891a      	ldrh	r2, [r3, #8]
 800b050:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b052:	4413      	add	r3, r2
 800b054:	b29a      	uxth	r2, r3
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	895a      	ldrh	r2, [r3, #10]
 800b05e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b060:	4413      	add	r3, r2
 800b062:	b29a      	uxth	r2, r3
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b06a:	891a      	ldrh	r2, [r3, #8]
 800b06c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b06e:	4413      	add	r3, r2
 800b070:	b29a      	uxth	r2, r3
 800b072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b074:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d111      	bne.n	800b0a0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b080:	66da      	str	r2, [r3, #108]	; 0x6c
 800b082:	e010      	b.n	800b0a6 <tcp_write+0x5c6>
 800b084:	08011c00 	.word	0x08011c00
 800b088:	08011ea0 	.word	0x08011ea0
 800b08c:	08011c54 	.word	0x08011c54
 800b090:	08011ee0 	.word	0x08011ee0
 800b094:	08011ef0 	.word	0x08011ef0
 800b098:	08011f04 	.word	0x08011f04
 800b09c:	08011f3c 	.word	0x08011f3c
  } else {
    last_unsent->next = queue;
 800b0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0a4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	441a      	add	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b0b8:	88fb      	ldrh	r3, [r7, #6]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b0ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00e      	beq.n	800b0f6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10a      	bne.n	800b0f6 <tcp_write+0x616>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d106      	bne.n	800b0f6 <tcp_write+0x616>
 800b0e8:	4b2c      	ldr	r3, [pc, #176]	; (800b19c <tcp_write+0x6bc>)
 800b0ea:	f240 3212 	movw	r2, #786	; 0x312
 800b0ee:	492c      	ldr	r1, [pc, #176]	; (800b1a0 <tcp_write+0x6c0>)
 800b0f0:	482c      	ldr	r0, [pc, #176]	; (800b1a4 <tcp_write+0x6c4>)
 800b0f2:	f004 f869 	bl	800f1c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d016      	beq.n	800b12a <tcp_write+0x64a>
 800b0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d012      	beq.n	800b12a <tcp_write+0x64a>
 800b104:	797b      	ldrb	r3, [r7, #5]
 800b106:	f003 0302 	and.w	r3, r3, #2
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10d      	bne.n	800b12a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	899b      	ldrh	r3, [r3, #12]
 800b114:	b29c      	uxth	r4, r3
 800b116:	2008      	movs	r0, #8
 800b118:	f7f9 fbc6 	bl	80048a8 <lwip_htons>
 800b11c:	4603      	mov	r3, r0
 800b11e:	461a      	mov	r2, r3
 800b120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	4322      	orrs	r2, r4
 800b126:	b292      	uxth	r2, r2
 800b128:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	e031      	b.n	800b192 <tcp_write+0x6b2>
          goto memerr;
 800b12e:	bf00      	nop
 800b130:	e006      	b.n	800b140 <tcp_write+0x660>
            goto memerr;
 800b132:	bf00      	nop
 800b134:	e004      	b.n	800b140 <tcp_write+0x660>
        goto memerr;
 800b136:	bf00      	nop
 800b138:	e002      	b.n	800b140 <tcp_write+0x660>
        goto memerr;
 800b13a:	bf00      	nop
 800b13c:	e000      	b.n	800b140 <tcp_write+0x660>
      goto memerr;
 800b13e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8b5b      	ldrh	r3, [r3, #26]
 800b144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b148:	b29a      	uxth	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b14e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b154:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b156:	f7fa ff3b 	bl	8005fd0 <pbuf_free>
  }
  if (queue != NULL) {
 800b15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b160:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b162:	f7fc fb4d 	bl	8007800 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00e      	beq.n	800b18e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10a      	bne.n	800b18e <tcp_write+0x6ae>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d106      	bne.n	800b18e <tcp_write+0x6ae>
 800b180:	4b06      	ldr	r3, [pc, #24]	; (800b19c <tcp_write+0x6bc>)
 800b182:	f240 3227 	movw	r2, #807	; 0x327
 800b186:	4906      	ldr	r1, [pc, #24]	; (800b1a0 <tcp_write+0x6c0>)
 800b188:	4806      	ldr	r0, [pc, #24]	; (800b1a4 <tcp_write+0x6c4>)
 800b18a:	f004 f81d 	bl	800f1c8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b18e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b192:	4618      	mov	r0, r3
 800b194:	375c      	adds	r7, #92	; 0x5c
 800b196:	46bd      	mov	sp, r7
 800b198:	bd90      	pop	{r4, r7, pc}
 800b19a:	bf00      	nop
 800b19c:	08011c00 	.word	0x08011c00
 800b1a0:	08011f74 	.word	0x08011f74
 800b1a4:	08011c54 	.word	0x08011c54

0800b1a8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b1a8:	b590      	push	{r4, r7, lr}
 800b1aa:	b08b      	sub	sp, #44	; 0x2c
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	61fb      	str	r3, [r7, #28]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <tcp_split_unsent_seg+0x2c>
 800b1c6:	4b95      	ldr	r3, [pc, #596]	; (800b41c <tcp_split_unsent_seg+0x274>)
 800b1c8:	f240 324b 	movw	r2, #843	; 0x34b
 800b1cc:	4994      	ldr	r1, [pc, #592]	; (800b420 <tcp_split_unsent_seg+0x278>)
 800b1ce:	4895      	ldr	r0, [pc, #596]	; (800b424 <tcp_split_unsent_seg+0x27c>)
 800b1d0:	f003 fffa 	bl	800f1c8 <iprintf>

  useg = pcb->unsent;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d102      	bne.n	800b1e6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	e116      	b.n	800b414 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b1e6:	887b      	ldrh	r3, [r7, #2]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d109      	bne.n	800b200 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b1ec:	4b8b      	ldr	r3, [pc, #556]	; (800b41c <tcp_split_unsent_seg+0x274>)
 800b1ee:	f240 3253 	movw	r2, #851	; 0x353
 800b1f2:	498d      	ldr	r1, [pc, #564]	; (800b428 <tcp_split_unsent_seg+0x280>)
 800b1f4:	488b      	ldr	r0, [pc, #556]	; (800b424 <tcp_split_unsent_seg+0x27c>)
 800b1f6:	f003 ffe7 	bl	800f1c8 <iprintf>
    return ERR_VAL;
 800b1fa:	f06f 0305 	mvn.w	r3, #5
 800b1fe:	e109      	b.n	800b414 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	891b      	ldrh	r3, [r3, #8]
 800b204:	887a      	ldrh	r2, [r7, #2]
 800b206:	429a      	cmp	r2, r3
 800b208:	d301      	bcc.n	800b20e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	e102      	b.n	800b414 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b212:	887a      	ldrh	r2, [r7, #2]
 800b214:	429a      	cmp	r2, r3
 800b216:	d906      	bls.n	800b226 <tcp_split_unsent_seg+0x7e>
 800b218:	4b80      	ldr	r3, [pc, #512]	; (800b41c <tcp_split_unsent_seg+0x274>)
 800b21a:	f240 325b 	movw	r2, #859	; 0x35b
 800b21e:	4983      	ldr	r1, [pc, #524]	; (800b42c <tcp_split_unsent_seg+0x284>)
 800b220:	4880      	ldr	r0, [pc, #512]	; (800b424 <tcp_split_unsent_seg+0x27c>)
 800b222:	f003 ffd1 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	891b      	ldrh	r3, [r3, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <tcp_split_unsent_seg+0x94>
 800b22e:	4b7b      	ldr	r3, [pc, #492]	; (800b41c <tcp_split_unsent_seg+0x274>)
 800b230:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b234:	497e      	ldr	r1, [pc, #504]	; (800b430 <tcp_split_unsent_seg+0x288>)
 800b236:	487b      	ldr	r0, [pc, #492]	; (800b424 <tcp_split_unsent_seg+0x27c>)
 800b238:	f003 ffc6 	bl	800f1c8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	7a9b      	ldrb	r3, [r3, #10]
 800b240:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	b2db      	uxtb	r3, r3
 800b248:	f003 0304 	and.w	r3, r3, #4
 800b24c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	891a      	ldrh	r2, [r3, #8]
 800b252:	887b      	ldrh	r3, [r7, #2]
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	89bb      	ldrh	r3, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	b29b      	uxth	r3, r3
 800b262:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b266:	4619      	mov	r1, r3
 800b268:	2036      	movs	r0, #54	; 0x36
 800b26a:	f7fa fbcd 	bl	8005a08 <pbuf_alloc>
 800b26e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 80b7 	beq.w	800b3e6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	891a      	ldrh	r2, [r3, #8]
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	891b      	ldrh	r3, [r3, #8]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	b29a      	uxth	r2, r3
 800b286:	887b      	ldrh	r3, [r7, #2]
 800b288:	4413      	add	r3, r2
 800b28a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	6858      	ldr	r0, [r3, #4]
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	18d1      	adds	r1, r2, r3
 800b298:	897b      	ldrh	r3, [r7, #10]
 800b29a:	89ba      	ldrh	r2, [r7, #12]
 800b29c:	f7fb f882 	bl	80063a4 <pbuf_copy_partial>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	89bb      	ldrh	r3, [r7, #12]
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	f040 809f 	bne.w	800b3ea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	899b      	ldrh	r3, [r3, #12]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7f9 faf7 	bl	80048a8 <lwip_htons>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2c2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b2c8:	7efb      	ldrb	r3, [r7, #27]
 800b2ca:	f003 0308 	and.w	r3, r3, #8
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d007      	beq.n	800b2e2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b2d2:	7efb      	ldrb	r3, [r7, #27]
 800b2d4:	f023 0308 	bic.w	r3, r3, #8
 800b2d8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b2da:	7ebb      	ldrb	r3, [r7, #26]
 800b2dc:	f043 0308 	orr.w	r3, r3, #8
 800b2e0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b2e2:	7efb      	ldrb	r3, [r7, #27]
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d007      	beq.n	800b2fc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b2ec:	7efb      	ldrb	r3, [r7, #27]
 800b2ee:	f023 0301 	bic.w	r3, r3, #1
 800b2f2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b2f4:	7ebb      	ldrb	r3, [r7, #26]
 800b2f6:	f043 0301 	orr.w	r3, r3, #1
 800b2fa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	4618      	mov	r0, r3
 800b304:	f7f9 fae5 	bl	80048d2 <lwip_htonl>
 800b308:	4602      	mov	r2, r0
 800b30a:	887b      	ldrh	r3, [r7, #2]
 800b30c:	18d1      	adds	r1, r2, r3
 800b30e:	7eba      	ldrb	r2, [r7, #26]
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	460b      	mov	r3, r1
 800b316:	6939      	ldr	r1, [r7, #16]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7ff fa4f 	bl	800a7bc <tcp_create_segment>
 800b31e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d063      	beq.n	800b3ee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fa fed8 	bl	80060e0 <pbuf_clen>
 800b330:	4603      	mov	r3, r0
 800b332:	461a      	mov	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b33a:	1a9b      	subs	r3, r3, r2
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	6858      	ldr	r0, [r3, #4]
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	891a      	ldrh	r2, [r3, #8]
 800b34e:	89bb      	ldrh	r3, [r7, #12]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	b29b      	uxth	r3, r3
 800b354:	4619      	mov	r1, r3
 800b356:	f7fa fcb5 	bl	8005cc4 <pbuf_realloc>
  useg->len -= remainder;
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	891a      	ldrh	r2, [r3, #8]
 800b35e:	89bb      	ldrh	r3, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	b29a      	uxth	r2, r3
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	899b      	ldrh	r3, [r3, #12]
 800b36e:	b29c      	uxth	r4, r3
 800b370:	7efb      	ldrb	r3, [r7, #27]
 800b372:	b29b      	uxth	r3, r3
 800b374:	4618      	mov	r0, r3
 800b376:	f7f9 fa97 	bl	80048a8 <lwip_htons>
 800b37a:	4603      	mov	r3, r0
 800b37c:	461a      	mov	r2, r3
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	4322      	orrs	r2, r4
 800b384:	b292      	uxth	r2, r2
 800b386:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fa fea7 	bl	80060e0 <pbuf_clen>
 800b392:	4603      	mov	r3, r0
 800b394:	461a      	mov	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b39c:	4413      	add	r3, r2
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fa fe98 	bl	80060e0 <pbuf_clen>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3ba:	4413      	add	r3, r2
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d103      	bne.n	800b3e2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	e016      	b.n	800b414 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b3e6:	bf00      	nop
 800b3e8:	e002      	b.n	800b3f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b3ea:	bf00      	nop
 800b3ec:	e000      	b.n	800b3f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b3ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d006      	beq.n	800b404 <tcp_split_unsent_seg+0x25c>
 800b3f6:	4b09      	ldr	r3, [pc, #36]	; (800b41c <tcp_split_unsent_seg+0x274>)
 800b3f8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b3fc:	490d      	ldr	r1, [pc, #52]	; (800b434 <tcp_split_unsent_seg+0x28c>)
 800b3fe:	4809      	ldr	r0, [pc, #36]	; (800b424 <tcp_split_unsent_seg+0x27c>)
 800b400:	f003 fee2 	bl	800f1c8 <iprintf>
  if (p != NULL) {
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b40a:	6938      	ldr	r0, [r7, #16]
 800b40c:	f7fa fde0 	bl	8005fd0 <pbuf_free>
  }

  return ERR_MEM;
 800b410:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b414:	4618      	mov	r0, r3
 800b416:	3724      	adds	r7, #36	; 0x24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd90      	pop	{r4, r7, pc}
 800b41c:	08011c00 	.word	0x08011c00
 800b420:	08011f94 	.word	0x08011f94
 800b424:	08011c54 	.word	0x08011c54
 800b428:	08011fb8 	.word	0x08011fb8
 800b42c:	08011fdc 	.word	0x08011fdc
 800b430:	08011fec 	.word	0x08011fec
 800b434:	08011ffc 	.word	0x08011ffc

0800b438 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b438:	b590      	push	{r4, r7, lr}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <tcp_send_fin+0x1c>
 800b446:	4b21      	ldr	r3, [pc, #132]	; (800b4cc <tcp_send_fin+0x94>)
 800b448:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b44c:	4920      	ldr	r1, [pc, #128]	; (800b4d0 <tcp_send_fin+0x98>)
 800b44e:	4821      	ldr	r0, [pc, #132]	; (800b4d4 <tcp_send_fin+0x9c>)
 800b450:	f003 feba 	bl	800f1c8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d02e      	beq.n	800b4ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b460:	60fb      	str	r3, [r7, #12]
 800b462:	e002      	b.n	800b46a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1f8      	bne.n	800b464 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	899b      	ldrh	r3, [r3, #12]
 800b478:	b29b      	uxth	r3, r3
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7f9 fa14 	bl	80048a8 <lwip_htons>
 800b480:	4603      	mov	r3, r0
 800b482:	b2db      	uxtb	r3, r3
 800b484:	f003 0307 	and.w	r3, r3, #7
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d116      	bne.n	800b4ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	899b      	ldrh	r3, [r3, #12]
 800b492:	b29c      	uxth	r4, r3
 800b494:	2001      	movs	r0, #1
 800b496:	f7f9 fa07 	bl	80048a8 <lwip_htons>
 800b49a:	4603      	mov	r3, r0
 800b49c:	461a      	mov	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	4322      	orrs	r2, r4
 800b4a4:	b292      	uxth	r2, r2
 800b4a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	8b5b      	ldrh	r3, [r3, #26]
 800b4ac:	f043 0320 	orr.w	r3, r3, #32
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e004      	b.n	800b4c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f80b 	bl	800b4d8 <tcp_enqueue_flags>
 800b4c2:	4603      	mov	r3, r0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd90      	pop	{r4, r7, pc}
 800b4cc:	08011c00 	.word	0x08011c00
 800b4d0:	08012008 	.word	0x08012008
 800b4d4:	08011c54 	.word	0x08011c54

0800b4d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08a      	sub	sp, #40	; 0x28
 800b4dc:	af02      	add	r7, sp, #8
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b4ec:	78fb      	ldrb	r3, [r7, #3]
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d106      	bne.n	800b504 <tcp_enqueue_flags+0x2c>
 800b4f6:	4b67      	ldr	r3, [pc, #412]	; (800b694 <tcp_enqueue_flags+0x1bc>)
 800b4f8:	f240 4211 	movw	r2, #1041	; 0x411
 800b4fc:	4966      	ldr	r1, [pc, #408]	; (800b698 <tcp_enqueue_flags+0x1c0>)
 800b4fe:	4867      	ldr	r0, [pc, #412]	; (800b69c <tcp_enqueue_flags+0x1c4>)
 800b500:	f003 fe62 	bl	800f1c8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d106      	bne.n	800b518 <tcp_enqueue_flags+0x40>
 800b50a:	4b62      	ldr	r3, [pc, #392]	; (800b694 <tcp_enqueue_flags+0x1bc>)
 800b50c:	f240 4213 	movw	r2, #1043	; 0x413
 800b510:	4963      	ldr	r1, [pc, #396]	; (800b6a0 <tcp_enqueue_flags+0x1c8>)
 800b512:	4862      	ldr	r0, [pc, #392]	; (800b69c <tcp_enqueue_flags+0x1c4>)
 800b514:	f003 fe58 	bl	800f1c8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	f003 0302 	and.w	r3, r3, #2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b522:	2301      	movs	r3, #1
 800b524:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b526:	7ffb      	ldrb	r3, [r7, #31]
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	f003 0304 	and.w	r3, r3, #4
 800b530:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b532:	7dfb      	ldrb	r3, [r7, #23]
 800b534:	b29b      	uxth	r3, r3
 800b536:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b53a:	4619      	mov	r1, r3
 800b53c:	2036      	movs	r0, #54	; 0x36
 800b53e:	f7fa fa63 	bl	8005a08 <pbuf_alloc>
 800b542:	6138      	str	r0, [r7, #16]
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d109      	bne.n	800b55e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	8b5b      	ldrh	r3, [r3, #26]
 800b54e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b552:	b29a      	uxth	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	e095      	b.n	800b68a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	895a      	ldrh	r2, [r3, #10]
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	b29b      	uxth	r3, r3
 800b566:	429a      	cmp	r2, r3
 800b568:	d206      	bcs.n	800b578 <tcp_enqueue_flags+0xa0>
 800b56a:	4b4a      	ldr	r3, [pc, #296]	; (800b694 <tcp_enqueue_flags+0x1bc>)
 800b56c:	f240 4239 	movw	r2, #1081	; 0x439
 800b570:	494c      	ldr	r1, [pc, #304]	; (800b6a4 <tcp_enqueue_flags+0x1cc>)
 800b572:	484a      	ldr	r0, [pc, #296]	; (800b69c <tcp_enqueue_flags+0x1c4>)
 800b574:	f003 fe28 	bl	800f1c8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	7ffb      	ldrb	r3, [r7, #31]
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	460b      	mov	r3, r1
 800b584:	6939      	ldr	r1, [r7, #16]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff f918 	bl	800a7bc <tcp_create_segment>
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d109      	bne.n	800b5a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8b5b      	ldrh	r3, [r3, #26]
 800b598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a6:	e070      	b.n	800b68a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f003 0303 	and.w	r3, r3, #3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d006      	beq.n	800b5c2 <tcp_enqueue_flags+0xea>
 800b5b4:	4b37      	ldr	r3, [pc, #220]	; (800b694 <tcp_enqueue_flags+0x1bc>)
 800b5b6:	f240 4242 	movw	r2, #1090	; 0x442
 800b5ba:	493b      	ldr	r1, [pc, #236]	; (800b6a8 <tcp_enqueue_flags+0x1d0>)
 800b5bc:	4837      	ldr	r0, [pc, #220]	; (800b69c <tcp_enqueue_flags+0x1c4>)
 800b5be:	f003 fe03 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	891b      	ldrh	r3, [r3, #8]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d006      	beq.n	800b5d8 <tcp_enqueue_flags+0x100>
 800b5ca:	4b32      	ldr	r3, [pc, #200]	; (800b694 <tcp_enqueue_flags+0x1bc>)
 800b5cc:	f240 4243 	movw	r2, #1091	; 0x443
 800b5d0:	4936      	ldr	r1, [pc, #216]	; (800b6ac <tcp_enqueue_flags+0x1d4>)
 800b5d2:	4832      	ldr	r0, [pc, #200]	; (800b69c <tcp_enqueue_flags+0x1c4>)
 800b5d4:	f003 fdf8 	bl	800f1c8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d103      	bne.n	800b5e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800b5e6:	e00d      	b.n	800b604 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	e002      	b.n	800b5f6 <tcp_enqueue_flags+0x11e>
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	61bb      	str	r3, [r7, #24]
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1f8      	bne.n	800b5f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	f003 0302 	and.w	r3, r3, #2
 800b612:	2b00      	cmp	r3, #0
 800b614:	d104      	bne.n	800b620 <tcp_enqueue_flags+0x148>
 800b616:	78fb      	ldrb	r3, [r7, #3]
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d004      	beq.n	800b62a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b624:	1c5a      	adds	r2, r3, #1
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d006      	beq.n	800b642 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	8b5b      	ldrh	r3, [r3, #26]
 800b638:	f043 0320 	orr.w	r3, r3, #32
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	4618      	mov	r0, r3
 800b648:	f7fa fd4a 	bl	80060e0 <pbuf_clen>
 800b64c:	4603      	mov	r3, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b656:	4413      	add	r3, r2
 800b658:	b29a      	uxth	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00e      	beq.n	800b688 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <tcp_enqueue_flags+0x1b0>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <tcp_enqueue_flags+0x1b0>
 800b67a:	4b06      	ldr	r3, [pc, #24]	; (800b694 <tcp_enqueue_flags+0x1bc>)
 800b67c:	f240 4265 	movw	r2, #1125	; 0x465
 800b680:	490b      	ldr	r1, [pc, #44]	; (800b6b0 <tcp_enqueue_flags+0x1d8>)
 800b682:	4806      	ldr	r0, [pc, #24]	; (800b69c <tcp_enqueue_flags+0x1c4>)
 800b684:	f003 fda0 	bl	800f1c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	08011c00 	.word	0x08011c00
 800b698:	08012024 	.word	0x08012024
 800b69c:	08011c54 	.word	0x08011c54
 800b6a0:	0801207c 	.word	0x0801207c
 800b6a4:	0801209c 	.word	0x0801209c
 800b6a8:	080120d8 	.word	0x080120d8
 800b6ac:	080120f0 	.word	0x080120f0
 800b6b0:	0801211c 	.word	0x0801211c

0800b6b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b6b4:	b5b0      	push	{r4, r5, r7, lr}
 800b6b6:	b08a      	sub	sp, #40	; 0x28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d106      	bne.n	800b6d0 <tcp_output+0x1c>
 800b6c2:	4b8a      	ldr	r3, [pc, #552]	; (800b8ec <tcp_output+0x238>)
 800b6c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b6c8:	4989      	ldr	r1, [pc, #548]	; (800b8f0 <tcp_output+0x23c>)
 800b6ca:	488a      	ldr	r0, [pc, #552]	; (800b8f4 <tcp_output+0x240>)
 800b6cc:	f003 fd7c 	bl	800f1c8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7d1b      	ldrb	r3, [r3, #20]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d106      	bne.n	800b6e6 <tcp_output+0x32>
 800b6d8:	4b84      	ldr	r3, [pc, #528]	; (800b8ec <tcp_output+0x238>)
 800b6da:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b6de:	4986      	ldr	r1, [pc, #536]	; (800b8f8 <tcp_output+0x244>)
 800b6e0:	4884      	ldr	r0, [pc, #528]	; (800b8f4 <tcp_output+0x240>)
 800b6e2:	f003 fd71 	bl	800f1c8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b6e6:	4b85      	ldr	r3, [pc, #532]	; (800b8fc <tcp_output+0x248>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d101      	bne.n	800b6f4 <tcp_output+0x40>
    return ERR_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	e1ce      	b.n	800ba92 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b700:	4293      	cmp	r3, r2
 800b702:	bf28      	it	cs
 800b704:	4613      	movcs	r3, r2
 800b706:	b29b      	uxth	r3, r3
 800b708:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b70e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	8b5b      	ldrh	r3, [r3, #26]
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 81aa 	beq.w	800ba78 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fdcb 	bl	800c2c0 <tcp_send_empty_ack>
 800b72a:	4603      	mov	r3, r0
 800b72c:	e1b1      	b.n	800ba92 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3304      	adds	r3, #4
 800b734:	461a      	mov	r2, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff f824 	bl	800a784 <tcp_route>
 800b73c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d102      	bne.n	800b74a <tcp_output+0x96>
    return ERR_RTE;
 800b744:	f06f 0303 	mvn.w	r3, #3
 800b748:	e1a3      	b.n	800ba92 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <tcp_output+0xa4>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d111      	bne.n	800b77c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d002      	beq.n	800b764 <tcp_output+0xb0>
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	3304      	adds	r3, #4
 800b762:	e000      	b.n	800b766 <tcp_output+0xb2>
 800b764:	2300      	movs	r3, #0
 800b766:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <tcp_output+0xc0>
      return ERR_RTE;
 800b76e:	f06f 0303 	mvn.w	r3, #3
 800b772:	e18e      	b.n	800ba92 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	4618      	mov	r0, r3
 800b784:	f7f9 f8a5 	bl	80048d2 <lwip_htonl>
 800b788:	4602      	mov	r2, r0
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b792:	8912      	ldrh	r2, [r2, #8]
 800b794:	4413      	add	r3, r2
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d227      	bcs.n	800b7ec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d114      	bne.n	800b7d4 <tcp_output+0x120>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d110      	bne.n	800b7d4 <tcp_output+0x120>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10b      	bne.n	800b7d4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	8b5b      	ldrh	r3, [r3, #26]
 800b7d8:	f003 0302 	and.w	r3, r3, #2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 814d 	beq.w	800ba7c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fd6c 	bl	800c2c0 <tcp_send_empty_ack>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	e152      	b.n	800ba92 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b7fa:	6a3b      	ldr	r3, [r7, #32]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f000 811c 	beq.w	800ba3a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b802:	e002      	b.n	800b80a <tcp_output+0x156>
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	623b      	str	r3, [r7, #32]
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f8      	bne.n	800b804 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b812:	e112      	b.n	800ba3a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	899b      	ldrh	r3, [r3, #12]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7f9 f843 	bl	80048a8 <lwip_htons>
 800b822:	4603      	mov	r3, r0
 800b824:	b2db      	uxtb	r3, r3
 800b826:	f003 0304 	and.w	r3, r3, #4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d006      	beq.n	800b83c <tcp_output+0x188>
 800b82e:	4b2f      	ldr	r3, [pc, #188]	; (800b8ec <tcp_output+0x238>)
 800b830:	f240 5236 	movw	r2, #1334	; 0x536
 800b834:	4932      	ldr	r1, [pc, #200]	; (800b900 <tcp_output+0x24c>)
 800b836:	482f      	ldr	r0, [pc, #188]	; (800b8f4 <tcp_output+0x240>)
 800b838:	f003 fcc6 	bl	800f1c8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b840:	2b00      	cmp	r3, #0
 800b842:	d01f      	beq.n	800b884 <tcp_output+0x1d0>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	8b5b      	ldrh	r3, [r3, #26]
 800b848:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d119      	bne.n	800b884 <tcp_output+0x1d0>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00b      	beq.n	800b870 <tcp_output+0x1bc>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d110      	bne.n	800b884 <tcp_output+0x1d0>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b866:	891a      	ldrh	r2, [r3, #8]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d209      	bcs.n	800b884 <tcp_output+0x1d0>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <tcp_output+0x1d0>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b880:	2b08      	cmp	r3, #8
 800b882:	d901      	bls.n	800b888 <tcp_output+0x1d4>
 800b884:	2301      	movs	r3, #1
 800b886:	e000      	b.n	800b88a <tcp_output+0x1d6>
 800b888:	2300      	movs	r3, #0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d106      	bne.n	800b89c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	8b5b      	ldrh	r3, [r3, #26]
 800b892:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 80e4 	beq.w	800ba64 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	7d1b      	ldrb	r3, [r3, #20]
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d00d      	beq.n	800b8c0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	899b      	ldrh	r3, [r3, #12]
 800b8aa:	b29c      	uxth	r4, r3
 800b8ac:	2010      	movs	r0, #16
 800b8ae:	f7f8 fffb 	bl	80048a8 <lwip_htons>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	4322      	orrs	r2, r4
 800b8bc:	b292      	uxth	r2, r2
 800b8be:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	6879      	ldr	r1, [r7, #4]
 800b8c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8c6:	f000 f909 	bl	800badc <tcp_output_segment>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b8ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d016      	beq.n	800b904 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	8b5b      	ldrh	r3, [r3, #26]
 800b8da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	835a      	strh	r2, [r3, #26]
      return err;
 800b8e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e8:	e0d3      	b.n	800ba92 <tcp_output+0x3de>
 800b8ea:	bf00      	nop
 800b8ec:	08011c00 	.word	0x08011c00
 800b8f0:	08012144 	.word	0x08012144
 800b8f4:	08011c54 	.word	0x08011c54
 800b8f8:	0801215c 	.word	0x0801215c
 800b8fc:	200086ec 	.word	0x200086ec
 800b900:	08012184 	.word	0x08012184
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	7d1b      	ldrb	r3, [r3, #20]
 800b910:	2b02      	cmp	r3, #2
 800b912:	d006      	beq.n	800b922 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	8b5b      	ldrh	r3, [r3, #26]
 800b918:	f023 0303 	bic.w	r3, r3, #3
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f8 ffd2 	bl	80048d2 <lwip_htonl>
 800b92e:	4604      	mov	r4, r0
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	891b      	ldrh	r3, [r3, #8]
 800b934:	461d      	mov	r5, r3
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	899b      	ldrh	r3, [r3, #12]
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f8 ffb2 	bl	80048a8 <lwip_htons>
 800b944:	4603      	mov	r3, r0
 800b946:	b2db      	uxtb	r3, r3
 800b948:	f003 0303 	and.w	r3, r3, #3
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <tcp_output+0x2a0>
 800b950:	2301      	movs	r3, #1
 800b952:	e000      	b.n	800b956 <tcp_output+0x2a2>
 800b954:	2300      	movs	r3, #0
 800b956:	442b      	add	r3, r5
 800b958:	4423      	add	r3, r4
 800b95a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	da02      	bge.n	800b96e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	891b      	ldrh	r3, [r3, #8]
 800b972:	461c      	mov	r4, r3
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	899b      	ldrh	r3, [r3, #12]
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7f8 ff93 	bl	80048a8 <lwip_htons>
 800b982:	4603      	mov	r3, r0
 800b984:	b2db      	uxtb	r3, r3
 800b986:	f003 0303 	and.w	r3, r3, #3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <tcp_output+0x2de>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <tcp_output+0x2e0>
 800b992:	2300      	movs	r3, #0
 800b994:	4423      	add	r3, r4
 800b996:	2b00      	cmp	r3, #0
 800b998:	d049      	beq.n	800ba2e <tcp_output+0x37a>
      seg->next = NULL;
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	2200      	movs	r2, #0
 800b99e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d105      	bne.n	800b9b4 <tcp_output+0x300>
        pcb->unacked = seg;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	623b      	str	r3, [r7, #32]
 800b9b2:	e03f      	b.n	800ba34 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7f8 ff89 	bl	80048d2 <lwip_htonl>
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7f8 ff82 	bl	80048d2 <lwip_htonl>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	1ae3      	subs	r3, r4, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	da24      	bge.n	800ba20 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	3370      	adds	r3, #112	; 0x70
 800b9da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b9dc:	e002      	b.n	800b9e4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d011      	beq.n	800ba10 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7f8 ff6c 	bl	80048d2 <lwip_htonl>
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f8 ff65 	bl	80048d2 <lwip_htonl>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dbe6      	blt.n	800b9de <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	e009      	b.n	800ba34 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba24:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	623b      	str	r3, [r7, #32]
 800ba2c:	e002      	b.n	800ba34 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ba2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba30:	f7fb fefb 	bl	800782a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d012      	beq.n	800ba66 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f8 ff43 	bl	80048d2 <lwip_htonl>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba56:	8912      	ldrh	r2, [r2, #8]
 800ba58:	4413      	add	r3, r2
  while (seg != NULL &&
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	f4bf aed9 	bcs.w	800b814 <tcp_output+0x160>
 800ba62:	e000      	b.n	800ba66 <tcp_output+0x3b2>
      break;
 800ba64:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d108      	bne.n	800ba80 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ba76:	e004      	b.n	800ba82 <tcp_output+0x3ce>
    goto output_done;
 800ba78:	bf00      	nop
 800ba7a:	e002      	b.n	800ba82 <tcp_output+0x3ce>
    goto output_done;
 800ba7c:	bf00      	nop
 800ba7e:	e000      	b.n	800ba82 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ba80:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	8b5b      	ldrh	r3, [r3, #26]
 800ba86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3728      	adds	r7, #40	; 0x28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bdb0      	pop	{r4, r5, r7, pc}
 800ba9a:	bf00      	nop

0800ba9c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d106      	bne.n	800bab8 <tcp_output_segment_busy+0x1c>
 800baaa:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <tcp_output_segment_busy+0x34>)
 800baac:	f240 529a 	movw	r2, #1434	; 0x59a
 800bab0:	4908      	ldr	r1, [pc, #32]	; (800bad4 <tcp_output_segment_busy+0x38>)
 800bab2:	4809      	ldr	r0, [pc, #36]	; (800bad8 <tcp_output_segment_busy+0x3c>)
 800bab4:	f003 fb88 	bl	800f1c8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	7b9b      	ldrb	r3, [r3, #14]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d001      	beq.n	800bac6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e000      	b.n	800bac8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	08011c00 	.word	0x08011c00
 800bad4:	0801219c 	.word	0x0801219c
 800bad8:	08011c54 	.word	0x08011c54

0800badc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800badc:	b5b0      	push	{r4, r5, r7, lr}
 800bade:	b08c      	sub	sp, #48	; 0x30
 800bae0:	af04      	add	r7, sp, #16
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d106      	bne.n	800bafc <tcp_output_segment+0x20>
 800baee:	4b63      	ldr	r3, [pc, #396]	; (800bc7c <tcp_output_segment+0x1a0>)
 800baf0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800baf4:	4962      	ldr	r1, [pc, #392]	; (800bc80 <tcp_output_segment+0x1a4>)
 800baf6:	4863      	ldr	r0, [pc, #396]	; (800bc84 <tcp_output_segment+0x1a8>)
 800baf8:	f003 fb66 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d106      	bne.n	800bb10 <tcp_output_segment+0x34>
 800bb02:	4b5e      	ldr	r3, [pc, #376]	; (800bc7c <tcp_output_segment+0x1a0>)
 800bb04:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bb08:	495f      	ldr	r1, [pc, #380]	; (800bc88 <tcp_output_segment+0x1ac>)
 800bb0a:	485e      	ldr	r0, [pc, #376]	; (800bc84 <tcp_output_segment+0x1a8>)
 800bb0c:	f003 fb5c 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d106      	bne.n	800bb24 <tcp_output_segment+0x48>
 800bb16:	4b59      	ldr	r3, [pc, #356]	; (800bc7c <tcp_output_segment+0x1a0>)
 800bb18:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bb1c:	495b      	ldr	r1, [pc, #364]	; (800bc8c <tcp_output_segment+0x1b0>)
 800bb1e:	4859      	ldr	r0, [pc, #356]	; (800bc84 <tcp_output_segment+0x1a8>)
 800bb20:	f003 fb52 	bl	800f1c8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f7ff ffb9 	bl	800ba9c <tcp_output_segment_busy>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	e09f      	b.n	800bc74 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	68dc      	ldr	r4, [r3, #12]
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	f7f8 fec8 	bl	80048d2 <lwip_htonl>
 800bb42:	4603      	mov	r3, r0
 800bb44:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	68dc      	ldr	r4, [r3, #12]
 800bb4e:	4610      	mov	r0, r2
 800bb50:	f7f8 feaa 	bl	80048a8 <lwip_htons>
 800bb54:	4603      	mov	r3, r0
 800bb56:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bb60:	441a      	add	r2, r3
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	3314      	adds	r3, #20
 800bb6c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	7a9b      	ldrb	r3, [r3, #10]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d015      	beq.n	800bba6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	461a      	mov	r2, r3
 800bb80:	6879      	ldr	r1, [r7, #4]
 800bb82:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bb86:	f7fc fa33 	bl	8007ff0 <tcp_eff_send_mss_netif>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bb8e:	8b7b      	ldrh	r3, [r7, #26]
 800bb90:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7f8 fe9c 	bl	80048d2 <lwip_htonl>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	3304      	adds	r3, #4
 800bba4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	da02      	bge.n	800bbb6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10c      	bne.n	800bbd8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bbbe:	4b34      	ldr	r3, [pc, #208]	; (800bc90 <tcp_output_segment+0x1b4>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7f8 fe80 	bl	80048d2 <lwip_htonl>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68da      	ldr	r2, [r3, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	8959      	ldrh	r1, [r3, #10]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	8b3a      	ldrh	r2, [r7, #24]
 800bbf2:	1a8a      	subs	r2, r1, r2
 800bbf4:	b292      	uxth	r2, r2
 800bbf6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	8919      	ldrh	r1, [r3, #8]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	8b3a      	ldrh	r2, [r7, #24]
 800bc04:	1a8a      	subs	r2, r1, r2
 800bc06:	b292      	uxth	r2, r2
 800bc08:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	68d2      	ldr	r2, [r2, #12]
 800bc12:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	741a      	strb	r2, [r3, #16]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	f103 0214 	add.w	r2, r3, #20
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	7a9b      	ldrb	r3, [r3, #10]
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	4413      	add	r3, r2
 800bc34:	69fa      	ldr	r2, [r7, #28]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d006      	beq.n	800bc48 <tcp_output_segment+0x16c>
 800bc3a:	4b10      	ldr	r3, [pc, #64]	; (800bc7c <tcp_output_segment+0x1a0>)
 800bc3c:	f240 621c 	movw	r2, #1564	; 0x61c
 800bc40:	4914      	ldr	r1, [pc, #80]	; (800bc94 <tcp_output_segment+0x1b8>)
 800bc42:	4810      	ldr	r0, [pc, #64]	; (800bc84 <tcp_output_segment+0x1a8>)
 800bc44:	f003 fac0 	bl	800f1c8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6858      	ldr	r0, [r3, #4]
 800bc4c:	68b9      	ldr	r1, [r7, #8]
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	1d1c      	adds	r4, r3, #4
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	7add      	ldrb	r5, [r3, #11]
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	7a9b      	ldrb	r3, [r3, #10]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	9202      	str	r2, [sp, #8]
 800bc5e:	2206      	movs	r2, #6
 800bc60:	9201      	str	r2, [sp, #4]
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	462b      	mov	r3, r5
 800bc66:	4622      	mov	r2, r4
 800bc68:	f002 fa36 	bl	800e0d8 <ip4_output_if>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bc70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3720      	adds	r7, #32
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bdb0      	pop	{r4, r5, r7, pc}
 800bc7c:	08011c00 	.word	0x08011c00
 800bc80:	080121c4 	.word	0x080121c4
 800bc84:	08011c54 	.word	0x08011c54
 800bc88:	080121e4 	.word	0x080121e4
 800bc8c:	08012204 	.word	0x08012204
 800bc90:	200086a0 	.word	0x200086a0
 800bc94:	08012228 	.word	0x08012228

0800bc98 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bc98:	b5b0      	push	{r4, r5, r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <tcp_rexmit_rto_prepare+0x1c>
 800bca6:	4b31      	ldr	r3, [pc, #196]	; (800bd6c <tcp_rexmit_rto_prepare+0xd4>)
 800bca8:	f240 6263 	movw	r2, #1635	; 0x663
 800bcac:	4930      	ldr	r1, [pc, #192]	; (800bd70 <tcp_rexmit_rto_prepare+0xd8>)
 800bcae:	4831      	ldr	r0, [pc, #196]	; (800bd74 <tcp_rexmit_rto_prepare+0xdc>)
 800bcb0:	f003 fa8a 	bl	800f1c8 <iprintf>

  if (pcb->unacked == NULL) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bcbc:	f06f 0305 	mvn.w	r3, #5
 800bcc0:	e050      	b.n	800bd64 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	e00b      	b.n	800bce2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f7ff fee6 	bl	800ba9c <tcp_output_segment_busy>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d002      	beq.n	800bcdc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bcd6:	f06f 0305 	mvn.w	r3, #5
 800bcda:	e043      	b.n	800bd64 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	60fb      	str	r3, [r7, #12]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1ef      	bne.n	800bcca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f7ff fed6 	bl	800ba9c <tcp_output_segment_busy>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bcf6:	f06f 0305 	mvn.w	r3, #5
 800bcfa:	e033      	b.n	800bd64 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8b5b      	ldrh	r3, [r3, #26]
 800bd16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7f8 fdd3 	bl	80048d2 <lwip_htonl>
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	891b      	ldrh	r3, [r3, #8]
 800bd32:	461d      	mov	r5, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	899b      	ldrh	r3, [r3, #12]
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7f8 fdb3 	bl	80048a8 <lwip_htons>
 800bd42:	4603      	mov	r3, r0
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	f003 0303 	and.w	r3, r3, #3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <tcp_rexmit_rto_prepare+0xba>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e000      	b.n	800bd54 <tcp_rexmit_rto_prepare+0xbc>
 800bd52:	2300      	movs	r3, #0
 800bd54:	442b      	add	r3, r5
 800bd56:	18e2      	adds	r2, r4, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd6c:	08011c00 	.word	0x08011c00
 800bd70:	0801223c 	.word	0x0801223c
 800bd74:	08011c54 	.word	0x08011c54

0800bd78 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d106      	bne.n	800bd94 <tcp_rexmit_rto_commit+0x1c>
 800bd86:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <tcp_rexmit_rto_commit+0x44>)
 800bd88:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bd8c:	490c      	ldr	r1, [pc, #48]	; (800bdc0 <tcp_rexmit_rto_commit+0x48>)
 800bd8e:	480d      	ldr	r0, [pc, #52]	; (800bdc4 <tcp_rexmit_rto_commit+0x4c>)
 800bd90:	f003 fa1a 	bl	800f1c8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd9a:	2bff      	cmp	r3, #255	; 0xff
 800bd9c:	d007      	beq.n	800bdae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bda4:	3301      	adds	r3, #1
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7ff fc80 	bl	800b6b4 <tcp_output>
}
 800bdb4:	bf00      	nop
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	08011c00 	.word	0x08011c00
 800bdc0:	08012260 	.word	0x08012260
 800bdc4:	08011c54 	.word	0x08011c54

0800bdc8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d106      	bne.n	800bde4 <tcp_rexmit_rto+0x1c>
 800bdd6:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <tcp_rexmit_rto+0x38>)
 800bdd8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bddc:	4909      	ldr	r1, [pc, #36]	; (800be04 <tcp_rexmit_rto+0x3c>)
 800bdde:	480a      	ldr	r0, [pc, #40]	; (800be08 <tcp_rexmit_rto+0x40>)
 800bde0:	f003 f9f2 	bl	800f1c8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7ff ff57 	bl	800bc98 <tcp_rexmit_rto_prepare>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d102      	bne.n	800bdf6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7ff ffc1 	bl	800bd78 <tcp_rexmit_rto_commit>
  }
}
 800bdf6:	bf00      	nop
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	08011c00 	.word	0x08011c00
 800be04:	08012284 	.word	0x08012284
 800be08:	08011c54 	.word	0x08011c54

0800be0c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800be0c:	b590      	push	{r4, r7, lr}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d106      	bne.n	800be28 <tcp_rexmit+0x1c>
 800be1a:	4b2f      	ldr	r3, [pc, #188]	; (800bed8 <tcp_rexmit+0xcc>)
 800be1c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800be20:	492e      	ldr	r1, [pc, #184]	; (800bedc <tcp_rexmit+0xd0>)
 800be22:	482f      	ldr	r0, [pc, #188]	; (800bee0 <tcp_rexmit+0xd4>)
 800be24:	f003 f9d0 	bl	800f1c8 <iprintf>

  if (pcb->unacked == NULL) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800be30:	f06f 0305 	mvn.w	r3, #5
 800be34:	e04c      	b.n	800bed0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800be3c:	68b8      	ldr	r0, [r7, #8]
 800be3e:	f7ff fe2d 	bl	800ba9c <tcp_output_segment_busy>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800be48:	f06f 0305 	mvn.w	r3, #5
 800be4c:	e040      	b.n	800bed0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	336c      	adds	r3, #108	; 0x6c
 800be5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be5c:	e002      	b.n	800be64 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d011      	beq.n	800be90 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	4618      	mov	r0, r3
 800be76:	f7f8 fd2c 	bl	80048d2 <lwip_htonl>
 800be7a:	4604      	mov	r4, r0
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	4618      	mov	r0, r3
 800be84:	f7f8 fd25 	bl	80048d2 <lwip_htonl>
 800be88:	4603      	mov	r3, r0
 800be8a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dbe6      	blt.n	800be5e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d103      	bne.n	800beae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800beb4:	2bff      	cmp	r3, #255	; 0xff
 800beb6:	d007      	beq.n	800bec8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bebe:	3301      	adds	r3, #1
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd90      	pop	{r4, r7, pc}
 800bed8:	08011c00 	.word	0x08011c00
 800bedc:	080122a0 	.word	0x080122a0
 800bee0:	08011c54 	.word	0x08011c54

0800bee4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d106      	bne.n	800bf00 <tcp_rexmit_fast+0x1c>
 800bef2:	4b2a      	ldr	r3, [pc, #168]	; (800bf9c <tcp_rexmit_fast+0xb8>)
 800bef4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bef8:	4929      	ldr	r1, [pc, #164]	; (800bfa0 <tcp_rexmit_fast+0xbc>)
 800befa:	482a      	ldr	r0, [pc, #168]	; (800bfa4 <tcp_rexmit_fast+0xc0>)
 800befc:	f003 f964 	bl	800f1c8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d045      	beq.n	800bf94 <tcp_rexmit_fast+0xb0>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	8b5b      	ldrh	r3, [r3, #26]
 800bf0c:	f003 0304 	and.w	r3, r3, #4
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d13f      	bne.n	800bf94 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff ff79 	bl	800be0c <tcp_rexmit>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d139      	bne.n	800bf94 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	bf28      	it	cs
 800bf30:	4613      	movcs	r3, r2
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	da00      	bge.n	800bf3a <tcp_rexmit_fast+0x56>
 800bf38:	3301      	adds	r3, #1
 800bf3a:	105b      	asrs	r3, r3, #1
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d206      	bcs.n	800bf64 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf6e:	4619      	mov	r1, r3
 800bf70:	0049      	lsls	r1, r1, #1
 800bf72:	440b      	add	r3, r1
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	4413      	add	r3, r2
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	8b5b      	ldrh	r3, [r3, #26]
 800bf84:	f043 0304 	orr.w	r3, r3, #4
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bf94:	bf00      	nop
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	08011c00 	.word	0x08011c00
 800bfa0:	080122b8 	.word	0x080122b8
 800bfa4:	08011c54 	.word	0x08011c54

0800bfa8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	607b      	str	r3, [r7, #4]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	817b      	strh	r3, [r7, #10]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bfba:	897a      	ldrh	r2, [r7, #10]
 800bfbc:	893b      	ldrh	r3, [r7, #8]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	3314      	adds	r3, #20
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bfca:	4619      	mov	r1, r3
 800bfcc:	2022      	movs	r0, #34	; 0x22
 800bfce:	f7f9 fd1b 	bl	8005a08 <pbuf_alloc>
 800bfd2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d04d      	beq.n	800c076 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bfda:	897b      	ldrh	r3, [r7, #10]
 800bfdc:	3313      	adds	r3, #19
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	8952      	ldrh	r2, [r2, #10]
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	db06      	blt.n	800bff4 <tcp_output_alloc_header_common+0x4c>
 800bfe6:	4b26      	ldr	r3, [pc, #152]	; (800c080 <tcp_output_alloc_header_common+0xd8>)
 800bfe8:	f240 7223 	movw	r2, #1827	; 0x723
 800bfec:	4925      	ldr	r1, [pc, #148]	; (800c084 <tcp_output_alloc_header_common+0xdc>)
 800bfee:	4826      	ldr	r0, [pc, #152]	; (800c088 <tcp_output_alloc_header_common+0xe0>)
 800bff0:	f003 f8ea 	bl	800f1c8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800bffa:	8c3b      	ldrh	r3, [r7, #32]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7f8 fc53 	bl	80048a8 <lwip_htons>
 800c002:	4603      	mov	r3, r0
 800c004:	461a      	mov	r2, r3
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c00a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7f8 fc4b 	bl	80048a8 <lwip_htons>
 800c012:	4603      	mov	r3, r0
 800c014:	461a      	mov	r2, r3
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f7f8 fc56 	bl	80048d2 <lwip_htonl>
 800c026:	4602      	mov	r2, r0
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c02c:	897b      	ldrh	r3, [r7, #10]
 800c02e:	089b      	lsrs	r3, r3, #2
 800c030:	b29b      	uxth	r3, r3
 800c032:	3305      	adds	r3, #5
 800c034:	b29b      	uxth	r3, r3
 800c036:	031b      	lsls	r3, r3, #12
 800c038:	b29a      	uxth	r2, r3
 800c03a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c03e:	b29b      	uxth	r3, r3
 800c040:	4313      	orrs	r3, r2
 800c042:	b29b      	uxth	r3, r3
 800c044:	4618      	mov	r0, r3
 800c046:	f7f8 fc2f 	bl	80048a8 <lwip_htons>
 800c04a:	4603      	mov	r3, r0
 800c04c:	461a      	mov	r2, r3
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c052:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c054:	4618      	mov	r0, r3
 800c056:	f7f8 fc27 	bl	80048a8 <lwip_htons>
 800c05a:	4603      	mov	r3, r0
 800c05c:	461a      	mov	r2, r3
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2200      	movs	r2, #0
 800c066:	741a      	strb	r2, [r3, #16]
 800c068:	2200      	movs	r2, #0
 800c06a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2200      	movs	r2, #0
 800c070:	749a      	strb	r2, [r3, #18]
 800c072:	2200      	movs	r2, #0
 800c074:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c076:	697b      	ldr	r3, [r7, #20]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	08011c00 	.word	0x08011c00
 800c084:	080122d8 	.word	0x080122d8
 800c088:	08011c54 	.word	0x08011c54

0800c08c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c08c:	b5b0      	push	{r4, r5, r7, lr}
 800c08e:	b08a      	sub	sp, #40	; 0x28
 800c090:	af04      	add	r7, sp, #16
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	607b      	str	r3, [r7, #4]
 800c096:	460b      	mov	r3, r1
 800c098:	817b      	strh	r3, [r7, #10]
 800c09a:	4613      	mov	r3, r2
 800c09c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d106      	bne.n	800c0b2 <tcp_output_alloc_header+0x26>
 800c0a4:	4b15      	ldr	r3, [pc, #84]	; (800c0fc <tcp_output_alloc_header+0x70>)
 800c0a6:	f240 7242 	movw	r2, #1858	; 0x742
 800c0aa:	4915      	ldr	r1, [pc, #84]	; (800c100 <tcp_output_alloc_header+0x74>)
 800c0ac:	4815      	ldr	r0, [pc, #84]	; (800c104 <tcp_output_alloc_header+0x78>)
 800c0ae:	f003 f88b 	bl	800f1c8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	8adb      	ldrh	r3, [r3, #22]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	8b12      	ldrh	r2, [r2, #24]
 800c0be:	68f9      	ldr	r1, [r7, #12]
 800c0c0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c0c2:	893d      	ldrh	r5, [r7, #8]
 800c0c4:	897c      	ldrh	r4, [r7, #10]
 800c0c6:	9103      	str	r1, [sp, #12]
 800c0c8:	2110      	movs	r1, #16
 800c0ca:	9102      	str	r1, [sp, #8]
 800c0cc:	9201      	str	r2, [sp, #4]
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	f7ff ff67 	bl	800bfa8 <tcp_output_alloc_header_common>
 800c0da:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c0ea:	441a      	add	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c0f0:	697b      	ldr	r3, [r7, #20]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	08011c00 	.word	0x08011c00
 800c100:	08012308 	.word	0x08012308
 800c104:	08011c54 	.word	0x08011c54

0800c108 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	4611      	mov	r1, r2
 800c114:	461a      	mov	r2, r3
 800c116:	460b      	mov	r3, r1
 800c118:	71fb      	strb	r3, [r7, #7]
 800c11a:	4613      	mov	r3, r2
 800c11c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <tcp_output_fill_options+0x2e>
 800c128:	4b13      	ldr	r3, [pc, #76]	; (800c178 <tcp_output_fill_options+0x70>)
 800c12a:	f240 7256 	movw	r2, #1878	; 0x756
 800c12e:	4913      	ldr	r1, [pc, #76]	; (800c17c <tcp_output_fill_options+0x74>)
 800c130:	4813      	ldr	r0, [pc, #76]	; (800c180 <tcp_output_fill_options+0x78>)
 800c132:	f003 f849 	bl	800f1c8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	3314      	adds	r3, #20
 800c140:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	f103 0214 	add.w	r2, r3, #20
 800c148:	8bfb      	ldrh	r3, [r7, #30]
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4619      	mov	r1, r3
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	440b      	add	r3, r1
 800c158:	4413      	add	r3, r2
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d006      	beq.n	800c16e <tcp_output_fill_options+0x66>
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <tcp_output_fill_options+0x70>)
 800c162:	f240 7275 	movw	r2, #1909	; 0x775
 800c166:	4907      	ldr	r1, [pc, #28]	; (800c184 <tcp_output_fill_options+0x7c>)
 800c168:	4805      	ldr	r0, [pc, #20]	; (800c180 <tcp_output_fill_options+0x78>)
 800c16a:	f003 f82d 	bl	800f1c8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c16e:	bf00      	nop
 800c170:	3720      	adds	r7, #32
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	08011c00 	.word	0x08011c00
 800c17c:	08012330 	.word	0x08012330
 800c180:	08011c54 	.word	0x08011c54
 800c184:	08012228 	.word	0x08012228

0800c188 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08a      	sub	sp, #40	; 0x28
 800c18c:	af04      	add	r7, sp, #16
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
 800c194:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d106      	bne.n	800c1aa <tcp_output_control_segment+0x22>
 800c19c:	4b1c      	ldr	r3, [pc, #112]	; (800c210 <tcp_output_control_segment+0x88>)
 800c19e:	f240 7287 	movw	r2, #1927	; 0x787
 800c1a2:	491c      	ldr	r1, [pc, #112]	; (800c214 <tcp_output_control_segment+0x8c>)
 800c1a4:	481c      	ldr	r0, [pc, #112]	; (800c218 <tcp_output_control_segment+0x90>)
 800c1a6:	f003 f80f 	bl	800f1c8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7fe fae8 	bl	800a784 <tcp_route>
 800c1b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d102      	bne.n	800c1c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c1bc:	23fc      	movs	r3, #252	; 0xfc
 800c1be:	75fb      	strb	r3, [r7, #23]
 800c1c0:	e01c      	b.n	800c1fc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	7adb      	ldrb	r3, [r3, #11]
 800c1cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	7a9b      	ldrb	r3, [r3, #10]
 800c1d2:	757b      	strb	r3, [r7, #21]
 800c1d4:	e003      	b.n	800c1de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c1d6:	23ff      	movs	r3, #255	; 0xff
 800c1d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c1de:	7dba      	ldrb	r2, [r7, #22]
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	9302      	str	r3, [sp, #8]
 800c1e4:	2306      	movs	r3, #6
 800c1e6:	9301      	str	r3, [sp, #4]
 800c1e8:	7d7b      	ldrb	r3, [r7, #21]
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	6879      	ldr	r1, [r7, #4]
 800c1f2:	68b8      	ldr	r0, [r7, #8]
 800c1f4:	f001 ff70 	bl	800e0d8 <ip4_output_if>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c1fc:	68b8      	ldr	r0, [r7, #8]
 800c1fe:	f7f9 fee7 	bl	8005fd0 <pbuf_free>
  return err;
 800c202:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	08011c00 	.word	0x08011c00
 800c214:	08012358 	.word	0x08012358
 800c218:	08011c54 	.word	0x08011c54

0800c21c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c21c:	b590      	push	{r4, r7, lr}
 800c21e:	b08b      	sub	sp, #44	; 0x2c
 800c220:	af04      	add	r7, sp, #16
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d106      	bne.n	800c23e <tcp_rst+0x22>
 800c230:	4b1f      	ldr	r3, [pc, #124]	; (800c2b0 <tcp_rst+0x94>)
 800c232:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c236:	491f      	ldr	r1, [pc, #124]	; (800c2b4 <tcp_rst+0x98>)
 800c238:	481f      	ldr	r0, [pc, #124]	; (800c2b8 <tcp_rst+0x9c>)
 800c23a:	f002 ffc5 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <tcp_rst+0x36>
 800c244:	4b1a      	ldr	r3, [pc, #104]	; (800c2b0 <tcp_rst+0x94>)
 800c246:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c24a:	491c      	ldr	r1, [pc, #112]	; (800c2bc <tcp_rst+0xa0>)
 800c24c:	481a      	ldr	r0, [pc, #104]	; (800c2b8 <tcp_rst+0x9c>)
 800c24e:	f002 ffbb 	bl	800f1c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c252:	2300      	movs	r3, #0
 800c254:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c256:	f246 0308 	movw	r3, #24584	; 0x6008
 800c25a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	b29c      	uxth	r4, r3
 800c260:	68b8      	ldr	r0, [r7, #8]
 800c262:	f7f8 fb36 	bl	80048d2 <lwip_htonl>
 800c266:	4602      	mov	r2, r0
 800c268:	8abb      	ldrh	r3, [r7, #20]
 800c26a:	9303      	str	r3, [sp, #12]
 800c26c:	2314      	movs	r3, #20
 800c26e:	9302      	str	r3, [sp, #8]
 800c270:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	4613      	mov	r3, r2
 800c27a:	2200      	movs	r2, #0
 800c27c:	4621      	mov	r1, r4
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff fe92 	bl	800bfa8 <tcp_output_alloc_header_common>
 800c284:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00c      	beq.n	800c2a6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	2200      	movs	r2, #0
 800c290:	6939      	ldr	r1, [r7, #16]
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff ff38 	bl	800c108 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	6939      	ldr	r1, [r7, #16]
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f7ff ff72 	bl	800c188 <tcp_output_control_segment>
 800c2a4:	e000      	b.n	800c2a8 <tcp_rst+0x8c>
    return;
 800c2a6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c2a8:	371c      	adds	r7, #28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd90      	pop	{r4, r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	08011c00 	.word	0x08011c00
 800c2b4:	08012384 	.word	0x08012384
 800c2b8:	08011c54 	.word	0x08011c54
 800c2bc:	080123a0 	.word	0x080123a0

0800c2c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c2c0:	b590      	push	{r4, r7, lr}
 800c2c2:	b087      	sub	sp, #28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d106      	bne.n	800c2e4 <tcp_send_empty_ack+0x24>
 800c2d6:	4b28      	ldr	r3, [pc, #160]	; (800c378 <tcp_send_empty_ack+0xb8>)
 800c2d8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c2dc:	4927      	ldr	r1, [pc, #156]	; (800c37c <tcp_send_empty_ack+0xbc>)
 800c2de:	4828      	ldr	r0, [pc, #160]	; (800c380 <tcp_send_empty_ack+0xc0>)
 800c2e0:	f002 ff72 	bl	800f1c8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c2e4:	7dfb      	ldrb	r3, [r7, #23]
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	f003 0304 	and.w	r3, r3, #4
 800c2ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c2f0:	7d7b      	ldrb	r3, [r7, #21]
 800c2f2:	b29c      	uxth	r4, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7f8 faea 	bl	80048d2 <lwip_htonl>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2200      	movs	r2, #0
 800c302:	4621      	mov	r1, r4
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff fec1 	bl	800c08c <tcp_output_alloc_header>
 800c30a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d109      	bne.n	800c326 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	8b5b      	ldrh	r3, [r3, #26]
 800c316:	f043 0303 	orr.w	r3, r3, #3
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c320:	f06f 0301 	mvn.w	r3, #1
 800c324:	e023      	b.n	800c36e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c326:	7dbb      	ldrb	r3, [r7, #22]
 800c328:	7dfa      	ldrb	r2, [r7, #23]
 800c32a:	6939      	ldr	r1, [r7, #16]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7ff feeb 	bl	800c108 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3304      	adds	r3, #4
 800c338:	6939      	ldr	r1, [r7, #16]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff ff24 	bl	800c188 <tcp_output_control_segment>
 800c340:	4603      	mov	r3, r0
 800c342:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d007      	beq.n	800c35c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	8b5b      	ldrh	r3, [r3, #26]
 800c350:	f043 0303 	orr.w	r3, r3, #3
 800c354:	b29a      	uxth	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	835a      	strh	r2, [r3, #26]
 800c35a:	e006      	b.n	800c36a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	8b5b      	ldrh	r3, [r3, #26]
 800c360:	f023 0303 	bic.w	r3, r3, #3
 800c364:	b29a      	uxth	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	371c      	adds	r7, #28
 800c372:	46bd      	mov	sp, r7
 800c374:	bd90      	pop	{r4, r7, pc}
 800c376:	bf00      	nop
 800c378:	08011c00 	.word	0x08011c00
 800c37c:	080123bc 	.word	0x080123bc
 800c380:	08011c54 	.word	0x08011c54

0800c384 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c384:	b590      	push	{r4, r7, lr}
 800c386:	b087      	sub	sp, #28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c38c:	2300      	movs	r3, #0
 800c38e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d106      	bne.n	800c3a4 <tcp_keepalive+0x20>
 800c396:	4b18      	ldr	r3, [pc, #96]	; (800c3f8 <tcp_keepalive+0x74>)
 800c398:	f640 0224 	movw	r2, #2084	; 0x824
 800c39c:	4917      	ldr	r1, [pc, #92]	; (800c3fc <tcp_keepalive+0x78>)
 800c39e:	4818      	ldr	r0, [pc, #96]	; (800c400 <tcp_keepalive+0x7c>)
 800c3a0:	f002 ff12 	bl	800f1c8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
 800c3a6:	b29c      	uxth	r4, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f8 fa8f 	bl	80048d2 <lwip_htonl>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7ff fe66 	bl	800c08c <tcp_output_alloc_header>
 800c3c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d102      	bne.n	800c3ce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3cc:	e010      	b.n	800c3f0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	6939      	ldr	r1, [r7, #16]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff fe97 	bl	800c108 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	6939      	ldr	r1, [r7, #16]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff fed0 	bl	800c188 <tcp_output_control_segment>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	371c      	adds	r7, #28
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd90      	pop	{r4, r7, pc}
 800c3f8:	08011c00 	.word	0x08011c00
 800c3fc:	080123dc 	.word	0x080123dc
 800c400:	08011c54 	.word	0x08011c54

0800c404 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c404:	b590      	push	{r4, r7, lr}
 800c406:	b08b      	sub	sp, #44	; 0x2c
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c40c:	2300      	movs	r3, #0
 800c40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d106      	bne.n	800c426 <tcp_zero_window_probe+0x22>
 800c418:	4b4c      	ldr	r3, [pc, #304]	; (800c54c <tcp_zero_window_probe+0x148>)
 800c41a:	f640 024f 	movw	r2, #2127	; 0x84f
 800c41e:	494c      	ldr	r1, [pc, #304]	; (800c550 <tcp_zero_window_probe+0x14c>)
 800c420:	484c      	ldr	r0, [pc, #304]	; (800c554 <tcp_zero_window_probe+0x150>)
 800c422:	f002 fed1 	bl	800f1c8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d101      	bne.n	800c436 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	e086      	b.n	800c544 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c43c:	2bff      	cmp	r3, #255	; 0xff
 800c43e:	d007      	beq.n	800c450 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c446:	3301      	adds	r3, #1
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c450:	6a3b      	ldr	r3, [r7, #32]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	899b      	ldrh	r3, [r3, #12]
 800c456:	b29b      	uxth	r3, r3
 800c458:	4618      	mov	r0, r3
 800c45a:	f7f8 fa25 	bl	80048a8 <lwip_htons>
 800c45e:	4603      	mov	r3, r0
 800c460:	b2db      	uxtb	r3, r3
 800c462:	f003 0301 	and.w	r3, r3, #1
 800c466:	2b00      	cmp	r3, #0
 800c468:	d005      	beq.n	800c476 <tcp_zero_window_probe+0x72>
 800c46a:	6a3b      	ldr	r3, [r7, #32]
 800c46c:	891b      	ldrh	r3, [r3, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <tcp_zero_window_probe+0x72>
 800c472:	2301      	movs	r3, #1
 800c474:	e000      	b.n	800c478 <tcp_zero_window_probe+0x74>
 800c476:	2300      	movs	r3, #0
 800c478:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c47a:	7ffb      	ldrb	r3, [r7, #31]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	bf0c      	ite	eq
 800c480:	2301      	moveq	r3, #1
 800c482:	2300      	movne	r3, #0
 800c484:	b2db      	uxtb	r3, r3
 800c486:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c48c:	b299      	uxth	r1, r3
 800c48e:	6a3b      	ldr	r3, [r7, #32]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	8bba      	ldrh	r2, [r7, #28]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff fdf8 	bl	800c08c <tcp_output_alloc_header>
 800c49c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d102      	bne.n	800c4aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a8:	e04c      	b.n	800c544 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c4b0:	7ffb      	ldrb	r3, [r7, #31]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d011      	beq.n	800c4da <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	899b      	ldrh	r3, [r3, #12]
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	b21b      	sxth	r3, r3
 800c4be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c4c2:	b21c      	sxth	r4, r3
 800c4c4:	2011      	movs	r0, #17
 800c4c6:	f7f8 f9ef 	bl	80048a8 <lwip_htons>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	b21b      	sxth	r3, r3
 800c4ce:	4323      	orrs	r3, r4
 800c4d0:	b21b      	sxth	r3, r3
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	819a      	strh	r2, [r3, #12]
 800c4d8:	e010      	b.n	800c4fc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	3314      	adds	r3, #20
 800c4e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	6858      	ldr	r0, [r3, #4]
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	891a      	ldrh	r2, [r3, #8]
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	891b      	ldrh	r3, [r3, #8]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	6939      	ldr	r1, [r7, #16]
 800c4f8:	f7f9 ff54 	bl	80063a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c4fc:	6a3b      	ldr	r3, [r7, #32]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	4618      	mov	r0, r3
 800c504:	f7f8 f9e5 	bl	80048d2 <lwip_htonl>
 800c508:	4603      	mov	r3, r0
 800c50a:	3301      	adds	r3, #1
 800c50c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	da02      	bge.n	800c520 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c524:	2200      	movs	r2, #0
 800c526:	69b9      	ldr	r1, [r7, #24]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7ff fded 	bl	800c108 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3304      	adds	r3, #4
 800c534:	69b9      	ldr	r1, [r7, #24]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff fe26 	bl	800c188 <tcp_output_control_segment>
 800c53c:	4603      	mov	r3, r0
 800c53e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c540:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c544:	4618      	mov	r0, r3
 800c546:	372c      	adds	r7, #44	; 0x2c
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd90      	pop	{r4, r7, pc}
 800c54c:	08011c00 	.word	0x08011c00
 800c550:	080123f8 	.word	0x080123f8
 800c554:	08011c54 	.word	0x08011c54

0800c558 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c560:	f7fa f80e 	bl	8006580 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c564:	4b0a      	ldr	r3, [pc, #40]	; (800c590 <tcpip_tcp_timer+0x38>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d103      	bne.n	800c574 <tcpip_tcp_timer+0x1c>
 800c56c:	4b09      	ldr	r3, [pc, #36]	; (800c594 <tcpip_tcp_timer+0x3c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d005      	beq.n	800c580 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c574:	2200      	movs	r2, #0
 800c576:	4908      	ldr	r1, [pc, #32]	; (800c598 <tcpip_tcp_timer+0x40>)
 800c578:	20fa      	movs	r0, #250	; 0xfa
 800c57a:	f000 f8f3 	bl	800c764 <sys_timeout>
 800c57e:	e003      	b.n	800c588 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c580:	4b06      	ldr	r3, [pc, #24]	; (800c59c <tcpip_tcp_timer+0x44>)
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
  }
}
 800c586:	bf00      	nop
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	200086ac 	.word	0x200086ac
 800c594:	200086b0 	.word	0x200086b0
 800c598:	0800c559 	.word	0x0800c559
 800c59c:	200086f8 	.word	0x200086f8

0800c5a0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c5a4:	4b0a      	ldr	r3, [pc, #40]	; (800c5d0 <tcp_timer_needed+0x30>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10f      	bne.n	800c5cc <tcp_timer_needed+0x2c>
 800c5ac:	4b09      	ldr	r3, [pc, #36]	; (800c5d4 <tcp_timer_needed+0x34>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d103      	bne.n	800c5bc <tcp_timer_needed+0x1c>
 800c5b4:	4b08      	ldr	r3, [pc, #32]	; (800c5d8 <tcp_timer_needed+0x38>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c5bc:	4b04      	ldr	r3, [pc, #16]	; (800c5d0 <tcp_timer_needed+0x30>)
 800c5be:	2201      	movs	r2, #1
 800c5c0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4905      	ldr	r1, [pc, #20]	; (800c5dc <tcp_timer_needed+0x3c>)
 800c5c6:	20fa      	movs	r0, #250	; 0xfa
 800c5c8:	f000 f8cc 	bl	800c764 <sys_timeout>
  }
}
 800c5cc:	bf00      	nop
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	200086f8 	.word	0x200086f8
 800c5d4:	200086ac 	.word	0x200086ac
 800c5d8:	200086b0 	.word	0x200086b0
 800c5dc:	0800c559 	.word	0x0800c559

0800c5e0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c5ec:	2006      	movs	r0, #6
 800c5ee:	f7f8 fe09 	bl	8005204 <memp_malloc>
 800c5f2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d109      	bne.n	800c60e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d151      	bne.n	800c6a4 <sys_timeout_abs+0xc4>
 800c600:	4b2a      	ldr	r3, [pc, #168]	; (800c6ac <sys_timeout_abs+0xcc>)
 800c602:	22be      	movs	r2, #190	; 0xbe
 800c604:	492a      	ldr	r1, [pc, #168]	; (800c6b0 <sys_timeout_abs+0xd0>)
 800c606:	482b      	ldr	r0, [pc, #172]	; (800c6b4 <sys_timeout_abs+0xd4>)
 800c608:	f002 fdde 	bl	800f1c8 <iprintf>
    return;
 800c60c:	e04a      	b.n	800c6a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	2200      	movs	r2, #0
 800c612:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c626:	4b24      	ldr	r3, [pc, #144]	; (800c6b8 <sys_timeout_abs+0xd8>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d103      	bne.n	800c636 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c62e:	4a22      	ldr	r2, [pc, #136]	; (800c6b8 <sys_timeout_abs+0xd8>)
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	6013      	str	r3, [r2, #0]
    return;
 800c634:	e037      	b.n	800c6a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	4b1f      	ldr	r3, [pc, #124]	; (800c6b8 <sys_timeout_abs+0xd8>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	0fdb      	lsrs	r3, r3, #31
 800c644:	f003 0301 	and.w	r3, r3, #1
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d007      	beq.n	800c65e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c64e:	4b1a      	ldr	r3, [pc, #104]	; (800c6b8 <sys_timeout_abs+0xd8>)
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c656:	4a18      	ldr	r2, [pc, #96]	; (800c6b8 <sys_timeout_abs+0xd8>)
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	6013      	str	r3, [r2, #0]
 800c65c:	e023      	b.n	800c6a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c65e:	4b16      	ldr	r3, [pc, #88]	; (800c6b8 <sys_timeout_abs+0xd8>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	617b      	str	r3, [r7, #20]
 800c664:	e01a      	b.n	800c69c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00b      	beq.n	800c686 <sys_timeout_abs+0xa6>
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	685a      	ldr	r2, [r3, #4]
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	0fdb      	lsrs	r3, r3, #31
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d007      	beq.n	800c696 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	693a      	ldr	r2, [r7, #16]
 800c692:	601a      	str	r2, [r3, #0]
        break;
 800c694:	e007      	b.n	800c6a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	617b      	str	r3, [r7, #20]
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1e1      	bne.n	800c666 <sys_timeout_abs+0x86>
 800c6a2:	e000      	b.n	800c6a6 <sys_timeout_abs+0xc6>
    return;
 800c6a4:	bf00      	nop
      }
    }
  }
}
 800c6a6:	3718      	adds	r7, #24
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	0801241c 	.word	0x0801241c
 800c6b0:	08012450 	.word	0x08012450
 800c6b4:	08012490 	.word	0x08012490
 800c6b8:	200086f0 	.word	0x200086f0

0800c6bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	4798      	blx	r3

  now = sys_now();
 800c6ce:	f7f6 ffef 	bl	80036b0 <sys_now>
 800c6d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	4b0f      	ldr	r3, [pc, #60]	; (800c718 <lwip_cyclic_timer+0x5c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4413      	add	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	0fdb      	lsrs	r3, r3, #31
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d009      	beq.n	800c706 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	4907      	ldr	r1, [pc, #28]	; (800c71c <lwip_cyclic_timer+0x60>)
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff ff6e 	bl	800c5e0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c704:	e004      	b.n	800c710 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	4904      	ldr	r1, [pc, #16]	; (800c71c <lwip_cyclic_timer+0x60>)
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff ff68 	bl	800c5e0 <sys_timeout_abs>
}
 800c710:	bf00      	nop
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	200086f4 	.word	0x200086f4
 800c71c:	0800c6bd 	.word	0x0800c6bd

0800c720 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c726:	2301      	movs	r3, #1
 800c728:	607b      	str	r3, [r7, #4]
 800c72a:	e00e      	b.n	800c74a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c72c:	4a0b      	ldr	r2, [pc, #44]	; (800c75c <sys_timeouts_init+0x3c>)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	00db      	lsls	r3, r3, #3
 800c738:	4a08      	ldr	r2, [pc, #32]	; (800c75c <sys_timeouts_init+0x3c>)
 800c73a:	4413      	add	r3, r2
 800c73c:	461a      	mov	r2, r3
 800c73e:	4908      	ldr	r1, [pc, #32]	; (800c760 <sys_timeouts_init+0x40>)
 800c740:	f000 f810 	bl	800c764 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3301      	adds	r3, #1
 800c748:	607b      	str	r3, [r7, #4]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d9ed      	bls.n	800c72c <sys_timeouts_init+0xc>
  }
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	08014010 	.word	0x08014010
 800c760:	0800c6bd 	.word	0x0800c6bd

0800c764 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c776:	d306      	bcc.n	800c786 <sys_timeout+0x22>
 800c778:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <sys_timeout+0x40>)
 800c77a:	f240 1229 	movw	r2, #297	; 0x129
 800c77e:	490a      	ldr	r1, [pc, #40]	; (800c7a8 <sys_timeout+0x44>)
 800c780:	480a      	ldr	r0, [pc, #40]	; (800c7ac <sys_timeout+0x48>)
 800c782:	f002 fd21 	bl	800f1c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c786:	f7f6 ff93 	bl	80036b0 <sys_now>
 800c78a:	4602      	mov	r2, r0
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4413      	add	r3, r2
 800c790:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	68b9      	ldr	r1, [r7, #8]
 800c796:	6978      	ldr	r0, [r7, #20]
 800c798:	f7ff ff22 	bl	800c5e0 <sys_timeout_abs>
#endif
}
 800c79c:	bf00      	nop
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	0801241c 	.word	0x0801241c
 800c7a8:	080124b8 	.word	0x080124b8
 800c7ac:	08012490 	.word	0x08012490

0800c7b0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c7b6:	f7f6 ff7b 	bl	80036b0 <sys_now>
 800c7ba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c7bc:	4b1a      	ldr	r3, [pc, #104]	; (800c828 <sys_check_timeouts+0x78>)
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <sys_check_timeouts+0x1a>
 800c7c6:	f7f9 f8c9 	bl	800595c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c7ca:	4b18      	ldr	r3, [pc, #96]	; (800c82c <sys_check_timeouts+0x7c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d022      	beq.n	800c81c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	0fdb      	lsrs	r3, r3, #31
 800c7e0:	f003 0301 	and.w	r3, r3, #1
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d11a      	bne.n	800c820 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a0f      	ldr	r2, [pc, #60]	; (800c82c <sys_check_timeouts+0x7c>)
 800c7f0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	4a0b      	ldr	r2, [pc, #44]	; (800c830 <sys_check_timeouts+0x80>)
 800c804:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c806:	68b9      	ldr	r1, [r7, #8]
 800c808:	2006      	movs	r0, #6
 800c80a:	f7f8 fd6b 	bl	80052e4 <memp_free>
    if (handler != NULL) {
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0d3      	beq.n	800c7bc <sys_check_timeouts+0xc>
      handler(arg);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6838      	ldr	r0, [r7, #0]
 800c818:	4798      	blx	r3
  do {
 800c81a:	e7cf      	b.n	800c7bc <sys_check_timeouts+0xc>
      return;
 800c81c:	bf00      	nop
 800c81e:	e000      	b.n	800c822 <sys_check_timeouts+0x72>
      return;
 800c820:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	2000869d 	.word	0x2000869d
 800c82c:	200086f0 	.word	0x200086f0
 800c830:	200086f4 	.word	0x200086f4

0800c834 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c838:	f002 fcde 	bl	800f1f8 <rand>
 800c83c:	4603      	mov	r3, r0
 800c83e:	b29b      	uxth	r3, r3
 800c840:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c844:	b29b      	uxth	r3, r3
 800c846:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	4b01      	ldr	r3, [pc, #4]	; (800c854 <udp_init+0x20>)
 800c84e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c850:	bf00      	nop
 800c852:	bd80      	pop	{r7, pc}
 800c854:	20000028 	.word	0x20000028

0800c858 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d105      	bne.n	800c878 <udp_input_local_match+0x20>
 800c86c:	4b27      	ldr	r3, [pc, #156]	; (800c90c <udp_input_local_match+0xb4>)
 800c86e:	2287      	movs	r2, #135	; 0x87
 800c870:	4927      	ldr	r1, [pc, #156]	; (800c910 <udp_input_local_match+0xb8>)
 800c872:	4828      	ldr	r0, [pc, #160]	; (800c914 <udp_input_local_match+0xbc>)
 800c874:	f002 fca8 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d105      	bne.n	800c88a <udp_input_local_match+0x32>
 800c87e:	4b23      	ldr	r3, [pc, #140]	; (800c90c <udp_input_local_match+0xb4>)
 800c880:	2288      	movs	r2, #136	; 0x88
 800c882:	4925      	ldr	r1, [pc, #148]	; (800c918 <udp_input_local_match+0xc0>)
 800c884:	4823      	ldr	r0, [pc, #140]	; (800c914 <udp_input_local_match+0xbc>)
 800c886:	f002 fc9f 	bl	800f1c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	7a1b      	ldrb	r3, [r3, #8]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00b      	beq.n	800c8aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	7a1a      	ldrb	r2, [r3, #8]
 800c896:	4b21      	ldr	r3, [pc, #132]	; (800c91c <udp_input_local_match+0xc4>)
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c89e:	3301      	adds	r3, #1
 800c8a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d001      	beq.n	800c8aa <udp_input_local_match+0x52>
    return 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e02b      	b.n	800c902 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c8aa:	79fb      	ldrb	r3, [r7, #7]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d018      	beq.n	800c8e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d013      	beq.n	800c8de <udp_input_local_match+0x86>
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00f      	beq.n	800c8de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c8be:	4b17      	ldr	r3, [pc, #92]	; (800c91c <udp_input_local_match+0xc4>)
 800c8c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d00a      	beq.n	800c8de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	4b13      	ldr	r3, [pc, #76]	; (800c91c <udp_input_local_match+0xc4>)
 800c8ce:	695b      	ldr	r3, [r3, #20]
 800c8d0:	405a      	eors	r2, r3
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	3308      	adds	r3, #8
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d110      	bne.n	800c900 <udp_input_local_match+0xa8>
          return 1;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e00f      	b.n	800c902 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d009      	beq.n	800c8fc <udp_input_local_match+0xa4>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <udp_input_local_match+0xa4>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	4b09      	ldr	r3, [pc, #36]	; (800c91c <udp_input_local_match+0xc4>)
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d101      	bne.n	800c900 <udp_input_local_match+0xa8>
        return 1;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e000      	b.n	800c902 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	08012504 	.word	0x08012504
 800c910:	08012534 	.word	0x08012534
 800c914:	08012558 	.word	0x08012558
 800c918:	08012580 	.word	0x08012580
 800c91c:	20005130 	.word	0x20005130

0800c920 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c920:	b590      	push	{r4, r7, lr}
 800c922:	b08d      	sub	sp, #52	; 0x34
 800c924:	af02      	add	r7, sp, #8
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d105      	bne.n	800c940 <udp_input+0x20>
 800c934:	4b7c      	ldr	r3, [pc, #496]	; (800cb28 <udp_input+0x208>)
 800c936:	22cf      	movs	r2, #207	; 0xcf
 800c938:	497c      	ldr	r1, [pc, #496]	; (800cb2c <udp_input+0x20c>)
 800c93a:	487d      	ldr	r0, [pc, #500]	; (800cb30 <udp_input+0x210>)
 800c93c:	f002 fc44 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d105      	bne.n	800c952 <udp_input+0x32>
 800c946:	4b78      	ldr	r3, [pc, #480]	; (800cb28 <udp_input+0x208>)
 800c948:	22d0      	movs	r2, #208	; 0xd0
 800c94a:	497a      	ldr	r1, [pc, #488]	; (800cb34 <udp_input+0x214>)
 800c94c:	4878      	ldr	r0, [pc, #480]	; (800cb30 <udp_input+0x210>)
 800c94e:	f002 fc3b 	bl	800f1c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	895b      	ldrh	r3, [r3, #10]
 800c956:	2b07      	cmp	r3, #7
 800c958:	d803      	bhi.n	800c962 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7f9 fb38 	bl	8005fd0 <pbuf_free>
    goto end;
 800c960:	e0de      	b.n	800cb20 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c968:	4b73      	ldr	r3, [pc, #460]	; (800cb38 <udp_input+0x218>)
 800c96a:	695b      	ldr	r3, [r3, #20]
 800c96c:	4a72      	ldr	r2, [pc, #456]	; (800cb38 <udp_input+0x218>)
 800c96e:	6812      	ldr	r2, [r2, #0]
 800c970:	4611      	mov	r1, r2
 800c972:	4618      	mov	r0, r3
 800c974:	f001 fc88 	bl	800e288 <ip4_addr_isbroadcast_u32>
 800c978:	4603      	mov	r3, r0
 800c97a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	881b      	ldrh	r3, [r3, #0]
 800c980:	b29b      	uxth	r3, r3
 800c982:	4618      	mov	r0, r3
 800c984:	f7f7 ff90 	bl	80048a8 <lwip_htons>
 800c988:	4603      	mov	r3, r0
 800c98a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	885b      	ldrh	r3, [r3, #2]
 800c990:	b29b      	uxth	r3, r3
 800c992:	4618      	mov	r0, r3
 800c994:	f7f7 ff88 	bl	80048a8 <lwip_htons>
 800c998:	4603      	mov	r3, r0
 800c99a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c99c:	2300      	movs	r3, #0
 800c99e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9a8:	4b64      	ldr	r3, [pc, #400]	; (800cb3c <udp_input+0x21c>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ae:	e054      	b.n	800ca5a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	8a5b      	ldrh	r3, [r3, #18]
 800c9b4:	89fa      	ldrh	r2, [r7, #14]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d14a      	bne.n	800ca50 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c9ba:	7cfb      	ldrb	r3, [r7, #19]
 800c9bc:	461a      	mov	r2, r3
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9c2:	f7ff ff49 	bl	800c858 <udp_input_local_match>
 800c9c6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d041      	beq.n	800ca50 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	7c1b      	ldrb	r3, [r3, #16]
 800c9d0:	f003 0304 	and.w	r3, r3, #4
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d11d      	bne.n	800ca14 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d102      	bne.n	800c9e4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	61fb      	str	r3, [r7, #28]
 800c9e2:	e017      	b.n	800ca14 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c9e4:	7cfb      	ldrb	r3, [r7, #19]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d014      	beq.n	800ca14 <udp_input+0xf4>
 800c9ea:	4b53      	ldr	r3, [pc, #332]	; (800cb38 <udp_input+0x218>)
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f2:	d10f      	bne.n	800ca14 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d008      	beq.n	800ca14 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d101      	bne.n	800ca14 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca12:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	8a9b      	ldrh	r3, [r3, #20]
 800ca18:	8a3a      	ldrh	r2, [r7, #16]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d118      	bne.n	800ca50 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d005      	beq.n	800ca32 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	685a      	ldr	r2, [r3, #4]
 800ca2a:	4b43      	ldr	r3, [pc, #268]	; (800cb38 <udp_input+0x218>)
 800ca2c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d10e      	bne.n	800ca50 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ca32:	6a3b      	ldr	r3, [r7, #32]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d014      	beq.n	800ca62 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	68da      	ldr	r2, [r3, #12]
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ca40:	4b3e      	ldr	r3, [pc, #248]	; (800cb3c <udp_input+0x21c>)
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ca48:	4a3c      	ldr	r2, [pc, #240]	; (800cb3c <udp_input+0x21c>)
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ca4e:	e008      	b.n	800ca62 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1a7      	bne.n	800c9b0 <udp_input+0x90>
 800ca60:	e000      	b.n	800ca64 <udp_input+0x144>
        break;
 800ca62:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d101      	bne.n	800ca6e <udp_input+0x14e>
    pcb = uncon_pcb;
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <udp_input+0x15a>
    for_us = 1;
 800ca74:	2301      	movs	r3, #1
 800ca76:	76fb      	strb	r3, [r7, #27]
 800ca78:	e00a      	b.n	800ca90 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	4b2d      	ldr	r3, [pc, #180]	; (800cb38 <udp_input+0x218>)
 800ca82:	695b      	ldr	r3, [r3, #20]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	bf0c      	ite	eq
 800ca88:	2301      	moveq	r3, #1
 800ca8a:	2300      	movne	r3, #0
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ca90:	7efb      	ldrb	r3, [r7, #27]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d041      	beq.n	800cb1a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ca96:	2108      	movs	r1, #8
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7f9 fa13 	bl	8005ec4 <pbuf_remove_header>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00a      	beq.n	800caba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800caa4:	4b20      	ldr	r3, [pc, #128]	; (800cb28 <udp_input+0x208>)
 800caa6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800caaa:	4925      	ldr	r1, [pc, #148]	; (800cb40 <udp_input+0x220>)
 800caac:	4820      	ldr	r0, [pc, #128]	; (800cb30 <udp_input+0x210>)
 800caae:	f002 fb8b 	bl	800f1c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7f9 fa8c 	bl	8005fd0 <pbuf_free>
      goto end;
 800cab8:	e032      	b.n	800cb20 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d012      	beq.n	800cae6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00a      	beq.n	800cade <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	699c      	ldr	r4, [r3, #24]
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	69d8      	ldr	r0, [r3, #28]
 800cad0:	8a3b      	ldrh	r3, [r7, #16]
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	4b1b      	ldr	r3, [pc, #108]	; (800cb44 <udp_input+0x224>)
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cada:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cadc:	e021      	b.n	800cb22 <udp_input+0x202>
        pbuf_free(p);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7f9 fa76 	bl	8005fd0 <pbuf_free>
        goto end;
 800cae4:	e01c      	b.n	800cb20 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cae6:	7cfb      	ldrb	r3, [r7, #19]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d112      	bne.n	800cb12 <udp_input+0x1f2>
 800caec:	4b12      	ldr	r3, [pc, #72]	; (800cb38 <udp_input+0x218>)
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800caf4:	2be0      	cmp	r3, #224	; 0xe0
 800caf6:	d00c      	beq.n	800cb12 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800caf8:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <udp_input+0x218>)
 800cafa:	899b      	ldrh	r3, [r3, #12]
 800cafc:	3308      	adds	r3, #8
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	b21b      	sxth	r3, r3
 800cb02:	4619      	mov	r1, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7f9 fa50 	bl	8005faa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cb0a:	2103      	movs	r1, #3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f001 f89b 	bl	800dc48 <icmp_dest_unreach>
      pbuf_free(p);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7f9 fa5c 	bl	8005fd0 <pbuf_free>
  return;
 800cb18:	e003      	b.n	800cb22 <udp_input+0x202>
    pbuf_free(p);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7f9 fa58 	bl	8005fd0 <pbuf_free>
  return;
 800cb20:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cb22:	372c      	adds	r7, #44	; 0x2c
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd90      	pop	{r4, r7, pc}
 800cb28:	08012504 	.word	0x08012504
 800cb2c:	080125a8 	.word	0x080125a8
 800cb30:	08012558 	.word	0x08012558
 800cb34:	080125c0 	.word	0x080125c0
 800cb38:	20005130 	.word	0x20005130
 800cb3c:	200086fc 	.word	0x200086fc
 800cb40:	080125dc 	.word	0x080125dc
 800cb44:	20005140 	.word	0x20005140

0800cb48 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01e      	beq.n	800cb96 <udp_netif_ip_addr_changed+0x4e>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01a      	beq.n	800cb96 <udp_netif_ip_addr_changed+0x4e>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d017      	beq.n	800cb96 <udp_netif_ip_addr_changed+0x4e>
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d013      	beq.n	800cb96 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb6e:	4b0d      	ldr	r3, [pc, #52]	; (800cba4 <udp_netif_ip_addr_changed+0x5c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	e00c      	b.n	800cb90 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d103      	bne.n	800cb8a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1ef      	bne.n	800cb76 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cb96:	bf00      	nop
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	200086fc 	.word	0x200086fc

0800cba8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cbb0:	4915      	ldr	r1, [pc, #84]	; (800cc08 <etharp_free_entry+0x60>)
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	4413      	add	r3, r2
 800cbba:	00db      	lsls	r3, r3, #3
 800cbbc:	440b      	add	r3, r1
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d013      	beq.n	800cbec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cbc4:	4910      	ldr	r1, [pc, #64]	; (800cc08 <etharp_free_entry+0x60>)
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	4413      	add	r3, r2
 800cbce:	00db      	lsls	r3, r3, #3
 800cbd0:	440b      	add	r3, r1
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7f9 f9fb 	bl	8005fd0 <pbuf_free>
    arp_table[i].q = NULL;
 800cbda:	490b      	ldr	r1, [pc, #44]	; (800cc08 <etharp_free_entry+0x60>)
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	440b      	add	r3, r1
 800cbe8:	2200      	movs	r2, #0
 800cbea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cbec:	4906      	ldr	r1, [pc, #24]	; (800cc08 <etharp_free_entry+0x60>)
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	4413      	add	r3, r2
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	440b      	add	r3, r1
 800cbfa:	3314      	adds	r3, #20
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cc00:	bf00      	nop
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20008700 	.word	0x20008700

0800cc0c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc12:	2300      	movs	r3, #0
 800cc14:	607b      	str	r3, [r7, #4]
 800cc16:	e096      	b.n	800cd46 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cc18:	494f      	ldr	r1, [pc, #316]	; (800cd58 <etharp_tmr+0x14c>)
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	4413      	add	r3, r2
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	440b      	add	r3, r1
 800cc26:	3314      	adds	r3, #20
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 8086 	beq.w	800cd40 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cc34:	4948      	ldr	r1, [pc, #288]	; (800cd58 <etharp_tmr+0x14c>)
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	4613      	mov	r3, r2
 800cc3a:	005b      	lsls	r3, r3, #1
 800cc3c:	4413      	add	r3, r2
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	440b      	add	r3, r1
 800cc42:	3312      	adds	r3, #18
 800cc44:	881b      	ldrh	r3, [r3, #0]
 800cc46:	3301      	adds	r3, #1
 800cc48:	b298      	uxth	r0, r3
 800cc4a:	4943      	ldr	r1, [pc, #268]	; (800cd58 <etharp_tmr+0x14c>)
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	4413      	add	r3, r2
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	440b      	add	r3, r1
 800cc58:	3312      	adds	r3, #18
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc5e:	493e      	ldr	r1, [pc, #248]	; (800cd58 <etharp_tmr+0x14c>)
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	4413      	add	r3, r2
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	440b      	add	r3, r1
 800cc6c:	3312      	adds	r3, #18
 800cc6e:	881b      	ldrh	r3, [r3, #0]
 800cc70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cc74:	d215      	bcs.n	800cca2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc76:	4938      	ldr	r1, [pc, #224]	; (800cd58 <etharp_tmr+0x14c>)
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	4413      	add	r3, r2
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	440b      	add	r3, r1
 800cc84:	3314      	adds	r3, #20
 800cc86:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d10e      	bne.n	800ccaa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cc8c:	4932      	ldr	r1, [pc, #200]	; (800cd58 <etharp_tmr+0x14c>)
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	4613      	mov	r3, r2
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	4413      	add	r3, r2
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	440b      	add	r3, r1
 800cc9a:	3312      	adds	r3, #18
 800cc9c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d903      	bls.n	800ccaa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7ff ff80 	bl	800cba8 <etharp_free_entry>
 800cca8:	e04a      	b.n	800cd40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ccaa:	492b      	ldr	r1, [pc, #172]	; (800cd58 <etharp_tmr+0x14c>)
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	005b      	lsls	r3, r3, #1
 800ccb2:	4413      	add	r3, r2
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	440b      	add	r3, r1
 800ccb8:	3314      	adds	r3, #20
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d10a      	bne.n	800ccd6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ccc0:	4925      	ldr	r1, [pc, #148]	; (800cd58 <etharp_tmr+0x14c>)
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	440b      	add	r3, r1
 800ccce:	3314      	adds	r3, #20
 800ccd0:	2204      	movs	r2, #4
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	e034      	b.n	800cd40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ccd6:	4920      	ldr	r1, [pc, #128]	; (800cd58 <etharp_tmr+0x14c>)
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	005b      	lsls	r3, r3, #1
 800ccde:	4413      	add	r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	440b      	add	r3, r1
 800cce4:	3314      	adds	r3, #20
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b04      	cmp	r3, #4
 800ccea:	d10a      	bne.n	800cd02 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ccec:	491a      	ldr	r1, [pc, #104]	; (800cd58 <etharp_tmr+0x14c>)
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	4413      	add	r3, r2
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	440b      	add	r3, r1
 800ccfa:	3314      	adds	r3, #20
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	701a      	strb	r2, [r3, #0]
 800cd00:	e01e      	b.n	800cd40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cd02:	4915      	ldr	r1, [pc, #84]	; (800cd58 <etharp_tmr+0x14c>)
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	4613      	mov	r3, r2
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4413      	add	r3, r2
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	440b      	add	r3, r1
 800cd10:	3314      	adds	r3, #20
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d113      	bne.n	800cd40 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cd18:	490f      	ldr	r1, [pc, #60]	; (800cd58 <etharp_tmr+0x14c>)
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	4413      	add	r3, r2
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	440b      	add	r3, r1
 800cd26:	3308      	adds	r3, #8
 800cd28:	6818      	ldr	r0, [r3, #0]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	4413      	add	r3, r2
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	4a08      	ldr	r2, [pc, #32]	; (800cd58 <etharp_tmr+0x14c>)
 800cd36:	4413      	add	r3, r2
 800cd38:	3304      	adds	r3, #4
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	f000 fe6e 	bl	800da1c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	3301      	adds	r3, #1
 800cd44:	607b      	str	r3, [r7, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b09      	cmp	r3, #9
 800cd4a:	f77f af65 	ble.w	800cc18 <etharp_tmr+0xc>
      }
    }
  }
}
 800cd4e:	bf00      	nop
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	20008700 	.word	0x20008700

0800cd5c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08a      	sub	sp, #40	; 0x28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	460b      	mov	r3, r1
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cd6a:	230a      	movs	r3, #10
 800cd6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd6e:	230a      	movs	r3, #10
 800cd70:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cd72:	230a      	movs	r3, #10
 800cd74:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cd7a:	230a      	movs	r3, #10
 800cd7c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	83bb      	strh	r3, [r7, #28]
 800cd82:	2300      	movs	r3, #0
 800cd84:	837b      	strh	r3, [r7, #26]
 800cd86:	2300      	movs	r3, #0
 800cd88:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	843b      	strh	r3, [r7, #32]
 800cd8e:	e0ae      	b.n	800ceee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cd90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd94:	49a6      	ldr	r1, [pc, #664]	; (800d030 <etharp_find_entry+0x2d4>)
 800cd96:	4613      	mov	r3, r2
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	4413      	add	r3, r2
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	440b      	add	r3, r1
 800cda0:	3314      	adds	r3, #20
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cda6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cdaa:	2b0a      	cmp	r3, #10
 800cdac:	d105      	bne.n	800cdba <etharp_find_entry+0x5e>
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d102      	bne.n	800cdba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cdb4:	8c3b      	ldrh	r3, [r7, #32]
 800cdb6:	847b      	strh	r3, [r7, #34]	; 0x22
 800cdb8:	e095      	b.n	800cee6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f000 8092 	beq.w	800cee6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cdc2:	7dfb      	ldrb	r3, [r7, #23]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d009      	beq.n	800cddc <etharp_find_entry+0x80>
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d806      	bhi.n	800cddc <etharp_find_entry+0x80>
 800cdce:	4b99      	ldr	r3, [pc, #612]	; (800d034 <etharp_find_entry+0x2d8>)
 800cdd0:	f240 1223 	movw	r2, #291	; 0x123
 800cdd4:	4998      	ldr	r1, [pc, #608]	; (800d038 <etharp_find_entry+0x2dc>)
 800cdd6:	4899      	ldr	r0, [pc, #612]	; (800d03c <etharp_find_entry+0x2e0>)
 800cdd8:	f002 f9f6 	bl	800f1c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d020      	beq.n	800ce24 <etharp_find_entry+0xc8>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6819      	ldr	r1, [r3, #0]
 800cde6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdea:	4891      	ldr	r0, [pc, #580]	; (800d030 <etharp_find_entry+0x2d4>)
 800cdec:	4613      	mov	r3, r2
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	4413      	add	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	4403      	add	r3, r0
 800cdf6:	3304      	adds	r3, #4
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	d112      	bne.n	800ce24 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d00c      	beq.n	800ce1e <etharp_find_entry+0xc2>
 800ce04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce08:	4989      	ldr	r1, [pc, #548]	; (800d030 <etharp_find_entry+0x2d4>)
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	4413      	add	r3, r2
 800ce10:	00db      	lsls	r3, r3, #3
 800ce12:	440b      	add	r3, r1
 800ce14:	3308      	adds	r3, #8
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d102      	bne.n	800ce24 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ce1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce22:	e100      	b.n	800d026 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d140      	bne.n	800ceac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ce2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce2e:	4980      	ldr	r1, [pc, #512]	; (800d030 <etharp_find_entry+0x2d4>)
 800ce30:	4613      	mov	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	440b      	add	r3, r1
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d01a      	beq.n	800ce76 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ce40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce44:	497a      	ldr	r1, [pc, #488]	; (800d030 <etharp_find_entry+0x2d4>)
 800ce46:	4613      	mov	r3, r2
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	4413      	add	r3, r2
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	440b      	add	r3, r1
 800ce50:	3312      	adds	r3, #18
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	8bba      	ldrh	r2, [r7, #28]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d845      	bhi.n	800cee6 <etharp_find_entry+0x18a>
            old_queue = i;
 800ce5a:	8c3b      	ldrh	r3, [r7, #32]
 800ce5c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ce5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce62:	4973      	ldr	r1, [pc, #460]	; (800d030 <etharp_find_entry+0x2d4>)
 800ce64:	4613      	mov	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	4413      	add	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	440b      	add	r3, r1
 800ce6e:	3312      	adds	r3, #18
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	83bb      	strh	r3, [r7, #28]
 800ce74:	e037      	b.n	800cee6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ce76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce7a:	496d      	ldr	r1, [pc, #436]	; (800d030 <etharp_find_entry+0x2d4>)
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	005b      	lsls	r3, r3, #1
 800ce80:	4413      	add	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	440b      	add	r3, r1
 800ce86:	3312      	adds	r3, #18
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	8b7a      	ldrh	r2, [r7, #26]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d82a      	bhi.n	800cee6 <etharp_find_entry+0x18a>
            old_pending = i;
 800ce90:	8c3b      	ldrh	r3, [r7, #32]
 800ce92:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ce94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce98:	4965      	ldr	r1, [pc, #404]	; (800d030 <etharp_find_entry+0x2d4>)
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	4413      	add	r3, r2
 800cea0:	00db      	lsls	r3, r3, #3
 800cea2:	440b      	add	r3, r1
 800cea4:	3312      	adds	r3, #18
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	837b      	strh	r3, [r7, #26]
 800ceaa:	e01c      	b.n	800cee6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d919      	bls.n	800cee6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ceb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ceb6:	495e      	ldr	r1, [pc, #376]	; (800d030 <etharp_find_entry+0x2d4>)
 800ceb8:	4613      	mov	r3, r2
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	4413      	add	r3, r2
 800cebe:	00db      	lsls	r3, r3, #3
 800cec0:	440b      	add	r3, r1
 800cec2:	3312      	adds	r3, #18
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	8b3a      	ldrh	r2, [r7, #24]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d80c      	bhi.n	800cee6 <etharp_find_entry+0x18a>
            old_stable = i;
 800cecc:	8c3b      	ldrh	r3, [r7, #32]
 800cece:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ced0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ced4:	4956      	ldr	r1, [pc, #344]	; (800d030 <etharp_find_entry+0x2d4>)
 800ced6:	4613      	mov	r3, r2
 800ced8:	005b      	lsls	r3, r3, #1
 800ceda:	4413      	add	r3, r2
 800cedc:	00db      	lsls	r3, r3, #3
 800cede:	440b      	add	r3, r1
 800cee0:	3312      	adds	r3, #18
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cee6:	8c3b      	ldrh	r3, [r7, #32]
 800cee8:	3301      	adds	r3, #1
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	843b      	strh	r3, [r7, #32]
 800ceee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cef2:	2b09      	cmp	r3, #9
 800cef4:	f77f af4c 	ble.w	800cd90 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cef8:	7afb      	ldrb	r3, [r7, #11]
 800cefa:	f003 0302 	and.w	r3, r3, #2
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d108      	bne.n	800cf14 <etharp_find_entry+0x1b8>
 800cf02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf06:	2b0a      	cmp	r3, #10
 800cf08:	d107      	bne.n	800cf1a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cf0a:	7afb      	ldrb	r3, [r7, #11]
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d102      	bne.n	800cf1a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cf14:	f04f 33ff 	mov.w	r3, #4294967295
 800cf18:	e085      	b.n	800d026 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cf1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf1e:	2b09      	cmp	r3, #9
 800cf20:	dc02      	bgt.n	800cf28 <etharp_find_entry+0x1cc>
    i = empty;
 800cf22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf24:	843b      	strh	r3, [r7, #32]
 800cf26:	e039      	b.n	800cf9c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cf28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cf2c:	2b09      	cmp	r3, #9
 800cf2e:	dc14      	bgt.n	800cf5a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cf30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf32:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cf34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf38:	493d      	ldr	r1, [pc, #244]	; (800d030 <etharp_find_entry+0x2d4>)
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	4413      	add	r3, r2
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	440b      	add	r3, r1
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d018      	beq.n	800cf7c <etharp_find_entry+0x220>
 800cf4a:	4b3a      	ldr	r3, [pc, #232]	; (800d034 <etharp_find_entry+0x2d8>)
 800cf4c:	f240 126d 	movw	r2, #365	; 0x16d
 800cf50:	493b      	ldr	r1, [pc, #236]	; (800d040 <etharp_find_entry+0x2e4>)
 800cf52:	483a      	ldr	r0, [pc, #232]	; (800d03c <etharp_find_entry+0x2e0>)
 800cf54:	f002 f938 	bl	800f1c8 <iprintf>
 800cf58:	e010      	b.n	800cf7c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cf5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf5e:	2b09      	cmp	r3, #9
 800cf60:	dc02      	bgt.n	800cf68 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cf62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf64:	843b      	strh	r3, [r7, #32]
 800cf66:	e009      	b.n	800cf7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cf68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf6c:	2b09      	cmp	r3, #9
 800cf6e:	dc02      	bgt.n	800cf76 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cf70:	8bfb      	ldrh	r3, [r7, #30]
 800cf72:	843b      	strh	r3, [r7, #32]
 800cf74:	e002      	b.n	800cf7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cf76:	f04f 33ff 	mov.w	r3, #4294967295
 800cf7a:	e054      	b.n	800d026 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf80:	2b09      	cmp	r3, #9
 800cf82:	dd06      	ble.n	800cf92 <etharp_find_entry+0x236>
 800cf84:	4b2b      	ldr	r3, [pc, #172]	; (800d034 <etharp_find_entry+0x2d8>)
 800cf86:	f240 127f 	movw	r2, #383	; 0x17f
 800cf8a:	492e      	ldr	r1, [pc, #184]	; (800d044 <etharp_find_entry+0x2e8>)
 800cf8c:	482b      	ldr	r0, [pc, #172]	; (800d03c <etharp_find_entry+0x2e0>)
 800cf8e:	f002 f91b 	bl	800f1c8 <iprintf>
    etharp_free_entry(i);
 800cf92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff fe06 	bl	800cba8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfa0:	2b09      	cmp	r3, #9
 800cfa2:	dd06      	ble.n	800cfb2 <etharp_find_entry+0x256>
 800cfa4:	4b23      	ldr	r3, [pc, #140]	; (800d034 <etharp_find_entry+0x2d8>)
 800cfa6:	f240 1283 	movw	r2, #387	; 0x183
 800cfaa:	4926      	ldr	r1, [pc, #152]	; (800d044 <etharp_find_entry+0x2e8>)
 800cfac:	4823      	ldr	r0, [pc, #140]	; (800d03c <etharp_find_entry+0x2e0>)
 800cfae:	f002 f90b 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cfb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfb6:	491e      	ldr	r1, [pc, #120]	; (800d030 <etharp_find_entry+0x2d4>)
 800cfb8:	4613      	mov	r3, r2
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	4413      	add	r3, r2
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	440b      	add	r3, r1
 800cfc2:	3314      	adds	r3, #20
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d006      	beq.n	800cfd8 <etharp_find_entry+0x27c>
 800cfca:	4b1a      	ldr	r3, [pc, #104]	; (800d034 <etharp_find_entry+0x2d8>)
 800cfcc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cfd0:	491d      	ldr	r1, [pc, #116]	; (800d048 <etharp_find_entry+0x2ec>)
 800cfd2:	481a      	ldr	r0, [pc, #104]	; (800d03c <etharp_find_entry+0x2e0>)
 800cfd4:	f002 f8f8 	bl	800f1c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00b      	beq.n	800cff6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cfde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6819      	ldr	r1, [r3, #0]
 800cfe6:	4812      	ldr	r0, [pc, #72]	; (800d030 <etharp_find_entry+0x2d4>)
 800cfe8:	4613      	mov	r3, r2
 800cfea:	005b      	lsls	r3, r3, #1
 800cfec:	4413      	add	r3, r2
 800cfee:	00db      	lsls	r3, r3, #3
 800cff0:	4403      	add	r3, r0
 800cff2:	3304      	adds	r3, #4
 800cff4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cff6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cffa:	490d      	ldr	r1, [pc, #52]	; (800d030 <etharp_find_entry+0x2d4>)
 800cffc:	4613      	mov	r3, r2
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	4413      	add	r3, r2
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	440b      	add	r3, r1
 800d006:	3312      	adds	r3, #18
 800d008:	2200      	movs	r2, #0
 800d00a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d00c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d010:	4907      	ldr	r1, [pc, #28]	; (800d030 <etharp_find_entry+0x2d4>)
 800d012:	4613      	mov	r3, r2
 800d014:	005b      	lsls	r3, r3, #1
 800d016:	4413      	add	r3, r2
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	440b      	add	r3, r1
 800d01c:	3308      	adds	r3, #8
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d022:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3728      	adds	r7, #40	; 0x28
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	20008700 	.word	0x20008700
 800d034:	08012868 	.word	0x08012868
 800d038:	080128a0 	.word	0x080128a0
 800d03c:	080128e0 	.word	0x080128e0
 800d040:	08012908 	.word	0x08012908
 800d044:	08012920 	.word	0x08012920
 800d048:	08012934 	.word	0x08012934

0800d04c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b088      	sub	sp, #32
 800d050:	af02      	add	r7, sp, #8
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d060:	2b06      	cmp	r3, #6
 800d062:	d006      	beq.n	800d072 <etharp_update_arp_entry+0x26>
 800d064:	4b48      	ldr	r3, [pc, #288]	; (800d188 <etharp_update_arp_entry+0x13c>)
 800d066:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d06a:	4948      	ldr	r1, [pc, #288]	; (800d18c <etharp_update_arp_entry+0x140>)
 800d06c:	4848      	ldr	r0, [pc, #288]	; (800d190 <etharp_update_arp_entry+0x144>)
 800d06e:	f002 f8ab 	bl	800f1c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d012      	beq.n	800d09e <etharp_update_arp_entry+0x52>
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00e      	beq.n	800d09e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68f9      	ldr	r1, [r7, #12]
 800d086:	4618      	mov	r0, r3
 800d088:	f001 f8fe 	bl	800e288 <ip4_addr_isbroadcast_u32>
 800d08c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d105      	bne.n	800d09e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d09a:	2be0      	cmp	r3, #224	; 0xe0
 800d09c:	d102      	bne.n	800d0a4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d09e:	f06f 030f 	mvn.w	r3, #15
 800d0a2:	e06c      	b.n	800d17e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d0a4:	78fb      	ldrb	r3, [r7, #3]
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	68b8      	ldr	r0, [r7, #8]
 800d0ac:	f7ff fe56 	bl	800cd5c <etharp_find_entry>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d0b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	da02      	bge.n	800d0c2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d0bc:	8afb      	ldrh	r3, [r7, #22]
 800d0be:	b25b      	sxtb	r3, r3
 800d0c0:	e05d      	b.n	800d17e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d0c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0c6:	4933      	ldr	r1, [pc, #204]	; (800d194 <etharp_update_arp_entry+0x148>)
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	4413      	add	r3, r2
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	440b      	add	r3, r1
 800d0d2:	3314      	adds	r3, #20
 800d0d4:	2202      	movs	r2, #2
 800d0d6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d0d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0dc:	492d      	ldr	r1, [pc, #180]	; (800d194 <etharp_update_arp_entry+0x148>)
 800d0de:	4613      	mov	r3, r2
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	4413      	add	r3, r2
 800d0e4:	00db      	lsls	r3, r3, #3
 800d0e6:	440b      	add	r3, r1
 800d0e8:	3308      	adds	r3, #8
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d0ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	4413      	add	r3, r2
 800d0f8:	00db      	lsls	r3, r3, #3
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	4a25      	ldr	r2, [pc, #148]	; (800d194 <etharp_update_arp_entry+0x148>)
 800d0fe:	4413      	add	r3, r2
 800d100:	3304      	adds	r3, #4
 800d102:	2206      	movs	r2, #6
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	4618      	mov	r0, r3
 800d108:	f002 f848 	bl	800f19c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d10c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d110:	4920      	ldr	r1, [pc, #128]	; (800d194 <etharp_update_arp_entry+0x148>)
 800d112:	4613      	mov	r3, r2
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	4413      	add	r3, r2
 800d118:	00db      	lsls	r3, r3, #3
 800d11a:	440b      	add	r3, r1
 800d11c:	3312      	adds	r3, #18
 800d11e:	2200      	movs	r2, #0
 800d120:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d122:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d126:	491b      	ldr	r1, [pc, #108]	; (800d194 <etharp_update_arp_entry+0x148>)
 800d128:	4613      	mov	r3, r2
 800d12a:	005b      	lsls	r3, r3, #1
 800d12c:	4413      	add	r3, r2
 800d12e:	00db      	lsls	r3, r3, #3
 800d130:	440b      	add	r3, r1
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d021      	beq.n	800d17c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d138:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d13c:	4915      	ldr	r1, [pc, #84]	; (800d194 <etharp_update_arp_entry+0x148>)
 800d13e:	4613      	mov	r3, r2
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	4413      	add	r3, r2
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	440b      	add	r3, r1
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d14c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d150:	4910      	ldr	r1, [pc, #64]	; (800d194 <etharp_update_arp_entry+0x148>)
 800d152:	4613      	mov	r3, r2
 800d154:	005b      	lsls	r3, r3, #1
 800d156:	4413      	add	r3, r2
 800d158:	00db      	lsls	r3, r3, #3
 800d15a:	440b      	add	r3, r1
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6939      	ldr	r1, [r7, #16]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f001 ff97 	bl	800f0a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d176:	6938      	ldr	r0, [r7, #16]
 800d178:	f7f8 ff2a 	bl	8005fd0 <pbuf_free>
  }
  return ERR_OK;
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3718      	adds	r7, #24
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	08012868 	.word	0x08012868
 800d18c:	08012960 	.word	0x08012960
 800d190:	080128e0 	.word	0x080128e0
 800d194:	20008700 	.word	0x20008700

0800d198 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	60fb      	str	r3, [r7, #12]
 800d1a4:	e01e      	b.n	800d1e4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d1a6:	4913      	ldr	r1, [pc, #76]	; (800d1f4 <etharp_cleanup_netif+0x5c>)
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	005b      	lsls	r3, r3, #1
 800d1ae:	4413      	add	r3, r2
 800d1b0:	00db      	lsls	r3, r3, #3
 800d1b2:	440b      	add	r3, r1
 800d1b4:	3314      	adds	r3, #20
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d1ba:	7afb      	ldrb	r3, [r7, #11]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00e      	beq.n	800d1de <etharp_cleanup_netif+0x46>
 800d1c0:	490c      	ldr	r1, [pc, #48]	; (800d1f4 <etharp_cleanup_netif+0x5c>)
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4413      	add	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	440b      	add	r3, r1
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d102      	bne.n	800d1de <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f7ff fce5 	bl	800cba8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	60fb      	str	r3, [r7, #12]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2b09      	cmp	r3, #9
 800d1e8:	dddd      	ble.n	800d1a6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d1ea:	bf00      	nop
 800d1ec:	bf00      	nop
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	20008700 	.word	0x20008700

0800d1f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d1f8:	b5b0      	push	{r4, r5, r7, lr}
 800d1fa:	b08a      	sub	sp, #40	; 0x28
 800d1fc:	af04      	add	r7, sp, #16
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d107      	bne.n	800d218 <etharp_input+0x20>
 800d208:	4b3d      	ldr	r3, [pc, #244]	; (800d300 <etharp_input+0x108>)
 800d20a:	f240 228a 	movw	r2, #650	; 0x28a
 800d20e:	493d      	ldr	r1, [pc, #244]	; (800d304 <etharp_input+0x10c>)
 800d210:	483d      	ldr	r0, [pc, #244]	; (800d308 <etharp_input+0x110>)
 800d212:	f001 ffd9 	bl	800f1c8 <iprintf>
 800d216:	e06f      	b.n	800d2f8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	b29b      	uxth	r3, r3
 800d224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d228:	d10c      	bne.n	800d244 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d22e:	2b06      	cmp	r3, #6
 800d230:	d108      	bne.n	800d244 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d236:	2b04      	cmp	r3, #4
 800d238:	d104      	bne.n	800d244 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	885b      	ldrh	r3, [r3, #2]
 800d23e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d240:	2b08      	cmp	r3, #8
 800d242:	d003      	beq.n	800d24c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7f8 fec3 	bl	8005fd0 <pbuf_free>
    return;
 800d24a:	e055      	b.n	800d2f8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	330e      	adds	r3, #14
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	3318      	adds	r3, #24
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	3304      	adds	r3, #4
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d102      	bne.n	800d26c <etharp_input+0x74>
    for_us = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	75fb      	strb	r3, [r7, #23]
 800d26a:	e009      	b.n	800d280 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	3304      	adds	r3, #4
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	bf0c      	ite	eq
 800d278:	2301      	moveq	r3, #1
 800d27a:	2300      	movne	r3, #0
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	f103 0208 	add.w	r2, r3, #8
 800d286:	7dfb      	ldrb	r3, [r7, #23]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <etharp_input+0x98>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e000      	b.n	800d292 <etharp_input+0x9a>
 800d290:	2302      	movs	r3, #2
 800d292:	f107 010c 	add.w	r1, r7, #12
 800d296:	6838      	ldr	r0, [r7, #0]
 800d298:	f7ff fed8 	bl	800d04c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	88db      	ldrh	r3, [r3, #6]
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2a6:	d003      	beq.n	800d2b0 <etharp_input+0xb8>
 800d2a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2ac:	d01e      	beq.n	800d2ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d2ae:	e020      	b.n	800d2f2 <etharp_input+0xfa>
      if (for_us) {
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d01c      	beq.n	800d2f0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d2d0:	2102      	movs	r1, #2
 800d2d2:	9103      	str	r1, [sp, #12]
 800d2d4:	f107 010c 	add.w	r1, r7, #12
 800d2d8:	9102      	str	r1, [sp, #8]
 800d2da:	9201      	str	r2, [sp, #4]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	462b      	mov	r3, r5
 800d2e0:	4622      	mov	r2, r4
 800d2e2:	4601      	mov	r1, r0
 800d2e4:	6838      	ldr	r0, [r7, #0]
 800d2e6:	f000 faeb 	bl	800d8c0 <etharp_raw>
      break;
 800d2ea:	e001      	b.n	800d2f0 <etharp_input+0xf8>
      break;
 800d2ec:	bf00      	nop
 800d2ee:	e000      	b.n	800d2f2 <etharp_input+0xfa>
      break;
 800d2f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7f8 fe6c 	bl	8005fd0 <pbuf_free>
}
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bdb0      	pop	{r4, r5, r7, pc}
 800d2fe:	bf00      	nop
 800d300:	08012868 	.word	0x08012868
 800d304:	080129b8 	.word	0x080129b8
 800d308:	080128e0 	.word	0x080128e0

0800d30c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af02      	add	r7, sp, #8
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	4613      	mov	r3, r2
 800d318:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d31a:	79fa      	ldrb	r2, [r7, #7]
 800d31c:	4944      	ldr	r1, [pc, #272]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d31e:	4613      	mov	r3, r2
 800d320:	005b      	lsls	r3, r3, #1
 800d322:	4413      	add	r3, r2
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	440b      	add	r3, r1
 800d328:	3314      	adds	r3, #20
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d806      	bhi.n	800d33e <etharp_output_to_arp_index+0x32>
 800d330:	4b40      	ldr	r3, [pc, #256]	; (800d434 <etharp_output_to_arp_index+0x128>)
 800d332:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d336:	4940      	ldr	r1, [pc, #256]	; (800d438 <etharp_output_to_arp_index+0x12c>)
 800d338:	4840      	ldr	r0, [pc, #256]	; (800d43c <etharp_output_to_arp_index+0x130>)
 800d33a:	f001 ff45 	bl	800f1c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d33e:	79fa      	ldrb	r2, [r7, #7]
 800d340:	493b      	ldr	r1, [pc, #236]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d342:	4613      	mov	r3, r2
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	4413      	add	r3, r2
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	440b      	add	r3, r1
 800d34c:	3314      	adds	r3, #20
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	2b02      	cmp	r3, #2
 800d352:	d153      	bne.n	800d3fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d354:	79fa      	ldrb	r2, [r7, #7]
 800d356:	4936      	ldr	r1, [pc, #216]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d358:	4613      	mov	r3, r2
 800d35a:	005b      	lsls	r3, r3, #1
 800d35c:	4413      	add	r3, r2
 800d35e:	00db      	lsls	r3, r3, #3
 800d360:	440b      	add	r3, r1
 800d362:	3312      	adds	r3, #18
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d36a:	d919      	bls.n	800d3a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d36c:	79fa      	ldrb	r2, [r7, #7]
 800d36e:	4613      	mov	r3, r2
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	4413      	add	r3, r2
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	4a2e      	ldr	r2, [pc, #184]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d378:	4413      	add	r3, r2
 800d37a:	3304      	adds	r3, #4
 800d37c:	4619      	mov	r1, r3
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f000 fb4c 	bl	800da1c <etharp_request>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d138      	bne.n	800d3fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d38a:	79fa      	ldrb	r2, [r7, #7]
 800d38c:	4928      	ldr	r1, [pc, #160]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d38e:	4613      	mov	r3, r2
 800d390:	005b      	lsls	r3, r3, #1
 800d392:	4413      	add	r3, r2
 800d394:	00db      	lsls	r3, r3, #3
 800d396:	440b      	add	r3, r1
 800d398:	3314      	adds	r3, #20
 800d39a:	2203      	movs	r2, #3
 800d39c:	701a      	strb	r2, [r3, #0]
 800d39e:	e02d      	b.n	800d3fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d3a0:	79fa      	ldrb	r2, [r7, #7]
 800d3a2:	4923      	ldr	r1, [pc, #140]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	005b      	lsls	r3, r3, #1
 800d3a8:	4413      	add	r3, r2
 800d3aa:	00db      	lsls	r3, r3, #3
 800d3ac:	440b      	add	r3, r1
 800d3ae:	3312      	adds	r3, #18
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d3b6:	d321      	bcc.n	800d3fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d3b8:	79fa      	ldrb	r2, [r7, #7]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	005b      	lsls	r3, r3, #1
 800d3be:	4413      	add	r3, r2
 800d3c0:	00db      	lsls	r3, r3, #3
 800d3c2:	4a1b      	ldr	r2, [pc, #108]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d3c4:	4413      	add	r3, r2
 800d3c6:	1d19      	adds	r1, r3, #4
 800d3c8:	79fa      	ldrb	r2, [r7, #7]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	005b      	lsls	r3, r3, #1
 800d3ce:	4413      	add	r3, r2
 800d3d0:	00db      	lsls	r3, r3, #3
 800d3d2:	3308      	adds	r3, #8
 800d3d4:	4a16      	ldr	r2, [pc, #88]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d3d6:	4413      	add	r3, r2
 800d3d8:	3304      	adds	r3, #4
 800d3da:	461a      	mov	r2, r3
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f000 fafb 	bl	800d9d8 <etharp_request_dst>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d109      	bne.n	800d3fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d3e8:	79fa      	ldrb	r2, [r7, #7]
 800d3ea:	4911      	ldr	r1, [pc, #68]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	005b      	lsls	r3, r3, #1
 800d3f0:	4413      	add	r3, r2
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	440b      	add	r3, r1
 800d3f6:	3314      	adds	r3, #20
 800d3f8:	2203      	movs	r2, #3
 800d3fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d402:	79fa      	ldrb	r2, [r7, #7]
 800d404:	4613      	mov	r3, r2
 800d406:	005b      	lsls	r3, r3, #1
 800d408:	4413      	add	r3, r2
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	3308      	adds	r3, #8
 800d40e:	4a08      	ldr	r2, [pc, #32]	; (800d430 <etharp_output_to_arp_index+0x124>)
 800d410:	4413      	add	r3, r2
 800d412:	3304      	adds	r3, #4
 800d414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d418:	9200      	str	r2, [sp, #0]
 800d41a:	460a      	mov	r2, r1
 800d41c:	68b9      	ldr	r1, [r7, #8]
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f001 fe40 	bl	800f0a4 <ethernet_output>
 800d424:	4603      	mov	r3, r0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	20008700 	.word	0x20008700
 800d434:	08012868 	.word	0x08012868
 800d438:	080129d8 	.word	0x080129d8
 800d43c:	080128e0 	.word	0x080128e0

0800d440 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b08a      	sub	sp, #40	; 0x28
 800d444:	af02      	add	r7, sp, #8
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d106      	bne.n	800d464 <etharp_output+0x24>
 800d456:	4b73      	ldr	r3, [pc, #460]	; (800d624 <etharp_output+0x1e4>)
 800d458:	f240 321e 	movw	r2, #798	; 0x31e
 800d45c:	4972      	ldr	r1, [pc, #456]	; (800d628 <etharp_output+0x1e8>)
 800d45e:	4873      	ldr	r0, [pc, #460]	; (800d62c <etharp_output+0x1ec>)
 800d460:	f001 feb2 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d106      	bne.n	800d478 <etharp_output+0x38>
 800d46a:	4b6e      	ldr	r3, [pc, #440]	; (800d624 <etharp_output+0x1e4>)
 800d46c:	f240 321f 	movw	r2, #799	; 0x31f
 800d470:	496f      	ldr	r1, [pc, #444]	; (800d630 <etharp_output+0x1f0>)
 800d472:	486e      	ldr	r0, [pc, #440]	; (800d62c <etharp_output+0x1ec>)
 800d474:	f001 fea8 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d106      	bne.n	800d48c <etharp_output+0x4c>
 800d47e:	4b69      	ldr	r3, [pc, #420]	; (800d624 <etharp_output+0x1e4>)
 800d480:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d484:	496b      	ldr	r1, [pc, #428]	; (800d634 <etharp_output+0x1f4>)
 800d486:	4869      	ldr	r0, [pc, #420]	; (800d62c <etharp_output+0x1ec>)
 800d488:	f001 fe9e 	bl	800f1c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	68f9      	ldr	r1, [r7, #12]
 800d492:	4618      	mov	r0, r3
 800d494:	f000 fef8 	bl	800e288 <ip4_addr_isbroadcast_u32>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d002      	beq.n	800d4a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d49e:	4b66      	ldr	r3, [pc, #408]	; (800d638 <etharp_output+0x1f8>)
 800d4a0:	61fb      	str	r3, [r7, #28]
 800d4a2:	e0af      	b.n	800d604 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4ac:	2be0      	cmp	r3, #224	; 0xe0
 800d4ae:	d118      	bne.n	800d4e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d4b8:	235e      	movs	r3, #94	; 0x5e
 800d4ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	3302      	adds	r3, #2
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3303      	adds	r3, #3
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d4da:	f107 0310 	add.w	r3, r7, #16
 800d4de:	61fb      	str	r3, [r7, #28]
 800d4e0:	e090      	b.n	800d604 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	405a      	eors	r2, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	3308      	adds	r3, #8
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d012      	beq.n	800d520 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d500:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d504:	4293      	cmp	r3, r2
 800d506:	d00b      	beq.n	800d520 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	330c      	adds	r3, #12
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	330c      	adds	r3, #12
 800d516:	61bb      	str	r3, [r7, #24]
 800d518:	e002      	b.n	800d520 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d51a:	f06f 0303 	mvn.w	r3, #3
 800d51e:	e07d      	b.n	800d61c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d520:	4b46      	ldr	r3, [pc, #280]	; (800d63c <etharp_output+0x1fc>)
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	4619      	mov	r1, r3
 800d526:	4a46      	ldr	r2, [pc, #280]	; (800d640 <etharp_output+0x200>)
 800d528:	460b      	mov	r3, r1
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	440b      	add	r3, r1
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	4413      	add	r3, r2
 800d532:	3314      	adds	r3, #20
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d925      	bls.n	800d586 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d53a:	4b40      	ldr	r3, [pc, #256]	; (800d63c <etharp_output+0x1fc>)
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	4619      	mov	r1, r3
 800d540:	4a3f      	ldr	r2, [pc, #252]	; (800d640 <etharp_output+0x200>)
 800d542:	460b      	mov	r3, r1
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	440b      	add	r3, r1
 800d548:	00db      	lsls	r3, r3, #3
 800d54a:	4413      	add	r3, r2
 800d54c:	3308      	adds	r3, #8
 800d54e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	429a      	cmp	r2, r3
 800d554:	d117      	bne.n	800d586 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	4b38      	ldr	r3, [pc, #224]	; (800d63c <etharp_output+0x1fc>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	4618      	mov	r0, r3
 800d560:	4937      	ldr	r1, [pc, #220]	; (800d640 <etharp_output+0x200>)
 800d562:	4603      	mov	r3, r0
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	4403      	add	r3, r0
 800d568:	00db      	lsls	r3, r3, #3
 800d56a:	440b      	add	r3, r1
 800d56c:	3304      	adds	r3, #4
 800d56e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d570:	429a      	cmp	r2, r3
 800d572:	d108      	bne.n	800d586 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d574:	4b31      	ldr	r3, [pc, #196]	; (800d63c <etharp_output+0x1fc>)
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	461a      	mov	r2, r3
 800d57a:	68b9      	ldr	r1, [r7, #8]
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7ff fec5 	bl	800d30c <etharp_output_to_arp_index>
 800d582:	4603      	mov	r3, r0
 800d584:	e04a      	b.n	800d61c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d586:	2300      	movs	r3, #0
 800d588:	75fb      	strb	r3, [r7, #23]
 800d58a:	e031      	b.n	800d5f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d58c:	7dfa      	ldrb	r2, [r7, #23]
 800d58e:	492c      	ldr	r1, [pc, #176]	; (800d640 <etharp_output+0x200>)
 800d590:	4613      	mov	r3, r2
 800d592:	005b      	lsls	r3, r3, #1
 800d594:	4413      	add	r3, r2
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	440b      	add	r3, r1
 800d59a:	3314      	adds	r3, #20
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d923      	bls.n	800d5ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d5a2:	7dfa      	ldrb	r2, [r7, #23]
 800d5a4:	4926      	ldr	r1, [pc, #152]	; (800d640 <etharp_output+0x200>)
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	4413      	add	r3, r2
 800d5ac:	00db      	lsls	r3, r3, #3
 800d5ae:	440b      	add	r3, r1
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d117      	bne.n	800d5ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	6819      	ldr	r1, [r3, #0]
 800d5be:	7dfa      	ldrb	r2, [r7, #23]
 800d5c0:	481f      	ldr	r0, [pc, #124]	; (800d640 <etharp_output+0x200>)
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	4413      	add	r3, r2
 800d5c8:	00db      	lsls	r3, r3, #3
 800d5ca:	4403      	add	r3, r0
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d5d0:	4299      	cmp	r1, r3
 800d5d2:	d10a      	bne.n	800d5ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d5d4:	4a19      	ldr	r2, [pc, #100]	; (800d63c <etharp_output+0x1fc>)
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
 800d5d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d5da:	7dfb      	ldrb	r3, [r7, #23]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f7ff fe93 	bl	800d30c <etharp_output_to_arp_index>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	e018      	b.n	800d61c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d5ea:	7dfb      	ldrb	r3, [r7, #23]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	75fb      	strb	r3, [r7, #23]
 800d5f0:	7dfb      	ldrb	r3, [r7, #23]
 800d5f2:	2b09      	cmp	r3, #9
 800d5f4:	d9ca      	bls.n	800d58c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d5f6:	68ba      	ldr	r2, [r7, #8]
 800d5f8:	69b9      	ldr	r1, [r7, #24]
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f000 f822 	bl	800d644 <etharp_query>
 800d600:	4603      	mov	r3, r0
 800d602:	e00b      	b.n	800d61c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d60a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	68b9      	ldr	r1, [r7, #8]
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f001 fd45 	bl	800f0a4 <ethernet_output>
 800d61a:	4603      	mov	r3, r0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3720      	adds	r7, #32
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	08012868 	.word	0x08012868
 800d628:	080129b8 	.word	0x080129b8
 800d62c:	080128e0 	.word	0x080128e0
 800d630:	08012a08 	.word	0x08012a08
 800d634:	080129a8 	.word	0x080129a8
 800d638:	0801402c 	.word	0x0801402c
 800d63c:	200087f0 	.word	0x200087f0
 800d640:	20008700 	.word	0x20008700

0800d644 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08c      	sub	sp, #48	; 0x30
 800d648:	af02      	add	r7, sp, #8
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	3326      	adds	r3, #38	; 0x26
 800d654:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d656:	23ff      	movs	r3, #255	; 0xff
 800d658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	68f9      	ldr	r1, [r7, #12]
 800d666:	4618      	mov	r0, r3
 800d668:	f000 fe0e 	bl	800e288 <ip4_addr_isbroadcast_u32>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10c      	bne.n	800d68c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d67a:	2be0      	cmp	r3, #224	; 0xe0
 800d67c:	d006      	beq.n	800d68c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d003      	beq.n	800d68c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d68c:	f06f 030f 	mvn.w	r3, #15
 800d690:	e101      	b.n	800d896 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	2101      	movs	r1, #1
 800d696:	68b8      	ldr	r0, [r7, #8]
 800d698:	f7ff fb60 	bl	800cd5c <etharp_find_entry>
 800d69c:	4603      	mov	r3, r0
 800d69e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d6a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	da02      	bge.n	800d6ae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d6a8:	8a7b      	ldrh	r3, [r7, #18]
 800d6aa:	b25b      	sxtb	r3, r3
 800d6ac:	e0f3      	b.n	800d896 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d6ae:	8a7b      	ldrh	r3, [r7, #18]
 800d6b0:	2b7e      	cmp	r3, #126	; 0x7e
 800d6b2:	d906      	bls.n	800d6c2 <etharp_query+0x7e>
 800d6b4:	4b7a      	ldr	r3, [pc, #488]	; (800d8a0 <etharp_query+0x25c>)
 800d6b6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d6ba:	497a      	ldr	r1, [pc, #488]	; (800d8a4 <etharp_query+0x260>)
 800d6bc:	487a      	ldr	r0, [pc, #488]	; (800d8a8 <etharp_query+0x264>)
 800d6be:	f001 fd83 	bl	800f1c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d6c2:	8a7b      	ldrh	r3, [r7, #18]
 800d6c4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d6c6:	7c7a      	ldrb	r2, [r7, #17]
 800d6c8:	4978      	ldr	r1, [pc, #480]	; (800d8ac <etharp_query+0x268>)
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	005b      	lsls	r3, r3, #1
 800d6ce:	4413      	add	r3, r2
 800d6d0:	00db      	lsls	r3, r3, #3
 800d6d2:	440b      	add	r3, r1
 800d6d4:	3314      	adds	r3, #20
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d115      	bne.n	800d708 <etharp_query+0xc4>
    is_new_entry = 1;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d6e0:	7c7a      	ldrb	r2, [r7, #17]
 800d6e2:	4972      	ldr	r1, [pc, #456]	; (800d8ac <etharp_query+0x268>)
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	005b      	lsls	r3, r3, #1
 800d6e8:	4413      	add	r3, r2
 800d6ea:	00db      	lsls	r3, r3, #3
 800d6ec:	440b      	add	r3, r1
 800d6ee:	3314      	adds	r3, #20
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d6f4:	7c7a      	ldrb	r2, [r7, #17]
 800d6f6:	496d      	ldr	r1, [pc, #436]	; (800d8ac <etharp_query+0x268>)
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	4413      	add	r3, r2
 800d6fe:	00db      	lsls	r3, r3, #3
 800d700:	440b      	add	r3, r1
 800d702:	3308      	adds	r3, #8
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d708:	7c7a      	ldrb	r2, [r7, #17]
 800d70a:	4968      	ldr	r1, [pc, #416]	; (800d8ac <etharp_query+0x268>)
 800d70c:	4613      	mov	r3, r2
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	4413      	add	r3, r2
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	440b      	add	r3, r1
 800d716:	3314      	adds	r3, #20
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d011      	beq.n	800d742 <etharp_query+0xfe>
 800d71e:	7c7a      	ldrb	r2, [r7, #17]
 800d720:	4962      	ldr	r1, [pc, #392]	; (800d8ac <etharp_query+0x268>)
 800d722:	4613      	mov	r3, r2
 800d724:	005b      	lsls	r3, r3, #1
 800d726:	4413      	add	r3, r2
 800d728:	00db      	lsls	r3, r3, #3
 800d72a:	440b      	add	r3, r1
 800d72c:	3314      	adds	r3, #20
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d806      	bhi.n	800d742 <etharp_query+0xfe>
 800d734:	4b5a      	ldr	r3, [pc, #360]	; (800d8a0 <etharp_query+0x25c>)
 800d736:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d73a:	495d      	ldr	r1, [pc, #372]	; (800d8b0 <etharp_query+0x26c>)
 800d73c:	485a      	ldr	r0, [pc, #360]	; (800d8a8 <etharp_query+0x264>)
 800d73e:	f001 fd43 	bl	800f1c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d742:	6a3b      	ldr	r3, [r7, #32]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d102      	bne.n	800d74e <etharp_query+0x10a>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10c      	bne.n	800d768 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f000 f963 	bl	800da1c <etharp_request>
 800d756:	4603      	mov	r3, r0
 800d758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d102      	bne.n	800d768 <etharp_query+0x124>
      return result;
 800d762:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d766:	e096      	b.n	800d896 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d106      	bne.n	800d77c <etharp_query+0x138>
 800d76e:	4b4c      	ldr	r3, [pc, #304]	; (800d8a0 <etharp_query+0x25c>)
 800d770:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d774:	494f      	ldr	r1, [pc, #316]	; (800d8b4 <etharp_query+0x270>)
 800d776:	484c      	ldr	r0, [pc, #304]	; (800d8a8 <etharp_query+0x264>)
 800d778:	f001 fd26 	bl	800f1c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d77c:	7c7a      	ldrb	r2, [r7, #17]
 800d77e:	494b      	ldr	r1, [pc, #300]	; (800d8ac <etharp_query+0x268>)
 800d780:	4613      	mov	r3, r2
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	4413      	add	r3, r2
 800d786:	00db      	lsls	r3, r3, #3
 800d788:	440b      	add	r3, r1
 800d78a:	3314      	adds	r3, #20
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d917      	bls.n	800d7c2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d792:	4a49      	ldr	r2, [pc, #292]	; (800d8b8 <etharp_query+0x274>)
 800d794:	7c7b      	ldrb	r3, [r7, #17]
 800d796:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d798:	7c7a      	ldrb	r2, [r7, #17]
 800d79a:	4613      	mov	r3, r2
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	4413      	add	r3, r2
 800d7a0:	00db      	lsls	r3, r3, #3
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	4a41      	ldr	r2, [pc, #260]	; (800d8ac <etharp_query+0x268>)
 800d7a6:	4413      	add	r3, r2
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7ae:	9200      	str	r2, [sp, #0]
 800d7b0:	697a      	ldr	r2, [r7, #20]
 800d7b2:	6879      	ldr	r1, [r7, #4]
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f001 fc75 	bl	800f0a4 <ethernet_output>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7c0:	e067      	b.n	800d892 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d7c2:	7c7a      	ldrb	r2, [r7, #17]
 800d7c4:	4939      	ldr	r1, [pc, #228]	; (800d8ac <etharp_query+0x268>)
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	4413      	add	r3, r2
 800d7cc:	00db      	lsls	r3, r3, #3
 800d7ce:	440b      	add	r3, r1
 800d7d0:	3314      	adds	r3, #20
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d15c      	bne.n	800d892 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d7e0:	e01c      	b.n	800d81c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	895a      	ldrh	r2, [r3, #10]
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	891b      	ldrh	r3, [r3, #8]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d10a      	bne.n	800d804 <etharp_query+0x1c0>
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d006      	beq.n	800d804 <etharp_query+0x1c0>
 800d7f6:	4b2a      	ldr	r3, [pc, #168]	; (800d8a0 <etharp_query+0x25c>)
 800d7f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d7fc:	492f      	ldr	r1, [pc, #188]	; (800d8bc <etharp_query+0x278>)
 800d7fe:	482a      	ldr	r0, [pc, #168]	; (800d8a8 <etharp_query+0x264>)
 800d800:	f001 fce2 	bl	800f1c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	7b1b      	ldrb	r3, [r3, #12]
 800d808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <etharp_query+0x1d2>
        copy_needed = 1;
 800d810:	2301      	movs	r3, #1
 800d812:	61bb      	str	r3, [r7, #24]
        break;
 800d814:	e005      	b.n	800d822 <etharp_query+0x1de>
      }
      p = p->next;
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1df      	bne.n	800d7e2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d007      	beq.n	800d838 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d82e:	200e      	movs	r0, #14
 800d830:	f7f8 fe2a 	bl	8006488 <pbuf_clone>
 800d834:	61f8      	str	r0, [r7, #28]
 800d836:	e004      	b.n	800d842 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d83c:	69f8      	ldr	r0, [r7, #28]
 800d83e:	f7f8 fc67 	bl	8006110 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d021      	beq.n	800d88c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d848:	7c7a      	ldrb	r2, [r7, #17]
 800d84a:	4918      	ldr	r1, [pc, #96]	; (800d8ac <etharp_query+0x268>)
 800d84c:	4613      	mov	r3, r2
 800d84e:	005b      	lsls	r3, r3, #1
 800d850:	4413      	add	r3, r2
 800d852:	00db      	lsls	r3, r3, #3
 800d854:	440b      	add	r3, r1
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00a      	beq.n	800d872 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d85c:	7c7a      	ldrb	r2, [r7, #17]
 800d85e:	4913      	ldr	r1, [pc, #76]	; (800d8ac <etharp_query+0x268>)
 800d860:	4613      	mov	r3, r2
 800d862:	005b      	lsls	r3, r3, #1
 800d864:	4413      	add	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	440b      	add	r3, r1
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7f8 fbaf 	bl	8005fd0 <pbuf_free>
      }
      arp_table[i].q = p;
 800d872:	7c7a      	ldrb	r2, [r7, #17]
 800d874:	490d      	ldr	r1, [pc, #52]	; (800d8ac <etharp_query+0x268>)
 800d876:	4613      	mov	r3, r2
 800d878:	005b      	lsls	r3, r3, #1
 800d87a:	4413      	add	r3, r2
 800d87c:	00db      	lsls	r3, r3, #3
 800d87e:	440b      	add	r3, r1
 800d880:	69fa      	ldr	r2, [r7, #28]
 800d882:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d88a:	e002      	b.n	800d892 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d88c:	23ff      	movs	r3, #255	; 0xff
 800d88e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d892:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d896:	4618      	mov	r0, r3
 800d898:	3728      	adds	r7, #40	; 0x28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	08012868 	.word	0x08012868
 800d8a4:	08012a14 	.word	0x08012a14
 800d8a8:	080128e0 	.word	0x080128e0
 800d8ac:	20008700 	.word	0x20008700
 800d8b0:	08012a24 	.word	0x08012a24
 800d8b4:	08012a08 	.word	0x08012a08
 800d8b8:	200087f0 	.word	0x200087f0
 800d8bc:	08012a4c 	.word	0x08012a4c

0800d8c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b08a      	sub	sp, #40	; 0x28
 800d8c4:	af02      	add	r7, sp, #8
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d106      	bne.n	800d8e6 <etharp_raw+0x26>
 800d8d8:	4b3a      	ldr	r3, [pc, #232]	; (800d9c4 <etharp_raw+0x104>)
 800d8da:	f240 4257 	movw	r2, #1111	; 0x457
 800d8de:	493a      	ldr	r1, [pc, #232]	; (800d9c8 <etharp_raw+0x108>)
 800d8e0:	483a      	ldr	r0, [pc, #232]	; (800d9cc <etharp_raw+0x10c>)
 800d8e2:	f001 fc71 	bl	800f1c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d8e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d8ea:	211c      	movs	r1, #28
 800d8ec:	200e      	movs	r0, #14
 800d8ee:	f7f8 f88b 	bl	8005a08 <pbuf_alloc>
 800d8f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d8f4:	69bb      	ldr	r3, [r7, #24]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fe:	e05d      	b.n	800d9bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	895b      	ldrh	r3, [r3, #10]
 800d904:	2b1b      	cmp	r3, #27
 800d906:	d806      	bhi.n	800d916 <etharp_raw+0x56>
 800d908:	4b2e      	ldr	r3, [pc, #184]	; (800d9c4 <etharp_raw+0x104>)
 800d90a:	f240 4262 	movw	r2, #1122	; 0x462
 800d90e:	4930      	ldr	r1, [pc, #192]	; (800d9d0 <etharp_raw+0x110>)
 800d910:	482e      	ldr	r0, [pc, #184]	; (800d9cc <etharp_raw+0x10c>)
 800d912:	f001 fc59 	bl	800f1c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d91c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d91e:	4618      	mov	r0, r3
 800d920:	f7f6 ffc2 	bl	80048a8 <lwip_htons>
 800d924:	4603      	mov	r3, r0
 800d926:	461a      	mov	r2, r3
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d932:	2b06      	cmp	r3, #6
 800d934:	d006      	beq.n	800d944 <etharp_raw+0x84>
 800d936:	4b23      	ldr	r3, [pc, #140]	; (800d9c4 <etharp_raw+0x104>)
 800d938:	f240 4269 	movw	r2, #1129	; 0x469
 800d93c:	4925      	ldr	r1, [pc, #148]	; (800d9d4 <etharp_raw+0x114>)
 800d93e:	4823      	ldr	r0, [pc, #140]	; (800d9cc <etharp_raw+0x10c>)
 800d940:	f001 fc42 	bl	800f1c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	3308      	adds	r3, #8
 800d948:	2206      	movs	r2, #6
 800d94a:	6839      	ldr	r1, [r7, #0]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f001 fc25 	bl	800f19c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	3312      	adds	r3, #18
 800d956:	2206      	movs	r2, #6
 800d958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d95a:	4618      	mov	r0, r3
 800d95c:	f001 fc1e 	bl	800f19c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	330e      	adds	r3, #14
 800d964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d966:	6812      	ldr	r2, [r2, #0]
 800d968:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	3318      	adds	r3, #24
 800d96e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d970:	6812      	ldr	r2, [r2, #0]
 800d972:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2200      	movs	r2, #0
 800d978:	701a      	strb	r2, [r3, #0]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f042 0201 	orr.w	r2, r2, #1
 800d980:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2200      	movs	r2, #0
 800d986:	f042 0208 	orr.w	r2, r2, #8
 800d98a:	709a      	strb	r2, [r3, #2]
 800d98c:	2200      	movs	r2, #0
 800d98e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2206      	movs	r2, #6
 800d994:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	2204      	movs	r2, #4
 800d99a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d99c:	f640 0306 	movw	r3, #2054	; 0x806
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	69b9      	ldr	r1, [r7, #24]
 800d9a8:	68f8      	ldr	r0, [r7, #12]
 800d9aa:	f001 fb7b 	bl	800f0a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d9ae:	69b8      	ldr	r0, [r7, #24]
 800d9b0:	f7f8 fb0e 	bl	8005fd0 <pbuf_free>
  p = NULL;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d9b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3720      	adds	r7, #32
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	08012868 	.word	0x08012868
 800d9c8:	080129b8 	.word	0x080129b8
 800d9cc:	080128e0 	.word	0x080128e0
 800d9d0:	08012a68 	.word	0x08012a68
 800d9d4:	08012a9c 	.word	0x08012a9c

0800d9d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b088      	sub	sp, #32
 800d9dc:	af04      	add	r7, sp, #16
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	9203      	str	r2, [sp, #12]
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	9202      	str	r2, [sp, #8]
 800d9fc:	4a06      	ldr	r2, [pc, #24]	; (800da18 <etharp_request_dst+0x40>)
 800d9fe:	9201      	str	r2, [sp, #4]
 800da00:	9300      	str	r3, [sp, #0]
 800da02:	4603      	mov	r3, r0
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7ff ff5a 	bl	800d8c0 <etharp_raw>
 800da0c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	08014034 	.word	0x08014034

0800da1c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800da26:	4a05      	ldr	r2, [pc, #20]	; (800da3c <etharp_request+0x20>)
 800da28:	6839      	ldr	r1, [r7, #0]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff ffd4 	bl	800d9d8 <etharp_request_dst>
 800da30:	4603      	mov	r3, r0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	0801402c 	.word	0x0801402c

0800da40 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08e      	sub	sp, #56	; 0x38
 800da44:	af04      	add	r7, sp, #16
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800da4a:	4b79      	ldr	r3, [pc, #484]	; (800dc30 <icmp_input+0x1f0>)
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	f003 030f 	and.w	r3, r3, #15
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800da60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da62:	2b13      	cmp	r3, #19
 800da64:	f240 80cd 	bls.w	800dc02 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	895b      	ldrh	r3, [r3, #10]
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	f240 80ca 	bls.w	800dc06 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800da7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 80b7 	beq.w	800dbf4 <icmp_input+0x1b4>
 800da86:	2b08      	cmp	r3, #8
 800da88:	f040 80b7 	bne.w	800dbfa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800da8c:	4b69      	ldr	r3, [pc, #420]	; (800dc34 <icmp_input+0x1f4>)
 800da8e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da90:	4b67      	ldr	r3, [pc, #412]	; (800dc30 <icmp_input+0x1f0>)
 800da92:	695b      	ldr	r3, [r3, #20]
 800da94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da98:	2be0      	cmp	r3, #224	; 0xe0
 800da9a:	f000 80bb 	beq.w	800dc14 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800da9e:	4b64      	ldr	r3, [pc, #400]	; (800dc30 <icmp_input+0x1f0>)
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	4a63      	ldr	r2, [pc, #396]	; (800dc30 <icmp_input+0x1f0>)
 800daa4:	6812      	ldr	r2, [r2, #0]
 800daa6:	4611      	mov	r1, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 fbed 	bl	800e288 <ip4_addr_isbroadcast_u32>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f040 80b1 	bne.w	800dc18 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	891b      	ldrh	r3, [r3, #8]
 800daba:	2b07      	cmp	r3, #7
 800dabc:	f240 80a5 	bls.w	800dc0a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dac2:	330e      	adds	r3, #14
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7f8 f9ec 	bl	8005ea4 <pbuf_add_header>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d04b      	beq.n	800db6a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	891a      	ldrh	r2, [r3, #8]
 800dad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dad8:	4413      	add	r3, r2
 800dada:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	891b      	ldrh	r3, [r3, #8]
 800dae0:	8b7a      	ldrh	r2, [r7, #26]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	f0c0 809a 	bcc.w	800dc1c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dae8:	8b7b      	ldrh	r3, [r7, #26]
 800daea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800daee:	4619      	mov	r1, r3
 800daf0:	200e      	movs	r0, #14
 800daf2:	f7f7 ff89 	bl	8005a08 <pbuf_alloc>
 800daf6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f000 8090 	beq.w	800dc20 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	895b      	ldrh	r3, [r3, #10]
 800db04:	461a      	mov	r2, r3
 800db06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db08:	3308      	adds	r3, #8
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d203      	bcs.n	800db16 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800db0e:	6978      	ldr	r0, [r7, #20]
 800db10:	f7f8 fa5e 	bl	8005fd0 <pbuf_free>
          goto icmperr;
 800db14:	e085      	b.n	800dc22 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800db1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db1e:	4618      	mov	r0, r3
 800db20:	f001 fb3c 	bl	800f19c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800db24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db26:	4619      	mov	r1, r3
 800db28:	6978      	ldr	r0, [r7, #20]
 800db2a:	f7f8 f9cb 	bl	8005ec4 <pbuf_remove_header>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d009      	beq.n	800db48 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800db34:	4b40      	ldr	r3, [pc, #256]	; (800dc38 <icmp_input+0x1f8>)
 800db36:	22b6      	movs	r2, #182	; 0xb6
 800db38:	4940      	ldr	r1, [pc, #256]	; (800dc3c <icmp_input+0x1fc>)
 800db3a:	4841      	ldr	r0, [pc, #260]	; (800dc40 <icmp_input+0x200>)
 800db3c:	f001 fb44 	bl	800f1c8 <iprintf>
          pbuf_free(r);
 800db40:	6978      	ldr	r0, [r7, #20]
 800db42:	f7f8 fa45 	bl	8005fd0 <pbuf_free>
          goto icmperr;
 800db46:	e06c      	b.n	800dc22 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800db48:	6879      	ldr	r1, [r7, #4]
 800db4a:	6978      	ldr	r0, [r7, #20]
 800db4c:	f7f8 fb58 	bl	8006200 <pbuf_copy>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d003      	beq.n	800db5e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800db56:	6978      	ldr	r0, [r7, #20]
 800db58:	f7f8 fa3a 	bl	8005fd0 <pbuf_free>
          goto icmperr;
 800db5c:	e061      	b.n	800dc22 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7f8 fa36 	bl	8005fd0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	607b      	str	r3, [r7, #4]
 800db68:	e00f      	b.n	800db8a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db6c:	330e      	adds	r3, #14
 800db6e:	4619      	mov	r1, r3
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7f8 f9a7 	bl	8005ec4 <pbuf_remove_header>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d006      	beq.n	800db8a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800db7c:	4b2e      	ldr	r3, [pc, #184]	; (800dc38 <icmp_input+0x1f8>)
 800db7e:	22c7      	movs	r2, #199	; 0xc7
 800db80:	4930      	ldr	r1, [pc, #192]	; (800dc44 <icmp_input+0x204>)
 800db82:	482f      	ldr	r0, [pc, #188]	; (800dc40 <icmp_input+0x200>)
 800db84:	f001 fb20 	bl	800f1c8 <iprintf>
          goto icmperr;
 800db88:	e04b      	b.n	800dc22 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800db90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7f8 f985 	bl	8005ea4 <pbuf_add_header>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d12b      	bne.n	800dbf8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dbae:	4b20      	ldr	r3, [pc, #128]	; (800dc30 <icmp_input+0x1f0>)
 800dbb0:	691a      	ldr	r2, [r3, #16]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	709a      	strb	r2, [r3, #2]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	22ff      	movs	r2, #255	; 0xff
 800dbca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	729a      	strb	r2, [r3, #10]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	9302      	str	r3, [sp, #8]
 800dbda:	2301      	movs	r3, #1
 800dbdc:	9301      	str	r3, [sp, #4]
 800dbde:	2300      	movs	r3, #0
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	23ff      	movs	r3, #255	; 0xff
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	69f9      	ldr	r1, [r7, #28]
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fa75 	bl	800e0d8 <ip4_output_if>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dbf2:	e001      	b.n	800dbf8 <icmp_input+0x1b8>
      break;
 800dbf4:	bf00      	nop
 800dbf6:	e000      	b.n	800dbfa <icmp_input+0x1ba>
      break;
 800dbf8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7f8 f9e8 	bl	8005fd0 <pbuf_free>
  return;
 800dc00:	e013      	b.n	800dc2a <icmp_input+0x1ea>
    goto lenerr;
 800dc02:	bf00      	nop
 800dc04:	e002      	b.n	800dc0c <icmp_input+0x1cc>
    goto lenerr;
 800dc06:	bf00      	nop
 800dc08:	e000      	b.n	800dc0c <icmp_input+0x1cc>
        goto lenerr;
 800dc0a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7f8 f9df 	bl	8005fd0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dc12:	e00a      	b.n	800dc2a <icmp_input+0x1ea>
        goto icmperr;
 800dc14:	bf00      	nop
 800dc16:	e004      	b.n	800dc22 <icmp_input+0x1e2>
        goto icmperr;
 800dc18:	bf00      	nop
 800dc1a:	e002      	b.n	800dc22 <icmp_input+0x1e2>
          goto icmperr;
 800dc1c:	bf00      	nop
 800dc1e:	e000      	b.n	800dc22 <icmp_input+0x1e2>
          goto icmperr;
 800dc20:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7f8 f9d4 	bl	8005fd0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dc28:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dc2a:	3728      	adds	r7, #40	; 0x28
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20005130 	.word	0x20005130
 800dc34:	20005144 	.word	0x20005144
 800dc38:	08012ae0 	.word	0x08012ae0
 800dc3c:	08012b18 	.word	0x08012b18
 800dc40:	08012b50 	.word	0x08012b50
 800dc44:	08012b78 	.word	0x08012b78

0800dc48 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	460b      	mov	r3, r1
 800dc52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dc54:	78fb      	ldrb	r3, [r7, #3]
 800dc56:	461a      	mov	r2, r3
 800dc58:	2103      	movs	r1, #3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f814 	bl	800dc88 <icmp_send_response>
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	460b      	mov	r3, r1
 800dc72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dc74:	78fb      	ldrb	r3, [r7, #3]
 800dc76:	461a      	mov	r2, r3
 800dc78:	210b      	movs	r1, #11
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f804 	bl	800dc88 <icmp_send_response>
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08c      	sub	sp, #48	; 0x30
 800dc8c:	af04      	add	r7, sp, #16
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70fb      	strb	r3, [r7, #3]
 800dc94:	4613      	mov	r3, r2
 800dc96:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dc98:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc9c:	2124      	movs	r1, #36	; 0x24
 800dc9e:	2022      	movs	r0, #34	; 0x22
 800dca0:	f7f7 feb2 	bl	8005a08 <pbuf_alloc>
 800dca4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d04c      	beq.n	800dd46 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	895b      	ldrh	r3, [r3, #10]
 800dcb0:	2b23      	cmp	r3, #35	; 0x23
 800dcb2:	d806      	bhi.n	800dcc2 <icmp_send_response+0x3a>
 800dcb4:	4b26      	ldr	r3, [pc, #152]	; (800dd50 <icmp_send_response+0xc8>)
 800dcb6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800dcba:	4926      	ldr	r1, [pc, #152]	; (800dd54 <icmp_send_response+0xcc>)
 800dcbc:	4826      	ldr	r0, [pc, #152]	; (800dd58 <icmp_send_response+0xd0>)
 800dcbe:	f001 fa83 	bl	800f1c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	78fa      	ldrb	r2, [r7, #3]
 800dcd2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	78ba      	ldrb	r2, [r7, #2]
 800dcd8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	711a      	strb	r2, [r3, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	2200      	movs	r2, #0
 800dce8:	719a      	strb	r2, [r3, #6]
 800dcea:	2200      	movs	r2, #0
 800dcec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	f103 0008 	add.w	r0, r3, #8
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	221c      	movs	r2, #28
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	f001 fa4d 	bl	800f19c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dd08:	f107 030c 	add.w	r3, r7, #12
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f000 f825 	bl	800dd5c <ip4_route>
 800dd12:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d011      	beq.n	800dd3e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	709a      	strb	r2, [r3, #2]
 800dd20:	2200      	movs	r2, #0
 800dd22:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dd24:	f107 020c 	add.w	r2, r7, #12
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	9302      	str	r3, [sp, #8]
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	2300      	movs	r3, #0
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	23ff      	movs	r3, #255	; 0xff
 800dd36:	2100      	movs	r1, #0
 800dd38:	69f8      	ldr	r0, [r7, #28]
 800dd3a:	f000 f9cd 	bl	800e0d8 <ip4_output_if>
  }
  pbuf_free(q);
 800dd3e:	69f8      	ldr	r0, [r7, #28]
 800dd40:	f7f8 f946 	bl	8005fd0 <pbuf_free>
 800dd44:	e000      	b.n	800dd48 <icmp_send_response+0xc0>
    return;
 800dd46:	bf00      	nop
}
 800dd48:	3720      	adds	r7, #32
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	08012ae0 	.word	0x08012ae0
 800dd54:	08012bac 	.word	0x08012bac
 800dd58:	08012b50 	.word	0x08012b50

0800dd5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dd64:	4b33      	ldr	r3, [pc, #204]	; (800de34 <ip4_route+0xd8>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	e036      	b.n	800ddda <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd72:	f003 0301 	and.w	r3, r3, #1
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d02b      	beq.n	800ddd4 <ip4_route+0x78>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd82:	089b      	lsrs	r3, r3, #2
 800dd84:	f003 0301 	and.w	r3, r3, #1
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d022      	beq.n	800ddd4 <ip4_route+0x78>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	3304      	adds	r3, #4
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d01d      	beq.n	800ddd4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	3304      	adds	r3, #4
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	405a      	eors	r2, r3
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3308      	adds	r3, #8
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4013      	ands	r3, r2
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d101      	bne.n	800ddb4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	e038      	b.n	800de26 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddba:	f003 0302 	and.w	r3, r3, #2
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d108      	bne.n	800ddd4 <ip4_route+0x78>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	330c      	adds	r3, #12
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d101      	bne.n	800ddd4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	e028      	b.n	800de26 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	60fb      	str	r3, [r7, #12]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1c5      	bne.n	800dd6c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dde0:	4b15      	ldr	r3, [pc, #84]	; (800de38 <ip4_route+0xdc>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d01a      	beq.n	800de1e <ip4_route+0xc2>
 800dde8:	4b13      	ldr	r3, [pc, #76]	; (800de38 <ip4_route+0xdc>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddf0:	f003 0301 	and.w	r3, r3, #1
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d012      	beq.n	800de1e <ip4_route+0xc2>
 800ddf8:	4b0f      	ldr	r3, [pc, #60]	; (800de38 <ip4_route+0xdc>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de00:	f003 0304 	and.w	r3, r3, #4
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00a      	beq.n	800de1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800de08:	4b0b      	ldr	r3, [pc, #44]	; (800de38 <ip4_route+0xdc>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	3304      	adds	r3, #4
 800de0e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800de10:	2b00      	cmp	r3, #0
 800de12:	d004      	beq.n	800de1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	2b7f      	cmp	r3, #127	; 0x7f
 800de1c:	d101      	bne.n	800de22 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	e001      	b.n	800de26 <ip4_route+0xca>
  }

  return netif_default;
 800de22:	4b05      	ldr	r3, [pc, #20]	; (800de38 <ip4_route+0xdc>)
 800de24:	681b      	ldr	r3, [r3, #0]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	20008694 	.word	0x20008694
 800de38:	20008698 	.word	0x20008698

0800de3c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d016      	beq.n	800de82 <ip4_input_accept+0x46>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	3304      	adds	r3, #4
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d011      	beq.n	800de82 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de5e:	4b0b      	ldr	r3, [pc, #44]	; (800de8c <ip4_input_accept+0x50>)
 800de60:	695a      	ldr	r2, [r3, #20]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	3304      	adds	r3, #4
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d008      	beq.n	800de7e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800de6c:	4b07      	ldr	r3, [pc, #28]	; (800de8c <ip4_input_accept+0x50>)
 800de6e:	695b      	ldr	r3, [r3, #20]
 800de70:	6879      	ldr	r1, [r7, #4]
 800de72:	4618      	mov	r0, r3
 800de74:	f000 fa08 	bl	800e288 <ip4_addr_isbroadcast_u32>
 800de78:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d001      	beq.n	800de82 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800de7e:	2301      	movs	r3, #1
 800de80:	e000      	b.n	800de84 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	20005130 	.word	0x20005130

0800de90 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	091b      	lsrs	r3, r3, #4
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	2b04      	cmp	r3, #4
 800deaa:	d004      	beq.n	800deb6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7f8 f88f 	bl	8005fd0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800deb2:	2300      	movs	r3, #0
 800deb4:	e107      	b.n	800e0c6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	f003 030f 	and.w	r3, r3, #15
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	885b      	ldrh	r3, [r3, #2]
 800deca:	b29b      	uxth	r3, r3
 800decc:	4618      	mov	r0, r3
 800dece:	f7f6 fceb 	bl	80048a8 <lwip_htons>
 800ded2:	4603      	mov	r3, r0
 800ded4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	891b      	ldrh	r3, [r3, #8]
 800deda:	89ba      	ldrh	r2, [r7, #12]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d204      	bcs.n	800deea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dee0:	89bb      	ldrh	r3, [r7, #12]
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7f7 feed 	bl	8005cc4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	895b      	ldrh	r3, [r3, #10]
 800deee:	89fa      	ldrh	r2, [r7, #14]
 800def0:	429a      	cmp	r2, r3
 800def2:	d807      	bhi.n	800df04 <ip4_input+0x74>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	891b      	ldrh	r3, [r3, #8]
 800def8:	89ba      	ldrh	r2, [r7, #12]
 800defa:	429a      	cmp	r2, r3
 800defc:	d802      	bhi.n	800df04 <ip4_input+0x74>
 800defe:	89fb      	ldrh	r3, [r7, #14]
 800df00:	2b13      	cmp	r3, #19
 800df02:	d804      	bhi.n	800df0e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7f8 f863 	bl	8005fd0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	e0db      	b.n	800e0c6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	4a6f      	ldr	r2, [pc, #444]	; (800e0d0 <ip4_input+0x240>)
 800df14:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	4a6d      	ldr	r2, [pc, #436]	; (800e0d0 <ip4_input+0x240>)
 800df1c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df1e:	4b6c      	ldr	r3, [pc, #432]	; (800e0d0 <ip4_input+0x240>)
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df26:	2be0      	cmp	r3, #224	; 0xe0
 800df28:	d112      	bne.n	800df50 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df30:	f003 0301 	and.w	r3, r3, #1
 800df34:	b2db      	uxtb	r3, r3
 800df36:	2b00      	cmp	r3, #0
 800df38:	d007      	beq.n	800df4a <ip4_input+0xba>
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	3304      	adds	r3, #4
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d002      	beq.n	800df4a <ip4_input+0xba>
      netif = inp;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	613b      	str	r3, [r7, #16]
 800df48:	e02a      	b.n	800dfa0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df4a:	2300      	movs	r3, #0
 800df4c:	613b      	str	r3, [r7, #16]
 800df4e:	e027      	b.n	800dfa0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800df50:	6838      	ldr	r0, [r7, #0]
 800df52:	f7ff ff73 	bl	800de3c <ip4_input_accept>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <ip4_input+0xd2>
      netif = inp;
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	613b      	str	r3, [r7, #16]
 800df60:	e01e      	b.n	800dfa0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df62:	2300      	movs	r3, #0
 800df64:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800df66:	4b5a      	ldr	r3, [pc, #360]	; (800e0d0 <ip4_input+0x240>)
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	2b7f      	cmp	r3, #127	; 0x7f
 800df6e:	d017      	beq.n	800dfa0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800df70:	4b58      	ldr	r3, [pc, #352]	; (800e0d4 <ip4_input+0x244>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	613b      	str	r3, [r7, #16]
 800df76:	e00e      	b.n	800df96 <ip4_input+0x106>
          if (netif == inp) {
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d006      	beq.n	800df8e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800df80:	6938      	ldr	r0, [r7, #16]
 800df82:	f7ff ff5b 	bl	800de3c <ip4_input_accept>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d108      	bne.n	800df9e <ip4_input+0x10e>
 800df8c:	e000      	b.n	800df90 <ip4_input+0x100>
            continue;
 800df8e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	613b      	str	r3, [r7, #16]
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1ed      	bne.n	800df78 <ip4_input+0xe8>
 800df9c:	e000      	b.n	800dfa0 <ip4_input+0x110>
            break;
 800df9e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dfa0:	4b4b      	ldr	r3, [pc, #300]	; (800e0d0 <ip4_input+0x240>)
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 f96e 	bl	800e288 <ip4_addr_isbroadcast_u32>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d105      	bne.n	800dfbe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dfb2:	4b47      	ldr	r3, [pc, #284]	; (800e0d0 <ip4_input+0x240>)
 800dfb4:	691b      	ldr	r3, [r3, #16]
 800dfb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dfba:	2be0      	cmp	r3, #224	; 0xe0
 800dfbc:	d104      	bne.n	800dfc8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7f8 f806 	bl	8005fd0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	e07e      	b.n	800e0c6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d104      	bne.n	800dfd8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7f7 fffe 	bl	8005fd0 <pbuf_free>
    return ERR_OK;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	e076      	b.n	800e0c6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	88db      	ldrh	r3, [r3, #6]
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	461a      	mov	r2, r3
 800dfe0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d00b      	beq.n	800e002 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 fc92 	bl	800e914 <ip4_reass>
 800dff0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d101      	bne.n	800dffc <ip4_input+0x16c>
      return ERR_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	e064      	b.n	800e0c6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e002:	4a33      	ldr	r2, [pc, #204]	; (800e0d0 <ip4_input+0x240>)
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e008:	4a31      	ldr	r2, [pc, #196]	; (800e0d0 <ip4_input+0x240>)
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e00e:	4a30      	ldr	r2, [pc, #192]	; (800e0d0 <ip4_input+0x240>)
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	f003 030f 	and.w	r3, r3, #15
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	b2db      	uxtb	r3, r3
 800e022:	b29a      	uxth	r2, r3
 800e024:	4b2a      	ldr	r3, [pc, #168]	; (800e0d0 <ip4_input+0x240>)
 800e026:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e028:	89fb      	ldrh	r3, [r7, #14]
 800e02a:	4619      	mov	r1, r3
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7f7 ff49 	bl	8005ec4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	7a5b      	ldrb	r3, [r3, #9]
 800e036:	2b11      	cmp	r3, #17
 800e038:	d006      	beq.n	800e048 <ip4_input+0x1b8>
 800e03a:	2b11      	cmp	r3, #17
 800e03c:	dc13      	bgt.n	800e066 <ip4_input+0x1d6>
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d00c      	beq.n	800e05c <ip4_input+0x1cc>
 800e042:	2b06      	cmp	r3, #6
 800e044:	d005      	beq.n	800e052 <ip4_input+0x1c2>
 800e046:	e00e      	b.n	800e066 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e048:	6839      	ldr	r1, [r7, #0]
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7fe fc68 	bl	800c920 <udp_input>
        break;
 800e050:	e026      	b.n	800e0a0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7fa f889 	bl	800816c <tcp_input>
        break;
 800e05a:	e021      	b.n	800e0a0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e05c:	6839      	ldr	r1, [r7, #0]
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f7ff fcee 	bl	800da40 <icmp_input>
        break;
 800e064:	e01c      	b.n	800e0a0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e066:	4b1a      	ldr	r3, [pc, #104]	; (800e0d0 <ip4_input+0x240>)
 800e068:	695b      	ldr	r3, [r3, #20]
 800e06a:	6939      	ldr	r1, [r7, #16]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f000 f90b 	bl	800e288 <ip4_addr_isbroadcast_u32>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10f      	bne.n	800e098 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e078:	4b15      	ldr	r3, [pc, #84]	; (800e0d0 <ip4_input+0x240>)
 800e07a:	695b      	ldr	r3, [r3, #20]
 800e07c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e080:	2be0      	cmp	r3, #224	; 0xe0
 800e082:	d009      	beq.n	800e098 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7f7 ff8d 	bl	8005faa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e090:	2102      	movs	r1, #2
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7ff fdd8 	bl	800dc48 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7f7 ff99 	bl	8005fd0 <pbuf_free>
        break;
 800e09e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	; (800e0d0 <ip4_input+0x240>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e0a6:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <ip4_input+0x240>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e0ac:	4b08      	ldr	r3, [pc, #32]	; (800e0d0 <ip4_input+0x240>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e0b2:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <ip4_input+0x240>)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e0b8:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <ip4_input+0x240>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e0be:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <ip4_input+0x240>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	20005130 	.word	0x20005130
 800e0d4:	20008694 	.word	0x20008694

0800e0d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08a      	sub	sp, #40	; 0x28
 800e0dc:	af04      	add	r7, sp, #16
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
 800e0e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d009      	beq.n	800e104 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d003      	beq.n	800e0fe <ip4_output_if+0x26>
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d102      	bne.n	800e104 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e100:	3304      	adds	r3, #4
 800e102:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e104:	78fa      	ldrb	r2, [r7, #3]
 800e106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e108:	9302      	str	r3, [sp, #8]
 800e10a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e10e:	9301      	str	r3, [sp, #4]
 800e110:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	4613      	mov	r3, r2
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	6979      	ldr	r1, [r7, #20]
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f000 f805 	bl	800e12c <ip4_output_if_src>
 800e122:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e124:	4618      	mov	r0, r3
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b088      	sub	sp, #32
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	7b9b      	ldrb	r3, [r3, #14]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d006      	beq.n	800e150 <ip4_output_if_src+0x24>
 800e142:	4b4b      	ldr	r3, [pc, #300]	; (800e270 <ip4_output_if_src+0x144>)
 800e144:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e148:	494a      	ldr	r1, [pc, #296]	; (800e274 <ip4_output_if_src+0x148>)
 800e14a:	484b      	ldr	r0, [pc, #300]	; (800e278 <ip4_output_if_src+0x14c>)
 800e14c:	f001 f83c 	bl	800f1c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d060      	beq.n	800e218 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e156:	2314      	movs	r3, #20
 800e158:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e15a:	2114      	movs	r1, #20
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7f7 fea1 	bl	8005ea4 <pbuf_add_header>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e168:	f06f 0301 	mvn.w	r3, #1
 800e16c:	e07c      	b.n	800e268 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	895b      	ldrh	r3, [r3, #10]
 800e178:	2b13      	cmp	r3, #19
 800e17a:	d806      	bhi.n	800e18a <ip4_output_if_src+0x5e>
 800e17c:	4b3c      	ldr	r3, [pc, #240]	; (800e270 <ip4_output_if_src+0x144>)
 800e17e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e182:	493e      	ldr	r1, [pc, #248]	; (800e27c <ip4_output_if_src+0x150>)
 800e184:	483c      	ldr	r0, [pc, #240]	; (800e278 <ip4_output_if_src+0x14c>)
 800e186:	f001 f81f 	bl	800f1c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	78fa      	ldrb	r2, [r7, #3]
 800e18e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e196:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e1a0:	8b7b      	ldrh	r3, [r7, #26]
 800e1a2:	089b      	lsrs	r3, r3, #2
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e1b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	891b      	ldrh	r3, [r3, #8]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7f6 fb72 	bl	80048a8 <lwip_htons>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	719a      	strb	r2, [r3, #6]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e1d6:	4b2a      	ldr	r3, [pc, #168]	; (800e280 <ip4_output_if_src+0x154>)
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7f6 fb64 	bl	80048a8 <lwip_htons>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e1e8:	4b25      	ldr	r3, [pc, #148]	; (800e280 <ip4_output_if_src+0x154>)
 800e1ea:	881b      	ldrh	r3, [r3, #0]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	4b23      	ldr	r3, [pc, #140]	; (800e280 <ip4_output_if_src+0x154>)
 800e1f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d104      	bne.n	800e204 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e1fa:	4b22      	ldr	r3, [pc, #136]	; (800e284 <ip4_output_if_src+0x158>)
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	60da      	str	r2, [r3, #12]
 800e202:	e003      	b.n	800e20c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	2200      	movs	r2, #0
 800e210:	729a      	strb	r2, [r3, #10]
 800e212:	2200      	movs	r2, #0
 800e214:	72da      	strb	r2, [r3, #11]
 800e216:	e00f      	b.n	800e238 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	895b      	ldrh	r3, [r3, #10]
 800e21c:	2b13      	cmp	r3, #19
 800e21e:	d802      	bhi.n	800e226 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e220:	f06f 0301 	mvn.w	r3, #1
 800e224:	e020      	b.n	800e268 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e232:	f107 0314 	add.w	r3, r7, #20
 800e236:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00c      	beq.n	800e25a <ip4_output_if_src+0x12e>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	891a      	ldrh	r2, [r3, #8]
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e248:	429a      	cmp	r2, r3
 800e24a:	d906      	bls.n	800e25a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f000 fd53 	bl	800ecfc <ip4_frag>
 800e256:	4603      	mov	r3, r0
 800e258:	e006      	b.n	800e268 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	68f9      	ldr	r1, [r7, #12]
 800e262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e264:	4798      	blx	r3
 800e266:	4603      	mov	r3, r0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3720      	adds	r7, #32
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	08012bd8 	.word	0x08012bd8
 800e274:	08012c0c 	.word	0x08012c0c
 800e278:	08012c18 	.word	0x08012c18
 800e27c:	08012c40 	.word	0x08012c40
 800e280:	200087f2 	.word	0x200087f2
 800e284:	08014028 	.word	0x08014028

0800e288 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29c:	d002      	beq.n	800e2a4 <ip4_addr_isbroadcast_u32+0x1c>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d101      	bne.n	800e2a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	e02a      	b.n	800e2fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e2ae:	f003 0302 	and.w	r3, r3, #2
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e021      	b.n	800e2fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d101      	bne.n	800e2ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e019      	b.n	800e2fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	405a      	eors	r2, r3
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	3308      	adds	r3, #8
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4013      	ands	r3, r2
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10d      	bne.n	800e2fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	3308      	adds	r3, #8
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	43da      	mvns	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	3308      	adds	r3, #8
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d101      	bne.n	800e2fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e000      	b.n	800e2fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e2fc:	2300      	movs	r3, #0
  }
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3714      	adds	r7, #20
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
	...

0800e30c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e312:	2300      	movs	r3, #0
 800e314:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e316:	4b12      	ldr	r3, [pc, #72]	; (800e360 <ip_reass_tmr+0x54>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e31c:	e018      	b.n	800e350 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	7fdb      	ldrb	r3, [r3, #31]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00b      	beq.n	800e33e <ip_reass_tmr+0x32>
      r->timer--;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	7fdb      	ldrb	r3, [r3, #31]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	e008      	b.n	800e350 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e348:	68b9      	ldr	r1, [r7, #8]
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f80a 	bl	800e364 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1e3      	bne.n	800e31e <ip_reass_tmr+0x12>
    }
  }
}
 800e356:	bf00      	nop
 800e358:	bf00      	nop
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	200087f4 	.word	0x200087f4

0800e364 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b088      	sub	sp, #32
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e36e:	2300      	movs	r3, #0
 800e370:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e372:	683a      	ldr	r2, [r7, #0]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	429a      	cmp	r2, r3
 800e378:	d105      	bne.n	800e386 <ip_reass_free_complete_datagram+0x22>
 800e37a:	4b45      	ldr	r3, [pc, #276]	; (800e490 <ip_reass_free_complete_datagram+0x12c>)
 800e37c:	22ab      	movs	r2, #171	; 0xab
 800e37e:	4945      	ldr	r1, [pc, #276]	; (800e494 <ip_reass_free_complete_datagram+0x130>)
 800e380:	4845      	ldr	r0, [pc, #276]	; (800e498 <ip_reass_free_complete_datagram+0x134>)
 800e382:	f000 ff21 	bl	800f1c8 <iprintf>
  if (prev != NULL) {
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00a      	beq.n	800e3a2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	429a      	cmp	r2, r3
 800e394:	d005      	beq.n	800e3a2 <ip_reass_free_complete_datagram+0x3e>
 800e396:	4b3e      	ldr	r3, [pc, #248]	; (800e490 <ip_reass_free_complete_datagram+0x12c>)
 800e398:	22ad      	movs	r2, #173	; 0xad
 800e39a:	4940      	ldr	r1, [pc, #256]	; (800e49c <ip_reass_free_complete_datagram+0x138>)
 800e39c:	483e      	ldr	r0, [pc, #248]	; (800e498 <ip_reass_free_complete_datagram+0x134>)
 800e39e:	f000 ff13 	bl	800f1c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	889b      	ldrh	r3, [r3, #4]
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d12a      	bne.n	800e40a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	6858      	ldr	r0, [r3, #4]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	3308      	adds	r3, #8
 800e3ca:	2214      	movs	r2, #20
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	f000 fee5 	bl	800f19c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	69b8      	ldr	r0, [r7, #24]
 800e3d6:	f7ff fc47 	bl	800dc68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e3da:	69b8      	ldr	r0, [r7, #24]
 800e3dc:	f7f7 fe80 	bl	80060e0 <pbuf_clen>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3e4:	8bfa      	ldrh	r2, [r7, #30]
 800e3e6:	8a7b      	ldrh	r3, [r7, #18]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3ee:	db05      	blt.n	800e3fc <ip_reass_free_complete_datagram+0x98>
 800e3f0:	4b27      	ldr	r3, [pc, #156]	; (800e490 <ip_reass_free_complete_datagram+0x12c>)
 800e3f2:	22bc      	movs	r2, #188	; 0xbc
 800e3f4:	492a      	ldr	r1, [pc, #168]	; (800e4a0 <ip_reass_free_complete_datagram+0x13c>)
 800e3f6:	4828      	ldr	r0, [pc, #160]	; (800e498 <ip_reass_free_complete_datagram+0x134>)
 800e3f8:	f000 fee6 	bl	800f1c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3fc:	8bfa      	ldrh	r2, [r7, #30]
 800e3fe:	8a7b      	ldrh	r3, [r7, #18]
 800e400:	4413      	add	r3, r2
 800e402:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e404:	69b8      	ldr	r0, [r7, #24]
 800e406:	f7f7 fde3 	bl	8005fd0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e410:	e01f      	b.n	800e452 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f7f7 fe5c 	bl	80060e0 <pbuf_clen>
 800e428:	4603      	mov	r3, r0
 800e42a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e42c:	8bfa      	ldrh	r2, [r7, #30]
 800e42e:	8a7b      	ldrh	r3, [r7, #18]
 800e430:	4413      	add	r3, r2
 800e432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e436:	db05      	blt.n	800e444 <ip_reass_free_complete_datagram+0xe0>
 800e438:	4b15      	ldr	r3, [pc, #84]	; (800e490 <ip_reass_free_complete_datagram+0x12c>)
 800e43a:	22cc      	movs	r2, #204	; 0xcc
 800e43c:	4918      	ldr	r1, [pc, #96]	; (800e4a0 <ip_reass_free_complete_datagram+0x13c>)
 800e43e:	4816      	ldr	r0, [pc, #88]	; (800e498 <ip_reass_free_complete_datagram+0x134>)
 800e440:	f000 fec2 	bl	800f1c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e444:	8bfa      	ldrh	r2, [r7, #30]
 800e446:	8a7b      	ldrh	r3, [r7, #18]
 800e448:	4413      	add	r3, r2
 800e44a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f7f7 fdbf 	bl	8005fd0 <pbuf_free>
  while (p != NULL) {
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1dc      	bne.n	800e412 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f8c2 	bl	800e5e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e460:	4b10      	ldr	r3, [pc, #64]	; (800e4a4 <ip_reass_free_complete_datagram+0x140>)
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	8bfa      	ldrh	r2, [r7, #30]
 800e466:	429a      	cmp	r2, r3
 800e468:	d905      	bls.n	800e476 <ip_reass_free_complete_datagram+0x112>
 800e46a:	4b09      	ldr	r3, [pc, #36]	; (800e490 <ip_reass_free_complete_datagram+0x12c>)
 800e46c:	22d2      	movs	r2, #210	; 0xd2
 800e46e:	490e      	ldr	r1, [pc, #56]	; (800e4a8 <ip_reass_free_complete_datagram+0x144>)
 800e470:	4809      	ldr	r0, [pc, #36]	; (800e498 <ip_reass_free_complete_datagram+0x134>)
 800e472:	f000 fea9 	bl	800f1c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e476:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <ip_reass_free_complete_datagram+0x140>)
 800e478:	881a      	ldrh	r2, [r3, #0]
 800e47a:	8bfb      	ldrh	r3, [r7, #30]
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	b29a      	uxth	r2, r3
 800e480:	4b08      	ldr	r3, [pc, #32]	; (800e4a4 <ip_reass_free_complete_datagram+0x140>)
 800e482:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e484:	8bfb      	ldrh	r3, [r7, #30]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3720      	adds	r7, #32
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	08012c70 	.word	0x08012c70
 800e494:	08012cac 	.word	0x08012cac
 800e498:	08012cb8 	.word	0x08012cb8
 800e49c:	08012ce0 	.word	0x08012ce0
 800e4a0:	08012cf4 	.word	0x08012cf4
 800e4a4:	200087f8 	.word	0x200087f8
 800e4a8:	08012d14 	.word	0x08012d14

0800e4ac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b08a      	sub	sp, #40	; 0x28
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e4ca:	4b28      	ldr	r3, [pc, #160]	; (800e56c <ip_reass_remove_oldest_datagram+0xc0>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e4d0:	e030      	b.n	800e534 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	695a      	ldr	r2, [r3, #20]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d10c      	bne.n	800e4f8 <ip_reass_remove_oldest_datagram+0x4c>
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	699a      	ldr	r2, [r3, #24]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	691b      	ldr	r3, [r3, #16]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d106      	bne.n	800e4f8 <ip_reass_remove_oldest_datagram+0x4c>
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	899a      	ldrh	r2, [r3, #12]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	889b      	ldrh	r3, [r3, #4]
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d014      	beq.n	800e522 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e4fe:	6a3b      	ldr	r3, [r7, #32]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d104      	bne.n	800e50e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e506:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	61bb      	str	r3, [r7, #24]
 800e50c:	e009      	b.n	800e522 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	7fda      	ldrb	r2, [r3, #31]
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	7fdb      	ldrb	r3, [r3, #31]
 800e516:	429a      	cmp	r2, r3
 800e518:	d803      	bhi.n	800e522 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1cb      	bne.n	800e4d2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e53a:	6a3b      	ldr	r3, [r7, #32]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d008      	beq.n	800e552 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e540:	69b9      	ldr	r1, [r7, #24]
 800e542:	6a38      	ldr	r0, [r7, #32]
 800e544:	f7ff ff0e 	bl	800e364 <ip_reass_free_complete_datagram>
 800e548:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	4413      	add	r3, r2
 800e550:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	429a      	cmp	r2, r3
 800e558:	da02      	bge.n	800e560 <ip_reass_remove_oldest_datagram+0xb4>
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	dcac      	bgt.n	800e4ba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e560:	697b      	ldr	r3, [r7, #20]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3728      	adds	r7, #40	; 0x28
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	200087f4 	.word	0x200087f4

0800e570 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e57a:	2004      	movs	r0, #4
 800e57c:	f7f6 fe42 	bl	8005204 <memp_malloc>
 800e580:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d110      	bne.n	800e5aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e588:	6839      	ldr	r1, [r7, #0]
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7ff ff8e 	bl	800e4ac <ip_reass_remove_oldest_datagram>
 800e590:	4602      	mov	r2, r0
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	4293      	cmp	r3, r2
 800e596:	dc03      	bgt.n	800e5a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e598:	2004      	movs	r0, #4
 800e59a:	f7f6 fe33 	bl	8005204 <memp_malloc>
 800e59e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d101      	bne.n	800e5aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	e016      	b.n	800e5d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e5aa:	2220      	movs	r2, #32
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 fe02 	bl	800f1b8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	220f      	movs	r2, #15
 800e5b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e5ba:	4b09      	ldr	r3, [pc, #36]	; (800e5e0 <ip_reass_enqueue_new_datagram+0x70>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e5c2:	4a07      	ldr	r2, [pc, #28]	; (800e5e0 <ip_reass_enqueue_new_datagram+0x70>)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	3308      	adds	r3, #8
 800e5cc:	2214      	movs	r2, #20
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 fde3 	bl	800f19c <memcpy>
  return ipr;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3710      	adds	r7, #16
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	200087f4 	.word	0x200087f4

0800e5e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e5ee:	4b10      	ldr	r3, [pc, #64]	; (800e630 <ip_reass_dequeue_datagram+0x4c>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d104      	bne.n	800e602 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a0c      	ldr	r2, [pc, #48]	; (800e630 <ip_reass_dequeue_datagram+0x4c>)
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	e00d      	b.n	800e61e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d106      	bne.n	800e616 <ip_reass_dequeue_datagram+0x32>
 800e608:	4b0a      	ldr	r3, [pc, #40]	; (800e634 <ip_reass_dequeue_datagram+0x50>)
 800e60a:	f240 1245 	movw	r2, #325	; 0x145
 800e60e:	490a      	ldr	r1, [pc, #40]	; (800e638 <ip_reass_dequeue_datagram+0x54>)
 800e610:	480a      	ldr	r0, [pc, #40]	; (800e63c <ip_reass_dequeue_datagram+0x58>)
 800e612:	f000 fdd9 	bl	800f1c8 <iprintf>
    prev->next = ipr->next;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e61e:	6879      	ldr	r1, [r7, #4]
 800e620:	2004      	movs	r0, #4
 800e622:	f7f6 fe5f 	bl	80052e4 <memp_free>
}
 800e626:	bf00      	nop
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	200087f4 	.word	0x200087f4
 800e634:	08012c70 	.word	0x08012c70
 800e638:	08012d38 	.word	0x08012d38
 800e63c:	08012cb8 	.word	0x08012cb8

0800e640 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b08c      	sub	sp, #48	; 0x30
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e64c:	2300      	movs	r3, #0
 800e64e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e650:	2301      	movs	r3, #1
 800e652:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	885b      	ldrh	r3, [r3, #2]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	4618      	mov	r0, r3
 800e662:	f7f6 f921 	bl	80048a8 <lwip_htons>
 800e666:	4603      	mov	r3, r0
 800e668:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	f003 030f 	and.w	r3, r3, #15
 800e672:	b2db      	uxtb	r3, r3
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e678:	7e7b      	ldrb	r3, [r7, #25]
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	8b7a      	ldrh	r2, [r7, #26]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d202      	bcs.n	800e688 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e682:	f04f 33ff 	mov.w	r3, #4294967295
 800e686:	e135      	b.n	800e8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e688:	7e7b      	ldrb	r3, [r7, #25]
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	8b7a      	ldrh	r2, [r7, #26]
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	88db      	ldrh	r3, [r3, #6]
 800e696:	b29b      	uxth	r3, r3
 800e698:	4618      	mov	r0, r3
 800e69a:	f7f6 f905 	bl	80048a8 <lwip_htons>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	701a      	strb	r2, [r3, #0]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	705a      	strb	r2, [r3, #1]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	709a      	strb	r2, [r3, #2]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c4:	8afa      	ldrh	r2, [r7, #22]
 800e6c6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e6c8:	8afa      	ldrh	r2, [r7, #22]
 800e6ca:	8b7b      	ldrh	r3, [r7, #26]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	88db      	ldrh	r3, [r3, #6]
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	8afa      	ldrh	r2, [r7, #22]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d902      	bls.n	800e6e6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e4:	e106      	b.n	800e8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ec:	e068      	b.n	800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	889b      	ldrh	r3, [r3, #4]
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	889b      	ldrh	r3, [r3, #4]
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	429a      	cmp	r2, r3
 800e702:	d235      	bcs.n	800e770 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e708:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d020      	beq.n	800e752 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	889b      	ldrh	r3, [r3, #4]
 800e714:	b29a      	uxth	r2, r3
 800e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e718:	88db      	ldrh	r3, [r3, #6]
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d307      	bcc.n	800e730 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	88db      	ldrh	r3, [r3, #6]
 800e724:	b29a      	uxth	r2, r3
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	889b      	ldrh	r3, [r3, #4]
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d902      	bls.n	800e736 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e730:	f04f 33ff 	mov.w	r3, #4294967295
 800e734:	e0de      	b.n	800e8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73e:	88db      	ldrh	r3, [r3, #6]
 800e740:	b29a      	uxth	r2, r3
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	889b      	ldrh	r3, [r3, #4]
 800e746:	b29b      	uxth	r3, r3
 800e748:	429a      	cmp	r2, r3
 800e74a:	d03d      	beq.n	800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e74c:	2300      	movs	r3, #0
 800e74e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e750:	e03a      	b.n	800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e754:	88db      	ldrh	r3, [r3, #6]
 800e756:	b29a      	uxth	r2, r3
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	889b      	ldrh	r3, [r3, #4]
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	429a      	cmp	r2, r3
 800e760:	d902      	bls.n	800e768 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e762:	f04f 33ff 	mov.w	r3, #4294967295
 800e766:	e0c5      	b.n	800e8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	605a      	str	r2, [r3, #4]
      break;
 800e76e:	e02b      	b.n	800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e772:	889b      	ldrh	r3, [r3, #4]
 800e774:	b29a      	uxth	r2, r3
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	889b      	ldrh	r3, [r3, #4]
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d102      	bne.n	800e786 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e780:	f04f 33ff 	mov.w	r3, #4294967295
 800e784:	e0b6      	b.n	800e8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	889b      	ldrh	r3, [r3, #4]
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	88db      	ldrh	r3, [r3, #6]
 800e790:	b29b      	uxth	r3, r3
 800e792:	429a      	cmp	r2, r3
 800e794:	d202      	bcs.n	800e79c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e796:	f04f 33ff 	mov.w	r3, #4294967295
 800e79a:	e0ab      	b.n	800e8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d009      	beq.n	800e7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a4:	88db      	ldrh	r3, [r3, #6]
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	889b      	ldrh	r3, [r3, #4]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d001      	beq.n	800e7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d193      	bne.n	800e6ee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e7c6:	e000      	b.n	800e7ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e7c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d12d      	bne.n	800e82c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d01c      	beq.n	800e810 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d8:	88db      	ldrh	r3, [r3, #6]
 800e7da:	b29a      	uxth	r2, r3
 800e7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7de:	889b      	ldrh	r3, [r3, #4]
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d906      	bls.n	800e7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e7e6:	4b45      	ldr	r3, [pc, #276]	; (800e8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7e8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e7ec:	4944      	ldr	r1, [pc, #272]	; (800e900 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e7ee:	4845      	ldr	r0, [pc, #276]	; (800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7f0:	f000 fcea 	bl	800f1c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fc:	88db      	ldrh	r3, [r3, #6]
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	889b      	ldrh	r3, [r3, #4]
 800e804:	b29b      	uxth	r3, r3
 800e806:	429a      	cmp	r2, r3
 800e808:	d010      	beq.n	800e82c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	623b      	str	r3, [r7, #32]
 800e80e:	e00d      	b.n	800e82c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d006      	beq.n	800e826 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e818:	4b38      	ldr	r3, [pc, #224]	; (800e8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e81a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e81e:	493a      	ldr	r1, [pc, #232]	; (800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e820:	4838      	ldr	r0, [pc, #224]	; (800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e822:	f000 fcd1 	bl	800f1c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	68ba      	ldr	r2, [r7, #8]
 800e82a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d105      	bne.n	800e83e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	7f9b      	ldrb	r3, [r3, #30]
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d059      	beq.n	800e8f2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e83e:	6a3b      	ldr	r3, [r7, #32]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d04f      	beq.n	800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d006      	beq.n	800e85a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	889b      	ldrh	r3, [r3, #4]
 800e854:	b29b      	uxth	r3, r3
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	623b      	str	r3, [r7, #32]
 800e85e:	e041      	b.n	800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e86a:	e012      	b.n	800e892 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e874:	88db      	ldrh	r3, [r3, #6]
 800e876:	b29a      	uxth	r2, r3
 800e878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87a:	889b      	ldrh	r3, [r3, #4]
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	429a      	cmp	r2, r3
 800e880:	d002      	beq.n	800e888 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e882:	2300      	movs	r3, #0
 800e884:	623b      	str	r3, [r7, #32]
            break;
 800e886:	e007      	b.n	800e898 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1e9      	bne.n	800e86c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d022      	beq.n	800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e8a6:	4b15      	ldr	r3, [pc, #84]	; (800e8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8a8:	f240 12df 	movw	r2, #479	; 0x1df
 800e8ac:	4917      	ldr	r1, [pc, #92]	; (800e90c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e8ae:	4815      	ldr	r0, [pc, #84]	; (800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8b0:	f000 fc8a 	bl	800f1c8 <iprintf>
          LWIP_ASSERT("sanity check",
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d106      	bne.n	800e8ce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e8c0:	4b0e      	ldr	r3, [pc, #56]	; (800e8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e8c6:	4911      	ldr	r1, [pc, #68]	; (800e90c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e8c8:	480e      	ldr	r0, [pc, #56]	; (800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8ca:	f000 fc7d 	bl	800f1c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d006      	beq.n	800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e8d6:	4b09      	ldr	r3, [pc, #36]	; (800e8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8d8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e8dc:	490c      	ldr	r1, [pc, #48]	; (800e910 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e8de:	4809      	ldr	r0, [pc, #36]	; (800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8e0:	f000 fc72 	bl	800f1c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e8e4:	6a3b      	ldr	r3, [r7, #32]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	bf14      	ite	ne
 800e8ea:	2301      	movne	r3, #1
 800e8ec:	2300      	moveq	r3, #0
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	e000      	b.n	800e8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3730      	adds	r7, #48	; 0x30
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	08012c70 	.word	0x08012c70
 800e900:	08012d54 	.word	0x08012d54
 800e904:	08012cb8 	.word	0x08012cb8
 800e908:	08012d74 	.word	0x08012d74
 800e90c:	08012dac 	.word	0x08012dac
 800e910:	08012dbc 	.word	0x08012dbc

0800e914 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b08e      	sub	sp, #56	; 0x38
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	f003 030f 	and.w	r3, r3, #15
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	2b14      	cmp	r3, #20
 800e932:	f040 8171 	bne.w	800ec18 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	88db      	ldrh	r3, [r3, #6]
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7f5 ffb3 	bl	80048a8 <lwip_htons>
 800e942:	4603      	mov	r3, r0
 800e944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e948:	b29b      	uxth	r3, r3
 800e94a:	00db      	lsls	r3, r3, #3
 800e94c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e950:	885b      	ldrh	r3, [r3, #2]
 800e952:	b29b      	uxth	r3, r3
 800e954:	4618      	mov	r0, r3
 800e956:	f7f5 ffa7 	bl	80048a8 <lwip_htons>
 800e95a:	4603      	mov	r3, r0
 800e95c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	f003 030f 	and.w	r3, r3, #15
 800e966:	b2db      	uxtb	r3, r3
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e96e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e972:	b29b      	uxth	r3, r3
 800e974:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e976:	429a      	cmp	r2, r3
 800e978:	f0c0 8150 	bcc.w	800ec1c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e97c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e980:	b29b      	uxth	r3, r3
 800e982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7f7 fba9 	bl	80060e0 <pbuf_clen>
 800e98e:	4603      	mov	r3, r0
 800e990:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e992:	4b8c      	ldr	r3, [pc, #560]	; (800ebc4 <ip4_reass+0x2b0>)
 800e994:	881b      	ldrh	r3, [r3, #0]
 800e996:	461a      	mov	r2, r3
 800e998:	8c3b      	ldrh	r3, [r7, #32]
 800e99a:	4413      	add	r3, r2
 800e99c:	2b0a      	cmp	r3, #10
 800e99e:	dd10      	ble.n	800e9c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e9a0:	8c3b      	ldrh	r3, [r7, #32]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9a6:	f7ff fd81 	bl	800e4ac <ip_reass_remove_oldest_datagram>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f000 8137 	beq.w	800ec20 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e9b2:	4b84      	ldr	r3, [pc, #528]	; (800ebc4 <ip4_reass+0x2b0>)
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	8c3b      	ldrh	r3, [r7, #32]
 800e9ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e9bc:	2b0a      	cmp	r3, #10
 800e9be:	f300 812f 	bgt.w	800ec20 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9c2:	4b81      	ldr	r3, [pc, #516]	; (800ebc8 <ip4_reass+0x2b4>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	633b      	str	r3, [r7, #48]	; 0x30
 800e9c8:	e015      	b.n	800e9f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9cc:	695a      	ldr	r2, [r3, #20]
 800e9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d0:	68db      	ldr	r3, [r3, #12]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d10c      	bne.n	800e9f0 <ip4_reass+0xdc>
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	699a      	ldr	r2, [r3, #24]
 800e9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9dc:	691b      	ldr	r3, [r3, #16]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d106      	bne.n	800e9f0 <ip4_reass+0xdc>
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e4:	899a      	ldrh	r2, [r3, #12]
 800e9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e8:	889b      	ldrh	r3, [r3, #4]
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d006      	beq.n	800e9fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	633b      	str	r3, [r7, #48]	; 0x30
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1e6      	bne.n	800e9ca <ip4_reass+0xb6>
 800e9fc:	e000      	b.n	800ea00 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e9fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ea00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d109      	bne.n	800ea1a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ea06:	8c3b      	ldrh	r3, [r7, #32]
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea0c:	f7ff fdb0 	bl	800e570 <ip_reass_enqueue_new_datagram>
 800ea10:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ea12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d11c      	bne.n	800ea52 <ip4_reass+0x13e>
      goto nullreturn;
 800ea18:	e105      	b.n	800ec26 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1c:	88db      	ldrh	r3, [r3, #6]
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7f5 ff41 	bl	80048a8 <lwip_htons>
 800ea26:	4603      	mov	r3, r0
 800ea28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d110      	bne.n	800ea52 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ea30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea32:	89db      	ldrh	r3, [r3, #14]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7f5 ff37 	bl	80048a8 <lwip_htons>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d006      	beq.n	800ea52 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	3308      	adds	r3, #8
 800ea48:	2214      	movs	r2, #20
 800ea4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f000 fba5 	bl	800f19c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	88db      	ldrh	r3, [r3, #6]
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	f003 0320 	and.w	r3, r3, #32
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	bf0c      	ite	eq
 800ea60:	2301      	moveq	r3, #1
 800ea62:	2300      	movne	r3, #0
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00e      	beq.n	800ea8c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea72:	4413      	add	r3, r2
 800ea74:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea76:	8b7a      	ldrh	r2, [r7, #26]
 800ea78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	f0c0 80a0 	bcc.w	800ebc0 <ip4_reass+0x2ac>
 800ea80:	8b7b      	ldrh	r3, [r7, #26]
 800ea82:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ea86:	4293      	cmp	r3, r2
 800ea88:	f200 809a 	bhi.w	800ebc0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea8c:	69fa      	ldr	r2, [r7, #28]
 800ea8e:	6879      	ldr	r1, [r7, #4]
 800ea90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea92:	f7ff fdd5 	bl	800e640 <ip_reass_chain_frag_into_datagram_and_validate>
 800ea96:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9e:	f000 809b 	beq.w	800ebd8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eaa2:	4b48      	ldr	r3, [pc, #288]	; (800ebc4 <ip4_reass+0x2b0>)
 800eaa4:	881a      	ldrh	r2, [r3, #0]
 800eaa6:	8c3b      	ldrh	r3, [r7, #32]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	4b45      	ldr	r3, [pc, #276]	; (800ebc4 <ip4_reass+0x2b0>)
 800eaae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00d      	beq.n	800ead2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800eab6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaba:	4413      	add	r3, r2
 800eabc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800eabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac0:	8a7a      	ldrh	r2, [r7, #18]
 800eac2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	7f9b      	ldrb	r3, [r3, #30]
 800eac8:	f043 0301 	orr.w	r3, r3, #1
 800eacc:	b2da      	uxtb	r2, r3
 800eace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d171      	bne.n	800ebbc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ead8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eada:	8b9b      	ldrh	r3, [r3, #28]
 800eadc:	3314      	adds	r3, #20
 800eade:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800eae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800eaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	2214      	movs	r2, #20
 800eaf8:	4619      	mov	r1, r3
 800eafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eafc:	f000 fb4e 	bl	800f19c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eb00:	8a3b      	ldrh	r3, [r7, #16]
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7f5 fed0 	bl	80048a8 <lwip_htons>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb12:	2200      	movs	r2, #0
 800eb14:	719a      	strb	r2, [r3, #6]
 800eb16:	2200      	movs	r2, #0
 800eb18:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	729a      	strb	r2, [r3, #10]
 800eb20:	2200      	movs	r2, #0
 800eb22:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eb2a:	e00d      	b.n	800eb48 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eb32:	2114      	movs	r1, #20
 800eb34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb36:	f7f7 f9c5 	bl	8005ec4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eb3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7f7 fb09 	bl	8006154 <pbuf_cat>
      r = iprh->next_pbuf;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1ee      	bne.n	800eb2c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eb4e:	4b1e      	ldr	r3, [pc, #120]	; (800ebc8 <ip4_reass+0x2b4>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d102      	bne.n	800eb5e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb5c:	e010      	b.n	800eb80 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb5e:	4b1a      	ldr	r3, [pc, #104]	; (800ebc8 <ip4_reass+0x2b4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb64:	e007      	b.n	800eb76 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d006      	beq.n	800eb7e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1f4      	bne.n	800eb66 <ip4_reass+0x252>
 800eb7c:	e000      	b.n	800eb80 <ip4_reass+0x26c>
          break;
 800eb7e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb84:	f7ff fd2e 	bl	800e5e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7f7 faa9 	bl	80060e0 <pbuf_clen>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb92:	4b0c      	ldr	r3, [pc, #48]	; (800ebc4 <ip4_reass+0x2b0>)
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	8c3a      	ldrh	r2, [r7, #32]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d906      	bls.n	800ebaa <ip4_reass+0x296>
 800eb9c:	4b0b      	ldr	r3, [pc, #44]	; (800ebcc <ip4_reass+0x2b8>)
 800eb9e:	f240 229b 	movw	r2, #667	; 0x29b
 800eba2:	490b      	ldr	r1, [pc, #44]	; (800ebd0 <ip4_reass+0x2bc>)
 800eba4:	480b      	ldr	r0, [pc, #44]	; (800ebd4 <ip4_reass+0x2c0>)
 800eba6:	f000 fb0f 	bl	800f1c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ebaa:	4b06      	ldr	r3, [pc, #24]	; (800ebc4 <ip4_reass+0x2b0>)
 800ebac:	881a      	ldrh	r2, [r3, #0]
 800ebae:	8c3b      	ldrh	r3, [r7, #32]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	4b03      	ldr	r3, [pc, #12]	; (800ebc4 <ip4_reass+0x2b0>)
 800ebb6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	e038      	b.n	800ec2e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	e036      	b.n	800ec2e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ebc0:	bf00      	nop
 800ebc2:	e00a      	b.n	800ebda <ip4_reass+0x2c6>
 800ebc4:	200087f8 	.word	0x200087f8
 800ebc8:	200087f4 	.word	0x200087f4
 800ebcc:	08012c70 	.word	0x08012c70
 800ebd0:	08012de0 	.word	0x08012de0
 800ebd4:	08012cb8 	.word	0x08012cb8
    goto nullreturn_ipr;
 800ebd8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d106      	bne.n	800ebee <ip4_reass+0x2da>
 800ebe0:	4b15      	ldr	r3, [pc, #84]	; (800ec38 <ip4_reass+0x324>)
 800ebe2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ebe6:	4915      	ldr	r1, [pc, #84]	; (800ec3c <ip4_reass+0x328>)
 800ebe8:	4815      	ldr	r0, [pc, #84]	; (800ec40 <ip4_reass+0x32c>)
 800ebea:	f000 faed 	bl	800f1c8 <iprintf>
  if (ipr->p == NULL) {
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d116      	bne.n	800ec24 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ebf6:	4b13      	ldr	r3, [pc, #76]	; (800ec44 <ip4_reass+0x330>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d006      	beq.n	800ec0e <ip4_reass+0x2fa>
 800ec00:	4b0d      	ldr	r3, [pc, #52]	; (800ec38 <ip4_reass+0x324>)
 800ec02:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ec06:	4910      	ldr	r1, [pc, #64]	; (800ec48 <ip4_reass+0x334>)
 800ec08:	480d      	ldr	r0, [pc, #52]	; (800ec40 <ip4_reass+0x32c>)
 800ec0a:	f000 fadd 	bl	800f1c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ec0e:	2100      	movs	r1, #0
 800ec10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec12:	f7ff fce7 	bl	800e5e4 <ip_reass_dequeue_datagram>
 800ec16:	e006      	b.n	800ec26 <ip4_reass+0x312>
    goto nullreturn;
 800ec18:	bf00      	nop
 800ec1a:	e004      	b.n	800ec26 <ip4_reass+0x312>
    goto nullreturn;
 800ec1c:	bf00      	nop
 800ec1e:	e002      	b.n	800ec26 <ip4_reass+0x312>
      goto nullreturn;
 800ec20:	bf00      	nop
 800ec22:	e000      	b.n	800ec26 <ip4_reass+0x312>
  }

nullreturn:
 800ec24:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7f7 f9d2 	bl	8005fd0 <pbuf_free>
  return NULL;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3738      	adds	r7, #56	; 0x38
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	08012c70 	.word	0x08012c70
 800ec3c:	08012dfc 	.word	0x08012dfc
 800ec40:	08012cb8 	.word	0x08012cb8
 800ec44:	200087f4 	.word	0x200087f4
 800ec48:	08012e08 	.word	0x08012e08

0800ec4c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ec50:	2005      	movs	r0, #5
 800ec52:	f7f6 fad7 	bl	8005204 <memp_malloc>
 800ec56:	4603      	mov	r3, r0
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec6a:	4b07      	ldr	r3, [pc, #28]	; (800ec88 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec6c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ec70:	4906      	ldr	r1, [pc, #24]	; (800ec8c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec72:	4807      	ldr	r0, [pc, #28]	; (800ec90 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec74:	f000 faa8 	bl	800f1c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec78:	6879      	ldr	r1, [r7, #4]
 800ec7a:	2005      	movs	r0, #5
 800ec7c:	f7f6 fb32 	bl	80052e4 <memp_free>
}
 800ec80:	bf00      	nop
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	08012c70 	.word	0x08012c70
 800ec8c:	08012e28 	.word	0x08012e28
 800ec90:	08012cb8 	.word	0x08012cb8

0800ec94 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d106      	bne.n	800ecb4 <ipfrag_free_pbuf_custom+0x20>
 800eca6:	4b11      	ldr	r3, [pc, #68]	; (800ecec <ipfrag_free_pbuf_custom+0x58>)
 800eca8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ecac:	4910      	ldr	r1, [pc, #64]	; (800ecf0 <ipfrag_free_pbuf_custom+0x5c>)
 800ecae:	4811      	ldr	r0, [pc, #68]	; (800ecf4 <ipfrag_free_pbuf_custom+0x60>)
 800ecb0:	f000 fa8a 	bl	800f1c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d006      	beq.n	800ecca <ipfrag_free_pbuf_custom+0x36>
 800ecbc:	4b0b      	ldr	r3, [pc, #44]	; (800ecec <ipfrag_free_pbuf_custom+0x58>)
 800ecbe:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ecc2:	490d      	ldr	r1, [pc, #52]	; (800ecf8 <ipfrag_free_pbuf_custom+0x64>)
 800ecc4:	480b      	ldr	r0, [pc, #44]	; (800ecf4 <ipfrag_free_pbuf_custom+0x60>)
 800ecc6:	f000 fa7f 	bl	800f1c8 <iprintf>
  if (pcr->original != NULL) {
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	695b      	ldr	r3, [r3, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d004      	beq.n	800ecdc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7f7 f97a 	bl	8005fd0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f7ff ffbd 	bl	800ec5c <ip_frag_free_pbuf_custom_ref>
}
 800ece2:	bf00      	nop
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	08012c70 	.word	0x08012c70
 800ecf0:	08012e34 	.word	0x08012e34
 800ecf4:	08012cb8 	.word	0x08012cb8
 800ecf8:	08012e40 	.word	0x08012e40

0800ecfc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b094      	sub	sp, #80	; 0x50
 800ed00:	af02      	add	r7, sp, #8
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed12:	3b14      	subs	r3, #20
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	da00      	bge.n	800ed1a <ip4_frag+0x1e>
 800ed18:	3307      	adds	r3, #7
 800ed1a:	10db      	asrs	r3, r3, #3
 800ed1c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ed1e:	2314      	movs	r3, #20
 800ed20:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ed28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	f003 030f 	and.w	r3, r3, #15
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	2b14      	cmp	r3, #20
 800ed3c:	d002      	beq.n	800ed44 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ed3e:	f06f 0305 	mvn.w	r3, #5
 800ed42:	e110      	b.n	800ef66 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	895b      	ldrh	r3, [r3, #10]
 800ed48:	2b13      	cmp	r3, #19
 800ed4a:	d809      	bhi.n	800ed60 <ip4_frag+0x64>
 800ed4c:	4b88      	ldr	r3, [pc, #544]	; (800ef70 <ip4_frag+0x274>)
 800ed4e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ed52:	4988      	ldr	r1, [pc, #544]	; (800ef74 <ip4_frag+0x278>)
 800ed54:	4888      	ldr	r0, [pc, #544]	; (800ef78 <ip4_frag+0x27c>)
 800ed56:	f000 fa37 	bl	800f1c8 <iprintf>
 800ed5a:	f06f 0305 	mvn.w	r3, #5
 800ed5e:	e102      	b.n	800ef66 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	88db      	ldrh	r3, [r3, #6]
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7f5 fd9e 	bl	80048a8 <lwip_htons>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed80:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	891b      	ldrh	r3, [r3, #8]
 800ed86:	3b14      	subs	r3, #20
 800ed88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ed8c:	e0e1      	b.n	800ef52 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed90:	00db      	lsls	r3, r3, #3
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	bf28      	it	cs
 800ed9c:	4613      	movcs	r3, r2
 800ed9e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800eda0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eda4:	2114      	movs	r1, #20
 800eda6:	200e      	movs	r0, #14
 800eda8:	f7f6 fe2e 	bl	8005a08 <pbuf_alloc>
 800edac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800edae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 80d5 	beq.w	800ef60 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800edb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb8:	895b      	ldrh	r3, [r3, #10]
 800edba:	2b13      	cmp	r3, #19
 800edbc:	d806      	bhi.n	800edcc <ip4_frag+0xd0>
 800edbe:	4b6c      	ldr	r3, [pc, #432]	; (800ef70 <ip4_frag+0x274>)
 800edc0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800edc4:	496d      	ldr	r1, [pc, #436]	; (800ef7c <ip4_frag+0x280>)
 800edc6:	486c      	ldr	r0, [pc, #432]	; (800ef78 <ip4_frag+0x27c>)
 800edc8:	f000 f9fe 	bl	800f1c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	2214      	movs	r2, #20
 800edd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 f9e1 	bl	800f19c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800edda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ede0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ede2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ede6:	e064      	b.n	800eeb2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	895a      	ldrh	r2, [r3, #10]
 800edec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	895b      	ldrh	r3, [r3, #10]
 800edf6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d906      	bls.n	800ee0a <ip4_frag+0x10e>
 800edfc:	4b5c      	ldr	r3, [pc, #368]	; (800ef70 <ip4_frag+0x274>)
 800edfe:	f240 322d 	movw	r2, #813	; 0x32d
 800ee02:	495f      	ldr	r1, [pc, #380]	; (800ef80 <ip4_frag+0x284>)
 800ee04:	485c      	ldr	r0, [pc, #368]	; (800ef78 <ip4_frag+0x27c>)
 800ee06:	f000 f9df 	bl	800f1c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ee0a:	8bfa      	ldrh	r2, [r7, #30]
 800ee0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee10:	4293      	cmp	r3, r2
 800ee12:	bf28      	it	cs
 800ee14:	4613      	movcs	r3, r2
 800ee16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ee1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d105      	bne.n	800ee2e <ip4_frag+0x132>
        poff = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	60fb      	str	r3, [r7, #12]
        continue;
 800ee2c:	e041      	b.n	800eeb2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ee2e:	f7ff ff0d 	bl	800ec4c <ip_frag_alloc_pbuf_custom_ref>
 800ee32:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d103      	bne.n	800ee42 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ee3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee3c:	f7f7 f8c8 	bl	8005fd0 <pbuf_free>
        goto memerr;
 800ee40:	e08f      	b.n	800ef62 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee42:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee4a:	4413      	add	r3, r2
 800ee4c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ee50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ee54:	9201      	str	r2, [sp, #4]
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2241      	movs	r2, #65	; 0x41
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	f7f6 fefd 	bl	8005c5c <pbuf_alloced_custom>
 800ee62:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d106      	bne.n	800ee78 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee6a:	69b8      	ldr	r0, [r7, #24]
 800ee6c:	f7ff fef6 	bl	800ec5c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee72:	f7f7 f8ad 	bl	8005fd0 <pbuf_free>
        goto memerr;
 800ee76:	e074      	b.n	800ef62 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f7f7 f949 	bl	8006110 <pbuf_ref>
      pcr->original = p;
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	4a3f      	ldr	r2, [pc, #252]	; (800ef84 <ip4_frag+0x288>)
 800ee88:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee8a:	6979      	ldr	r1, [r7, #20]
 800ee8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee8e:	f7f7 f961 	bl	8006154 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee92:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ee96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee9a:	1ad3      	subs	r3, r2, r3
 800ee9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800eea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d004      	beq.n	800eeb2 <ip4_frag+0x1b6>
        poff = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800eeb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d196      	bne.n	800ede8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800eeba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eebc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eec0:	4413      	add	r3, r2
 800eec2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eec8:	f1a3 0213 	sub.w	r2, r3, #19
 800eecc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eed0:	429a      	cmp	r2, r3
 800eed2:	bfcc      	ite	gt
 800eed4:	2301      	movgt	r3, #1
 800eed6:	2300      	movle	r3, #0
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800eedc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eee4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800eee6:	6a3b      	ldr	r3, [r7, #32]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <ip4_frag+0x1f6>
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d003      	beq.n	800eefa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eef4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eef8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eefa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7f5 fcd3 	bl	80048a8 <lwip_htons>
 800ef02:	4603      	mov	r3, r0
 800ef04:	461a      	mov	r2, r3
 800ef06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef08:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ef0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef0c:	3314      	adds	r3, #20
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7f5 fcc9 	bl	80048a8 <lwip_htons>
 800ef16:	4603      	mov	r3, r0
 800ef18:	461a      	mov	r2, r3
 800ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef20:	2200      	movs	r2, #0
 800ef22:	729a      	strb	r2, [r3, #10]
 800ef24:	2200      	movs	r2, #0
 800ef26:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	695b      	ldr	r3, [r3, #20]
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef30:	68b8      	ldr	r0, [r7, #8]
 800ef32:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ef34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef36:	f7f7 f84b 	bl	8005fd0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ef3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ef46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ef4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef4c:	4413      	add	r3, r2
 800ef4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ef52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f47f af19 	bne.w	800ed8e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	e002      	b.n	800ef66 <ip4_frag+0x26a>
      goto memerr;
 800ef60:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3748      	adds	r7, #72	; 0x48
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	08012c70 	.word	0x08012c70
 800ef74:	08012e4c 	.word	0x08012e4c
 800ef78:	08012cb8 	.word	0x08012cb8
 800ef7c:	08012e68 	.word	0x08012e68
 800ef80:	08012e88 	.word	0x08012e88
 800ef84:	0800ec95 	.word	0x0800ec95

0800ef88 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b086      	sub	sp, #24
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef92:	230e      	movs	r3, #14
 800ef94:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	895b      	ldrh	r3, [r3, #10]
 800ef9a:	2b0e      	cmp	r3, #14
 800ef9c:	d96e      	bls.n	800f07c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	7bdb      	ldrb	r3, [r3, #15]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d106      	bne.n	800efb4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800efac:	3301      	adds	r3, #1
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	7b1a      	ldrb	r2, [r3, #12]
 800efbe:	7b5b      	ldrb	r3, [r3, #13]
 800efc0:	021b      	lsls	r3, r3, #8
 800efc2:	4313      	orrs	r3, r2
 800efc4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	f003 0301 	and.w	r3, r3, #1
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d023      	beq.n	800f01a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d10f      	bne.n	800effa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	785b      	ldrb	r3, [r3, #1]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d11b      	bne.n	800f01a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efe6:	2b5e      	cmp	r3, #94	; 0x5e
 800efe8:	d117      	bne.n	800f01a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	7b5b      	ldrb	r3, [r3, #13]
 800efee:	f043 0310 	orr.w	r3, r3, #16
 800eff2:	b2da      	uxtb	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	735a      	strb	r2, [r3, #13]
 800eff8:	e00f      	b.n	800f01a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	2206      	movs	r2, #6
 800effe:	4928      	ldr	r1, [pc, #160]	; (800f0a0 <ethernet_input+0x118>)
 800f000:	4618      	mov	r0, r3
 800f002:	f000 f8bb 	bl	800f17c <memcmp>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d106      	bne.n	800f01a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	7b5b      	ldrb	r3, [r3, #13]
 800f010:	f043 0308 	orr.w	r3, r3, #8
 800f014:	b2da      	uxtb	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f01a:	89fb      	ldrh	r3, [r7, #14]
 800f01c:	2b08      	cmp	r3, #8
 800f01e:	d003      	beq.n	800f028 <ethernet_input+0xa0>
 800f020:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f024:	d014      	beq.n	800f050 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f026:	e032      	b.n	800f08e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f02e:	f003 0308 	and.w	r3, r3, #8
 800f032:	2b00      	cmp	r3, #0
 800f034:	d024      	beq.n	800f080 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f036:	8afb      	ldrh	r3, [r7, #22]
 800f038:	4619      	mov	r1, r3
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7f6 ff42 	bl	8005ec4 <pbuf_remove_header>
 800f040:	4603      	mov	r3, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	d11e      	bne.n	800f084 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f046:	6839      	ldr	r1, [r7, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7fe ff21 	bl	800de90 <ip4_input>
      break;
 800f04e:	e013      	b.n	800f078 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f056:	f003 0308 	and.w	r3, r3, #8
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d014      	beq.n	800f088 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f05e:	8afb      	ldrh	r3, [r7, #22]
 800f060:	4619      	mov	r1, r3
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7f6 ff2e 	bl	8005ec4 <pbuf_remove_header>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10e      	bne.n	800f08c <ethernet_input+0x104>
        etharp_input(p, netif);
 800f06e:	6839      	ldr	r1, [r7, #0]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7fe f8c1 	bl	800d1f8 <etharp_input>
      break;
 800f076:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	e00c      	b.n	800f096 <ethernet_input+0x10e>
    goto free_and_return;
 800f07c:	bf00      	nop
 800f07e:	e006      	b.n	800f08e <ethernet_input+0x106>
        goto free_and_return;
 800f080:	bf00      	nop
 800f082:	e004      	b.n	800f08e <ethernet_input+0x106>
        goto free_and_return;
 800f084:	bf00      	nop
 800f086:	e002      	b.n	800f08e <ethernet_input+0x106>
        goto free_and_return;
 800f088:	bf00      	nop
 800f08a:	e000      	b.n	800f08e <ethernet_input+0x106>
        goto free_and_return;
 800f08c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7f6 ff9e 	bl	8005fd0 <pbuf_free>
  return ERR_OK;
 800f094:	2300      	movs	r3, #0
}
 800f096:	4618      	mov	r0, r3
 800f098:	3718      	adds	r7, #24
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	0801402c 	.word	0x0801402c

0800f0a4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b086      	sub	sp, #24
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
 800f0b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f0b2:	8c3b      	ldrh	r3, [r7, #32]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7f5 fbf7 	bl	80048a8 <lwip_htons>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f0be:	210e      	movs	r1, #14
 800f0c0:	68b8      	ldr	r0, [r7, #8]
 800f0c2:	f7f6 feef 	bl	8005ea4 <pbuf_add_header>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d125      	bne.n	800f118 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	8afa      	ldrh	r2, [r7, #22]
 800f0d6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	2206      	movs	r2, #6
 800f0dc:	6839      	ldr	r1, [r7, #0]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f000 f85c 	bl	800f19c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	3306      	adds	r3, #6
 800f0e8:	2206      	movs	r2, #6
 800f0ea:	6879      	ldr	r1, [r7, #4]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f000 f855 	bl	800f19c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f0f8:	2b06      	cmp	r3, #6
 800f0fa:	d006      	beq.n	800f10a <ethernet_output+0x66>
 800f0fc:	4b0a      	ldr	r3, [pc, #40]	; (800f128 <ethernet_output+0x84>)
 800f0fe:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f102:	490a      	ldr	r1, [pc, #40]	; (800f12c <ethernet_output+0x88>)
 800f104:	480a      	ldr	r0, [pc, #40]	; (800f130 <ethernet_output+0x8c>)
 800f106:	f000 f85f 	bl	800f1c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	699b      	ldr	r3, [r3, #24]
 800f10e:	68b9      	ldr	r1, [r7, #8]
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	4798      	blx	r3
 800f114:	4603      	mov	r3, r0
 800f116:	e002      	b.n	800f11e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f118:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f11a:	f06f 0301 	mvn.w	r3, #1
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3718      	adds	r7, #24
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	08012e98 	.word	0x08012e98
 800f12c:	08012ed0 	.word	0x08012ed0
 800f130:	08012f04 	.word	0x08012f04

0800f134 <__libc_init_array>:
 800f134:	b570      	push	{r4, r5, r6, lr}
 800f136:	4d0d      	ldr	r5, [pc, #52]	; (800f16c <__libc_init_array+0x38>)
 800f138:	4c0d      	ldr	r4, [pc, #52]	; (800f170 <__libc_init_array+0x3c>)
 800f13a:	1b64      	subs	r4, r4, r5
 800f13c:	10a4      	asrs	r4, r4, #2
 800f13e:	2600      	movs	r6, #0
 800f140:	42a6      	cmp	r6, r4
 800f142:	d109      	bne.n	800f158 <__libc_init_array+0x24>
 800f144:	4d0b      	ldr	r5, [pc, #44]	; (800f174 <__libc_init_array+0x40>)
 800f146:	4c0c      	ldr	r4, [pc, #48]	; (800f178 <__libc_init_array+0x44>)
 800f148:	f001 f8b0 	bl	80102ac <_init>
 800f14c:	1b64      	subs	r4, r4, r5
 800f14e:	10a4      	asrs	r4, r4, #2
 800f150:	2600      	movs	r6, #0
 800f152:	42a6      	cmp	r6, r4
 800f154:	d105      	bne.n	800f162 <__libc_init_array+0x2e>
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	f855 3b04 	ldr.w	r3, [r5], #4
 800f15c:	4798      	blx	r3
 800f15e:	3601      	adds	r6, #1
 800f160:	e7ee      	b.n	800f140 <__libc_init_array+0xc>
 800f162:	f855 3b04 	ldr.w	r3, [r5], #4
 800f166:	4798      	blx	r3
 800f168:	3601      	adds	r6, #1
 800f16a:	e7f2      	b.n	800f152 <__libc_init_array+0x1e>
 800f16c:	0801418c 	.word	0x0801418c
 800f170:	0801418c 	.word	0x0801418c
 800f174:	0801418c 	.word	0x0801418c
 800f178:	08014190 	.word	0x08014190

0800f17c <memcmp>:
 800f17c:	b510      	push	{r4, lr}
 800f17e:	3901      	subs	r1, #1
 800f180:	4402      	add	r2, r0
 800f182:	4290      	cmp	r0, r2
 800f184:	d101      	bne.n	800f18a <memcmp+0xe>
 800f186:	2000      	movs	r0, #0
 800f188:	e005      	b.n	800f196 <memcmp+0x1a>
 800f18a:	7803      	ldrb	r3, [r0, #0]
 800f18c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f190:	42a3      	cmp	r3, r4
 800f192:	d001      	beq.n	800f198 <memcmp+0x1c>
 800f194:	1b18      	subs	r0, r3, r4
 800f196:	bd10      	pop	{r4, pc}
 800f198:	3001      	adds	r0, #1
 800f19a:	e7f2      	b.n	800f182 <memcmp+0x6>

0800f19c <memcpy>:
 800f19c:	440a      	add	r2, r1
 800f19e:	4291      	cmp	r1, r2
 800f1a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1a4:	d100      	bne.n	800f1a8 <memcpy+0xc>
 800f1a6:	4770      	bx	lr
 800f1a8:	b510      	push	{r4, lr}
 800f1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1b2:	4291      	cmp	r1, r2
 800f1b4:	d1f9      	bne.n	800f1aa <memcpy+0xe>
 800f1b6:	bd10      	pop	{r4, pc}

0800f1b8 <memset>:
 800f1b8:	4402      	add	r2, r0
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d100      	bne.n	800f1c2 <memset+0xa>
 800f1c0:	4770      	bx	lr
 800f1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800f1c6:	e7f9      	b.n	800f1bc <memset+0x4>

0800f1c8 <iprintf>:
 800f1c8:	b40f      	push	{r0, r1, r2, r3}
 800f1ca:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <iprintf+0x2c>)
 800f1cc:	b513      	push	{r0, r1, r4, lr}
 800f1ce:	681c      	ldr	r4, [r3, #0]
 800f1d0:	b124      	cbz	r4, 800f1dc <iprintf+0x14>
 800f1d2:	69a3      	ldr	r3, [r4, #24]
 800f1d4:	b913      	cbnz	r3, 800f1dc <iprintf+0x14>
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f000 f8e4 	bl	800f3a4 <__sinit>
 800f1dc:	ab05      	add	r3, sp, #20
 800f1de:	9a04      	ldr	r2, [sp, #16]
 800f1e0:	68a1      	ldr	r1, [r4, #8]
 800f1e2:	9301      	str	r3, [sp, #4]
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 faa1 	bl	800f72c <_vfiprintf_r>
 800f1ea:	b002      	add	sp, #8
 800f1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1f0:	b004      	add	sp, #16
 800f1f2:	4770      	bx	lr
 800f1f4:	2000002c 	.word	0x2000002c

0800f1f8 <rand>:
 800f1f8:	4b16      	ldr	r3, [pc, #88]	; (800f254 <rand+0x5c>)
 800f1fa:	b510      	push	{r4, lr}
 800f1fc:	681c      	ldr	r4, [r3, #0]
 800f1fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f200:	b9b3      	cbnz	r3, 800f230 <rand+0x38>
 800f202:	2018      	movs	r0, #24
 800f204:	f000 f980 	bl	800f508 <malloc>
 800f208:	63a0      	str	r0, [r4, #56]	; 0x38
 800f20a:	b928      	cbnz	r0, 800f218 <rand+0x20>
 800f20c:	4602      	mov	r2, r0
 800f20e:	4b12      	ldr	r3, [pc, #72]	; (800f258 <rand+0x60>)
 800f210:	4812      	ldr	r0, [pc, #72]	; (800f25c <rand+0x64>)
 800f212:	214e      	movs	r1, #78	; 0x4e
 800f214:	f000 f850 	bl	800f2b8 <__assert_func>
 800f218:	4a11      	ldr	r2, [pc, #68]	; (800f260 <rand+0x68>)
 800f21a:	4b12      	ldr	r3, [pc, #72]	; (800f264 <rand+0x6c>)
 800f21c:	e9c0 2300 	strd	r2, r3, [r0]
 800f220:	4b11      	ldr	r3, [pc, #68]	; (800f268 <rand+0x70>)
 800f222:	6083      	str	r3, [r0, #8]
 800f224:	230b      	movs	r3, #11
 800f226:	8183      	strh	r3, [r0, #12]
 800f228:	2201      	movs	r2, #1
 800f22a:	2300      	movs	r3, #0
 800f22c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f230:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f232:	4a0e      	ldr	r2, [pc, #56]	; (800f26c <rand+0x74>)
 800f234:	6920      	ldr	r0, [r4, #16]
 800f236:	6963      	ldr	r3, [r4, #20]
 800f238:	490d      	ldr	r1, [pc, #52]	; (800f270 <rand+0x78>)
 800f23a:	4342      	muls	r2, r0
 800f23c:	fb01 2203 	mla	r2, r1, r3, r2
 800f240:	fba0 0101 	umull	r0, r1, r0, r1
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	eb42 0001 	adc.w	r0, r2, r1
 800f24a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f24e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f252:	bd10      	pop	{r4, pc}
 800f254:	2000002c 	.word	0x2000002c
 800f258:	08014040 	.word	0x08014040
 800f25c:	08014057 	.word	0x08014057
 800f260:	abcd330e 	.word	0xabcd330e
 800f264:	e66d1234 	.word	0xe66d1234
 800f268:	0005deec 	.word	0x0005deec
 800f26c:	5851f42d 	.word	0x5851f42d
 800f270:	4c957f2d 	.word	0x4c957f2d

0800f274 <strchr>:
 800f274:	b2c9      	uxtb	r1, r1
 800f276:	4603      	mov	r3, r0
 800f278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f27c:	b11a      	cbz	r2, 800f286 <strchr+0x12>
 800f27e:	428a      	cmp	r2, r1
 800f280:	d1f9      	bne.n	800f276 <strchr+0x2>
 800f282:	4618      	mov	r0, r3
 800f284:	4770      	bx	lr
 800f286:	2900      	cmp	r1, #0
 800f288:	bf18      	it	ne
 800f28a:	2300      	movne	r3, #0
 800f28c:	e7f9      	b.n	800f282 <strchr+0xe>

0800f28e <strncmp>:
 800f28e:	b510      	push	{r4, lr}
 800f290:	b17a      	cbz	r2, 800f2b2 <strncmp+0x24>
 800f292:	4603      	mov	r3, r0
 800f294:	3901      	subs	r1, #1
 800f296:	1884      	adds	r4, r0, r2
 800f298:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f29c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f2a0:	4290      	cmp	r0, r2
 800f2a2:	d101      	bne.n	800f2a8 <strncmp+0x1a>
 800f2a4:	42a3      	cmp	r3, r4
 800f2a6:	d101      	bne.n	800f2ac <strncmp+0x1e>
 800f2a8:	1a80      	subs	r0, r0, r2
 800f2aa:	bd10      	pop	{r4, pc}
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d1f3      	bne.n	800f298 <strncmp+0xa>
 800f2b0:	e7fa      	b.n	800f2a8 <strncmp+0x1a>
 800f2b2:	4610      	mov	r0, r2
 800f2b4:	e7f9      	b.n	800f2aa <strncmp+0x1c>
	...

0800f2b8 <__assert_func>:
 800f2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2ba:	4614      	mov	r4, r2
 800f2bc:	461a      	mov	r2, r3
 800f2be:	4b09      	ldr	r3, [pc, #36]	; (800f2e4 <__assert_func+0x2c>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	4605      	mov	r5, r0
 800f2c4:	68d8      	ldr	r0, [r3, #12]
 800f2c6:	b14c      	cbz	r4, 800f2dc <__assert_func+0x24>
 800f2c8:	4b07      	ldr	r3, [pc, #28]	; (800f2e8 <__assert_func+0x30>)
 800f2ca:	9100      	str	r1, [sp, #0]
 800f2cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2d0:	4906      	ldr	r1, [pc, #24]	; (800f2ec <__assert_func+0x34>)
 800f2d2:	462b      	mov	r3, r5
 800f2d4:	f000 f8e4 	bl	800f4a0 <fiprintf>
 800f2d8:	f000 fe12 	bl	800ff00 <abort>
 800f2dc:	4b04      	ldr	r3, [pc, #16]	; (800f2f0 <__assert_func+0x38>)
 800f2de:	461c      	mov	r4, r3
 800f2e0:	e7f3      	b.n	800f2ca <__assert_func+0x12>
 800f2e2:	bf00      	nop
 800f2e4:	2000002c 	.word	0x2000002c
 800f2e8:	080140b2 	.word	0x080140b2
 800f2ec:	080140bf 	.word	0x080140bf
 800f2f0:	080140ed 	.word	0x080140ed

0800f2f4 <std>:
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	b510      	push	{r4, lr}
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	e9c0 3300 	strd	r3, r3, [r0]
 800f2fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f302:	6083      	str	r3, [r0, #8]
 800f304:	8181      	strh	r1, [r0, #12]
 800f306:	6643      	str	r3, [r0, #100]	; 0x64
 800f308:	81c2      	strh	r2, [r0, #14]
 800f30a:	6183      	str	r3, [r0, #24]
 800f30c:	4619      	mov	r1, r3
 800f30e:	2208      	movs	r2, #8
 800f310:	305c      	adds	r0, #92	; 0x5c
 800f312:	f7ff ff51 	bl	800f1b8 <memset>
 800f316:	4b05      	ldr	r3, [pc, #20]	; (800f32c <std+0x38>)
 800f318:	6263      	str	r3, [r4, #36]	; 0x24
 800f31a:	4b05      	ldr	r3, [pc, #20]	; (800f330 <std+0x3c>)
 800f31c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f31e:	4b05      	ldr	r3, [pc, #20]	; (800f334 <std+0x40>)
 800f320:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f322:	4b05      	ldr	r3, [pc, #20]	; (800f338 <std+0x44>)
 800f324:	6224      	str	r4, [r4, #32]
 800f326:	6323      	str	r3, [r4, #48]	; 0x30
 800f328:	bd10      	pop	{r4, pc}
 800f32a:	bf00      	nop
 800f32c:	0800fcd5 	.word	0x0800fcd5
 800f330:	0800fcf7 	.word	0x0800fcf7
 800f334:	0800fd2f 	.word	0x0800fd2f
 800f338:	0800fd53 	.word	0x0800fd53

0800f33c <_cleanup_r>:
 800f33c:	4901      	ldr	r1, [pc, #4]	; (800f344 <_cleanup_r+0x8>)
 800f33e:	f000 b8c1 	b.w	800f4c4 <_fwalk_reent>
 800f342:	bf00      	nop
 800f344:	0801003d 	.word	0x0801003d

0800f348 <__sfmoreglue>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	2268      	movs	r2, #104	; 0x68
 800f34c:	1e4d      	subs	r5, r1, #1
 800f34e:	4355      	muls	r5, r2
 800f350:	460e      	mov	r6, r1
 800f352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f356:	f000 f94b 	bl	800f5f0 <_malloc_r>
 800f35a:	4604      	mov	r4, r0
 800f35c:	b140      	cbz	r0, 800f370 <__sfmoreglue+0x28>
 800f35e:	2100      	movs	r1, #0
 800f360:	e9c0 1600 	strd	r1, r6, [r0]
 800f364:	300c      	adds	r0, #12
 800f366:	60a0      	str	r0, [r4, #8]
 800f368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f36c:	f7ff ff24 	bl	800f1b8 <memset>
 800f370:	4620      	mov	r0, r4
 800f372:	bd70      	pop	{r4, r5, r6, pc}

0800f374 <__sfp_lock_acquire>:
 800f374:	4801      	ldr	r0, [pc, #4]	; (800f37c <__sfp_lock_acquire+0x8>)
 800f376:	f000 b8c5 	b.w	800f504 <__retarget_lock_acquire_recursive>
 800f37a:	bf00      	nop
 800f37c:	20008801 	.word	0x20008801

0800f380 <__sfp_lock_release>:
 800f380:	4801      	ldr	r0, [pc, #4]	; (800f388 <__sfp_lock_release+0x8>)
 800f382:	f000 b8c0 	b.w	800f506 <__retarget_lock_release_recursive>
 800f386:	bf00      	nop
 800f388:	20008801 	.word	0x20008801

0800f38c <__sinit_lock_acquire>:
 800f38c:	4801      	ldr	r0, [pc, #4]	; (800f394 <__sinit_lock_acquire+0x8>)
 800f38e:	f000 b8b9 	b.w	800f504 <__retarget_lock_acquire_recursive>
 800f392:	bf00      	nop
 800f394:	20008802 	.word	0x20008802

0800f398 <__sinit_lock_release>:
 800f398:	4801      	ldr	r0, [pc, #4]	; (800f3a0 <__sinit_lock_release+0x8>)
 800f39a:	f000 b8b4 	b.w	800f506 <__retarget_lock_release_recursive>
 800f39e:	bf00      	nop
 800f3a0:	20008802 	.word	0x20008802

0800f3a4 <__sinit>:
 800f3a4:	b510      	push	{r4, lr}
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	f7ff fff0 	bl	800f38c <__sinit_lock_acquire>
 800f3ac:	69a3      	ldr	r3, [r4, #24]
 800f3ae:	b11b      	cbz	r3, 800f3b8 <__sinit+0x14>
 800f3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3b4:	f7ff bff0 	b.w	800f398 <__sinit_lock_release>
 800f3b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f3bc:	6523      	str	r3, [r4, #80]	; 0x50
 800f3be:	4b13      	ldr	r3, [pc, #76]	; (800f40c <__sinit+0x68>)
 800f3c0:	4a13      	ldr	r2, [pc, #76]	; (800f410 <__sinit+0x6c>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f3c6:	42a3      	cmp	r3, r4
 800f3c8:	bf04      	itt	eq
 800f3ca:	2301      	moveq	r3, #1
 800f3cc:	61a3      	streq	r3, [r4, #24]
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f000 f820 	bl	800f414 <__sfp>
 800f3d4:	6060      	str	r0, [r4, #4]
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f000 f81c 	bl	800f414 <__sfp>
 800f3dc:	60a0      	str	r0, [r4, #8]
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f000 f818 	bl	800f414 <__sfp>
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	60e0      	str	r0, [r4, #12]
 800f3e8:	2104      	movs	r1, #4
 800f3ea:	6860      	ldr	r0, [r4, #4]
 800f3ec:	f7ff ff82 	bl	800f2f4 <std>
 800f3f0:	68a0      	ldr	r0, [r4, #8]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	2109      	movs	r1, #9
 800f3f6:	f7ff ff7d 	bl	800f2f4 <std>
 800f3fa:	68e0      	ldr	r0, [r4, #12]
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	2112      	movs	r1, #18
 800f400:	f7ff ff78 	bl	800f2f4 <std>
 800f404:	2301      	movs	r3, #1
 800f406:	61a3      	str	r3, [r4, #24]
 800f408:	e7d2      	b.n	800f3b0 <__sinit+0xc>
 800f40a:	bf00      	nop
 800f40c:	0801403c 	.word	0x0801403c
 800f410:	0800f33d 	.word	0x0800f33d

0800f414 <__sfp>:
 800f414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f416:	4607      	mov	r7, r0
 800f418:	f7ff ffac 	bl	800f374 <__sfp_lock_acquire>
 800f41c:	4b1e      	ldr	r3, [pc, #120]	; (800f498 <__sfp+0x84>)
 800f41e:	681e      	ldr	r6, [r3, #0]
 800f420:	69b3      	ldr	r3, [r6, #24]
 800f422:	b913      	cbnz	r3, 800f42a <__sfp+0x16>
 800f424:	4630      	mov	r0, r6
 800f426:	f7ff ffbd 	bl	800f3a4 <__sinit>
 800f42a:	3648      	adds	r6, #72	; 0x48
 800f42c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f430:	3b01      	subs	r3, #1
 800f432:	d503      	bpl.n	800f43c <__sfp+0x28>
 800f434:	6833      	ldr	r3, [r6, #0]
 800f436:	b30b      	cbz	r3, 800f47c <__sfp+0x68>
 800f438:	6836      	ldr	r6, [r6, #0]
 800f43a:	e7f7      	b.n	800f42c <__sfp+0x18>
 800f43c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f440:	b9d5      	cbnz	r5, 800f478 <__sfp+0x64>
 800f442:	4b16      	ldr	r3, [pc, #88]	; (800f49c <__sfp+0x88>)
 800f444:	60e3      	str	r3, [r4, #12]
 800f446:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f44a:	6665      	str	r5, [r4, #100]	; 0x64
 800f44c:	f000 f859 	bl	800f502 <__retarget_lock_init_recursive>
 800f450:	f7ff ff96 	bl	800f380 <__sfp_lock_release>
 800f454:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f458:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f45c:	6025      	str	r5, [r4, #0]
 800f45e:	61a5      	str	r5, [r4, #24]
 800f460:	2208      	movs	r2, #8
 800f462:	4629      	mov	r1, r5
 800f464:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f468:	f7ff fea6 	bl	800f1b8 <memset>
 800f46c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f470:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f474:	4620      	mov	r0, r4
 800f476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f478:	3468      	adds	r4, #104	; 0x68
 800f47a:	e7d9      	b.n	800f430 <__sfp+0x1c>
 800f47c:	2104      	movs	r1, #4
 800f47e:	4638      	mov	r0, r7
 800f480:	f7ff ff62 	bl	800f348 <__sfmoreglue>
 800f484:	4604      	mov	r4, r0
 800f486:	6030      	str	r0, [r6, #0]
 800f488:	2800      	cmp	r0, #0
 800f48a:	d1d5      	bne.n	800f438 <__sfp+0x24>
 800f48c:	f7ff ff78 	bl	800f380 <__sfp_lock_release>
 800f490:	230c      	movs	r3, #12
 800f492:	603b      	str	r3, [r7, #0]
 800f494:	e7ee      	b.n	800f474 <__sfp+0x60>
 800f496:	bf00      	nop
 800f498:	0801403c 	.word	0x0801403c
 800f49c:	ffff0001 	.word	0xffff0001

0800f4a0 <fiprintf>:
 800f4a0:	b40e      	push	{r1, r2, r3}
 800f4a2:	b503      	push	{r0, r1, lr}
 800f4a4:	4601      	mov	r1, r0
 800f4a6:	ab03      	add	r3, sp, #12
 800f4a8:	4805      	ldr	r0, [pc, #20]	; (800f4c0 <fiprintf+0x20>)
 800f4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ae:	6800      	ldr	r0, [r0, #0]
 800f4b0:	9301      	str	r3, [sp, #4]
 800f4b2:	f000 f93b 	bl	800f72c <_vfiprintf_r>
 800f4b6:	b002      	add	sp, #8
 800f4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4bc:	b003      	add	sp, #12
 800f4be:	4770      	bx	lr
 800f4c0:	2000002c 	.word	0x2000002c

0800f4c4 <_fwalk_reent>:
 800f4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	4688      	mov	r8, r1
 800f4cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4d0:	2700      	movs	r7, #0
 800f4d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4d6:	f1b9 0901 	subs.w	r9, r9, #1
 800f4da:	d505      	bpl.n	800f4e8 <_fwalk_reent+0x24>
 800f4dc:	6824      	ldr	r4, [r4, #0]
 800f4de:	2c00      	cmp	r4, #0
 800f4e0:	d1f7      	bne.n	800f4d2 <_fwalk_reent+0xe>
 800f4e2:	4638      	mov	r0, r7
 800f4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e8:	89ab      	ldrh	r3, [r5, #12]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d907      	bls.n	800f4fe <_fwalk_reent+0x3a>
 800f4ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	d003      	beq.n	800f4fe <_fwalk_reent+0x3a>
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	47c0      	blx	r8
 800f4fc:	4307      	orrs	r7, r0
 800f4fe:	3568      	adds	r5, #104	; 0x68
 800f500:	e7e9      	b.n	800f4d6 <_fwalk_reent+0x12>

0800f502 <__retarget_lock_init_recursive>:
 800f502:	4770      	bx	lr

0800f504 <__retarget_lock_acquire_recursive>:
 800f504:	4770      	bx	lr

0800f506 <__retarget_lock_release_recursive>:
 800f506:	4770      	bx	lr

0800f508 <malloc>:
 800f508:	4b02      	ldr	r3, [pc, #8]	; (800f514 <malloc+0xc>)
 800f50a:	4601      	mov	r1, r0
 800f50c:	6818      	ldr	r0, [r3, #0]
 800f50e:	f000 b86f 	b.w	800f5f0 <_malloc_r>
 800f512:	bf00      	nop
 800f514:	2000002c 	.word	0x2000002c

0800f518 <_free_r>:
 800f518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f51a:	2900      	cmp	r1, #0
 800f51c:	d044      	beq.n	800f5a8 <_free_r+0x90>
 800f51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f522:	9001      	str	r0, [sp, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	f1a1 0404 	sub.w	r4, r1, #4
 800f52a:	bfb8      	it	lt
 800f52c:	18e4      	addlt	r4, r4, r3
 800f52e:	f000 fe39 	bl	80101a4 <__malloc_lock>
 800f532:	4a1e      	ldr	r2, [pc, #120]	; (800f5ac <_free_r+0x94>)
 800f534:	9801      	ldr	r0, [sp, #4]
 800f536:	6813      	ldr	r3, [r2, #0]
 800f538:	b933      	cbnz	r3, 800f548 <_free_r+0x30>
 800f53a:	6063      	str	r3, [r4, #4]
 800f53c:	6014      	str	r4, [r2, #0]
 800f53e:	b003      	add	sp, #12
 800f540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f544:	f000 be34 	b.w	80101b0 <__malloc_unlock>
 800f548:	42a3      	cmp	r3, r4
 800f54a:	d908      	bls.n	800f55e <_free_r+0x46>
 800f54c:	6825      	ldr	r5, [r4, #0]
 800f54e:	1961      	adds	r1, r4, r5
 800f550:	428b      	cmp	r3, r1
 800f552:	bf01      	itttt	eq
 800f554:	6819      	ldreq	r1, [r3, #0]
 800f556:	685b      	ldreq	r3, [r3, #4]
 800f558:	1949      	addeq	r1, r1, r5
 800f55a:	6021      	streq	r1, [r4, #0]
 800f55c:	e7ed      	b.n	800f53a <_free_r+0x22>
 800f55e:	461a      	mov	r2, r3
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	b10b      	cbz	r3, 800f568 <_free_r+0x50>
 800f564:	42a3      	cmp	r3, r4
 800f566:	d9fa      	bls.n	800f55e <_free_r+0x46>
 800f568:	6811      	ldr	r1, [r2, #0]
 800f56a:	1855      	adds	r5, r2, r1
 800f56c:	42a5      	cmp	r5, r4
 800f56e:	d10b      	bne.n	800f588 <_free_r+0x70>
 800f570:	6824      	ldr	r4, [r4, #0]
 800f572:	4421      	add	r1, r4
 800f574:	1854      	adds	r4, r2, r1
 800f576:	42a3      	cmp	r3, r4
 800f578:	6011      	str	r1, [r2, #0]
 800f57a:	d1e0      	bne.n	800f53e <_free_r+0x26>
 800f57c:	681c      	ldr	r4, [r3, #0]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	6053      	str	r3, [r2, #4]
 800f582:	4421      	add	r1, r4
 800f584:	6011      	str	r1, [r2, #0]
 800f586:	e7da      	b.n	800f53e <_free_r+0x26>
 800f588:	d902      	bls.n	800f590 <_free_r+0x78>
 800f58a:	230c      	movs	r3, #12
 800f58c:	6003      	str	r3, [r0, #0]
 800f58e:	e7d6      	b.n	800f53e <_free_r+0x26>
 800f590:	6825      	ldr	r5, [r4, #0]
 800f592:	1961      	adds	r1, r4, r5
 800f594:	428b      	cmp	r3, r1
 800f596:	bf04      	itt	eq
 800f598:	6819      	ldreq	r1, [r3, #0]
 800f59a:	685b      	ldreq	r3, [r3, #4]
 800f59c:	6063      	str	r3, [r4, #4]
 800f59e:	bf04      	itt	eq
 800f5a0:	1949      	addeq	r1, r1, r5
 800f5a2:	6021      	streq	r1, [r4, #0]
 800f5a4:	6054      	str	r4, [r2, #4]
 800f5a6:	e7ca      	b.n	800f53e <_free_r+0x26>
 800f5a8:	b003      	add	sp, #12
 800f5aa:	bd30      	pop	{r4, r5, pc}
 800f5ac:	20008804 	.word	0x20008804

0800f5b0 <sbrk_aligned>:
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	4e0e      	ldr	r6, [pc, #56]	; (800f5ec <sbrk_aligned+0x3c>)
 800f5b4:	460c      	mov	r4, r1
 800f5b6:	6831      	ldr	r1, [r6, #0]
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	b911      	cbnz	r1, 800f5c2 <sbrk_aligned+0x12>
 800f5bc:	f000 fb7a 	bl	800fcb4 <_sbrk_r>
 800f5c0:	6030      	str	r0, [r6, #0]
 800f5c2:	4621      	mov	r1, r4
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	f000 fb75 	bl	800fcb4 <_sbrk_r>
 800f5ca:	1c43      	adds	r3, r0, #1
 800f5cc:	d00a      	beq.n	800f5e4 <sbrk_aligned+0x34>
 800f5ce:	1cc4      	adds	r4, r0, #3
 800f5d0:	f024 0403 	bic.w	r4, r4, #3
 800f5d4:	42a0      	cmp	r0, r4
 800f5d6:	d007      	beq.n	800f5e8 <sbrk_aligned+0x38>
 800f5d8:	1a21      	subs	r1, r4, r0
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f000 fb6a 	bl	800fcb4 <_sbrk_r>
 800f5e0:	3001      	adds	r0, #1
 800f5e2:	d101      	bne.n	800f5e8 <sbrk_aligned+0x38>
 800f5e4:	f04f 34ff 	mov.w	r4, #4294967295
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	bd70      	pop	{r4, r5, r6, pc}
 800f5ec:	20008808 	.word	0x20008808

0800f5f0 <_malloc_r>:
 800f5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f4:	1ccd      	adds	r5, r1, #3
 800f5f6:	f025 0503 	bic.w	r5, r5, #3
 800f5fa:	3508      	adds	r5, #8
 800f5fc:	2d0c      	cmp	r5, #12
 800f5fe:	bf38      	it	cc
 800f600:	250c      	movcc	r5, #12
 800f602:	2d00      	cmp	r5, #0
 800f604:	4607      	mov	r7, r0
 800f606:	db01      	blt.n	800f60c <_malloc_r+0x1c>
 800f608:	42a9      	cmp	r1, r5
 800f60a:	d905      	bls.n	800f618 <_malloc_r+0x28>
 800f60c:	230c      	movs	r3, #12
 800f60e:	603b      	str	r3, [r7, #0]
 800f610:	2600      	movs	r6, #0
 800f612:	4630      	mov	r0, r6
 800f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f618:	4e2e      	ldr	r6, [pc, #184]	; (800f6d4 <_malloc_r+0xe4>)
 800f61a:	f000 fdc3 	bl	80101a4 <__malloc_lock>
 800f61e:	6833      	ldr	r3, [r6, #0]
 800f620:	461c      	mov	r4, r3
 800f622:	bb34      	cbnz	r4, 800f672 <_malloc_r+0x82>
 800f624:	4629      	mov	r1, r5
 800f626:	4638      	mov	r0, r7
 800f628:	f7ff ffc2 	bl	800f5b0 <sbrk_aligned>
 800f62c:	1c43      	adds	r3, r0, #1
 800f62e:	4604      	mov	r4, r0
 800f630:	d14d      	bne.n	800f6ce <_malloc_r+0xde>
 800f632:	6834      	ldr	r4, [r6, #0]
 800f634:	4626      	mov	r6, r4
 800f636:	2e00      	cmp	r6, #0
 800f638:	d140      	bne.n	800f6bc <_malloc_r+0xcc>
 800f63a:	6823      	ldr	r3, [r4, #0]
 800f63c:	4631      	mov	r1, r6
 800f63e:	4638      	mov	r0, r7
 800f640:	eb04 0803 	add.w	r8, r4, r3
 800f644:	f000 fb36 	bl	800fcb4 <_sbrk_r>
 800f648:	4580      	cmp	r8, r0
 800f64a:	d13a      	bne.n	800f6c2 <_malloc_r+0xd2>
 800f64c:	6821      	ldr	r1, [r4, #0]
 800f64e:	3503      	adds	r5, #3
 800f650:	1a6d      	subs	r5, r5, r1
 800f652:	f025 0503 	bic.w	r5, r5, #3
 800f656:	3508      	adds	r5, #8
 800f658:	2d0c      	cmp	r5, #12
 800f65a:	bf38      	it	cc
 800f65c:	250c      	movcc	r5, #12
 800f65e:	4629      	mov	r1, r5
 800f660:	4638      	mov	r0, r7
 800f662:	f7ff ffa5 	bl	800f5b0 <sbrk_aligned>
 800f666:	3001      	adds	r0, #1
 800f668:	d02b      	beq.n	800f6c2 <_malloc_r+0xd2>
 800f66a:	6823      	ldr	r3, [r4, #0]
 800f66c:	442b      	add	r3, r5
 800f66e:	6023      	str	r3, [r4, #0]
 800f670:	e00e      	b.n	800f690 <_malloc_r+0xa0>
 800f672:	6822      	ldr	r2, [r4, #0]
 800f674:	1b52      	subs	r2, r2, r5
 800f676:	d41e      	bmi.n	800f6b6 <_malloc_r+0xc6>
 800f678:	2a0b      	cmp	r2, #11
 800f67a:	d916      	bls.n	800f6aa <_malloc_r+0xba>
 800f67c:	1961      	adds	r1, r4, r5
 800f67e:	42a3      	cmp	r3, r4
 800f680:	6025      	str	r5, [r4, #0]
 800f682:	bf18      	it	ne
 800f684:	6059      	strne	r1, [r3, #4]
 800f686:	6863      	ldr	r3, [r4, #4]
 800f688:	bf08      	it	eq
 800f68a:	6031      	streq	r1, [r6, #0]
 800f68c:	5162      	str	r2, [r4, r5]
 800f68e:	604b      	str	r3, [r1, #4]
 800f690:	4638      	mov	r0, r7
 800f692:	f104 060b 	add.w	r6, r4, #11
 800f696:	f000 fd8b 	bl	80101b0 <__malloc_unlock>
 800f69a:	f026 0607 	bic.w	r6, r6, #7
 800f69e:	1d23      	adds	r3, r4, #4
 800f6a0:	1af2      	subs	r2, r6, r3
 800f6a2:	d0b6      	beq.n	800f612 <_malloc_r+0x22>
 800f6a4:	1b9b      	subs	r3, r3, r6
 800f6a6:	50a3      	str	r3, [r4, r2]
 800f6a8:	e7b3      	b.n	800f612 <_malloc_r+0x22>
 800f6aa:	6862      	ldr	r2, [r4, #4]
 800f6ac:	42a3      	cmp	r3, r4
 800f6ae:	bf0c      	ite	eq
 800f6b0:	6032      	streq	r2, [r6, #0]
 800f6b2:	605a      	strne	r2, [r3, #4]
 800f6b4:	e7ec      	b.n	800f690 <_malloc_r+0xa0>
 800f6b6:	4623      	mov	r3, r4
 800f6b8:	6864      	ldr	r4, [r4, #4]
 800f6ba:	e7b2      	b.n	800f622 <_malloc_r+0x32>
 800f6bc:	4634      	mov	r4, r6
 800f6be:	6876      	ldr	r6, [r6, #4]
 800f6c0:	e7b9      	b.n	800f636 <_malloc_r+0x46>
 800f6c2:	230c      	movs	r3, #12
 800f6c4:	603b      	str	r3, [r7, #0]
 800f6c6:	4638      	mov	r0, r7
 800f6c8:	f000 fd72 	bl	80101b0 <__malloc_unlock>
 800f6cc:	e7a1      	b.n	800f612 <_malloc_r+0x22>
 800f6ce:	6025      	str	r5, [r4, #0]
 800f6d0:	e7de      	b.n	800f690 <_malloc_r+0xa0>
 800f6d2:	bf00      	nop
 800f6d4:	20008804 	.word	0x20008804

0800f6d8 <__sfputc_r>:
 800f6d8:	6893      	ldr	r3, [r2, #8]
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	b410      	push	{r4}
 800f6e0:	6093      	str	r3, [r2, #8]
 800f6e2:	da08      	bge.n	800f6f6 <__sfputc_r+0x1e>
 800f6e4:	6994      	ldr	r4, [r2, #24]
 800f6e6:	42a3      	cmp	r3, r4
 800f6e8:	db01      	blt.n	800f6ee <__sfputc_r+0x16>
 800f6ea:	290a      	cmp	r1, #10
 800f6ec:	d103      	bne.n	800f6f6 <__sfputc_r+0x1e>
 800f6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6f2:	f000 bb33 	b.w	800fd5c <__swbuf_r>
 800f6f6:	6813      	ldr	r3, [r2, #0]
 800f6f8:	1c58      	adds	r0, r3, #1
 800f6fa:	6010      	str	r0, [r2, #0]
 800f6fc:	7019      	strb	r1, [r3, #0]
 800f6fe:	4608      	mov	r0, r1
 800f700:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <__sfputs_r>:
 800f706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f708:	4606      	mov	r6, r0
 800f70a:	460f      	mov	r7, r1
 800f70c:	4614      	mov	r4, r2
 800f70e:	18d5      	adds	r5, r2, r3
 800f710:	42ac      	cmp	r4, r5
 800f712:	d101      	bne.n	800f718 <__sfputs_r+0x12>
 800f714:	2000      	movs	r0, #0
 800f716:	e007      	b.n	800f728 <__sfputs_r+0x22>
 800f718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f71c:	463a      	mov	r2, r7
 800f71e:	4630      	mov	r0, r6
 800f720:	f7ff ffda 	bl	800f6d8 <__sfputc_r>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d1f3      	bne.n	800f710 <__sfputs_r+0xa>
 800f728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f72c <_vfiprintf_r>:
 800f72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f730:	460d      	mov	r5, r1
 800f732:	b09d      	sub	sp, #116	; 0x74
 800f734:	4614      	mov	r4, r2
 800f736:	4698      	mov	r8, r3
 800f738:	4606      	mov	r6, r0
 800f73a:	b118      	cbz	r0, 800f744 <_vfiprintf_r+0x18>
 800f73c:	6983      	ldr	r3, [r0, #24]
 800f73e:	b90b      	cbnz	r3, 800f744 <_vfiprintf_r+0x18>
 800f740:	f7ff fe30 	bl	800f3a4 <__sinit>
 800f744:	4b89      	ldr	r3, [pc, #548]	; (800f96c <_vfiprintf_r+0x240>)
 800f746:	429d      	cmp	r5, r3
 800f748:	d11b      	bne.n	800f782 <_vfiprintf_r+0x56>
 800f74a:	6875      	ldr	r5, [r6, #4]
 800f74c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f74e:	07d9      	lsls	r1, r3, #31
 800f750:	d405      	bmi.n	800f75e <_vfiprintf_r+0x32>
 800f752:	89ab      	ldrh	r3, [r5, #12]
 800f754:	059a      	lsls	r2, r3, #22
 800f756:	d402      	bmi.n	800f75e <_vfiprintf_r+0x32>
 800f758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f75a:	f7ff fed3 	bl	800f504 <__retarget_lock_acquire_recursive>
 800f75e:	89ab      	ldrh	r3, [r5, #12]
 800f760:	071b      	lsls	r3, r3, #28
 800f762:	d501      	bpl.n	800f768 <_vfiprintf_r+0x3c>
 800f764:	692b      	ldr	r3, [r5, #16]
 800f766:	b9eb      	cbnz	r3, 800f7a4 <_vfiprintf_r+0x78>
 800f768:	4629      	mov	r1, r5
 800f76a:	4630      	mov	r0, r6
 800f76c:	f000 fb5a 	bl	800fe24 <__swsetup_r>
 800f770:	b1c0      	cbz	r0, 800f7a4 <_vfiprintf_r+0x78>
 800f772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f774:	07dc      	lsls	r4, r3, #31
 800f776:	d50e      	bpl.n	800f796 <_vfiprintf_r+0x6a>
 800f778:	f04f 30ff 	mov.w	r0, #4294967295
 800f77c:	b01d      	add	sp, #116	; 0x74
 800f77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f782:	4b7b      	ldr	r3, [pc, #492]	; (800f970 <_vfiprintf_r+0x244>)
 800f784:	429d      	cmp	r5, r3
 800f786:	d101      	bne.n	800f78c <_vfiprintf_r+0x60>
 800f788:	68b5      	ldr	r5, [r6, #8]
 800f78a:	e7df      	b.n	800f74c <_vfiprintf_r+0x20>
 800f78c:	4b79      	ldr	r3, [pc, #484]	; (800f974 <_vfiprintf_r+0x248>)
 800f78e:	429d      	cmp	r5, r3
 800f790:	bf08      	it	eq
 800f792:	68f5      	ldreq	r5, [r6, #12]
 800f794:	e7da      	b.n	800f74c <_vfiprintf_r+0x20>
 800f796:	89ab      	ldrh	r3, [r5, #12]
 800f798:	0598      	lsls	r0, r3, #22
 800f79a:	d4ed      	bmi.n	800f778 <_vfiprintf_r+0x4c>
 800f79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f79e:	f7ff feb2 	bl	800f506 <__retarget_lock_release_recursive>
 800f7a2:	e7e9      	b.n	800f778 <_vfiprintf_r+0x4c>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a8:	2320      	movs	r3, #32
 800f7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7b2:	2330      	movs	r3, #48	; 0x30
 800f7b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f978 <_vfiprintf_r+0x24c>
 800f7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7bc:	f04f 0901 	mov.w	r9, #1
 800f7c0:	4623      	mov	r3, r4
 800f7c2:	469a      	mov	sl, r3
 800f7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7c8:	b10a      	cbz	r2, 800f7ce <_vfiprintf_r+0xa2>
 800f7ca:	2a25      	cmp	r2, #37	; 0x25
 800f7cc:	d1f9      	bne.n	800f7c2 <_vfiprintf_r+0x96>
 800f7ce:	ebba 0b04 	subs.w	fp, sl, r4
 800f7d2:	d00b      	beq.n	800f7ec <_vfiprintf_r+0xc0>
 800f7d4:	465b      	mov	r3, fp
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	4629      	mov	r1, r5
 800f7da:	4630      	mov	r0, r6
 800f7dc:	f7ff ff93 	bl	800f706 <__sfputs_r>
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	f000 80aa 	beq.w	800f93a <_vfiprintf_r+0x20e>
 800f7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7e8:	445a      	add	r2, fp
 800f7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800f7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 80a2 	beq.w	800f93a <_vfiprintf_r+0x20e>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f800:	f10a 0a01 	add.w	sl, sl, #1
 800f804:	9304      	str	r3, [sp, #16]
 800f806:	9307      	str	r3, [sp, #28]
 800f808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f80c:	931a      	str	r3, [sp, #104]	; 0x68
 800f80e:	4654      	mov	r4, sl
 800f810:	2205      	movs	r2, #5
 800f812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f816:	4858      	ldr	r0, [pc, #352]	; (800f978 <_vfiprintf_r+0x24c>)
 800f818:	f7f0 fd2a 	bl	8000270 <memchr>
 800f81c:	9a04      	ldr	r2, [sp, #16]
 800f81e:	b9d8      	cbnz	r0, 800f858 <_vfiprintf_r+0x12c>
 800f820:	06d1      	lsls	r1, r2, #27
 800f822:	bf44      	itt	mi
 800f824:	2320      	movmi	r3, #32
 800f826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f82a:	0713      	lsls	r3, r2, #28
 800f82c:	bf44      	itt	mi
 800f82e:	232b      	movmi	r3, #43	; 0x2b
 800f830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f834:	f89a 3000 	ldrb.w	r3, [sl]
 800f838:	2b2a      	cmp	r3, #42	; 0x2a
 800f83a:	d015      	beq.n	800f868 <_vfiprintf_r+0x13c>
 800f83c:	9a07      	ldr	r2, [sp, #28]
 800f83e:	4654      	mov	r4, sl
 800f840:	2000      	movs	r0, #0
 800f842:	f04f 0c0a 	mov.w	ip, #10
 800f846:	4621      	mov	r1, r4
 800f848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f84c:	3b30      	subs	r3, #48	; 0x30
 800f84e:	2b09      	cmp	r3, #9
 800f850:	d94e      	bls.n	800f8f0 <_vfiprintf_r+0x1c4>
 800f852:	b1b0      	cbz	r0, 800f882 <_vfiprintf_r+0x156>
 800f854:	9207      	str	r2, [sp, #28]
 800f856:	e014      	b.n	800f882 <_vfiprintf_r+0x156>
 800f858:	eba0 0308 	sub.w	r3, r0, r8
 800f85c:	fa09 f303 	lsl.w	r3, r9, r3
 800f860:	4313      	orrs	r3, r2
 800f862:	9304      	str	r3, [sp, #16]
 800f864:	46a2      	mov	sl, r4
 800f866:	e7d2      	b.n	800f80e <_vfiprintf_r+0xe2>
 800f868:	9b03      	ldr	r3, [sp, #12]
 800f86a:	1d19      	adds	r1, r3, #4
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	9103      	str	r1, [sp, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	bfbb      	ittet	lt
 800f874:	425b      	neglt	r3, r3
 800f876:	f042 0202 	orrlt.w	r2, r2, #2
 800f87a:	9307      	strge	r3, [sp, #28]
 800f87c:	9307      	strlt	r3, [sp, #28]
 800f87e:	bfb8      	it	lt
 800f880:	9204      	strlt	r2, [sp, #16]
 800f882:	7823      	ldrb	r3, [r4, #0]
 800f884:	2b2e      	cmp	r3, #46	; 0x2e
 800f886:	d10c      	bne.n	800f8a2 <_vfiprintf_r+0x176>
 800f888:	7863      	ldrb	r3, [r4, #1]
 800f88a:	2b2a      	cmp	r3, #42	; 0x2a
 800f88c:	d135      	bne.n	800f8fa <_vfiprintf_r+0x1ce>
 800f88e:	9b03      	ldr	r3, [sp, #12]
 800f890:	1d1a      	adds	r2, r3, #4
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	9203      	str	r2, [sp, #12]
 800f896:	2b00      	cmp	r3, #0
 800f898:	bfb8      	it	lt
 800f89a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f89e:	3402      	adds	r4, #2
 800f8a0:	9305      	str	r3, [sp, #20]
 800f8a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f988 <_vfiprintf_r+0x25c>
 800f8a6:	7821      	ldrb	r1, [r4, #0]
 800f8a8:	2203      	movs	r2, #3
 800f8aa:	4650      	mov	r0, sl
 800f8ac:	f7f0 fce0 	bl	8000270 <memchr>
 800f8b0:	b140      	cbz	r0, 800f8c4 <_vfiprintf_r+0x198>
 800f8b2:	2340      	movs	r3, #64	; 0x40
 800f8b4:	eba0 000a 	sub.w	r0, r0, sl
 800f8b8:	fa03 f000 	lsl.w	r0, r3, r0
 800f8bc:	9b04      	ldr	r3, [sp, #16]
 800f8be:	4303      	orrs	r3, r0
 800f8c0:	3401      	adds	r4, #1
 800f8c2:	9304      	str	r3, [sp, #16]
 800f8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c8:	482c      	ldr	r0, [pc, #176]	; (800f97c <_vfiprintf_r+0x250>)
 800f8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8ce:	2206      	movs	r2, #6
 800f8d0:	f7f0 fcce 	bl	8000270 <memchr>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d03f      	beq.n	800f958 <_vfiprintf_r+0x22c>
 800f8d8:	4b29      	ldr	r3, [pc, #164]	; (800f980 <_vfiprintf_r+0x254>)
 800f8da:	bb1b      	cbnz	r3, 800f924 <_vfiprintf_r+0x1f8>
 800f8dc:	9b03      	ldr	r3, [sp, #12]
 800f8de:	3307      	adds	r3, #7
 800f8e0:	f023 0307 	bic.w	r3, r3, #7
 800f8e4:	3308      	adds	r3, #8
 800f8e6:	9303      	str	r3, [sp, #12]
 800f8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ea:	443b      	add	r3, r7
 800f8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f8ee:	e767      	b.n	800f7c0 <_vfiprintf_r+0x94>
 800f8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8f4:	460c      	mov	r4, r1
 800f8f6:	2001      	movs	r0, #1
 800f8f8:	e7a5      	b.n	800f846 <_vfiprintf_r+0x11a>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	3401      	adds	r4, #1
 800f8fe:	9305      	str	r3, [sp, #20]
 800f900:	4619      	mov	r1, r3
 800f902:	f04f 0c0a 	mov.w	ip, #10
 800f906:	4620      	mov	r0, r4
 800f908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f90c:	3a30      	subs	r2, #48	; 0x30
 800f90e:	2a09      	cmp	r2, #9
 800f910:	d903      	bls.n	800f91a <_vfiprintf_r+0x1ee>
 800f912:	2b00      	cmp	r3, #0
 800f914:	d0c5      	beq.n	800f8a2 <_vfiprintf_r+0x176>
 800f916:	9105      	str	r1, [sp, #20]
 800f918:	e7c3      	b.n	800f8a2 <_vfiprintf_r+0x176>
 800f91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f91e:	4604      	mov	r4, r0
 800f920:	2301      	movs	r3, #1
 800f922:	e7f0      	b.n	800f906 <_vfiprintf_r+0x1da>
 800f924:	ab03      	add	r3, sp, #12
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	462a      	mov	r2, r5
 800f92a:	4b16      	ldr	r3, [pc, #88]	; (800f984 <_vfiprintf_r+0x258>)
 800f92c:	a904      	add	r1, sp, #16
 800f92e:	4630      	mov	r0, r6
 800f930:	f3af 8000 	nop.w
 800f934:	4607      	mov	r7, r0
 800f936:	1c78      	adds	r0, r7, #1
 800f938:	d1d6      	bne.n	800f8e8 <_vfiprintf_r+0x1bc>
 800f93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f93c:	07d9      	lsls	r1, r3, #31
 800f93e:	d405      	bmi.n	800f94c <_vfiprintf_r+0x220>
 800f940:	89ab      	ldrh	r3, [r5, #12]
 800f942:	059a      	lsls	r2, r3, #22
 800f944:	d402      	bmi.n	800f94c <_vfiprintf_r+0x220>
 800f946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f948:	f7ff fddd 	bl	800f506 <__retarget_lock_release_recursive>
 800f94c:	89ab      	ldrh	r3, [r5, #12]
 800f94e:	065b      	lsls	r3, r3, #25
 800f950:	f53f af12 	bmi.w	800f778 <_vfiprintf_r+0x4c>
 800f954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f956:	e711      	b.n	800f77c <_vfiprintf_r+0x50>
 800f958:	ab03      	add	r3, sp, #12
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	462a      	mov	r2, r5
 800f95e:	4b09      	ldr	r3, [pc, #36]	; (800f984 <_vfiprintf_r+0x258>)
 800f960:	a904      	add	r1, sp, #16
 800f962:	4630      	mov	r0, r6
 800f964:	f000 f880 	bl	800fa68 <_printf_i>
 800f968:	e7e4      	b.n	800f934 <_vfiprintf_r+0x208>
 800f96a:	bf00      	nop
 800f96c:	08014110 	.word	0x08014110
 800f970:	08014130 	.word	0x08014130
 800f974:	080140f0 	.word	0x080140f0
 800f978:	08014150 	.word	0x08014150
 800f97c:	0801415a 	.word	0x0801415a
 800f980:	00000000 	.word	0x00000000
 800f984:	0800f707 	.word	0x0800f707
 800f988:	08014156 	.word	0x08014156

0800f98c <_printf_common>:
 800f98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f990:	4616      	mov	r6, r2
 800f992:	4699      	mov	r9, r3
 800f994:	688a      	ldr	r2, [r1, #8]
 800f996:	690b      	ldr	r3, [r1, #16]
 800f998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f99c:	4293      	cmp	r3, r2
 800f99e:	bfb8      	it	lt
 800f9a0:	4613      	movlt	r3, r2
 800f9a2:	6033      	str	r3, [r6, #0]
 800f9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9a8:	4607      	mov	r7, r0
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	b10a      	cbz	r2, 800f9b2 <_printf_common+0x26>
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	6033      	str	r3, [r6, #0]
 800f9b2:	6823      	ldr	r3, [r4, #0]
 800f9b4:	0699      	lsls	r1, r3, #26
 800f9b6:	bf42      	ittt	mi
 800f9b8:	6833      	ldrmi	r3, [r6, #0]
 800f9ba:	3302      	addmi	r3, #2
 800f9bc:	6033      	strmi	r3, [r6, #0]
 800f9be:	6825      	ldr	r5, [r4, #0]
 800f9c0:	f015 0506 	ands.w	r5, r5, #6
 800f9c4:	d106      	bne.n	800f9d4 <_printf_common+0x48>
 800f9c6:	f104 0a19 	add.w	sl, r4, #25
 800f9ca:	68e3      	ldr	r3, [r4, #12]
 800f9cc:	6832      	ldr	r2, [r6, #0]
 800f9ce:	1a9b      	subs	r3, r3, r2
 800f9d0:	42ab      	cmp	r3, r5
 800f9d2:	dc26      	bgt.n	800fa22 <_printf_common+0x96>
 800f9d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9d8:	1e13      	subs	r3, r2, #0
 800f9da:	6822      	ldr	r2, [r4, #0]
 800f9dc:	bf18      	it	ne
 800f9de:	2301      	movne	r3, #1
 800f9e0:	0692      	lsls	r2, r2, #26
 800f9e2:	d42b      	bmi.n	800fa3c <_printf_common+0xb0>
 800f9e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9e8:	4649      	mov	r1, r9
 800f9ea:	4638      	mov	r0, r7
 800f9ec:	47c0      	blx	r8
 800f9ee:	3001      	adds	r0, #1
 800f9f0:	d01e      	beq.n	800fa30 <_printf_common+0xa4>
 800f9f2:	6823      	ldr	r3, [r4, #0]
 800f9f4:	68e5      	ldr	r5, [r4, #12]
 800f9f6:	6832      	ldr	r2, [r6, #0]
 800f9f8:	f003 0306 	and.w	r3, r3, #6
 800f9fc:	2b04      	cmp	r3, #4
 800f9fe:	bf08      	it	eq
 800fa00:	1aad      	subeq	r5, r5, r2
 800fa02:	68a3      	ldr	r3, [r4, #8]
 800fa04:	6922      	ldr	r2, [r4, #16]
 800fa06:	bf0c      	ite	eq
 800fa08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa0c:	2500      	movne	r5, #0
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	bfc4      	itt	gt
 800fa12:	1a9b      	subgt	r3, r3, r2
 800fa14:	18ed      	addgt	r5, r5, r3
 800fa16:	2600      	movs	r6, #0
 800fa18:	341a      	adds	r4, #26
 800fa1a:	42b5      	cmp	r5, r6
 800fa1c:	d11a      	bne.n	800fa54 <_printf_common+0xc8>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	e008      	b.n	800fa34 <_printf_common+0xa8>
 800fa22:	2301      	movs	r3, #1
 800fa24:	4652      	mov	r2, sl
 800fa26:	4649      	mov	r1, r9
 800fa28:	4638      	mov	r0, r7
 800fa2a:	47c0      	blx	r8
 800fa2c:	3001      	adds	r0, #1
 800fa2e:	d103      	bne.n	800fa38 <_printf_common+0xac>
 800fa30:	f04f 30ff 	mov.w	r0, #4294967295
 800fa34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa38:	3501      	adds	r5, #1
 800fa3a:	e7c6      	b.n	800f9ca <_printf_common+0x3e>
 800fa3c:	18e1      	adds	r1, r4, r3
 800fa3e:	1c5a      	adds	r2, r3, #1
 800fa40:	2030      	movs	r0, #48	; 0x30
 800fa42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa46:	4422      	add	r2, r4
 800fa48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa50:	3302      	adds	r3, #2
 800fa52:	e7c7      	b.n	800f9e4 <_printf_common+0x58>
 800fa54:	2301      	movs	r3, #1
 800fa56:	4622      	mov	r2, r4
 800fa58:	4649      	mov	r1, r9
 800fa5a:	4638      	mov	r0, r7
 800fa5c:	47c0      	blx	r8
 800fa5e:	3001      	adds	r0, #1
 800fa60:	d0e6      	beq.n	800fa30 <_printf_common+0xa4>
 800fa62:	3601      	adds	r6, #1
 800fa64:	e7d9      	b.n	800fa1a <_printf_common+0x8e>
	...

0800fa68 <_printf_i>:
 800fa68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa6c:	7e0f      	ldrb	r7, [r1, #24]
 800fa6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa70:	2f78      	cmp	r7, #120	; 0x78
 800fa72:	4691      	mov	r9, r2
 800fa74:	4680      	mov	r8, r0
 800fa76:	460c      	mov	r4, r1
 800fa78:	469a      	mov	sl, r3
 800fa7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa7e:	d807      	bhi.n	800fa90 <_printf_i+0x28>
 800fa80:	2f62      	cmp	r7, #98	; 0x62
 800fa82:	d80a      	bhi.n	800fa9a <_printf_i+0x32>
 800fa84:	2f00      	cmp	r7, #0
 800fa86:	f000 80d8 	beq.w	800fc3a <_printf_i+0x1d2>
 800fa8a:	2f58      	cmp	r7, #88	; 0x58
 800fa8c:	f000 80a3 	beq.w	800fbd6 <_printf_i+0x16e>
 800fa90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa98:	e03a      	b.n	800fb10 <_printf_i+0xa8>
 800fa9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa9e:	2b15      	cmp	r3, #21
 800faa0:	d8f6      	bhi.n	800fa90 <_printf_i+0x28>
 800faa2:	a101      	add	r1, pc, #4	; (adr r1, 800faa8 <_printf_i+0x40>)
 800faa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800faa8:	0800fb01 	.word	0x0800fb01
 800faac:	0800fb15 	.word	0x0800fb15
 800fab0:	0800fa91 	.word	0x0800fa91
 800fab4:	0800fa91 	.word	0x0800fa91
 800fab8:	0800fa91 	.word	0x0800fa91
 800fabc:	0800fa91 	.word	0x0800fa91
 800fac0:	0800fb15 	.word	0x0800fb15
 800fac4:	0800fa91 	.word	0x0800fa91
 800fac8:	0800fa91 	.word	0x0800fa91
 800facc:	0800fa91 	.word	0x0800fa91
 800fad0:	0800fa91 	.word	0x0800fa91
 800fad4:	0800fc21 	.word	0x0800fc21
 800fad8:	0800fb45 	.word	0x0800fb45
 800fadc:	0800fc03 	.word	0x0800fc03
 800fae0:	0800fa91 	.word	0x0800fa91
 800fae4:	0800fa91 	.word	0x0800fa91
 800fae8:	0800fc43 	.word	0x0800fc43
 800faec:	0800fa91 	.word	0x0800fa91
 800faf0:	0800fb45 	.word	0x0800fb45
 800faf4:	0800fa91 	.word	0x0800fa91
 800faf8:	0800fa91 	.word	0x0800fa91
 800fafc:	0800fc0b 	.word	0x0800fc0b
 800fb00:	682b      	ldr	r3, [r5, #0]
 800fb02:	1d1a      	adds	r2, r3, #4
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	602a      	str	r2, [r5, #0]
 800fb08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb10:	2301      	movs	r3, #1
 800fb12:	e0a3      	b.n	800fc5c <_printf_i+0x1f4>
 800fb14:	6820      	ldr	r0, [r4, #0]
 800fb16:	6829      	ldr	r1, [r5, #0]
 800fb18:	0606      	lsls	r6, r0, #24
 800fb1a:	f101 0304 	add.w	r3, r1, #4
 800fb1e:	d50a      	bpl.n	800fb36 <_printf_i+0xce>
 800fb20:	680e      	ldr	r6, [r1, #0]
 800fb22:	602b      	str	r3, [r5, #0]
 800fb24:	2e00      	cmp	r6, #0
 800fb26:	da03      	bge.n	800fb30 <_printf_i+0xc8>
 800fb28:	232d      	movs	r3, #45	; 0x2d
 800fb2a:	4276      	negs	r6, r6
 800fb2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb30:	485e      	ldr	r0, [pc, #376]	; (800fcac <_printf_i+0x244>)
 800fb32:	230a      	movs	r3, #10
 800fb34:	e019      	b.n	800fb6a <_printf_i+0x102>
 800fb36:	680e      	ldr	r6, [r1, #0]
 800fb38:	602b      	str	r3, [r5, #0]
 800fb3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb3e:	bf18      	it	ne
 800fb40:	b236      	sxthne	r6, r6
 800fb42:	e7ef      	b.n	800fb24 <_printf_i+0xbc>
 800fb44:	682b      	ldr	r3, [r5, #0]
 800fb46:	6820      	ldr	r0, [r4, #0]
 800fb48:	1d19      	adds	r1, r3, #4
 800fb4a:	6029      	str	r1, [r5, #0]
 800fb4c:	0601      	lsls	r1, r0, #24
 800fb4e:	d501      	bpl.n	800fb54 <_printf_i+0xec>
 800fb50:	681e      	ldr	r6, [r3, #0]
 800fb52:	e002      	b.n	800fb5a <_printf_i+0xf2>
 800fb54:	0646      	lsls	r6, r0, #25
 800fb56:	d5fb      	bpl.n	800fb50 <_printf_i+0xe8>
 800fb58:	881e      	ldrh	r6, [r3, #0]
 800fb5a:	4854      	ldr	r0, [pc, #336]	; (800fcac <_printf_i+0x244>)
 800fb5c:	2f6f      	cmp	r7, #111	; 0x6f
 800fb5e:	bf0c      	ite	eq
 800fb60:	2308      	moveq	r3, #8
 800fb62:	230a      	movne	r3, #10
 800fb64:	2100      	movs	r1, #0
 800fb66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb6a:	6865      	ldr	r5, [r4, #4]
 800fb6c:	60a5      	str	r5, [r4, #8]
 800fb6e:	2d00      	cmp	r5, #0
 800fb70:	bfa2      	ittt	ge
 800fb72:	6821      	ldrge	r1, [r4, #0]
 800fb74:	f021 0104 	bicge.w	r1, r1, #4
 800fb78:	6021      	strge	r1, [r4, #0]
 800fb7a:	b90e      	cbnz	r6, 800fb80 <_printf_i+0x118>
 800fb7c:	2d00      	cmp	r5, #0
 800fb7e:	d04d      	beq.n	800fc1c <_printf_i+0x1b4>
 800fb80:	4615      	mov	r5, r2
 800fb82:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb86:	fb03 6711 	mls	r7, r3, r1, r6
 800fb8a:	5dc7      	ldrb	r7, [r0, r7]
 800fb8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb90:	4637      	mov	r7, r6
 800fb92:	42bb      	cmp	r3, r7
 800fb94:	460e      	mov	r6, r1
 800fb96:	d9f4      	bls.n	800fb82 <_printf_i+0x11a>
 800fb98:	2b08      	cmp	r3, #8
 800fb9a:	d10b      	bne.n	800fbb4 <_printf_i+0x14c>
 800fb9c:	6823      	ldr	r3, [r4, #0]
 800fb9e:	07de      	lsls	r6, r3, #31
 800fba0:	d508      	bpl.n	800fbb4 <_printf_i+0x14c>
 800fba2:	6923      	ldr	r3, [r4, #16]
 800fba4:	6861      	ldr	r1, [r4, #4]
 800fba6:	4299      	cmp	r1, r3
 800fba8:	bfde      	ittt	le
 800fbaa:	2330      	movle	r3, #48	; 0x30
 800fbac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbb4:	1b52      	subs	r2, r2, r5
 800fbb6:	6122      	str	r2, [r4, #16]
 800fbb8:	f8cd a000 	str.w	sl, [sp]
 800fbbc:	464b      	mov	r3, r9
 800fbbe:	aa03      	add	r2, sp, #12
 800fbc0:	4621      	mov	r1, r4
 800fbc2:	4640      	mov	r0, r8
 800fbc4:	f7ff fee2 	bl	800f98c <_printf_common>
 800fbc8:	3001      	adds	r0, #1
 800fbca:	d14c      	bne.n	800fc66 <_printf_i+0x1fe>
 800fbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd0:	b004      	add	sp, #16
 800fbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbd6:	4835      	ldr	r0, [pc, #212]	; (800fcac <_printf_i+0x244>)
 800fbd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fbdc:	6829      	ldr	r1, [r5, #0]
 800fbde:	6823      	ldr	r3, [r4, #0]
 800fbe0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbe4:	6029      	str	r1, [r5, #0]
 800fbe6:	061d      	lsls	r5, r3, #24
 800fbe8:	d514      	bpl.n	800fc14 <_printf_i+0x1ac>
 800fbea:	07df      	lsls	r7, r3, #31
 800fbec:	bf44      	itt	mi
 800fbee:	f043 0320 	orrmi.w	r3, r3, #32
 800fbf2:	6023      	strmi	r3, [r4, #0]
 800fbf4:	b91e      	cbnz	r6, 800fbfe <_printf_i+0x196>
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	f023 0320 	bic.w	r3, r3, #32
 800fbfc:	6023      	str	r3, [r4, #0]
 800fbfe:	2310      	movs	r3, #16
 800fc00:	e7b0      	b.n	800fb64 <_printf_i+0xfc>
 800fc02:	6823      	ldr	r3, [r4, #0]
 800fc04:	f043 0320 	orr.w	r3, r3, #32
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	2378      	movs	r3, #120	; 0x78
 800fc0c:	4828      	ldr	r0, [pc, #160]	; (800fcb0 <_printf_i+0x248>)
 800fc0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc12:	e7e3      	b.n	800fbdc <_printf_i+0x174>
 800fc14:	0659      	lsls	r1, r3, #25
 800fc16:	bf48      	it	mi
 800fc18:	b2b6      	uxthmi	r6, r6
 800fc1a:	e7e6      	b.n	800fbea <_printf_i+0x182>
 800fc1c:	4615      	mov	r5, r2
 800fc1e:	e7bb      	b.n	800fb98 <_printf_i+0x130>
 800fc20:	682b      	ldr	r3, [r5, #0]
 800fc22:	6826      	ldr	r6, [r4, #0]
 800fc24:	6961      	ldr	r1, [r4, #20]
 800fc26:	1d18      	adds	r0, r3, #4
 800fc28:	6028      	str	r0, [r5, #0]
 800fc2a:	0635      	lsls	r5, r6, #24
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	d501      	bpl.n	800fc34 <_printf_i+0x1cc>
 800fc30:	6019      	str	r1, [r3, #0]
 800fc32:	e002      	b.n	800fc3a <_printf_i+0x1d2>
 800fc34:	0670      	lsls	r0, r6, #25
 800fc36:	d5fb      	bpl.n	800fc30 <_printf_i+0x1c8>
 800fc38:	8019      	strh	r1, [r3, #0]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	6123      	str	r3, [r4, #16]
 800fc3e:	4615      	mov	r5, r2
 800fc40:	e7ba      	b.n	800fbb8 <_printf_i+0x150>
 800fc42:	682b      	ldr	r3, [r5, #0]
 800fc44:	1d1a      	adds	r2, r3, #4
 800fc46:	602a      	str	r2, [r5, #0]
 800fc48:	681d      	ldr	r5, [r3, #0]
 800fc4a:	6862      	ldr	r2, [r4, #4]
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	4628      	mov	r0, r5
 800fc50:	f7f0 fb0e 	bl	8000270 <memchr>
 800fc54:	b108      	cbz	r0, 800fc5a <_printf_i+0x1f2>
 800fc56:	1b40      	subs	r0, r0, r5
 800fc58:	6060      	str	r0, [r4, #4]
 800fc5a:	6863      	ldr	r3, [r4, #4]
 800fc5c:	6123      	str	r3, [r4, #16]
 800fc5e:	2300      	movs	r3, #0
 800fc60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc64:	e7a8      	b.n	800fbb8 <_printf_i+0x150>
 800fc66:	6923      	ldr	r3, [r4, #16]
 800fc68:	462a      	mov	r2, r5
 800fc6a:	4649      	mov	r1, r9
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	47d0      	blx	sl
 800fc70:	3001      	adds	r0, #1
 800fc72:	d0ab      	beq.n	800fbcc <_printf_i+0x164>
 800fc74:	6823      	ldr	r3, [r4, #0]
 800fc76:	079b      	lsls	r3, r3, #30
 800fc78:	d413      	bmi.n	800fca2 <_printf_i+0x23a>
 800fc7a:	68e0      	ldr	r0, [r4, #12]
 800fc7c:	9b03      	ldr	r3, [sp, #12]
 800fc7e:	4298      	cmp	r0, r3
 800fc80:	bfb8      	it	lt
 800fc82:	4618      	movlt	r0, r3
 800fc84:	e7a4      	b.n	800fbd0 <_printf_i+0x168>
 800fc86:	2301      	movs	r3, #1
 800fc88:	4632      	mov	r2, r6
 800fc8a:	4649      	mov	r1, r9
 800fc8c:	4640      	mov	r0, r8
 800fc8e:	47d0      	blx	sl
 800fc90:	3001      	adds	r0, #1
 800fc92:	d09b      	beq.n	800fbcc <_printf_i+0x164>
 800fc94:	3501      	adds	r5, #1
 800fc96:	68e3      	ldr	r3, [r4, #12]
 800fc98:	9903      	ldr	r1, [sp, #12]
 800fc9a:	1a5b      	subs	r3, r3, r1
 800fc9c:	42ab      	cmp	r3, r5
 800fc9e:	dcf2      	bgt.n	800fc86 <_printf_i+0x21e>
 800fca0:	e7eb      	b.n	800fc7a <_printf_i+0x212>
 800fca2:	2500      	movs	r5, #0
 800fca4:	f104 0619 	add.w	r6, r4, #25
 800fca8:	e7f5      	b.n	800fc96 <_printf_i+0x22e>
 800fcaa:	bf00      	nop
 800fcac:	08014161 	.word	0x08014161
 800fcb0:	08014172 	.word	0x08014172

0800fcb4 <_sbrk_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4d06      	ldr	r5, [pc, #24]	; (800fcd0 <_sbrk_r+0x1c>)
 800fcb8:	2300      	movs	r3, #0
 800fcba:	4604      	mov	r4, r0
 800fcbc:	4608      	mov	r0, r1
 800fcbe:	602b      	str	r3, [r5, #0]
 800fcc0:	f7f0 ff1a 	bl	8000af8 <_sbrk>
 800fcc4:	1c43      	adds	r3, r0, #1
 800fcc6:	d102      	bne.n	800fcce <_sbrk_r+0x1a>
 800fcc8:	682b      	ldr	r3, [r5, #0]
 800fcca:	b103      	cbz	r3, 800fcce <_sbrk_r+0x1a>
 800fccc:	6023      	str	r3, [r4, #0]
 800fcce:	bd38      	pop	{r3, r4, r5, pc}
 800fcd0:	200087fc 	.word	0x200087fc

0800fcd4 <__sread>:
 800fcd4:	b510      	push	{r4, lr}
 800fcd6:	460c      	mov	r4, r1
 800fcd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcdc:	f000 fa6e 	bl	80101bc <_read_r>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	bfab      	itete	ge
 800fce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fce6:	89a3      	ldrhlt	r3, [r4, #12]
 800fce8:	181b      	addge	r3, r3, r0
 800fcea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fcee:	bfac      	ite	ge
 800fcf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800fcf2:	81a3      	strhlt	r3, [r4, #12]
 800fcf4:	bd10      	pop	{r4, pc}

0800fcf6 <__swrite>:
 800fcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfa:	461f      	mov	r7, r3
 800fcfc:	898b      	ldrh	r3, [r1, #12]
 800fcfe:	05db      	lsls	r3, r3, #23
 800fd00:	4605      	mov	r5, r0
 800fd02:	460c      	mov	r4, r1
 800fd04:	4616      	mov	r6, r2
 800fd06:	d505      	bpl.n	800fd14 <__swrite+0x1e>
 800fd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd0c:	2302      	movs	r3, #2
 800fd0e:	2200      	movs	r2, #0
 800fd10:	f000 f9d0 	bl	80100b4 <_lseek_r>
 800fd14:	89a3      	ldrh	r3, [r4, #12]
 800fd16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd1e:	81a3      	strh	r3, [r4, #12]
 800fd20:	4632      	mov	r2, r6
 800fd22:	463b      	mov	r3, r7
 800fd24:	4628      	mov	r0, r5
 800fd26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2a:	f000 b869 	b.w	800fe00 <_write_r>

0800fd2e <__sseek>:
 800fd2e:	b510      	push	{r4, lr}
 800fd30:	460c      	mov	r4, r1
 800fd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd36:	f000 f9bd 	bl	80100b4 <_lseek_r>
 800fd3a:	1c43      	adds	r3, r0, #1
 800fd3c:	89a3      	ldrh	r3, [r4, #12]
 800fd3e:	bf15      	itete	ne
 800fd40:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd4a:	81a3      	strheq	r3, [r4, #12]
 800fd4c:	bf18      	it	ne
 800fd4e:	81a3      	strhne	r3, [r4, #12]
 800fd50:	bd10      	pop	{r4, pc}

0800fd52 <__sclose>:
 800fd52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd56:	f000 b8db 	b.w	800ff10 <_close_r>
	...

0800fd5c <__swbuf_r>:
 800fd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5e:	460e      	mov	r6, r1
 800fd60:	4614      	mov	r4, r2
 800fd62:	4605      	mov	r5, r0
 800fd64:	b118      	cbz	r0, 800fd6e <__swbuf_r+0x12>
 800fd66:	6983      	ldr	r3, [r0, #24]
 800fd68:	b90b      	cbnz	r3, 800fd6e <__swbuf_r+0x12>
 800fd6a:	f7ff fb1b 	bl	800f3a4 <__sinit>
 800fd6e:	4b21      	ldr	r3, [pc, #132]	; (800fdf4 <__swbuf_r+0x98>)
 800fd70:	429c      	cmp	r4, r3
 800fd72:	d12b      	bne.n	800fdcc <__swbuf_r+0x70>
 800fd74:	686c      	ldr	r4, [r5, #4]
 800fd76:	69a3      	ldr	r3, [r4, #24]
 800fd78:	60a3      	str	r3, [r4, #8]
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	071a      	lsls	r2, r3, #28
 800fd7e:	d52f      	bpl.n	800fde0 <__swbuf_r+0x84>
 800fd80:	6923      	ldr	r3, [r4, #16]
 800fd82:	b36b      	cbz	r3, 800fde0 <__swbuf_r+0x84>
 800fd84:	6923      	ldr	r3, [r4, #16]
 800fd86:	6820      	ldr	r0, [r4, #0]
 800fd88:	1ac0      	subs	r0, r0, r3
 800fd8a:	6963      	ldr	r3, [r4, #20]
 800fd8c:	b2f6      	uxtb	r6, r6
 800fd8e:	4283      	cmp	r3, r0
 800fd90:	4637      	mov	r7, r6
 800fd92:	dc04      	bgt.n	800fd9e <__swbuf_r+0x42>
 800fd94:	4621      	mov	r1, r4
 800fd96:	4628      	mov	r0, r5
 800fd98:	f000 f950 	bl	801003c <_fflush_r>
 800fd9c:	bb30      	cbnz	r0, 800fdec <__swbuf_r+0x90>
 800fd9e:	68a3      	ldr	r3, [r4, #8]
 800fda0:	3b01      	subs	r3, #1
 800fda2:	60a3      	str	r3, [r4, #8]
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	1c5a      	adds	r2, r3, #1
 800fda8:	6022      	str	r2, [r4, #0]
 800fdaa:	701e      	strb	r6, [r3, #0]
 800fdac:	6963      	ldr	r3, [r4, #20]
 800fdae:	3001      	adds	r0, #1
 800fdb0:	4283      	cmp	r3, r0
 800fdb2:	d004      	beq.n	800fdbe <__swbuf_r+0x62>
 800fdb4:	89a3      	ldrh	r3, [r4, #12]
 800fdb6:	07db      	lsls	r3, r3, #31
 800fdb8:	d506      	bpl.n	800fdc8 <__swbuf_r+0x6c>
 800fdba:	2e0a      	cmp	r6, #10
 800fdbc:	d104      	bne.n	800fdc8 <__swbuf_r+0x6c>
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	f000 f93b 	bl	801003c <_fflush_r>
 800fdc6:	b988      	cbnz	r0, 800fdec <__swbuf_r+0x90>
 800fdc8:	4638      	mov	r0, r7
 800fdca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdcc:	4b0a      	ldr	r3, [pc, #40]	; (800fdf8 <__swbuf_r+0x9c>)
 800fdce:	429c      	cmp	r4, r3
 800fdd0:	d101      	bne.n	800fdd6 <__swbuf_r+0x7a>
 800fdd2:	68ac      	ldr	r4, [r5, #8]
 800fdd4:	e7cf      	b.n	800fd76 <__swbuf_r+0x1a>
 800fdd6:	4b09      	ldr	r3, [pc, #36]	; (800fdfc <__swbuf_r+0xa0>)
 800fdd8:	429c      	cmp	r4, r3
 800fdda:	bf08      	it	eq
 800fddc:	68ec      	ldreq	r4, [r5, #12]
 800fdde:	e7ca      	b.n	800fd76 <__swbuf_r+0x1a>
 800fde0:	4621      	mov	r1, r4
 800fde2:	4628      	mov	r0, r5
 800fde4:	f000 f81e 	bl	800fe24 <__swsetup_r>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d0cb      	beq.n	800fd84 <__swbuf_r+0x28>
 800fdec:	f04f 37ff 	mov.w	r7, #4294967295
 800fdf0:	e7ea      	b.n	800fdc8 <__swbuf_r+0x6c>
 800fdf2:	bf00      	nop
 800fdf4:	08014110 	.word	0x08014110
 800fdf8:	08014130 	.word	0x08014130
 800fdfc:	080140f0 	.word	0x080140f0

0800fe00 <_write_r>:
 800fe00:	b538      	push	{r3, r4, r5, lr}
 800fe02:	4d07      	ldr	r5, [pc, #28]	; (800fe20 <_write_r+0x20>)
 800fe04:	4604      	mov	r4, r0
 800fe06:	4608      	mov	r0, r1
 800fe08:	4611      	mov	r1, r2
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	602a      	str	r2, [r5, #0]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	f7f0 fe21 	bl	8000a56 <_write>
 800fe14:	1c43      	adds	r3, r0, #1
 800fe16:	d102      	bne.n	800fe1e <_write_r+0x1e>
 800fe18:	682b      	ldr	r3, [r5, #0]
 800fe1a:	b103      	cbz	r3, 800fe1e <_write_r+0x1e>
 800fe1c:	6023      	str	r3, [r4, #0]
 800fe1e:	bd38      	pop	{r3, r4, r5, pc}
 800fe20:	200087fc 	.word	0x200087fc

0800fe24 <__swsetup_r>:
 800fe24:	4b32      	ldr	r3, [pc, #200]	; (800fef0 <__swsetup_r+0xcc>)
 800fe26:	b570      	push	{r4, r5, r6, lr}
 800fe28:	681d      	ldr	r5, [r3, #0]
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	460c      	mov	r4, r1
 800fe2e:	b125      	cbz	r5, 800fe3a <__swsetup_r+0x16>
 800fe30:	69ab      	ldr	r3, [r5, #24]
 800fe32:	b913      	cbnz	r3, 800fe3a <__swsetup_r+0x16>
 800fe34:	4628      	mov	r0, r5
 800fe36:	f7ff fab5 	bl	800f3a4 <__sinit>
 800fe3a:	4b2e      	ldr	r3, [pc, #184]	; (800fef4 <__swsetup_r+0xd0>)
 800fe3c:	429c      	cmp	r4, r3
 800fe3e:	d10f      	bne.n	800fe60 <__swsetup_r+0x3c>
 800fe40:	686c      	ldr	r4, [r5, #4]
 800fe42:	89a3      	ldrh	r3, [r4, #12]
 800fe44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe48:	0719      	lsls	r1, r3, #28
 800fe4a:	d42c      	bmi.n	800fea6 <__swsetup_r+0x82>
 800fe4c:	06dd      	lsls	r5, r3, #27
 800fe4e:	d411      	bmi.n	800fe74 <__swsetup_r+0x50>
 800fe50:	2309      	movs	r3, #9
 800fe52:	6033      	str	r3, [r6, #0]
 800fe54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe58:	81a3      	strh	r3, [r4, #12]
 800fe5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe5e:	e03e      	b.n	800fede <__swsetup_r+0xba>
 800fe60:	4b25      	ldr	r3, [pc, #148]	; (800fef8 <__swsetup_r+0xd4>)
 800fe62:	429c      	cmp	r4, r3
 800fe64:	d101      	bne.n	800fe6a <__swsetup_r+0x46>
 800fe66:	68ac      	ldr	r4, [r5, #8]
 800fe68:	e7eb      	b.n	800fe42 <__swsetup_r+0x1e>
 800fe6a:	4b24      	ldr	r3, [pc, #144]	; (800fefc <__swsetup_r+0xd8>)
 800fe6c:	429c      	cmp	r4, r3
 800fe6e:	bf08      	it	eq
 800fe70:	68ec      	ldreq	r4, [r5, #12]
 800fe72:	e7e6      	b.n	800fe42 <__swsetup_r+0x1e>
 800fe74:	0758      	lsls	r0, r3, #29
 800fe76:	d512      	bpl.n	800fe9e <__swsetup_r+0x7a>
 800fe78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe7a:	b141      	cbz	r1, 800fe8e <__swsetup_r+0x6a>
 800fe7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe80:	4299      	cmp	r1, r3
 800fe82:	d002      	beq.n	800fe8a <__swsetup_r+0x66>
 800fe84:	4630      	mov	r0, r6
 800fe86:	f7ff fb47 	bl	800f518 <_free_r>
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	6363      	str	r3, [r4, #52]	; 0x34
 800fe8e:	89a3      	ldrh	r3, [r4, #12]
 800fe90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe94:	81a3      	strh	r3, [r4, #12]
 800fe96:	2300      	movs	r3, #0
 800fe98:	6063      	str	r3, [r4, #4]
 800fe9a:	6923      	ldr	r3, [r4, #16]
 800fe9c:	6023      	str	r3, [r4, #0]
 800fe9e:	89a3      	ldrh	r3, [r4, #12]
 800fea0:	f043 0308 	orr.w	r3, r3, #8
 800fea4:	81a3      	strh	r3, [r4, #12]
 800fea6:	6923      	ldr	r3, [r4, #16]
 800fea8:	b94b      	cbnz	r3, 800febe <__swsetup_r+0x9a>
 800feaa:	89a3      	ldrh	r3, [r4, #12]
 800feac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800feb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800feb4:	d003      	beq.n	800febe <__swsetup_r+0x9a>
 800feb6:	4621      	mov	r1, r4
 800feb8:	4630      	mov	r0, r6
 800feba:	f000 f933 	bl	8010124 <__smakebuf_r>
 800febe:	89a0      	ldrh	r0, [r4, #12]
 800fec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fec4:	f010 0301 	ands.w	r3, r0, #1
 800fec8:	d00a      	beq.n	800fee0 <__swsetup_r+0xbc>
 800feca:	2300      	movs	r3, #0
 800fecc:	60a3      	str	r3, [r4, #8]
 800fece:	6963      	ldr	r3, [r4, #20]
 800fed0:	425b      	negs	r3, r3
 800fed2:	61a3      	str	r3, [r4, #24]
 800fed4:	6923      	ldr	r3, [r4, #16]
 800fed6:	b943      	cbnz	r3, 800feea <__swsetup_r+0xc6>
 800fed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fedc:	d1ba      	bne.n	800fe54 <__swsetup_r+0x30>
 800fede:	bd70      	pop	{r4, r5, r6, pc}
 800fee0:	0781      	lsls	r1, r0, #30
 800fee2:	bf58      	it	pl
 800fee4:	6963      	ldrpl	r3, [r4, #20]
 800fee6:	60a3      	str	r3, [r4, #8]
 800fee8:	e7f4      	b.n	800fed4 <__swsetup_r+0xb0>
 800feea:	2000      	movs	r0, #0
 800feec:	e7f7      	b.n	800fede <__swsetup_r+0xba>
 800feee:	bf00      	nop
 800fef0:	2000002c 	.word	0x2000002c
 800fef4:	08014110 	.word	0x08014110
 800fef8:	08014130 	.word	0x08014130
 800fefc:	080140f0 	.word	0x080140f0

0800ff00 <abort>:
 800ff00:	b508      	push	{r3, lr}
 800ff02:	2006      	movs	r0, #6
 800ff04:	f000 f994 	bl	8010230 <raise>
 800ff08:	2001      	movs	r0, #1
 800ff0a:	f7f0 fd7d 	bl	8000a08 <_exit>
	...

0800ff10 <_close_r>:
 800ff10:	b538      	push	{r3, r4, r5, lr}
 800ff12:	4d06      	ldr	r5, [pc, #24]	; (800ff2c <_close_r+0x1c>)
 800ff14:	2300      	movs	r3, #0
 800ff16:	4604      	mov	r4, r0
 800ff18:	4608      	mov	r0, r1
 800ff1a:	602b      	str	r3, [r5, #0]
 800ff1c:	f7f0 fdb7 	bl	8000a8e <_close>
 800ff20:	1c43      	adds	r3, r0, #1
 800ff22:	d102      	bne.n	800ff2a <_close_r+0x1a>
 800ff24:	682b      	ldr	r3, [r5, #0]
 800ff26:	b103      	cbz	r3, 800ff2a <_close_r+0x1a>
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	bd38      	pop	{r3, r4, r5, pc}
 800ff2c:	200087fc 	.word	0x200087fc

0800ff30 <__sflush_r>:
 800ff30:	898a      	ldrh	r2, [r1, #12]
 800ff32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff36:	4605      	mov	r5, r0
 800ff38:	0710      	lsls	r0, r2, #28
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	d458      	bmi.n	800fff0 <__sflush_r+0xc0>
 800ff3e:	684b      	ldr	r3, [r1, #4]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	dc05      	bgt.n	800ff50 <__sflush_r+0x20>
 800ff44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	dc02      	bgt.n	800ff50 <__sflush_r+0x20>
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff52:	2e00      	cmp	r6, #0
 800ff54:	d0f9      	beq.n	800ff4a <__sflush_r+0x1a>
 800ff56:	2300      	movs	r3, #0
 800ff58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff5c:	682f      	ldr	r7, [r5, #0]
 800ff5e:	602b      	str	r3, [r5, #0]
 800ff60:	d032      	beq.n	800ffc8 <__sflush_r+0x98>
 800ff62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff64:	89a3      	ldrh	r3, [r4, #12]
 800ff66:	075a      	lsls	r2, r3, #29
 800ff68:	d505      	bpl.n	800ff76 <__sflush_r+0x46>
 800ff6a:	6863      	ldr	r3, [r4, #4]
 800ff6c:	1ac0      	subs	r0, r0, r3
 800ff6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff70:	b10b      	cbz	r3, 800ff76 <__sflush_r+0x46>
 800ff72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff74:	1ac0      	subs	r0, r0, r3
 800ff76:	2300      	movs	r3, #0
 800ff78:	4602      	mov	r2, r0
 800ff7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff7c:	6a21      	ldr	r1, [r4, #32]
 800ff7e:	4628      	mov	r0, r5
 800ff80:	47b0      	blx	r6
 800ff82:	1c43      	adds	r3, r0, #1
 800ff84:	89a3      	ldrh	r3, [r4, #12]
 800ff86:	d106      	bne.n	800ff96 <__sflush_r+0x66>
 800ff88:	6829      	ldr	r1, [r5, #0]
 800ff8a:	291d      	cmp	r1, #29
 800ff8c:	d82c      	bhi.n	800ffe8 <__sflush_r+0xb8>
 800ff8e:	4a2a      	ldr	r2, [pc, #168]	; (8010038 <__sflush_r+0x108>)
 800ff90:	40ca      	lsrs	r2, r1
 800ff92:	07d6      	lsls	r6, r2, #31
 800ff94:	d528      	bpl.n	800ffe8 <__sflush_r+0xb8>
 800ff96:	2200      	movs	r2, #0
 800ff98:	6062      	str	r2, [r4, #4]
 800ff9a:	04d9      	lsls	r1, r3, #19
 800ff9c:	6922      	ldr	r2, [r4, #16]
 800ff9e:	6022      	str	r2, [r4, #0]
 800ffa0:	d504      	bpl.n	800ffac <__sflush_r+0x7c>
 800ffa2:	1c42      	adds	r2, r0, #1
 800ffa4:	d101      	bne.n	800ffaa <__sflush_r+0x7a>
 800ffa6:	682b      	ldr	r3, [r5, #0]
 800ffa8:	b903      	cbnz	r3, 800ffac <__sflush_r+0x7c>
 800ffaa:	6560      	str	r0, [r4, #84]	; 0x54
 800ffac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffae:	602f      	str	r7, [r5, #0]
 800ffb0:	2900      	cmp	r1, #0
 800ffb2:	d0ca      	beq.n	800ff4a <__sflush_r+0x1a>
 800ffb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffb8:	4299      	cmp	r1, r3
 800ffba:	d002      	beq.n	800ffc2 <__sflush_r+0x92>
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f7ff faab 	bl	800f518 <_free_r>
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	6360      	str	r0, [r4, #52]	; 0x34
 800ffc6:	e7c1      	b.n	800ff4c <__sflush_r+0x1c>
 800ffc8:	6a21      	ldr	r1, [r4, #32]
 800ffca:	2301      	movs	r3, #1
 800ffcc:	4628      	mov	r0, r5
 800ffce:	47b0      	blx	r6
 800ffd0:	1c41      	adds	r1, r0, #1
 800ffd2:	d1c7      	bne.n	800ff64 <__sflush_r+0x34>
 800ffd4:	682b      	ldr	r3, [r5, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d0c4      	beq.n	800ff64 <__sflush_r+0x34>
 800ffda:	2b1d      	cmp	r3, #29
 800ffdc:	d001      	beq.n	800ffe2 <__sflush_r+0xb2>
 800ffde:	2b16      	cmp	r3, #22
 800ffe0:	d101      	bne.n	800ffe6 <__sflush_r+0xb6>
 800ffe2:	602f      	str	r7, [r5, #0]
 800ffe4:	e7b1      	b.n	800ff4a <__sflush_r+0x1a>
 800ffe6:	89a3      	ldrh	r3, [r4, #12]
 800ffe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffec:	81a3      	strh	r3, [r4, #12]
 800ffee:	e7ad      	b.n	800ff4c <__sflush_r+0x1c>
 800fff0:	690f      	ldr	r7, [r1, #16]
 800fff2:	2f00      	cmp	r7, #0
 800fff4:	d0a9      	beq.n	800ff4a <__sflush_r+0x1a>
 800fff6:	0793      	lsls	r3, r2, #30
 800fff8:	680e      	ldr	r6, [r1, #0]
 800fffa:	bf08      	it	eq
 800fffc:	694b      	ldreq	r3, [r1, #20]
 800fffe:	600f      	str	r7, [r1, #0]
 8010000:	bf18      	it	ne
 8010002:	2300      	movne	r3, #0
 8010004:	eba6 0807 	sub.w	r8, r6, r7
 8010008:	608b      	str	r3, [r1, #8]
 801000a:	f1b8 0f00 	cmp.w	r8, #0
 801000e:	dd9c      	ble.n	800ff4a <__sflush_r+0x1a>
 8010010:	6a21      	ldr	r1, [r4, #32]
 8010012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010014:	4643      	mov	r3, r8
 8010016:	463a      	mov	r2, r7
 8010018:	4628      	mov	r0, r5
 801001a:	47b0      	blx	r6
 801001c:	2800      	cmp	r0, #0
 801001e:	dc06      	bgt.n	801002e <__sflush_r+0xfe>
 8010020:	89a3      	ldrh	r3, [r4, #12]
 8010022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010026:	81a3      	strh	r3, [r4, #12]
 8010028:	f04f 30ff 	mov.w	r0, #4294967295
 801002c:	e78e      	b.n	800ff4c <__sflush_r+0x1c>
 801002e:	4407      	add	r7, r0
 8010030:	eba8 0800 	sub.w	r8, r8, r0
 8010034:	e7e9      	b.n	801000a <__sflush_r+0xda>
 8010036:	bf00      	nop
 8010038:	20400001 	.word	0x20400001

0801003c <_fflush_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	690b      	ldr	r3, [r1, #16]
 8010040:	4605      	mov	r5, r0
 8010042:	460c      	mov	r4, r1
 8010044:	b913      	cbnz	r3, 801004c <_fflush_r+0x10>
 8010046:	2500      	movs	r5, #0
 8010048:	4628      	mov	r0, r5
 801004a:	bd38      	pop	{r3, r4, r5, pc}
 801004c:	b118      	cbz	r0, 8010056 <_fflush_r+0x1a>
 801004e:	6983      	ldr	r3, [r0, #24]
 8010050:	b90b      	cbnz	r3, 8010056 <_fflush_r+0x1a>
 8010052:	f7ff f9a7 	bl	800f3a4 <__sinit>
 8010056:	4b14      	ldr	r3, [pc, #80]	; (80100a8 <_fflush_r+0x6c>)
 8010058:	429c      	cmp	r4, r3
 801005a:	d11b      	bne.n	8010094 <_fflush_r+0x58>
 801005c:	686c      	ldr	r4, [r5, #4]
 801005e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d0ef      	beq.n	8010046 <_fflush_r+0xa>
 8010066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010068:	07d0      	lsls	r0, r2, #31
 801006a:	d404      	bmi.n	8010076 <_fflush_r+0x3a>
 801006c:	0599      	lsls	r1, r3, #22
 801006e:	d402      	bmi.n	8010076 <_fflush_r+0x3a>
 8010070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010072:	f7ff fa47 	bl	800f504 <__retarget_lock_acquire_recursive>
 8010076:	4628      	mov	r0, r5
 8010078:	4621      	mov	r1, r4
 801007a:	f7ff ff59 	bl	800ff30 <__sflush_r>
 801007e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010080:	07da      	lsls	r2, r3, #31
 8010082:	4605      	mov	r5, r0
 8010084:	d4e0      	bmi.n	8010048 <_fflush_r+0xc>
 8010086:	89a3      	ldrh	r3, [r4, #12]
 8010088:	059b      	lsls	r3, r3, #22
 801008a:	d4dd      	bmi.n	8010048 <_fflush_r+0xc>
 801008c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801008e:	f7ff fa3a 	bl	800f506 <__retarget_lock_release_recursive>
 8010092:	e7d9      	b.n	8010048 <_fflush_r+0xc>
 8010094:	4b05      	ldr	r3, [pc, #20]	; (80100ac <_fflush_r+0x70>)
 8010096:	429c      	cmp	r4, r3
 8010098:	d101      	bne.n	801009e <_fflush_r+0x62>
 801009a:	68ac      	ldr	r4, [r5, #8]
 801009c:	e7df      	b.n	801005e <_fflush_r+0x22>
 801009e:	4b04      	ldr	r3, [pc, #16]	; (80100b0 <_fflush_r+0x74>)
 80100a0:	429c      	cmp	r4, r3
 80100a2:	bf08      	it	eq
 80100a4:	68ec      	ldreq	r4, [r5, #12]
 80100a6:	e7da      	b.n	801005e <_fflush_r+0x22>
 80100a8:	08014110 	.word	0x08014110
 80100ac:	08014130 	.word	0x08014130
 80100b0:	080140f0 	.word	0x080140f0

080100b4 <_lseek_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4d07      	ldr	r5, [pc, #28]	; (80100d4 <_lseek_r+0x20>)
 80100b8:	4604      	mov	r4, r0
 80100ba:	4608      	mov	r0, r1
 80100bc:	4611      	mov	r1, r2
 80100be:	2200      	movs	r2, #0
 80100c0:	602a      	str	r2, [r5, #0]
 80100c2:	461a      	mov	r2, r3
 80100c4:	f7f0 fd0a 	bl	8000adc <_lseek>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_lseek_r+0x1e>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_lseek_r+0x1e>
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	200087fc 	.word	0x200087fc

080100d8 <__swhatbuf_r>:
 80100d8:	b570      	push	{r4, r5, r6, lr}
 80100da:	460e      	mov	r6, r1
 80100dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e0:	2900      	cmp	r1, #0
 80100e2:	b096      	sub	sp, #88	; 0x58
 80100e4:	4614      	mov	r4, r2
 80100e6:	461d      	mov	r5, r3
 80100e8:	da08      	bge.n	80100fc <__swhatbuf_r+0x24>
 80100ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80100ee:	2200      	movs	r2, #0
 80100f0:	602a      	str	r2, [r5, #0]
 80100f2:	061a      	lsls	r2, r3, #24
 80100f4:	d410      	bmi.n	8010118 <__swhatbuf_r+0x40>
 80100f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100fa:	e00e      	b.n	801011a <__swhatbuf_r+0x42>
 80100fc:	466a      	mov	r2, sp
 80100fe:	f000 f8b3 	bl	8010268 <_fstat_r>
 8010102:	2800      	cmp	r0, #0
 8010104:	dbf1      	blt.n	80100ea <__swhatbuf_r+0x12>
 8010106:	9a01      	ldr	r2, [sp, #4]
 8010108:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801010c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010110:	425a      	negs	r2, r3
 8010112:	415a      	adcs	r2, r3
 8010114:	602a      	str	r2, [r5, #0]
 8010116:	e7ee      	b.n	80100f6 <__swhatbuf_r+0x1e>
 8010118:	2340      	movs	r3, #64	; 0x40
 801011a:	2000      	movs	r0, #0
 801011c:	6023      	str	r3, [r4, #0]
 801011e:	b016      	add	sp, #88	; 0x58
 8010120:	bd70      	pop	{r4, r5, r6, pc}
	...

08010124 <__smakebuf_r>:
 8010124:	898b      	ldrh	r3, [r1, #12]
 8010126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010128:	079d      	lsls	r5, r3, #30
 801012a:	4606      	mov	r6, r0
 801012c:	460c      	mov	r4, r1
 801012e:	d507      	bpl.n	8010140 <__smakebuf_r+0x1c>
 8010130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010134:	6023      	str	r3, [r4, #0]
 8010136:	6123      	str	r3, [r4, #16]
 8010138:	2301      	movs	r3, #1
 801013a:	6163      	str	r3, [r4, #20]
 801013c:	b002      	add	sp, #8
 801013e:	bd70      	pop	{r4, r5, r6, pc}
 8010140:	ab01      	add	r3, sp, #4
 8010142:	466a      	mov	r2, sp
 8010144:	f7ff ffc8 	bl	80100d8 <__swhatbuf_r>
 8010148:	9900      	ldr	r1, [sp, #0]
 801014a:	4605      	mov	r5, r0
 801014c:	4630      	mov	r0, r6
 801014e:	f7ff fa4f 	bl	800f5f0 <_malloc_r>
 8010152:	b948      	cbnz	r0, 8010168 <__smakebuf_r+0x44>
 8010154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010158:	059a      	lsls	r2, r3, #22
 801015a:	d4ef      	bmi.n	801013c <__smakebuf_r+0x18>
 801015c:	f023 0303 	bic.w	r3, r3, #3
 8010160:	f043 0302 	orr.w	r3, r3, #2
 8010164:	81a3      	strh	r3, [r4, #12]
 8010166:	e7e3      	b.n	8010130 <__smakebuf_r+0xc>
 8010168:	4b0d      	ldr	r3, [pc, #52]	; (80101a0 <__smakebuf_r+0x7c>)
 801016a:	62b3      	str	r3, [r6, #40]	; 0x28
 801016c:	89a3      	ldrh	r3, [r4, #12]
 801016e:	6020      	str	r0, [r4, #0]
 8010170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010174:	81a3      	strh	r3, [r4, #12]
 8010176:	9b00      	ldr	r3, [sp, #0]
 8010178:	6163      	str	r3, [r4, #20]
 801017a:	9b01      	ldr	r3, [sp, #4]
 801017c:	6120      	str	r0, [r4, #16]
 801017e:	b15b      	cbz	r3, 8010198 <__smakebuf_r+0x74>
 8010180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010184:	4630      	mov	r0, r6
 8010186:	f000 f881 	bl	801028c <_isatty_r>
 801018a:	b128      	cbz	r0, 8010198 <__smakebuf_r+0x74>
 801018c:	89a3      	ldrh	r3, [r4, #12]
 801018e:	f023 0303 	bic.w	r3, r3, #3
 8010192:	f043 0301 	orr.w	r3, r3, #1
 8010196:	81a3      	strh	r3, [r4, #12]
 8010198:	89a0      	ldrh	r0, [r4, #12]
 801019a:	4305      	orrs	r5, r0
 801019c:	81a5      	strh	r5, [r4, #12]
 801019e:	e7cd      	b.n	801013c <__smakebuf_r+0x18>
 80101a0:	0800f33d 	.word	0x0800f33d

080101a4 <__malloc_lock>:
 80101a4:	4801      	ldr	r0, [pc, #4]	; (80101ac <__malloc_lock+0x8>)
 80101a6:	f7ff b9ad 	b.w	800f504 <__retarget_lock_acquire_recursive>
 80101aa:	bf00      	nop
 80101ac:	20008800 	.word	0x20008800

080101b0 <__malloc_unlock>:
 80101b0:	4801      	ldr	r0, [pc, #4]	; (80101b8 <__malloc_unlock+0x8>)
 80101b2:	f7ff b9a8 	b.w	800f506 <__retarget_lock_release_recursive>
 80101b6:	bf00      	nop
 80101b8:	20008800 	.word	0x20008800

080101bc <_read_r>:
 80101bc:	b538      	push	{r3, r4, r5, lr}
 80101be:	4d07      	ldr	r5, [pc, #28]	; (80101dc <_read_r+0x20>)
 80101c0:	4604      	mov	r4, r0
 80101c2:	4608      	mov	r0, r1
 80101c4:	4611      	mov	r1, r2
 80101c6:	2200      	movs	r2, #0
 80101c8:	602a      	str	r2, [r5, #0]
 80101ca:	461a      	mov	r2, r3
 80101cc:	f7f0 fc26 	bl	8000a1c <_read>
 80101d0:	1c43      	adds	r3, r0, #1
 80101d2:	d102      	bne.n	80101da <_read_r+0x1e>
 80101d4:	682b      	ldr	r3, [r5, #0]
 80101d6:	b103      	cbz	r3, 80101da <_read_r+0x1e>
 80101d8:	6023      	str	r3, [r4, #0]
 80101da:	bd38      	pop	{r3, r4, r5, pc}
 80101dc:	200087fc 	.word	0x200087fc

080101e0 <_raise_r>:
 80101e0:	291f      	cmp	r1, #31
 80101e2:	b538      	push	{r3, r4, r5, lr}
 80101e4:	4604      	mov	r4, r0
 80101e6:	460d      	mov	r5, r1
 80101e8:	d904      	bls.n	80101f4 <_raise_r+0x14>
 80101ea:	2316      	movs	r3, #22
 80101ec:	6003      	str	r3, [r0, #0]
 80101ee:	f04f 30ff 	mov.w	r0, #4294967295
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80101f6:	b112      	cbz	r2, 80101fe <_raise_r+0x1e>
 80101f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101fc:	b94b      	cbnz	r3, 8010212 <_raise_r+0x32>
 80101fe:	4620      	mov	r0, r4
 8010200:	f000 f830 	bl	8010264 <_getpid_r>
 8010204:	462a      	mov	r2, r5
 8010206:	4601      	mov	r1, r0
 8010208:	4620      	mov	r0, r4
 801020a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801020e:	f000 b817 	b.w	8010240 <_kill_r>
 8010212:	2b01      	cmp	r3, #1
 8010214:	d00a      	beq.n	801022c <_raise_r+0x4c>
 8010216:	1c59      	adds	r1, r3, #1
 8010218:	d103      	bne.n	8010222 <_raise_r+0x42>
 801021a:	2316      	movs	r3, #22
 801021c:	6003      	str	r3, [r0, #0]
 801021e:	2001      	movs	r0, #1
 8010220:	e7e7      	b.n	80101f2 <_raise_r+0x12>
 8010222:	2400      	movs	r4, #0
 8010224:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010228:	4628      	mov	r0, r5
 801022a:	4798      	blx	r3
 801022c:	2000      	movs	r0, #0
 801022e:	e7e0      	b.n	80101f2 <_raise_r+0x12>

08010230 <raise>:
 8010230:	4b02      	ldr	r3, [pc, #8]	; (801023c <raise+0xc>)
 8010232:	4601      	mov	r1, r0
 8010234:	6818      	ldr	r0, [r3, #0]
 8010236:	f7ff bfd3 	b.w	80101e0 <_raise_r>
 801023a:	bf00      	nop
 801023c:	2000002c 	.word	0x2000002c

08010240 <_kill_r>:
 8010240:	b538      	push	{r3, r4, r5, lr}
 8010242:	4d07      	ldr	r5, [pc, #28]	; (8010260 <_kill_r+0x20>)
 8010244:	2300      	movs	r3, #0
 8010246:	4604      	mov	r4, r0
 8010248:	4608      	mov	r0, r1
 801024a:	4611      	mov	r1, r2
 801024c:	602b      	str	r3, [r5, #0]
 801024e:	f7f0 fbc9 	bl	80009e4 <_kill>
 8010252:	1c43      	adds	r3, r0, #1
 8010254:	d102      	bne.n	801025c <_kill_r+0x1c>
 8010256:	682b      	ldr	r3, [r5, #0]
 8010258:	b103      	cbz	r3, 801025c <_kill_r+0x1c>
 801025a:	6023      	str	r3, [r4, #0]
 801025c:	bd38      	pop	{r3, r4, r5, pc}
 801025e:	bf00      	nop
 8010260:	200087fc 	.word	0x200087fc

08010264 <_getpid_r>:
 8010264:	f7f0 bbb6 	b.w	80009d4 <_getpid>

08010268 <_fstat_r>:
 8010268:	b538      	push	{r3, r4, r5, lr}
 801026a:	4d07      	ldr	r5, [pc, #28]	; (8010288 <_fstat_r+0x20>)
 801026c:	2300      	movs	r3, #0
 801026e:	4604      	mov	r4, r0
 8010270:	4608      	mov	r0, r1
 8010272:	4611      	mov	r1, r2
 8010274:	602b      	str	r3, [r5, #0]
 8010276:	f7f0 fc16 	bl	8000aa6 <_fstat>
 801027a:	1c43      	adds	r3, r0, #1
 801027c:	d102      	bne.n	8010284 <_fstat_r+0x1c>
 801027e:	682b      	ldr	r3, [r5, #0]
 8010280:	b103      	cbz	r3, 8010284 <_fstat_r+0x1c>
 8010282:	6023      	str	r3, [r4, #0]
 8010284:	bd38      	pop	{r3, r4, r5, pc}
 8010286:	bf00      	nop
 8010288:	200087fc 	.word	0x200087fc

0801028c <_isatty_r>:
 801028c:	b538      	push	{r3, r4, r5, lr}
 801028e:	4d06      	ldr	r5, [pc, #24]	; (80102a8 <_isatty_r+0x1c>)
 8010290:	2300      	movs	r3, #0
 8010292:	4604      	mov	r4, r0
 8010294:	4608      	mov	r0, r1
 8010296:	602b      	str	r3, [r5, #0]
 8010298:	f7f0 fc15 	bl	8000ac6 <_isatty>
 801029c:	1c43      	adds	r3, r0, #1
 801029e:	d102      	bne.n	80102a6 <_isatty_r+0x1a>
 80102a0:	682b      	ldr	r3, [r5, #0]
 80102a2:	b103      	cbz	r3, 80102a6 <_isatty_r+0x1a>
 80102a4:	6023      	str	r3, [r4, #0]
 80102a6:	bd38      	pop	{r3, r4, r5, pc}
 80102a8:	200087fc 	.word	0x200087fc

080102ac <_init>:
 80102ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ae:	bf00      	nop
 80102b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102b2:	bc08      	pop	{r3}
 80102b4:	469e      	mov	lr, r3
 80102b6:	4770      	bx	lr

080102b8 <_fini>:
 80102b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ba:	bf00      	nop
 80102bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102be:	bc08      	pop	{r3}
 80102c0:	469e      	mov	lr, r3
 80102c2:	4770      	bx	lr
